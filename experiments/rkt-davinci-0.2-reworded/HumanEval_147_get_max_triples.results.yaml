name: HumanEval_147_get_max_triples
language: rkt
results:
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get-triples lst)\n    (for/fold ([count 0]) ([i (in-list lst)]\n          \
    \                 [j (in-list (rest lst))]\n                           [k (in-list\
    \ (rest (rest lst)))])\n      (if (and (< i j) (< j k) (zero? (modulo (+ i j k)\
    \ 3)))\n          (add1 count)\n          count)))\n  (get-triples (for/list ([i\
    \ (in-range n)])\n                 (- (* i i) i 1))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-equal?\
    \ (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal? (candidate\
    \ 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjjaq0877.rkt:26:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjjaq0877.rkt:27:4\nactual:     0\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpjjaq0877.rkt:28:4\nactual:     0\nexpected:\
    \   36\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjjaq0877.rkt:29:4\nactual:     0\nexpected:   53361\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get-a i)\n    (+ (* i i) (* -1 i) 1))\n  (define (get-triples a i j k)\n  \
    \  (define (get-triple a i j k)\n      (list (list (list-ref a i) (list-ref a\
    \ j) (list-ref a k))))\n    (cond ((and (< i j) (< j k) (< k (length a)))\n  \
    \         (append (get-triple a i j k)\n                   (get-triples a i (+\
    \ j 1) (+ k 1))))\n          ((and (< i j) (< j k) (<= k (length a)))\n      \
    \     (get-triples a (+ i 1) (+ j 1) (+ k 1)))\n          (else '())))\n  (define\
    \ (is-multiple-of-3? x)\n    (= (modulo x 3) 0))\n  (define (is-sum-multiple-of-3?\
    \ a i j k)\n    (is-multiple-of-3? (+ (list-ref a i) (list-ref a j) (list-ref\
    \ a k))))\n  (define (get-triples-sum-multiple-of-3 a)\n    (filter (lambda (x)\
    \ (is-sum-multiple-of-3? a (list-ref x 0) (list-ref x 1) (list-ref x 2)))\n  \
    \          (get-triples a 0 1 2)))\n  (length (get-triples-sum-multiple-of-3 (build-list\
    \ n get-a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_max_triples))\n    (check-equal? (candidate 5) 1)\n    (check-equal?\
    \ (candidate 6) 4)\n    (check-equal? (candidate 10) 36)\n    (check-equal? (candidate\
    \ 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4u84e_gm.rkt:36:4\n\
    \nlist-ref: index too large for list\n  index: 7\n  in: '(1 1 3 7 13)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4u84e_gm.rkt:37:4\n\
    \nlist-ref: index too large for list\n  index: 7\n  in: '(1 1 3 7 13 21)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4u84e_gm.rkt:38:4\n\
    \nlist-ref: index too large for list\n  index: 13\n  in: '(1 1 3 7 13 21 31 43\
    \ 57 73)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4u84e_gm.rkt:39:4\n\nlist-ref: index too large for list\n\
    \  index: 111\n  in: '(1 1 3 7 13 21 31 43 57 73 91 111 133 157 183 211 241 273\
    \ 307 343 381 421 463 507 553 601 651 703 757 813 871 931 993 1057 1123 1191 1261\
    \ 1333 1407 1483 1561 1641 1723 1807 1893 1981 2071 2163 2257 2353 2451 2551 2653\
    \ 2757 2863 2971 3081 3193 3307 3423...\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get-a-i i)\n    (+ (* i i) (- i 1)))\n  (define (get-triples a i j k)\n   \
    \ (cond\n      [(and (< i j) (< j k) (< k (length a)))\n       (cond\n       \
    \  [(= (modulo (+ (list-ref a i) (list-ref a j) (list-ref a k)) 3) 0)\n      \
    \    (+ 1 (get-triples a i (+ j 1) (+ k 1)))]\n         [else (get-triples a i\
    \ (+ j 1) (+ k 1))])]\n      [else 0]))\n  (define (get-triples-list a i)\n  \
    \  (cond\n      [(< i (length a))\n       (+ (get-triples a i (+ i 1) (+ i 2))\
    \ (get-triples-list a (+ i 1)))]\n      [else 0]))\n  (get-triples-list (build-list\
    \ n get-a-i) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate get_max_triples))\n    (check-equal? (candidate 5) 1)\n    (check-equal?\
    \ (candidate 6) 4)\n    (check-equal? (candidate 10) 36)\n    (check-equal? (candidate\
    \ 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66yq6yfk.rkt:34:4\n\
    actual:     1\nexpected:   4\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp66yq6yfk.rkt:35:4\nactual:     9\n\
    expected:   36\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp66yq6yfk.rkt:36:4\nactual:     1089\nexpected:\
    \   53361\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get-triples lst)\n    (cond ((null? lst) 0)\n          ((null? (cdr lst)) 0)\n\
    \          ((null? (cddr lst)) 0)\n          (else (+ (if (multiple-of-3? (+ (car\
    \ lst) (cadr lst) (caddr lst))) 1 0)\n                  (get-triples (cdr lst))))))\n\
    \  (get-triples (build-list n (lambda (x) (- (* x x) x 1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-equal?\
    \ (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal? (candidate\
    \ 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpem6490pa.rkt:15:24: multiple-of-3?: unbound identifier\n  in: multiple-of-3?\n\
    \  location...:\n   /tmp/tmpem6490pa.rkt:15:24\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (a i)\n    (+ (* i i) (- i 1)))\n  (define (triples lst)\n    (for/fold ([count\
    \ 0])\n              ([i (in-range (add1 (length lst)))])\n      (for/fold ([count\
    \ count])\n                ([j (in-range i (length lst))])\n        (for/fold\
    \ ([count count])\n                  ([k (in-range j (length lst))])\n       \
    \   (if (zero? (modulo (+ (list-ref lst i) (list-ref lst j) (list-ref lst k))\
    \ 3))\n              (add1 count)\n              count)))))\n  (triples (build-list\
    \ n a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_max_triples))\n    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate\
    \ 6) 4)\n    (check-equal? (candidate 10) 36)\n    (check-equal? (candidate 100)\
    \ 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8z5zmub.rkt:30:4\n\
    actual:     14\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpe8z5zmub.rkt:31:4\nactual:     24\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpe8z5zmub.rkt:32:4\nactual:     94\nexpected:\
    \   36\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpe8z5zmub.rkt:33:4\nactual:     58939\nexpected:   53361\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (let ([a\
    \ (build-list n (\u03BB (i) (+ (* i i) (- i 1))))])\n    (for/fold ([count 0])\
    \ ([i (in-range (add1 n))] [j (in-range (add1 n))] [k (in-range (add1 n))])\n\
    \      (if (and (< i j) (< j k) (zero? (modulo (+ (list-ref a i) (list-ref a j)\
    \ (list-ref a k)) 3)))\n          (add1 count)\n          count))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n\
    \    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal?\
    \ (candidate 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91olsgw8.rkt:22:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp91olsgw8.rkt:23:4\nactual:     0\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp91olsgw8.rkt:24:4\nactual:     0\nexpected:\
    \   36\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp91olsgw8.rkt:25:4\nactual:     0\nexpected:   53361\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (triples lst)\n    (cond\n      [(empty? lst) 0]\n      [(empty? (rest lst))\
    \ 0]\n      [(empty? (rest (rest lst))) 0]\n      [else (+ (if (zero? (modulo\
    \ (+ (first lst) (second lst) (third lst)) 3)) 1 0)\n               (triples (rest\
    \ lst)))]))\n  (triples (for/list ([i (in-range 1 (+ n 1))])\n               \
    \     (- (* i i) i 1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate get_max_triples))\n    (check-equal? (candidate 5) 1)\n \
    \   (check-equal? (candidate 6) 4)\n    (check-equal? (candidate 10) 36)\n   \
    \ (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1zshq6od.rkt:26:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1zshq6od.rkt:27:4\nactual:     0\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp1zshq6od.rkt:28:4\nactual:     0\nexpected:\
    \   36\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1zshq6od.rkt:29:4\nactual:     0\nexpected:   53361\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get-a-i i)\n    (+ (* i i) (- i 1)))\n  (define (get-a-j i j)\n    (get-a-i\
    \ j))\n  (define (get-a-k i j k)\n    (get-a-i k))\n  (define (is-multiple-of-3?\
    \ a b c)\n    (= (modulo (+ a b c) 3) 0))\n  (define (get-triples i j k)\n   \
    \ (if (= k n)\n        0\n        (if (is-multiple-of-3? (get-a-i i) (get-a-j\
    \ i j) (get-a-k i j k))\n            (+ 1 (get-triples i j (+ k 1)))\n       \
    \     (get-triples i j (+ k 1)))))\n  (define (get-triples-j i j)\n    (if (=\
    \ j n)\n        0\n        (+ (get-triples i j (+ j 1)) (get-triples-j i (+ j\
    \ 1)))))\n  (define (get-triples-i i)\n    (if (= i n)\n        0\n        (+\
    \ (get-triples-j i (+ i 1)) (get-triples-i (+ i 1)))))\n  (get-triples-i 1))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n\
    \    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal?\
    \ (candidate 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjw6yz9i7.rkt:40:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjw6yz9i7.rkt:41:4\nactual:     1\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpjw6yz9i7.rkt:42:4\nactual:     21\nexpected:\
    \   36\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjw6yz9i7.rkt:43:4\nactual:     51216\nexpected:   53361\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get-a i)\n    (if (= i 1)\n        1\n        (+ (* i i) (- i))))\n  (define\
    \ (get-triples i j k)\n    (if (= i j)\n        (get-triples (+ i 1) (+ j 1) (+\
    \ k 1))\n        (if (= j k)\n            (get-triples i (+ j 1) (+ k 1))\n  \
    \          (if (= i k)\n                (get-triples i j (+ k 1))\n          \
    \      (if (= (modulo (+ (get-a i) (get-a j) (get-a k)) 3) 0)\n              \
    \      (+ 1 (get-triples i j (+ k 1)))\n                    (get-triples i j (+\
    \ k 1)))))))\n  (get-triples 1 2 3))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_max_triples))\n    (check-equal? (candidate 5) 1)\n\
    \    (check-equal? (candidate 6) 4)\n    (check-equal? (candidate 10) 36)\n  \
    \  (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (triples lst)\n    (define (triples-iter lst acc)\n      (cond ((null? lst)\
    \ acc)\n            ((null? (cdr lst)) acc)\n            ((null? (cddr lst)) acc)\n\
    \            (else (triples-iter (cdr lst) (+ acc (triples-iter2 (cdr lst) (cddr\
    \ lst)))))))\n    (define (triples-iter2 lst1 lst2 acc)\n      (cond ((null? lst1)\
    \ acc)\n            ((null? lst2) acc)\n            (else (triples-iter2 (cdr\
    \ lst1) (cdr lst2) (+ acc (triples-iter3 lst1 lst2))))))\n    (define (triples-iter3\
    \ lst1 lst2 acc)\n      (cond ((null? lst1) acc)\n            ((null? lst2) acc)\n\
    \            (else (triples-iter3 (cdr lst1) (cdr lst2) (+ acc (if (multiple-of-3?\
    \ (+ (car lst1) (car lst2) (car (cdr lst2)))) 1 0))))))\n    (triples-iter lst\
    \ 0))\n  (triples (build-list n (lambda (x) (+ (* x x) (- x 1)))))\n  )\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n\
    \    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal?\
    \ (candidate 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz56l_ddi.rkt:24:67: multiple-of-3?: unbound identifier\n  in: multiple-of-3?\n\
    \  location...:\n   /tmp/tmpz56l_ddi.rkt:24:67\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get_max_triples-iter n i acc)\n    (if (= i n)\n        acc\n        (get_max_triples-iter\
    \ n (+ i 1) (+ acc (get_max_triples-iter-2 n i)))))\n  (define (get_max_triples-iter-2\
    \ n i)\n    (define (get_max_triples-iter-2-iter n i j acc)\n      (if (= j n)\n\
    \          acc\n          (get_max_triples-iter-2-iter n i (+ j 1) (+ acc (get_max_triples-iter-2-iter-2\
    \ n i j)))))\n    (get_max_triples-iter-2-iter n i (+ i 1) 0))\n  (define (get_max_triples-iter-2-iter-2\
    \ n i j)\n    (define (get_max_triples-iter-2-iter-2-iter n i j k acc)\n     \
    \ (if (= k n)\n          acc\n          (get_max_triples-iter-2-iter-2-iter n\
    \ i j (+ k 1) (+ acc (get_max_triples-iter-2-iter-2-iter-2 n i j k)))))\n    (get_max_triples-iter-2-iter-2-iter\
    \ n i j (+ j 1) 0))\n  (define (get_max_triples-iter-2-iter-2-iter-2 n i j k)\n\
    \    (if (= (modulo (+ (- (* i i) i 1) (- (* j j) j 1) (- (* k k) k 1)) 3) 0)\n\
    \        1\n        0))\n  (get_max_triples-iter n 1 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-equal?\
    \ (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal? (candidate\
    \ 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkhoal34.rkt:39:4\n\
    actual:     1\nexpected:   4\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkkhoal34.rkt:40:4\nactual:     21\n\
    expected:   36\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpkkhoal34.rkt:41:4\nactual:     51216\n\
    expected:   53361\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get_max_triples-iter n i acc)\n    (if (= i n)\n        acc\n        (get_max_triples-iter\
    \ n (+ i 1) (+ acc (get_max_triples-iter-2 i (+ i 1) n)))))\n  (get_max_triples-iter\
    \ n 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_max_triples))\n    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate\
    \ 6) 4)\n    (check-equal? (candidate 10) 36)\n    (check-equal? (candidate 100)\
    \ 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfpw9bnis.rkt:14:48: get_max_triples-iter-2: unbound identifier\n\
    \  in: get_max_triples-iter-2\n  location...:\n   /tmp/tmpfpw9bnis.rkt:14:48\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get_max_triples-iter n i acc)\n    (if (= i n)\n        acc\n        (get_max_triples-iter\
    \ n (+ i 1) (+ acc (get_max_triples-iter-2 n i)))))\n  (define (get_max_triples-iter-2\
    \ n i)\n    (define (get_max_triples-iter-2-iter n i j acc)\n      (if (= j n)\n\
    \          acc\n          (get_max_triples-iter-2-iter n i (+ j 1) (+ acc (get_max_triples-iter-2-iter-2\
    \ n i j)))))\n    (get_max_triples-iter-2-iter n i (+ i 2) 0))\n  (get_max_triples-iter\
    \ n 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_max_triples))\n    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate\
    \ 6) 4)\n    (check-equal? (candidate 10) 36)\n    (check-equal? (candidate 100)\
    \ 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpj724ws4w.rkt:19:59: get_max_triples-iter-2-iter-2: unbound identifier\n\
    \  in: get_max_triples-iter-2-iter-2\n  location...:\n   /tmp/tmpj724ws4w.rkt:19:59\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (let ([a\
    \ (for/list ([i (in-range n)])\n                    (+ (* i i) (- i 1)))])\n \
    \   (for/sum ([i (in-range n)]\n              [j (in-range i n)]\n           \
    \   [k (in-range j n)])\n      (if (zero? (modulo (+ (list-ref a i) (list-ref\
    \ a j) (list-ref a k)) 3))\n          1\n          0))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-equal?\
    \ (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal? (candidate\
    \ 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7349vm9y.rkt:14:27: i: unbound identifier\n  in: i\n  location...:\n\
    \   /tmp/tmp7349vm9y.rkt:14:27\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get-a-i i)\n    (+ (* i i) (- i 1)))\n  (define (get-a-i-j i j)\n    (+ (get-a-i\
    \ i) (get-a-i j)))\n  (define (get-a-i-j-k i j k)\n    (+ (get-a-i-j i j) (get-a-i\
    \ k)))\n  (define (get-triples-count i j k)\n    (if (and (< i j) (< j k) (< k\
    \ n))\n        (+ 1 (get-triples-count i j (+ k 1)))\n        0))\n  (define (get-triples-count-j\
    \ i j)\n    (if (< j n)\n        (+ (get-triples-count i j (+ j 1)) (get-triples-count-j\
    \ i (+ j 1)))\n        0))\n  (define (get-triples-count-i i)\n    (if (< i n)\n\
    \        (+ (get-triples-count-j i (+ i 1)) (get-triples-count-i (+ i 1)))\n \
    \       0))\n  (get-triples-count-i 1))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_max_triples))\n    (check-equal? (candidate 5) 1)\n\
    \    (check-equal? (candidate 6) 4)\n    (check-equal? (candidate 10) 36)\n  \
    \  (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjg_t7vzu.rkt:36:4\n\
    actual:     4\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjg_t7vzu.rkt:37:4\nactual:     10\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpjg_t7vzu.rkt:38:4\nactual:     84\nexpected:\
    \   36\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjg_t7vzu.rkt:39:4\nactual:     156849\nexpected:   53361\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get_max_triples_iter n i acc)\n    (if (= i n)\n        acc\n        (get_max_triples_iter\
    \ n (+ i 1) (+ acc (get_max_triples_iter_2 i n)))))\n  (get_max_triples_iter n\
    \ 1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_max_triples))\n    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate\
    \ 6) 4)\n    (check-equal? (candidate 10) 36)\n    (check-equal? (candidate 100)\
    \ 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo5w1yxln.rkt:14:48: get_max_triples_iter_2: unbound identifier\n\
    \  in: get_max_triples_iter_2\n  location...:\n   /tmp/tmpo5w1yxln.rkt:14:48\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get-a i)\n    (+ (* i i) (- i 1)))\n  (define (get-triples a)\n    (define\
    \ (get-triples-iter a i j k)\n      (cond\n        [(>= i (length a)) 0]\n   \
    \     [(>= j (length a)) (get-triples-iter a (+ i 1) (+ i 2) (+ i 3))]\n     \
    \   [(>= k (length a)) (get-triples-iter a i (+ j 1) (+ j 2))]\n        [(= (modulo\
    \ (+ (list-ref a i) (list-ref a j) (list-ref a k)) 3) 0)\n         (+ 1 (get-triples-iter\
    \ a i j (+ k 1)))]\n        [else (get-triples-iter a i j (+ k 1))]))\n    (get-triples-iter\
    \ a 0 1 2))\n  (get-triples (build-list n get-a)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate get_max_triples))\n    (check-equal?\
    \ (candidate 5) 1)\n    (check-equal? (candidate 6) 4)\n    (check-equal? (candidate\
    \ 10) 36)\n    (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get-triples lst)\n    (let loop ([lst lst] [acc 0])\n      (if (null? lst)\n\
    \          acc\n          (loop (cdr lst) (if (and (not (null? (cdr lst))) (not\
    \ (null? (cddr lst))))\n                              (+ acc (if (zero? (modulo\
    \ (+ (car lst) (cadr lst) (caddr lst)) 3))\n                                 \
    \        1\n                                         0))\n                   \
    \           acc)))))\n  (get-triples (for/list ([i (in-range 1 (+ n 1))])\n  \
    \               (list i (- (* i i) i 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_max_triples))\n    (check-equal? (candidate 5) 1)\n\
    \    (check-equal? (candidate 6) 4)\n    (check-equal? (candidate 10) 36)\n  \
    \  (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjhkydvh.rkt:28:4\n\
    \n+: contract violation\n  expected: number?\n  given: '(1 -1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjhkydvh.rkt:29:4\n\
    \n+: contract violation\n  expected: number?\n  given: '(1 -1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjhkydvh.rkt:30:4\n\
    \n+: contract violation\n  expected: number?\n  given: '(1 -1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjhkydvh.rkt:31:4\n\
    \n+: contract violation\n  expected: number?\n  given: '(1 -1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (get_max_triples-iter n acc)\n    (cond ((= n 1) acc)\n          ((= n 2) (add1\
    \ acc))\n          (else (get_max_triples-iter (sub1 n) (add1 acc)))))\n  (get_max_triples-iter\
    \ n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ get_max_triples))\n    (check-equal? (candidate 5) 1)\n    (check-equal? (candidate\
    \ 6) 4)\n    (check-equal? (candidate 10) 36)\n    (check-equal? (candidate 100)\
    \ 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdha7faww.rkt:22:4\n\
    actual:     4\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdha7faww.rkt:23:4\nactual:     5\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpdha7faww.rkt:24:4\nactual:     9\nexpected:\
    \   36\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdha7faww.rkt:25:4\nactual:     99\nexpected:   53361\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a positive integer n. You have to create\
    \ an integer list a of length n.\n;; For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n;; Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n;; and a[i] + a[j] + a[k] is a multiple of 3.\n;; Example\
    \ :\n;; >>> (get_max_triples 5)\n;; 1\n(define (get_max_triples n)\n  (define\
    \ (a i)\n    (+ (* i i) (- i 1)))\n  (define (triples a)\n    (define (triples-iter\
    \ a i j k)\n      (cond\n        [(> i (- (length a) 2)) 0]\n        [(> j (-\
    \ (length a) 1)) (triples-iter a (+ i 1) (+ i 2) (+ i 3))]\n        [(> k (length\
    \ a)) (triples-iter a i (+ j 1) (+ j 2))]\n        [(= (modulo (+ (list-ref a\
    \ i) (list-ref a j) (list-ref a k)) 3) 0)\n         (+ 1 (triples-iter a i j (+\
    \ k 1)))]\n        [else (triples-iter a i j (+ k 1))]))\n    (triples-iter a\
    \ 0 1 2))\n  (triples (build-list n a)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate get_max_triples))\n    (check-equal? (candidate 5) 1)\n\
    \    (check-equal? (candidate 6) 4)\n    (check-equal? (candidate 10) 36)\n  \
    \  (check-equal? (candidate 100) 53361)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplxfhomq2.rkt:30:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(-1 1 5 11 19)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplxfhomq2.rkt:31:4\n\
    \nlist-ref: index too large for list\n  index: 6\n  in: '(-1 1 5 11 19 29)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplxfhomq2.rkt:32:4\n\
    \nlist-ref: index too large for list\n  index: 10\n  in: '(-1 1 5 11 19 29 41\
    \ 55 71 89)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplxfhomq2.rkt:33:4\n\nlist-ref: index too large for list\n\
    \  index: 100\n  in: '(-1 1 5 11 19 29 41 55 71 89 109 131 155 181 209 239 271\
    \ 305 341 379 419 461 505 551 599 649 701 755 811 869 929 991 1055 1121 1189 1259\
    \ 1331 1405 1481 1559 1639 1721 1805 1891 1979 2069 2161 2255 2351 2449 2549 2651\
    \ 2755 2861 2969 3079 3191 3305 3421 ...\n--------------------\n"
  exit_code: 0
  status: Exception
