name: HumanEval_14_all_prefixes
language: rkt
prompt: "#lang racket\n\n;; Return list of all prefixes from shortest to longest of\
  \ the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"abc\"\
  )\n(define (all_prefixes string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
  \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\"\
  ) (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
  \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? string)\n      (list \"\")\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_helper string\
    \ prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_helper\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))))\n  (all_prefixes_helper string (list)))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (if (string=? string \"\")\n      (list \"\")\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefix-list)\n    (if (string=? string \"\")\n        prefix-list\n \
    \       (all_prefixes_iter (substring string 1)\n                           (append\
    \ prefix-list (list string)))))\n  (all_prefixes_iter string '()))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes-iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes-iter string '()))\n", "  (if (string=? string \"\")\n      (list\
    \ \"\")\n      (append (all_prefixes (substring string 0 (- (string-length string)\
    \ 1)))\n              (list string))))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (cond [(empty? string) prefixes]\n          [else (all_prefixes_iter\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))]))\n  (all_prefixes_iter string (list \"\")))\n", "  (define (helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (helper (substring string 1) (cons (substring string 0 1) prefixes))))\n  (helper\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (helper string acc)\n    (if (empty? string)\n \
    \       acc\n        (helper (rest string) (append acc (list (string-append (first\
    \ acc) (string (first string))))))))\n  (helper string (list \"\")))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (define (all_prefixes_helper string prefixes)\n    (if (string=? string \"\"\
    )\n        prefixes\n        (all_prefixes_helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_helper string '()))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (empty? string)\n        prefixes\n        (all_prefixes_iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_iter string (list \"\")))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_helper string '()))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (helper string acc)\n    (cond\n      [(empty? string)\
    \ acc]\n      [else (helper (rest string) (cons (string-append (first acc) (string\
    \ (first string))) acc))]))\n  (helper string (list \"\")))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_iter\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))))\n  (all_prefixes_iter string (list)))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string acc)\n\
    \    (if (string=? string \"\")\n        acc\n        (all_prefixes_iter (substring\
    \ string 1) (cons string acc))))\n  (all_prefixes_iter string '()))\n", "  (if\
    \ (string=? string \"\")\n      (list \"\")\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes-iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes-iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n", "  (define (all_prefixes-iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        (reverse prefixes)\n\
    \        (all_prefixes-iter (substring string 1) (cons (substring string 0 1)\
    \ prefixes))))\n  (all_prefixes-iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (helper string prefixes)\n    (if (string=? string \"\")\n        prefixes\n\
    \        (helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (helper string '()))\n", "  (define (all_prefixes_iter string prefixes)\n \
    \   (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (helper string prefixes)\n    (cond\n      [(empty? string)\
    \ prefixes]\n      [else (helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))]))\n  (helper string (list \"\")))\n",
  "  (if (string=? string \"\")\n      (list \"\")\n      (append (all_prefixes (substring\
    \ string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_helper (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper string\
    \ '()))\n", "  (if (string=? string \"\")\n      (list \"\")\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (if (string=?\
    \ string \"\")\n      (list \"\")\n      (append (all_prefixes (substring string\
    \ 0 -1))\n              (list string))))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (cond\n\
    \      [(empty? string) prefixes]\n      [else (all_prefixes_helper (rest string)\
    \ (append prefixes (list (string-append (first prefixes) (first string)))))]))\n\
    \  (all_prefixes_helper string (list \"\")))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (prefixes string)\n    (if (string=?\
    \ string \"\")\n        '()\n        (cons (substring string 0 1)\n          \
    \    (prefixes (substring string 1)))))\n  (reverse (prefixes string)))\n", " \
    \ (define (helper string prefixes)\n    (if (string=? string \"\")\n        prefixes\n\
    \        (helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (helper string '()))\n", "  (define (all_prefixes_iter string prefixes)\n \
    \   (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes-iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string acc)\n\
    \    (if (string=? string \"\")\n        acc\n        (all_prefixes_iter (substring\
    \ string 1) (cons string acc))))\n  (all_prefixes_iter string '()))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string acc)\n    (if (string=? string \"\")\n        acc\n        (all_prefixes_iter\
    \ (substring string 1) (cons string acc))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (iter string prefixes)\n    (if (string=? string\
    \ \"\")\n        prefixes\n        (iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (iter string '()))\n", "  (if (string=? string \"\
    \")\n      '()\n      (cons (substring string 0 1)\n            (all_prefixes\
    \ (substring string 1)))))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (let loop ([string string]\n             [acc '()])\n    (if (string=? string\
    \ \"\")\n        acc\n        (loop (substring string 1)\n              (cons\
    \ string acc)))))\n", "  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string result)\n    (if (string=? string \"\")\n \
    \       result\n        (all_prefixes_iter (substring string 1) (cons string result))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (helper string prefixes)\n \
    \   (if (string=? string \"\")\n        prefixes\n        (helper (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (helper string '()))\n", " \
    \ (define (all_prefixes_iter string prefixes)\n    (cond\n      [(empty? string)\
    \ prefixes]\n      [else (all_prefixes_iter (rest string) (append prefixes (list\
    \ (string-append prefixes (first string)))))]))\n  (all_prefixes_iter string (list)))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (iter string acc)\n    (if (string=? string \"\")\n        acc\n    \
    \    (iter (substring string 1) (cons string acc))))\n  (iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ prefixes string)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (append prefixes (list (substring string 0 1)))\n       \
    \                    (substring string 1))))\n  (all_prefixes_iter (list \"\"\
    ) string))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (if (empty? string)\n      (list \"\")\n      (append (all_prefixes (substring\
    \ string 0 -1))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (for/list ([i (in-range (string-length string))])\n    (substring\
    \ string 0 (+ i 1))))\n", "  (define (all_prefixes_iter string prefixes)\n   \
    \ (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes-iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n",
  "  (define (all_prefixes_iter string result)\n    (if (string=? string \"\")\n \
    \       result\n        (all_prefixes_iter (substring string 1) (cons string result))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_helper string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_helper\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (let loop ([string string]\n             [prefixes '()])\n    (if (string=? string\
    \ \"\")\n        prefixes\n        (loop (substring string 1)\n              (cons\
    \ (substring string 0 1) prefixes)))))\n", "  (define (all_prefixes_iter string\
    \ acc)\n    (if (string=? string \"\")\n        acc\n        (all_prefixes_iter\
    \ (substring string 1) (cons string acc))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (cond [(empty?\
    \ string) prefixes]\n          [else (all_prefixes_iter (rest string)\n      \
    \                             (append prefixes\n                             \
    \              (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes_iter string (list)))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (helper string (list \"\")))\n", " \
    \ (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_helper string\
    \ acc)\n    (if (string=? string \"\")\n        acc\n        (all_prefixes_helper\
    \ (substring string 1) (cons string acc))))\n  (all_prefixes_helper string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (helper string prefixes)\n \
    \   (if (string=? string \"\")\n        prefixes\n        (helper (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (helper string '()))\n", " \
    \ (define (all_prefixes_iter string prefixes)\n    (cond\n      [(empty? string)\
    \ prefixes]\n      [else (all_prefixes_iter (rest string) (append prefixes (list\
    \ (string-append prefixes (string (first string))))))]))\n  (all_prefixes_iter\
    \ string (list)))\n", "  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (helper string prefixes)\n    (if (string=? string \"\"\
    )\n        prefixes\n        (helper (substring string 1) (cons (substring string\
    \ 0 1) prefixes))))\n  (helper string '()))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_helper string '()))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (empty? string)\n        prefixes\n        (all_prefixes_iter\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))))\n  (all_prefixes_iter string (list \"\")))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (helper string acc)\n    (if\
    \ (string=? string \"\")\n        acc\n        (helper (substring string 1) (cons\
    \ string acc))))\n  (helper string '()))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (if (string=? string \"\")\n      (list \"\")\n      (append (all_prefixes (substring\
    \ string 0 -1))\n              (list string))))\n", "  (if (string=? string \"\
    \")\n      (list \"\")\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_helper string '()))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_helper (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefix-list)\n\
    \    (if (string=? string \"\")\n        prefix-list\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefix-list (list string)))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (cond\n      [(empty? string)\
    \ prefixes]\n      [else (all_prefixes_iter (rest string) (append prefixes (list\
    \ (string-append prefixes (string (first string))))))]))\n  (all_prefixes_iter\
    \ string (list \"\")))\n", "  (define (all_prefixes_iter string prefixes)\n  \
    \  (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string acc)\n    (if (string=? string \"\")\n        acc\n        (all_prefixes_iter\
    \ (substring string 1) (cons string acc))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (empty? string)\n        prefixes\n        (all_prefixes_iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_iter string (list \"\")))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (cond\n      [(empty? string)\
    \ prefixes]\n      [else (all_prefixes_iter (rest string) (cons (string-append\
    \ prefixes (list (first string))) prefixes))]))\n  (all_prefixes_iter string (list\
    \ \"\")))\n", "  (define (helper string prefixes)\n    (if (string=? string \"\
    \")\n        prefixes\n        (helper (substring string 1) (cons (substring string\
    \ 0 1) prefixes))))\n  (helper string '()))\n", "  (define (iter string acc)\n\
    \    (if (string=? \"\" string)\n        acc\n        (iter (substring string\
    \ 1) (cons string acc))))\n  (iter string '()))\n", "  (define (helper string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (helper\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (helper string\
    \ '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_helper (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_helper string '()))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string (list)))\n", "  (let loop ([string string]\n             [acc '()])\n\
    \    (if (string=? string \"\")\n        acc\n        (loop (substring string\
    \ 1)\n              (cons string acc)))))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string (list)))\n",
  "  (define (helper string prefixes)\n    (if (string=? string \"\")\n        prefixes\n\
    \        (helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (helper string '()))\n", "  (define (all_prefixes_iter string prefixes)\n \
    \   (if (empty? string)\n        prefixes\n        (all_prefixes_iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_iter string (list \"\")))\n", "  (define (all_prefixes-iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      (list \"\")\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n", "  (define (all_prefixes_iter string prefixes)\n  \
    \  (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (cond\n      [(empty? string) prefixes]\n      [else (all_prefixes_iter\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))]))\n  (all_prefixes_iter string (list)))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (empty?\
    \ string)\n        prefixes\n        (all_prefixes_helper (substring string 1)\
    \ (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper string '()))\n",
  "  (define (all_prefixes_helper string prefixes)\n    (if (string=? string \"\"\
    )\n        prefixes\n        (all_prefixes_helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_helper string '()))\n", "  (define\
    \ (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n      \
    \  prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (for/list\
    \ ([i (in-range (string-length string))])\n    (substring string 0 (+ i 1))))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_helper\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_helper string '()))\n", "  (define (all_prefixes_helper string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_helper\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper\
    \ string '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (empty?\
    \ string)\n        prefixes\n        (all_prefixes_helper (rest string) (append\
    \ prefixes (list (string-append prefixes (string (first string))))))))\n  (all_prefixes_helper\
    \ string (list \"\")))\n", "  (if (string=? string \"\")\n      (list \"\")\n\
    \      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (if (string=? string \"\")\n      '()\n      (cons (substring\
    \ string 0 1)\n            (all_prefixes (substring string 1)))))\n", "  (define\
    \ (helper string prefixes)\n    (if (string=? string \"\")\n        prefixes\n\
    \        (helper (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (helper string '()))\n", "  (define (all_prefixes_iter string prefixes)\n \
    \   (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (helper\
    \ string prefixes)\n    (cond\n      [(empty? string) prefixes]\n      [else (helper\
    \ (rest string) (append prefixes (list (string-append prefixes (string (first\
    \ string))))))]))\n  (helper string (list)))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (empty? string)\n        prefixes\n        (all_prefixes_iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_iter string (list)))\n", "  (define (all_prefixes_iter string\
    \ prefixes)\n    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (all_prefixes_iter string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n",
  "  (define (helper string acc)\n    (if (string=? string \"\")\n        acc\n  \
    \      (helper (substring string 1) (cons string acc))))\n  (helper string '()))\n",
  "  (define (all_prefixes_iter string prefixes)\n    (if (string=? string \"\")\n\
    \        prefixes\n        (all_prefixes_iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n", "  (define (helper string acc)\n    (if (string=? string \"\
    \")\n        acc\n        (helper (substring string 1) (cons string acc))))\n\
    \  (helper string '()))\n", "  (define (all_prefixes_iter string prefixes)\n \
    \   (cond\n      [(empty? string) prefixes]\n      [else (all_prefixes_iter (rest\
    \ string) (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes_iter string (list)))\n", "  (if (string=? string \"\")\n    \
    \  (list \"\")\n      (append (all_prefixes (substring string 0 (- (string-length\
    \ string) 1)))\n              (list string))))\n", "  (define (all_prefixes_iter\
    \ string prefixes)\n    (if (string=? string \"\")\n        prefixes\n       \
    \ (all_prefixes_iter (substring string 1) (cons (substring string 0 1) prefixes))))\n\
    \  (all_prefixes_iter string '()))\n", "  (define (iter prefix rest)\n    (if\
    \ (empty? rest)\n        (list prefix)\n        (append (iter (string-append prefix\
    \ (string-take rest 1)) (string-drop rest 1))\n                (list prefix))))\n\
    \  (iter \"\" string))\n", "  (define (all_prefixes_iter string prefixes)\n  \
    \  (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_helper string prefixes)\n    (if (empty?\
    \ string)\n        prefixes\n        (all_prefixes_helper (rest string) (append\
    \ prefixes (list (string-append prefixes (string (first string))))))))\n  (all_prefixes_helper\
    \ string (list)))\n", "  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n", "  (define (all_prefixes_iter string acc)\n    (if (string=? string\
    \ \"\")\n        acc\n        (all_prefixes_iter (substring string 1) (cons string\
    \ acc))))\n  (all_prefixes_iter string '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
