name: HumanEval_146_specialFilter
language: rkt
prompt: "#lang racket\n\n;; Write a function that takes a list of numbers as input\
  \ and returns \n;; the number of elements in the list that are greater than 10 and\
  \ both \n;; first and last digits of a number are odd (1, 3, 5, 7, 9).\n;; For example:\n\
  ;; >>> (specialFilter (list 15 -73 14 -15))\n;; 1\n;; >>> (specialFilter (list 33\
  \ -2 -3 45 21 109))\n;; 2\n(define (specialFilter nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate specialFilter))\n\
  \    (check-equal? (candidate (list 5 -2 1 -5)) 0)\n    (check-equal? (candidate\
  \ (list 15 -73 14 -15)) 1)\n    (check-equal? (candidate (list 33 -2 -3 45 21 109))\
  \ 2)\n    (check-equal? (candidate (list 43 -12 93 125 121 109)) 4)\n    (check-equal?\
  \ (candidate (list 71 -2 -33 75 21 19)) 3)\n    (check-equal? (candidate (list 1))\
  \ 0)\n    (check-equal? (candidate (list )) 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n   \
    \       (odd? (last-digit (first nums)))\n          (> (first nums) 10))\n   \
    \  (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n   \
    \ [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1\
    \ (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda (x) (and\
    \ (odd? (first-digit x))\n                                   (odd? (last-digit\
    \ x))\n                                   (> x 10)))\n                  nums)))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums))\
    \ (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (first-digit n))\n                         (odd? (last-digit n))\n   \
    \                      (> n 10)))\n                  nums)))\n", "  (cond\n  \
    \  [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last-digit (first nums)))\n          (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\n\
    \          (odd? (first (number->string (first nums))))\n          (odd? (first\
    \ (number->string (last (number->string (first nums)))))))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (> (first nums) 10)\n          (odd? (first (number->digits\
    \ (first nums))))\n          (odd? (last (number->digits (first nums)))))\n  \
    \   (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (define (isSpecial n)\n    (and\
    \ (odd? (remainder n 10))\n         (odd? (quotient n 10))))\n  (filter isSpecial\
    \ nums))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last-digit (first nums)))\n          (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (define (firstDigit\
    \ n)\n    (if (negative? n)\n        (- (firstDigit (- n)))\n        (if (< n\
    \ 10)\n            n\n            (firstDigit (/ n 10)))))\n  (define (lastDigit\
    \ n)\n    (if (negative? n)\n        (- (lastDigit (- n)))\n        (modulo n\
    \ 10)))\n  (define (isOdd n)\n    (if (or (= n 1) (= n 3) (= n 5) (= n 7) (= n\
    \ 9))\n        #t\n        #f))\n  (define (isSpecial n)\n    (if (and (isOdd\
    \ (firstDigit n)) (isOdd (lastDigit n)))\n        #t\n        #f))\n  (define\
    \ (specialFilterHelper nums count)\n    (if (null? nums)\n        count\n    \
    \    (if (and (isSpecial (car nums)) (> (car nums) 10))\n            (specialFilterHelper\
    \ (cdr nums) (+ count 1))\n            (specialFilterHelper (cdr nums) count))))\n\
    \  (specialFilterHelper nums 0))\n", "  (cond\n    [(null? nums) 0]\n    [(and\
    \ (odd? (first nums))\n          (odd? (last-digit (first nums)))\n          (>\
    \ (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond [(empty? nums) 0]\n        [else\n         (cond [(and (> (first nums)\
    \ 10)\n                     (odd? (first (number->digits (first nums))))\n   \
    \                  (odd? (last (number->digits (first nums)))))\n            \
    \    (+ 1 (specialFilter (rest nums)))]\n               [else (specialFilter (rest\
    \ nums))])]))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (first-digit n))\n                         (odd? (last-digit n))\n         \
    \                (> n 10)))\n                  nums)))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last (number->string (first nums)))))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\n          (odd?\
    \ (first (number->digits (first nums))))\n          (odd? (last (number->digits\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond [(empty? nums) 0]\n        [else (cond [(and (odd?\
    \ (first nums)) (odd? (last-digit (first nums))))\n                     (+ 1 (specialFilter\
    \ (rest nums)))]\n                    [else (specialFilter (rest nums))])]))\n",
  "  (length (filter (lambda (x)\n                    (and (> x 10)\n            \
    \             (odd? (first-digit x))\n                         (odd? (last-digit\
    \ x))))\n                  nums)))\n", "  (length (filter (lambda (n)\n      \
    \              (and (> n 10)\n                         (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))))\n                  nums)))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last nums))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda\
    \ (n) (and (odd? (first-digit n))\n                                   (odd? (last-digit\
    \ n))\n                                   (> n 10)))\n                  nums)))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (x) (and (odd?\
    \ (first-digit x)) (odd? (last-digit x)) (> x 10))) nums)))\n", "  (cond\n   \
    \ [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit\
    \ (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda (n)\n\
    \                    (and (odd? (first-digit n))\n                         (odd?\
    \ (last-digit n))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x) (and (odd? (first-digit x))\n                   \
    \                (odd? (last-digit x))\n                                   (>\
    \ x 10)))\n                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n   \
    \ [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n    \
    \      (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last-digit (first nums))) (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\
    \ (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond [(empty?\
    \ nums) 0]\n        [else (if (and (odd? (first nums))\n                     \
    \  (odd? (last-digit (first nums)))\n                       (> (first nums) 10))\n\
    \                 (+ 1 (specialFilter (rest nums)))\n                 (specialFilter\
    \ (rest nums)))]))\n", "  (length (filter (lambda (x)\n                    (and\
    \ (odd? (remainder x 10))\n                         (odd? (quotient x 10))\n \
    \                        (> x 10)))\n                  nums)))\n", "  (cond [(empty?\
    \ nums) 0]\n        [else\n         (cond [(and (odd? (first nums)) (odd? (last-digit\
    \ (first nums))))\n                (+ 1 (specialFilter (rest nums)))]\n      \
    \         [else (specialFilter (rest nums))])]))\n", "  (define (firstDigit n)\n\
    \    (if (negative? n)\n        (- (firstDigit (- n)))\n        (if (< n 10)\n\
    \            n\n            (firstDigit (/ n 10)))))\n  (define (lastDigit n)\n\
    \    (if (negative? n)\n        (- (lastDigit (- n)))\n        (modulo n 10)))\n\
    \  (define (isOdd n)\n    (if (= (modulo n 2) 1)\n        #t\n        #f))\n \
    \ (define (isGreaterThan10 n)\n    (if (> n 10)\n        #t\n        #f))\n  (define\
    \ (isSpecial n)\n    (and (isGreaterThan10 n)\n         (isOdd (firstDigit n))\n\
    \         (isOdd (lastDigit n))))\n  (define (countSpecial nums)\n    (if (null?\
    \ nums)\n        0\n        (if (isSpecial (car nums))\n            (+ 1 (countSpecial\
    \ (cdr nums)))\n            (countSpecial (cdr nums)))))\n  (countSpecial nums))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last (number->string\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last-digit (first nums)))\n          (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (first-digit n))\n                         (odd? (last-digit n))\n         \
    \                (> n 10)))\n                  nums)))\n", "  (cond [(empty? nums)\
    \ 0]\n        [else (+ (if (and (> (first nums) 10)\n                        \
    \ (odd? (first (digits (first nums))))\n                         (odd? (last (digits\
    \ (first nums)))))\n                    1\n                    0)\n          \
    \       (specialFilter (rest nums)))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\n          (odd?\
    \ (first (number->digits (first nums))))\n          (odd? (last (number->digits\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (define (is-special?\
    \ n)\n    (and (odd? (first-digit n))\n         (odd? (last-digit n))\n      \
    \   (> n 10)))\n  (length (filter is-special? nums)))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond [(empty? nums) 0]\n   \
    \     [else (add1 (specialFilter (rest nums)))]))\n", "  (cond [(empty? nums)\
    \ 0]\n        [else\n         (if (and (odd? (first nums))\n                 \
    \ (odd? (last-digit (first nums)))\n                  (> (first nums) 10))\n \
    \            (+ 1 (specialFilter (rest nums)))\n             (specialFilter (rest\
    \ nums)))]))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (first-digit n))\n                         (odd? (last-digit n))\n         \
    \                (> n 10)))\n                  nums)))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last (number->string\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last-digit (first nums)))\n          (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last-digit (first nums)))\n          (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums))\
    \ (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (first-digit n))\n                         (odd? (last-digit n))\n   \
    \                      (> n 10)))\n                  nums)))\n", "  (cond\n  \
    \  [(empty? nums) 0]\n    [(and (> (first nums) 10)\n          (odd? (first (number->digits\
    \ (first nums))))\n          (odd? (last (number->digits (first nums)))))\n  \
    \   (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\n          (odd?\
    \ (first (number->digits (first nums))))\n          (odd? (last (number->digits\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last-digit (first nums)))\n          (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\
    \ (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums))\n          (odd? (last-digit (first nums)))\n          (>\
    \ (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda\
    \ (x)\n                    (and (odd? (first-digit x))\n                     \
    \    (odd? (last-digit x))\n                         (> x 10)))\n            \
    \      nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums)\
    \ 10)\n          (odd? (first (number->digits (first nums))))\n          (odd?\
    \ (last (number->digits (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums))\
    \ (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (x)\n                    (and\
    \ (odd? (first-digit x))\n                         (odd? (last-digit x))\n   \
    \                      (> x 10)))\n                  nums)))\n", "  (cond\n  \
    \  [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last nums))\n\
    \          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n   \
    \ [else (specialFilter (rest nums))]))\n", "  (cond [(empty? nums) 0]\n      \
    \  [else\n         (cond [(and (> (first nums) 10)\n                     (odd?\
    \ (first (number->digits (first nums))))\n                     (odd? (last (number->digits\
    \ (first nums)))))\n                (+ 1 (specialFilter (rest nums)))]\n     \
    \          [else (specialFilter (rest nums))])]))\n", "  (cond\n    [(empty? nums)\
    \ 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last (number->string (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (> (first nums) 10)\n          (odd? (first (number->digits (first nums))))\n\
    \          (odd? (last (number->digits (first nums)))))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(null?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last-digit (first nums))) (>\
    \ (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (x) (and (odd? (remainder x 10))\n\
    \                                   (odd? (quotient x 10))))\n               \
    \   nums)))\n", "  (define (isSpecial n)\n    (and (odd? (first-digit n))\n  \
    \       (odd? (last-digit n))\n         (> n 10)))\n  (length (filter isSpecial\
    \ nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last-digit (first nums)))\n          (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums))\
    \ (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda (n)\n\
    \                    (and (odd? (first-digit n))\n                         (odd?\
    \ (last-digit n))\n                         (> n 10)))\n                  nums)))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums))\
    \ (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (define (isSpecial n)\n    (and (odd? (first-digit n))\n\
    \         (odd? (last-digit n))\n         (> n 10)))\n  (length (filter isSpecial\
    \ nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last nums))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (odd? (remainder x 10))\n            \
    \             (odd? (quotient x 10))\n                         (> x 10)))\n  \
    \                nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd?\
    \ (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (> (first nums) 10)\n          (odd? (first (number->digits (first\
    \ nums))))\n          (odd? (last (number->digits (first nums)))))\n     (+ 1\
    \ (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (first-digit x))\n\
    \                         (odd? (last-digit x))\n                         (> x\
    \ 10)))\n                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums))\n          (odd? (last (number->string (first nums)))))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x))\
    \ (> x 10))) nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (length (filter (lambda (n)\n        \
    \            (and (odd? (first-digit n))\n                         (odd? (last-digit\
    \ n))\n                         (> n 10)))\n                  nums)))\n", "  (cond\n\
    \    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (x) (and (odd? (first-digit x))\
    \ (odd? (last-digit x)) (> x 10))) nums)))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (x) (and (odd? (first-digit x))\n                   \
    \                (odd? (last-digit x))\n                                   (>\
    \ x 10)))\n                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n   \
    \ [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1\
    \ (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums))\
    \ (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond [(empty? nums) 0]\n        [else\n         (cond\
    \ [(and (> (first nums) 10)\n                     (odd? (first (number->digits\
    \ (first nums))))\n                     (odd? (last (number->digits (first nums)))))\n\
    \                (+ 1 (specialFilter (rest nums)))]\n               [else (specialFilter\
    \ (rest nums))])]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last-digit (first nums)))\n          (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\
    \ (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and\n      (> (first nums) 10)\n      (odd? (first (number->digits (first\
    \ nums))))\n      (odd? (last (number->digits (first nums)))))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last-digit (first nums))) (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\
    \ (odd? (last-digit (first nums))) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last (number->string (first nums)))))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last (number->string (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda (x)\n\
    \                    (and (odd? (first-digit x))\n                         (odd?\
    \ (last-digit x))\n                         (> x 10)))\n                  nums)))\n",
  "  (cond [(empty? nums) 0]\n        [else\n         (cond [(and (odd? (first nums))\n\
    \                     (odd? (last-digit (first nums)))\n                     (>\
    \ (first nums) 10))\n                (+ 1 (specialFilter (rest nums)))]\n    \
    \           [else (specialFilter (rest nums))])]))\n", "  (cond [(empty? nums)\
    \ 0]\n        [else\n         (cond [(and (odd? (first nums))\n              \
    \       (odd? (last-digit (first nums)))\n                     (> (first nums)\
    \ 10))\n                (+ 1 (specialFilter (rest nums)))]\n               [else\
    \ (specialFilter (rest nums))])]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums))\n          (odd? (last-digit (first nums)))\n          (>\
    \ (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (&gt; (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n</code>\n", "  (cond\n\
    \    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last-digit (first nums)))\n          (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\
    \ (odd? (first (digits (first nums)))) (odd? (last (digits (first nums)))))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last-digit\
    \ (first nums))) (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter\
    \ (lambda (x) (and (odd? (remainder x 10))\n                                 \
    \  (odd? (quotient x 10))))\n                  nums)))\n", "  (cond ((null? nums)\
    \ 0)\n        ((and (> (car nums) 10)\n              (odd? (car nums))\n     \
    \         (odd? (car (reverse (number->list (car nums)))))\n              )\n\
    \         (+ 1 (specialFilter (cdr nums))))\n        (else (specialFilter (cdr\
    \ nums)))))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last-digit (first nums)))\n          (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (filter (lambda\
    \ (x)\n            (and (odd? (first-digit x))\n                 (odd? (last-digit\
    \ x))\n                 (> x 10)))\n          nums))\n", "  (cond [(empty? nums)\
    \ 0]\n        [else\n         (cond [(and (odd? (first nums))\n              \
    \       (odd? (last-digit (first nums)))\n                     (> (first nums)\
    \ 10))\n                (+ 1 (specialFilter (rest nums)))]\n               [else\
    \ (specialFilter (rest nums))])]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit (first\
    \ nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (length (filter (lambda (x)\n\
    \                    (and (odd? (first-digit x))\n                         (odd?\
    \ (last-digit x))\n                         (> x 10)))\n                  nums)))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last (number->string (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n \
    \         (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (odd? (first-digit x))\n             \
    \            (odd? (last-digit x))\n                         (> x 10)))\n    \
    \              nums)))\n", "  (cond [(empty? nums) 0]\n        [else\n       \
    \  (cond [(and (> (first nums) 10)\n                     (odd? (first (number->digits\
    \ (first nums))))\n                     (odd? (last (number->digits (first nums)))))\n\
    \                (+ 1 (specialFilter (rest nums)))]\n               [else (specialFilter\
    \ (rest nums))])]))\n", "  (length (filter (lambda (x)\n                    (and\
    \ (odd? (first-digit x))\n                         (odd? (last-digit x))\n   \
    \                      (> x 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x)) (> x 10))) nums)))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums))\
    \ (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (remainder n 10))\n            \
    \             (odd? (quotient n 10))\n                         (> n 10)))\n  \
    \                nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd?\
    \ (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (odd? (first-digit x))\n             \
    \            (odd? (last-digit x))\n                         (> x 10)))\n    \
    \              nums)))\n", "  (length (filter (lambda (x)\n                  \
    \  (and (odd? (first-digit x))\n                         (odd? (last-digit x))\n\
    \                         (> x 10)))\n                  nums)))\n", "  (cond\n\
    \    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last nums))\n\
    \          (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n   \
    \ [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n \
    \   [(and (odd? (first nums))\n          (odd? (last (number->string (first nums)))))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last-digit (first nums))) (>\
    \ (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first\
    \ nums))\n          (odd? (last-digit (first nums)))\n          (> (first nums)\
    \ 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest\
    \ nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\
    \ (odd? (last nums)) (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (define (firstDigit n)\n    (if (< n 10)\n        n\n        (firstDigit (quotient\
    \ n 10))))\n  (define (lastDigit n)\n    (remainder n 10))\n  (define (isOdd n)\n\
    \    (if (= (remainder n 2) 0)\n        #f\n        #t))\n  (define (isGreaterThan10\
    \ n)\n    (if (> n 10)\n        #t\n        #f))\n  (define (isSpecial n)\n  \
    \  (if (and (isOdd (firstDigit n)) (isOdd (lastDigit n)))\n        #t\n      \
    \  #f))\n  (define (countSpecial nums)\n    (if (null? nums)\n        0\n    \
    \    (if (isSpecial (car nums))\n            (+ 1 (countSpecial (cdr nums)))\n\
    \            (countSpecial (cdr nums)))))\n  (countSpecial nums))\n", "  (cond\n\
    \    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd? (last-digit\
    \ (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter (rest\
    \ nums)))]\n    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty?\
    \ nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\n          (odd?\
    \ (first (number->digits (first nums))))\n          (odd? (last (number->digits\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums)\
    \ 10)\n          (odd? (first (number->digits (first nums))))\n          (odd?\
    \ (last (number->digits (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n\
    \    [else (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n\
    \    [(and (odd? (first nums)) (odd? (last nums)) (> (first nums) 10))\n     (+\
    \ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (modulo n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n   \
    \ [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n    \
    \      (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums))\n          (odd? (last-digit (first nums)))\n          (>\
    \ (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (x)\n                    (and\
    \ (> x 10)\n                         (odd? (remainder x 10))\n               \
    \          (odd? (quotient x 10))))\n                  nums)))\n", "  (cond\n\
    \    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (cond [(empty? nums) 0]\n        [else (if (and (odd?\
    \ (first nums))\n                       (odd? (last-digit (first nums)))\n   \
    \                    (> (first nums) 10))\n                 (+ 1 (specialFilter\
    \ (rest nums)))\n                 (specialFilter (rest nums)))]))\n", "  (cond\n\
    \    [(empty? nums) 0]\n    [(and (odd? (first nums)) (odd? (last nums)) (> (first\
    \ nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (define (firstDigit n)\n    (if (zero? n)\n        0\n\
    \        (firstDigit (quotient n 10))))\n  (define (lastDigit n)\n    (modulo\
    \ n 10))\n  (define (isOdd n)\n    (if (zero? (modulo n 2))\n        #f\n    \
    \    #t))\n  (define (isGreaterThanTen n)\n    (if (&gt; n 10)\n        #t\n \
    \       #f))\n  (define (isSpecial n)\n    (and (isGreaterThanTen n)\n       \
    \  (isOdd (firstDigit n))\n         (isOdd (lastDigit n))))\n  (define (specialFilterHelper\
    \ nums count)\n    (if (null? nums)\n        count\n        (if (isSpecial (car\
    \ nums))\n            (specialFilterHelper (cdr nums) (+ count 1))\n         \
    \   (specialFilterHelper (cdr nums) count))))\n  (specialFilterHelper nums 0))\n\
    </code>\nI have a few questions:\n\nIs this code idiomatic?\nIs there a better\
    \ way to do this?\nIs there a better way to write the <code>isOdd</code> function?\n\
    Is there a better way to write the <code>isSpecial</code> function?\nIs there\
    \ a better way to write the <code>specialFilterHelper</code> function?\nIs there\
    \ a better way to write the <code>specialFilter</code> function?\n\nThanks.\n\n\
    \nA:\n\nI think the code is pretty good.  I have a few suggestions:\n\nI would\
    \ use <code>andmap</code> instead of <code>and</code> in <code>isSpecial</code>.\
    \  It's a little more idiomatic.\nI would use <code>filter</code> instead of <code>specialFilterHelper</code>.\
    \  It's a little more idiomatic.\nI would use <code>length</code> instead of <code>specialFilter</code>.\
    \  It's a little more idiomatic.\n\nHere's the code with my suggestions:\n<code>#lang\
    \ racket\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last-digit (first nums)))\n          (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (cond\n    [(empty? nums) 0]\n   \
    \ [(and (odd? (first nums))\n          (odd? (last-digit (first nums)))\n    \
    \      (> (first nums) 10))\n     (+ 1 (specialFilter (rest nums)))]\n    [else\
    \ (specialFilter (rest nums))]))\n", "  (cond\n    [(empty? nums) 0]\n    [(and\
    \ (odd? (first nums)) (odd? (last-digit (first nums))) (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n          (odd?\
    \ (last-digit (first nums)))\n          (> (first nums) 10))\n     (+ 1 (specialFilter\
    \ (rest nums)))]\n    [else (specialFilter (rest nums))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
