name: HumanEval_133_sum_squares
language: rkt
results:
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0st2x9u.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx0st2x9u.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx0st2x9u.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpx0st2x9u.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpx0st2x9u.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqrvo4a70.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqrvo4a70.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqrvo4a70.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpqrvo4a70.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqrvo4a70.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiqwy0zga.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiqwy0zga.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpiqwy0zga.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpiqwy0zga.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpiqwy0zga.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1id3s6iz.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1id3s6iz.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1id3s6iz.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp1id3s6iz.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1id3s6iz.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpem3om8vl.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpem3om8vl.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpem3om8vl.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpem3om8vl.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpem3om8vl.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdq006knw.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdq006knw.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdq006knw.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpdq006knw.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdq006knw.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4kjyi1n.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4kjyi1n.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl4kjyi1n.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpl4kjyi1n.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpl4kjyi1n.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj2f3dcwo.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj2f3dcwo.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj2f3dcwo.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpj2f3dcwo.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj2f3dcwo.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp57vccx4i.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp57vccx4i.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp57vccx4i.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp57vccx4i.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp57vccx4i.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpie6wsvuw.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpie6wsvuw.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpie6wsvuw.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpie6wsvuw.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpie6wsvuw.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxf201aqb.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxf201aqb.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxf201aqb.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpxf201aqb.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxf201aqb.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmpf5tc9.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmpf5tc9.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzmpf5tc9.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpzmpf5tc9.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzmpf5tc9.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfpwtpahv.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfpwtpahv.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfpwtpahv.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpfpwtpahv.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfpwtpahv.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfibpfiq6.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfibpfiq6.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfibpfiq6.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpfibpfiq6.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfibpfiq6.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ptgjlo2.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ptgjlo2.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_ptgjlo2.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp_ptgjlo2.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_ptgjlo2.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo7wkijyv.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo7wkijyv.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpo7wkijyv.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpo7wkijyv.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpo7wkijyv.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkazwoagg.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkazwoagg.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkazwoagg.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpkazwoagg.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkazwoagg.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6mo5ajgl.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6mo5ajgl.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6mo5ajgl.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp6mo5ajgl.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6mo5ajgl.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2guul1rc.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2guul1rc.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2guul1rc.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp2guul1rc.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2guul1rc.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
    \ the sum of squared numbers in the given list,\n;; round each element in the\
    \ list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1\
    \ 2 3)\n;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n\
    ;; (list 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n\
    \  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal?\
    \ (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list 1.0 2 3)) 14)\n\
    \    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal? (candidate\
    \ (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1)) 6)\n  \
    \  (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal? (candidate\
    \ (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6\
    \ 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
    \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list\
    \ -1)) 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppwdjxmlx.rkt:26:4\n\
    actual:     14.0\nexpected:   14\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppwdjxmlx.rkt:28:4\nactual:\
    \     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppwdjxmlx.rkt:29:4\nactual:     6.0\n\
    expected:   6\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmppwdjxmlx.rkt:32:4\nactual:     75.0\nexpected:\
    \   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppwdjxmlx.rkt:33:4\nactual:     1086.0\nexpected:   1086\n\
    --------------------\n"
  exit_code: 0
  status: Exception
