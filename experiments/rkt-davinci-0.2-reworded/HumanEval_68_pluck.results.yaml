language: rkt
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(and (even? (first arr)) (or (empty?\
    \ (rest arr)) (not (even? (second arr))))) (list (first arr) 0)]\n    [else (let\
    \ ([rest-pluck (pluck (rest arr))])\n            (if (empty? rest-pluck)\n   \
    \             (list)\n                (if (< (first rest-pluck) (first arr))\n\
    \                    (cons (first rest-pluck) (add1 (second rest-pluck)))\n  \
    \                  (cons (first arr) 1))))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzetd1fsu.rkt:44:4\n\
    actual:     '(2 . 1)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzetd1fsu.rkt:45:4\nactual:\
    \     '(1 . 1)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzetd1fsu.rkt:47:4\nactual:\
    \     '(0 . 1)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzetd1fsu.rkt:48:4\nactual:\
    \     '(1 . 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzetd1fsu.rkt:49:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '(4 .\
    \ 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzetd1fsu.rkt:50:4\nactual:     '(6 . 1)\nexpected:   '(6 1)\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list\
    \ min-value min-index)]\n          [(even? (first arr))\n           (if (< min-value\
    \ (first arr))\n               (pluck-helper (rest arr) (add1 min-index) (first\
    \ arr))\n               (pluck-helper (rest arr) (add1 min-index) min-value))]\n\
    \          [else (pluck-helper (rest arr) (add1 min-index) min-value)]))\n  (pluck-helper\
    \ arr 0 10000))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnc2tnbzz.rkt:43:4

    actual:     ''(10000 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnc2tnbzz.rkt:44:4

    actual:     ''(10000 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnc2tnbzz.rkt:45:4

    actual:     ''(10000 0)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnc2tnbzz.rkt:46:4

    actual:     ''(10000 6)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnc2tnbzz.rkt:47:4

    actual:     ''(10000 6)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnc2tnbzz.rkt:48:4

    actual:     ''(10000 5)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnc2tnbzz.rkt:49:4

    actual:     ''(10000 4)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnc2tnbzz.rkt:50:4

    actual:     ''(10000 4)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (null? evens)\n        '()\n    \
    \    (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8f0pwno.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8f0pwno.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8f0pwno.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8f0pwno.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8f0pwno.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8f0pwno.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 1 empty))]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcs9hdplh.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcs9hdplh.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [(pluck (rest arr))]\n    [else (list)]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ti652mi.rkt:40:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ti652mi.rkt:44:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (list (first arr) 1)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuo0mhvym.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuo0mhvym.rkt:39:4

    actual:     ''(1 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuo0mhvym.rkt:41:4

    actual:     ''(5 1)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuo0mhvym.rkt:42:4

    actual:     ''(1 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuo0mhvym.rkt:43:4

    actual:     ''(5 1)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuo0mhvym.rkt:44:4

    actual:     ''(7 1)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuo0mhvym.rkt:45:4

    actual:     ''(7 1)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8qsbs_3y.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmp8qsbs_3y.rkt:31:26\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ (cons 1 empty))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr)\
    \ (list min-value min-index)]\n      [(even? (first arr))\n       (if (< (first\
    \ arr) min-value)\n           (pluck-helper (rest arr) 0 (first arr))\n      \
    \     (pluck-helper (rest arr) (+ min-index 1) min-value))]\n      [else (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value)]))\n  (pluck-helper arr 10000 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:44:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:45:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:46:4

    actual:     ''(0 10000)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:47:4

    actual:     ''(0 10006)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:48:4

    actual:     ''(0 10006)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:49:4

    actual:     ''(0 10005)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:50:4

    actual:     ''(0 10004)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:51:4

    actual:     ''(0 10004)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (null? evens)\n        '()\n    \
    \    (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo1z0k7v.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo1z0k7v.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo1z0k7v.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo1z0k7v.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo1z0k7v.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo1z0k7v.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (helper arr min-index min-value)\n    (cond [(empty? arr) (list min-value\
    \ min-index)]\n          [(and (even? (first arr)) (< (first arr) min-value))\n\
    \           (helper (rest arr) (add1 min-index) (first arr))]\n          [else\
    \ (helper (rest arr) (add1 min-index) min-value)]))\n  (if (empty? arr) (list)\n\
    \      (helper arr 0 10000)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisfltn2b.rkt:42:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisfltn2b.rkt:43:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisfltn2b.rkt:45:4

    actual:     ''(0 6)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisfltn2b.rkt:46:4

    actual:     ''(0 6)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisfltn2b.rkt:47:4

    actual:     ''(4 5)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisfltn2b.rkt:48:4

    actual:     ''(6 4)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpisfltn2b.rkt:49:4

    actual:     ''(10000 4)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (define evens (filter even? arr))\n  \
    \    (if (empty? evens)\n          (list)\n          (list (apply min evens) (index-of\
    \ (apply min evens) arr)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv6v2z_ge.rkt:29:2: if: bad syntax\n  in: (if (empty? arr) (list)\
    \ (define evens (filter even? arr)) (if (empty? evens) (list) (list (apply min\
    \ evens) (index-of (apply min evens) arr))))\n  location...:\n   /tmp/tmpv6v2z_ge.rkt:29:2\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 1)]\n        [else (list (first arr) 1)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:39:4

    actual:     ''(1 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:41:4

    actual:     ''(5 1)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:42:4

    actual:     ''(1 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:43:4

    actual:     ''(5 1)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:44:4

    actual:     ''(7 1)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:45:4

    actual:     ''(7 1)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (pluck-even arr)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp84xvkdh0.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmp84xvkdh0.rkt:31:26\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr (first\
    \ arr) 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7cw73sxx.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmp7cw73sxx.rkt:31:26\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (pluck (rest arr))]\n\
    \    [else (cons (first arr) (pluck (rest arr)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjtxeqpi.rkt:39:4

    actual:     ''(3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjtxeqpi.rkt:40:4

    actual:     ''(1 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjtxeqpi.rkt:42:4

    actual:     ''(5 3)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjtxeqpi.rkt:43:4

    actual:     ''(1 3 5 3)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjtxeqpi.rkt:44:4

    actual:     ''(5)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjtxeqpi.rkt:45:4

    actual:     ''(7 7 1)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyjtxeqpi.rkt:46:4

    actual:     ''(7 9 7 1)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [smallest-even (apply min evens)]\n             [index (index-of arr\
    \ smallest-even)])\n        (list smallest-even index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0wlzs4l.rkt:48:4\n\
    \nmin: arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (list (first arr) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91il5s8e.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91il5s8e.rkt:40:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91il5s8e.rkt:42:4

    actual:     ''(5 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91il5s8e.rkt:43:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91il5s8e.rkt:44:4

    actual:     ''(5 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91il5s8e.rkt:45:4

    actual:     ''(7 0)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91il5s8e.rkt:46:4

    actual:     ''(7 0)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list\
    \ min-value min-index)]\n          [(and (even? (first arr)) (< (first arr) min-value))\n\
    \           (pluck-helper (rest arr) 0 (first arr))]\n          [(and (even? (first\
    \ arr)) (= (first arr) min-value))\n           (pluck-helper (rest arr) (+ 1 min-index)\
    \ min-value)]\n          [else (pluck-helper (rest arr) (+ 1 min-index) min-value)]))\n\
    \  (pluck-helper arr 10000 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:43:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:44:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:45:4

    actual:     ''(0 10000)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:46:4

    actual:     ''(0 10006)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:47:4

    actual:     ''(0 10006)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:48:4

    actual:     ''(0 10005)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:49:4

    actual:     ''(0 10004)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:50:4

    actual:     ''(0 10004)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 1)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf0urgrj.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf0urgrj.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr))\n         (let ([min\
    \ (first arr)])\n           (for/fold ([min (first arr)]) ([i (in-list (rest arr))])\n\
    \             (cond [(even? i)\n                    (if (< i min)\n          \
    \              (values i i)\n                        (values min min))]\n    \
    \               [else min])))]\n        [else (pluck (rest arr))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0v5zp6n.rkt:45:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpv0v5zp6n.rkt:46:4\nactual:     2\nexpected:\
    \   '(2 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv0v5zp6n.rkt:48:4\n\nresult arity mismatch;\n expected number\
    \ of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0v5zp6n.rkt:49:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpv0v5zp6n.rkt:50:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0v5zp6n.rkt:51:4\n\
    actual:     6\nexpected:   '(6 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr)\
    \ (list min-value min-index)]\n      [(and (even? (first arr)) (< (first arr)\
    \ min-value))\n       (pluck-helper (rest arr) 0 (first arr))]\n      [(and (even?\
    \ (first arr)) (= (first arr) min-value))\n       (pluck-helper (rest arr) (+\
    \ 1 min-index) min-value)]\n      [else (pluck-helper (rest arr) (+ 1 min-index)\
    \ min-value)]))\n  (pluck-helper arr 10000 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:44:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:45:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:46:4

    actual:     ''(0 10000)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:47:4

    actual:     ''(0 10006)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:48:4

    actual:     ''(0 10006)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:49:4

    actual:     ''(0 10005)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:50:4

    actual:     ''(0 10004)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:51:4

    actual:     ''(0 10004)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 1 empty))]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcs9hdplh.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcs9hdplh.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ (cons 1 empty))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([smallest (apply\
    \ min evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2gnrtfvv.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp2gnrtfvv.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (helper arr min-index min-value)\n    (cond\n      [(empty? arr) (list\
    \ min-value min-index)]\n      [(and (even? (first arr)) (< (first arr) min-value))\n\
    \       (helper (rest arr) 0 (first arr))]\n      [(and (even? (first arr)) (=\
    \ (first arr) min-value))\n       (helper (rest arr) (+ min-index 1) min-value)]\n\
    \      [else (helper (rest arr) (+ min-index 1) min-value)]))\n  (helper arr 10000\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y3h5yp2.rkt:44:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y3h5yp2.rkt:45:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y3h5yp2.rkt:46:4

    actual:     ''(0 10000)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y3h5yp2.rkt:47:4

    actual:     ''(0 10006)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y3h5yp2.rkt:48:4

    actual:     ''(0 10006)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y3h5yp2.rkt:49:4

    actual:     ''(0 10005)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y3h5yp2.rkt:50:4

    actual:     ''(0 10004)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y3h5yp2.rkt:51:4

    actual:     ''(0 10004)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphwe3sgeo.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmphwe3sgeo.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8qsbs_3y.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmp8qsbs_3y.rkt:31:26\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(empty? (filter even? arr)) (list)]\n\
    \    [else (list (apply min (filter even? arr)) (index-of (apply min (filter even?\
    \ arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:39:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:40:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyy8bb8o.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyy8bb8o.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyy8bb8o.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyy8bb8o.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyy8bb8o.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvyy8bb8o.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ (cons 1 empty))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk19qdsr2.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk19qdsr2.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk19qdsr2.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk19qdsr2.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk19qdsr2.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk19qdsr2.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr (first\
    \ arr) 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7cw73sxx.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmp7cw73sxx.rkt:31:26\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (let* ([plucked (pluck (rest arr))]\n                 [index\
    \ (second plucked)])\n             (if (empty? plucked)\n                 (list\
    \ (first arr) 0)\n                 (if (even? (first arr))\n                 \
    \    (if (< (first arr) (first plucked))\n                         (list (first\
    \ arr) 0)\n                         (list (first plucked) (+ index 1)))\n    \
    \                 (list (first plucked) (+ index 1)))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgz51ju8v.rkt:47:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgz51ju8v.rkt:51:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgz51ju8v.rkt:54:4\n\nsecond:\
    \ list contains too few elements\n  list: '()\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8qsbs_3y.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmp8qsbs_3y.rkt:31:26\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(empty? (filter even? arr)) empty]\n  \
    \      [else (list (apply min (filter even? arr)) (index (apply min (filter even?\
    \ arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwaw_m391.rkt:31:52: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpwaw_m391.rkt:31:52\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 1 empty))]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcs9hdplh.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcs9hdplh.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [index (index-of arr min-even)])\n\
    \        (list min-even index))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8dzjctx0.rkt:48:4\n\
    \nmin: arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min (first\
    \ arr)])\n       (for/fold ([min (first arr)]) ([i (in-list (rest arr))])\n  \
    \       (if (and (even? i) (< i min))\n             i\n             min)))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0se1lt6a.rkt:44:4

    actual:     2

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0se1lt6a.rkt:45:4

    actual:     2

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0se1lt6a.rkt:47:4

    actual:     0

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0se1lt6a.rkt:48:4

    actual:     0

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0se1lt6a.rkt:49:4

    actual:     4

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0se1lt6a.rkt:50:4

    actual:     6

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmx89j047.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 1)]\n        [else (list (first arr) 0)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:39:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:41:4

    actual:     ''(5 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:42:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:43:4

    actual:     ''(5 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:44:4

    actual:     ''(7 0)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:45:4

    actual:     ''(7 0)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]\n                  [min-even-index-found\
    \ #f])\n                 ([i (in-naturals)])\n         (cond\n           [(even?\
    \ (list-ref arr i))\n            (cond\n              [(not min-even-index-found)\n\
    \               (values (list min-even i) #t)]\n              [(< min-even (list-ref\
    \ arr i))\n               (values (list min-even min-even-index) #t)]\n      \
    \        [else\n               (values (list (list-ref arr i) i) #t)])]\n    \
    \       [else\n            (values (list min-even min-even-index) min-even-index-found)])))]\n\
    \    [else\n     (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0u0w5e7g.rkt:55:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(4 2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0u0w5e7g.rkt:56:4\n\
    \nlist-ref: index too large for list\n  index: 2\n  in: '(2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0u0w5e7g.rkt:58:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(0 3 0 4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0u0w5e7g.rkt:59:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(2 3 0 5 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0u0w5e7g.rkt:60:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(4 8 4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0u0w5e7g.rkt:61:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 1)]\n        [else (list (first arr) 1)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:39:4

    actual:     ''(1 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:41:4

    actual:     ''(5 1)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:42:4

    actual:     ''(1 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:43:4

    actual:     ''(5 1)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:44:4

    actual:     ''(7 1)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq4gtg2wh.rkt:45:4

    actual:     ''(7 1)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr smallest-index smallest-value)\n    (cond\n      [(empty?\
    \ arr) (list smallest-value smallest-index)]\n      [(and (even? (first arr))\n\
    \            (or (= smallest-value -1)\n                (< (first arr) smallest-value)))\n\
    \       (pluck-helper (rest arr) 0 (first arr))]\n      [(and (even? (first arr))\n\
    \            (= smallest-value (first arr)))\n       (pluck-helper (rest arr)\
    \ (+ 1 smallest-index) smallest-value)]\n      [else (pluck-helper (rest arr)\
    \ (+ 1 smallest-index) smallest-value)]))\n  (pluck-helper arr -1 -1))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpejs9jmi8.rkt:49:4

    actual:     ''(-1 -1)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpejs9jmi8.rkt:50:4

    actual:     ''(0 4)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpejs9jmi8.rkt:51:4

    actual:     ''(0 2)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpejs9jmi8.rkt:52:4

    actual:     ''(4 3)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpejs9jmi8.rkt:53:4

    actual:     ''(6 2)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpejs9jmi8.rkt:54:4

    actual:     ''(-1 3)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (list (first arr) 0)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxhrhi3q2.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxhrhi3q2.rkt:39:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxhrhi3q2.rkt:41:4

    actual:     ''(5 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxhrhi3q2.rkt:42:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxhrhi3q2.rkt:43:4

    actual:     ''(5 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxhrhi3q2.rkt:44:4

    actual:     ''(7 0)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxhrhi3q2.rkt:45:4

    actual:     ''(7 0)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (cons (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1dm3mk1.rkt:39:4

    actual:     ''(4 . 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1dm3mk1.rkt:40:4

    actual:     ''(2 . 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1dm3mk1.rkt:42:4

    actual:     ''(0 . 1)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1dm3mk1.rkt:43:4

    actual:     ''(2 . 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1dm3mk1.rkt:44:4

    actual:     ''(4 . 1)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1dm3mk1.rkt:45:4

    actual:     ''(6 . 1)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(empty? (filter even? arr)) empty]\n \
    \   [else (list (min (filter even? arr)) (index (min (filter even? arr)) arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmt2_6zpc.rkt:32:42: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpmt2_6zpc.rkt:32:42\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(empty? (filter even? arr)) empty]\n  \
    \      [else (list (min (filter even? arr))\n                     (index (min\
    \ (filter even? arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqque0730.rkt:32:22: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpqque0730.rkt:32:22\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (let ([plucked (pluck (rest arr))])\n            (if (empty?\
    \ plucked)\n                (list)\n                (if (even? (first plucked))\n\
    \                    (if (< (first plucked) (first arr))\n                   \
    \     plucked\n                        (list (first arr) 0))\n               \
    \     (list (first plucked) (+ 1 (second plucked))))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppnxiql97.rkt:46:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppnxiql97.rkt:47:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppnxiql97.rkt:49:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppnxiql97.rkt:50:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppnxiql97.rkt:51:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppnxiql97.rkt:52:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(null? arr) (list)]\n    [(even? (car arr)) (list (car arr) 1)]\n\
    \    [(pluck (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpayshy29b.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpayshy29b.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(and (even? (first arr)) (empty? (rest\
    \ arr))) (list (first arr) 0)]\n    [(and (even? (first arr)) (not (empty? (rest\
    \ arr))))\n     (if (< (first arr) (first (pluck (rest arr))))\n         (list\
    \ (first arr) 0)\n         (cons (first (pluck (rest arr))) (add1 (second (pluck\
    \ (rest arr))))))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi2hrfc_.rkt:43:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi2hrfc_.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi2hrfc_.rkt:46:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '(2 .\
    \ 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi2hrfc_.rkt:47:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi2hrfc_.rkt:48:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '(4 .\
    \ 1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi2hrfc_.rkt:49:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8qsbs_3y.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmp8qsbs_3y.rkt:31:26\n"
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr)\
    \ (list min-value min-index)]\n      [(even? (first arr))\n       (if (< (first\
    \ arr) min-value)\n           (pluck-helper (rest arr) 0 (first arr))\n      \
    \     (pluck-helper (rest arr) (+ min-index 1) min-value))]\n      [else (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value)]))\n  (pluck-helper arr 10000 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:44:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:45:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:46:4

    actual:     ''(0 10000)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:47:4

    actual:     ''(0 10006)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:48:4

    actual:     ''(0 10006)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:49:4

    actual:     ''(0 10005)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:50:4

    actual:     ''(0 10004)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp748nq1wh.rkt:51:4

    actual:     ''(0 10004)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ (cons 1 empty))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (let ([min-even-index (index-of min-even arr)])\n  \
    \              (list min-even min-even-index)))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyra4_ww7.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyra4_ww7.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyra4_ww7.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyra4_ww7.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyra4_ww7.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyra4_ww7.rkt:49:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n\
    \    [else (pluck (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaazxy30.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaazxy30.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaazxy30.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaazxy30.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaazxy30.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaazxy30.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let loop ([arr arr] [min-even-value (expt 2 31)] [min-even-index (expt 2 31)])\n\
    \    (cond [(empty? arr) (list min-even-value min-even-index)]\n          [(and\
    \ (even? (first arr)) (< (first arr) min-even-value))\n           (loop (rest\
    \ arr) (first arr) (add1 (length arr)))]\n          [else (loop (rest arr) min-even-value\
    \ min-even-index)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkstqzj4b.rkt:40:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkstqzj4b.rkt:41:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkstqzj4b.rkt:42:4

    actual:     ''(2147483648 2147483648)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkstqzj4b.rkt:43:4

    actual:     ''(0 6)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkstqzj4b.rkt:44:4

    actual:     ''(0 4)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkstqzj4b.rkt:45:4

    actual:     ''(4 5)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkstqzj4b.rkt:46:4

    actual:     ''(6 4)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkstqzj4b.rkt:47:4

    actual:     ''(2147483648 2147483648)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl1pv78wg.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpl1pv78wg.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [(pluck (rest arr))]\n    [else (list (first arr) 1)]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplamiwl7v.rkt:40:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplamiwl7v.rkt:44:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr)\
    \ (list min-value min-index)]\n      [(and (even? (first arr)) (< (first arr)\
    \ min-value))\n       (pluck-helper (rest arr) 0 (first arr))]\n      [(and (even?\
    \ (first arr)) (= (first arr) min-value))\n       (pluck-helper (rest arr) (+\
    \ 1 min-index) min-value)]\n      [else (pluck-helper (rest arr) (+ 1 min-index)\
    \ min-value)]))\n  (pluck-helper arr 10000 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:44:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:45:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:46:4

    actual:     ''(0 10000)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:47:4

    actual:     ''(0 10006)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:48:4

    actual:     ''(0 10006)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:49:4

    actual:     ''(0 10005)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:50:4

    actual:     ''(0 10004)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpikp6ixep.rkt:51:4

    actual:     ''(0 10004)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list\
    \ min-value min-index)]\n          [(and (even? (first arr)) (< (first arr) min-value))\n\
    \           (pluck-helper (rest arr) 0 (first arr))]\n          [(and (even? (first\
    \ arr)) (= (first arr) min-value))\n           (pluck-helper (rest arr) (+ 1 min-index)\
    \ min-value)]\n          [else (pluck-helper (rest arr) (+ 1 min-index) min-value)]))\n\
    \  (pluck-helper arr 10000 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:43:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:44:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:45:4

    actual:     ''(0 10000)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:46:4

    actual:     ''(0 10006)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:47:4

    actual:     ''(0 10006)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:48:4

    actual:     ''(0 10005)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:49:4

    actual:     ''(0 10004)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwauc4n9j.rkt:50:4

    actual:     ''(0 10004)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(and (even? (first arr)) (empty? (rest\
    \ arr))) (list (first arr) 0)]\n        [(and (even? (first arr)) (not (empty?\
    \ (rest arr))))\n         (let* ([rest-pluck (pluck (rest arr))]\n           \
    \     [rest-value (first rest-pluck)]\n                [rest-index (second rest-pluck)])\n\
    \           (if (and (even? rest-value) (< (first arr) rest-value))\n        \
    \       (list (first arr) 0)\n               (list rest-value (+ rest-index 1))))]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw273xhav.rkt:45:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw273xhav.rkt:46:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw273xhav.rkt:49:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw273xhav.rkt:50:4\nactual:     '(4 2)\nexpected:   '(4 1)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw273xhav.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (helper arr min-val min-index)\n    (cond [(empty? arr) (list min-val\
    \ min-index)]\n          [(and (even? (first arr)) (< (first arr) min-val))\n\
    \           (helper (rest arr) (first arr) (add1 min-index))]\n          [else\
    \ (helper (rest arr) min-val (add1 min-index))]))\n  (if (empty? arr)\n      (list)\n\
    \      (helper arr 10000 0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdc0b6od9.rkt:43:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdc0b6od9.rkt:44:4

    actual:     ''(2 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdc0b6od9.rkt:46:4

    actual:     ''(0 6)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdc0b6od9.rkt:47:4

    actual:     ''(0 6)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdc0b6od9.rkt:48:4

    actual:     ''(4 5)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdc0b6od9.rkt:49:4

    actual:     ''(6 4)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdc0b6od9.rkt:50:4

    actual:     ''(10000 4)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(empty? (filter even? arr)) empty]\n  \
    \      [else (list (min (filter even? arr))\n                     (index-of (min\
    \ (filter even? arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp883u2s0u.rkt:39:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp883u2s0u.rkt:40:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp883u2s0u.rkt:42:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 0 4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp883u2s0u.rkt:43:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(2 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp883u2s0u.rkt:44:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(4 8 4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp883u2s0u.rkt:45:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(6)\n--------------------\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min (apply min\
    \ evens)])\n              (list min (index arr min)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy7z_y7tn.rkt:35:25: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpy7z_y7tn.rkt:35:25\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr)\
    \ (list min-value min-index)]\n      [(even? (first arr))\n       (if (< min-value\
    \ (first arr))\n           (pluck-helper (rest arr) (+ min-index 1) (first arr))\n\
    \           (pluck-helper (rest arr) (+ min-index 1) min-value))]\n      [else\
    \ (pluck-helper (rest arr) (+ min-index 1) min-value)]))\n  (pluck-helper arr\
    \ 0 10000))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:44:4

    actual:     ''(10000 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:45:4

    actual:     ''(10000 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:46:4

    actual:     ''(10000 0)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:47:4

    actual:     ''(10000 6)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:48:4

    actual:     ''(10000 6)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:49:4

    actual:     ''(10000 5)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:50:4

    actual:     ''(10000 4)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:51:4

    actual:     ''(10000 4)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (pluck-even arr)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf8elyyba.rkt:31:26: pluck-even: unbound identifier\n  in: pluck-even\n\
    \  location...:\n   /tmp/tmpf8elyyba.rkt:31:26\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr smallest-index smallest-value)\n    (cond\n      [(empty?\
    \ arr) (list smallest-value smallest-index)]\n      [(and (even? (first arr))\
    \ (< (first arr) smallest-value))\n       (pluck-helper (rest arr) 0 (first arr))]\n\
    \      [(and (even? (first arr)) (= (first arr) smallest-value))\n       (pluck-helper\
    \ (rest arr) (+ 1 smallest-index) smallest-value)]\n      [else (pluck-helper\
    \ (rest arr) (+ 1 smallest-index) smallest-value)]))\n  (pluck-helper arr 10000\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6yx_ec9.rkt:44:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6yx_ec9.rkt:45:4

    actual:     ''(0 10003)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6yx_ec9.rkt:46:4

    actual:     ''(0 10000)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6yx_ec9.rkt:47:4

    actual:     ''(0 10006)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6yx_ec9.rkt:48:4

    actual:     ''(0 10006)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6yx_ec9.rkt:49:4

    actual:     ''(0 10005)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6yx_ec9.rkt:50:4

    actual:     ''(0 10004)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6yx_ec9.rkt:51:4

    actual:     ''(0 10004)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy24h9mry.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(and (even? (first arr)) (empty? (rest\
    \ arr))) (list (first arr) 0)]\n    [(even? (first arr)) (let ([smallest (first\
    \ arr)]\n                              [index 0])\n                          \
    \  (for ([(i v) (in-indexed arr)])\n                              (when (and (even?\
    \ v) (< v smallest))\n                                (set! smallest v)\n    \
    \                            (set! index i)))\n                            (list\
    \ smallest index))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdi_6hrp.rkt:46:4

    actual:     ''(0 4)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdi_6hrp.rkt:47:4

    actual:     ''(0 2)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdi_6hrp.rkt:49:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdi_6hrp.rkt:50:4

    actual:     ''(0 2)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdi_6hrp.rkt:51:4

    actual:     ''(0 4)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdi_6hrp.rkt:52:4

    actual:     ''(0 6)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6jryf0vj.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp6jryf0vj.rkt:33:26\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-even-index min-even-value)\n    (cond\n      [(empty?\
    \ arr) (list min-even-value min-even-index)]\n      [(even? (first arr))\n   \
    \    (if (and (zero? min-even-value) (zero? min-even-index))\n           (pluck-helper\
    \ (rest arr) 1 (first arr))\n           (if (< (first arr) min-even-value)\n \
    \              (pluck-helper (rest arr) 1 (first arr))\n               (pluck-helper\
    \ (rest arr) min-even-index min-even-value)))]\n      [else (pluck-helper (rest\
    \ arr) min-even-index min-even-value)]))\n  (pluck-helper arr 0 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2wvwasmp.rkt:48:4

    actual:     ''(0 0)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2wvwasmp.rkt:50:4

    actual:     ''(0 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2wvwasmp.rkt:53:4

    actual:     ''(0 0)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (even? n) (= (remainder n 2) 0))\n  (define (min-even arr)\n    (cond\
    \ [(empty? arr) (error \"no even numbers\")]\n          [(even? (first arr)) (first\
    \ arr)]\n          [else (min-even (rest arr))]))\n  (define (min-even-index arr)\n\
    \    (cond [(empty? arr) (error \"no even numbers\")]\n          [(even? (first\
    \ arr)) 0]\n          [else (+ 1 (min-even-index (rest arr)))]))\n  (cond [(empty?\
    \ arr) (list)]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (list (min-even arr) (min-even-index arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_of06kn9.rkt:47:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_of06kn9.rkt:51:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmp_of06kn9.rkt:54:4


    no even numbers

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm2o7be56.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpm2o7be56.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr)\
    \ (list min-value min-index)]\n      [(even? (first arr))\n       (if (< min-value\
    \ (first arr))\n           (pluck-helper (rest arr) (+ min-index 1) (first arr))\n\
    \           (pluck-helper (rest arr) (+ min-index 1) min-value))]\n      [else\
    \ (pluck-helper (rest arr) (+ min-index 1) min-value)]))\n  (pluck-helper arr\
    \ 0 10000))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:44:4

    actual:     ''(10000 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:45:4

    actual:     ''(10000 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:46:4

    actual:     ''(10000 0)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:47:4

    actual:     ''(10000 6)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:48:4

    actual:     ''(10000 6)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:49:4

    actual:     ''(10000 5)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:50:4

    actual:     ''(10000 4)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwrqgwnuv.rkt:51:4

    actual:     ''(10000 4)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 1 empty))]\n        [else (pluck (rest arr))]))\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpobuahemv.rkt:37:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpobuahemv.rkt:41:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(and (even? (first arr)) (empty? (rest\
    \ arr))) (list (first arr) 0)]\n    [(and (even? (first arr)) (not (empty? (rest\
    \ arr))))\n     (let ([rest-result (pluck (rest arr))])\n       (cond\n      \
    \   [(empty? rest-result) (list (first arr) 0)]\n         [(< (first arr) (first\
    \ rest-result)) (list (first arr) 0)]\n         [else (list (first rest-result)\
    \ (+ 1 (second rest-result)))]))]\n    [else (pluck (rest arr))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwi2uhf.rkt:46:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwi2uhf.rkt:49:4

    actual:     ''(0 1)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwi2uhf.rkt:50:4

    actual:     ''(4 2)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkbwi2uhf.rkt:51:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 1)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf0urgrj.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf0urgrj.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(null? arr) (list)]\n    [(even? (car arr)) (list (car arr) 1)]\n\
    \    [(pluck (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpayshy29b.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpayshy29b.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([smallest\
    \ (first arr)])\n       (for/fold ([smallest (first arr)]\n                  [index\
    \ 0])\n                 ([i (in-list (rest arr))]\n                  [j (in-range\
    \ 1 (add1 (length arr)))])\n                 (cond\n                   [(even?\
    \ i)\n                    (cond\n                      [(< i smallest)\n     \
    \                  (list i j)]\n                      [else\n                \
    \       (list smallest index)])]\n                   [else\n                 \
    \   (list smallest index)])))]\n    [else\n     (pluck (rest arr))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo0u2_e_h.rkt:54:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 1\n  in: local-binding form\n  arguments...:\n   '(2 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo0u2_e_h.rkt:55:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 1\n  in: local-binding form\n  arguments...:\n   '(2 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo0u2_e_h.rkt:57:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 1\n  in: local-binding form\n  arguments...:\n   '(0 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo0u2_e_h.rkt:58:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 1\n  in: local-binding form\n  arguments...:\n   '(2 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo0u2_e_h.rkt:59:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 1\n  in: local-binding form\n  arguments...:\n   '(4 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo0u2_e_h.rkt:60:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 2\n  received: 1\n  in: local-binding form\n  arguments...:\n   '(6 0)\n--------------------\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzv37_q63.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]\n                  [min-even-value\
    \ min-even])\n         ([i (in-naturals)])\n         (cond\n           [(even?\
    \ (list-ref arr i))\n            (cond\n              [(< min-even (list-ref arr\
    \ i))\n               (values min-even-index min-even)]\n              [else\n\
    \               (values i (list-ref arr i))])]\n           [else\n           \
    \ (values min-even-index min-even-value)])))]\n    [else\n     (pluck (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpln24n3ju.rkt:53:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(4 2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpln24n3ju.rkt:54:4\n\
    \nlist-ref: index too large for list\n  index: 2\n  in: '(2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpln24n3ju.rkt:56:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(0 3 0 4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpln24n3ju.rkt:57:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(2 3 0 5 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpln24n3ju.rkt:58:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(4 8 4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpln24n3ju.rkt:59:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [index (index-of min-even\
    \ arr)])\n        (list min-even index))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphwe3sgeo.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmphwe3sgeo.rkt:35:30\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([index (index-of min-even arr)])\n       \
    \         (list min-even index)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjt1669y6.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjt1669y6.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjt1669y6.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjt1669y6.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjt1669y6.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjt1669y6.rkt:49:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:38:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:39:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:41:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:42:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:43:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7qar12ob.rkt:44:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr))\n         (let ([min\
    \ (first arr)])\n           (for/fold ([min (first arr)]) ([i (in-list (rest arr))])\n\
    \             (if (and (even? i) (< i min))\n                 i\n            \
    \     min)))]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpobl94ats.rkt:43:4

    actual:     2

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpobl94ats.rkt:44:4

    actual:     2

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpobl94ats.rkt:46:4

    actual:     0

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpobl94ats.rkt:47:4

    actual:     0

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpobl94ats.rkt:48:4

    actual:     4

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpobl94ats.rkt:49:4

    actual:     6

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ 1)]\n    [else (cons (first arr) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0vxgq595.rkt:39:4

    actual:     ''(4 . 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0vxgq595.rkt:40:4

    actual:     ''(1 . 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0vxgq595.rkt:42:4

    actual:     ''(5 . 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0vxgq595.rkt:43:4

    actual:     ''(1 . 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0vxgq595.rkt:44:4

    actual:     ''(5 . 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0vxgq595.rkt:45:4

    actual:     ''(7 . 0)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0vxgq595.rkt:46:4

    actual:     ''(7 . 0)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ (cons 1 empty))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(and (even? (first arr))\n          (or\
    \ (empty? (rest arr))\n              (even? (first (rest arr)))\n            \
    \  (and (odd? (first (rest arr)))\n                   (or (empty? (rest (rest\
    \ arr)))\n                       (even? (first (rest (rest arr))))))))\n     (list\
    \ (first arr) 0)]\n    [else (cons (first arr) (pluck (rest arr))))])\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp6juqycn9.rkt:38:47: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039798
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (null? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (null? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjuwuqci6.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjuwuqci6.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjuwuqci6.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjuwuqci6.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjuwuqci6.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjuwuqci6.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(empty? (filter even? arr)) empty]\n  \
    \      [else (list (apply min (filter even? arr))\n                    (index\
    \ (apply min (filter even? arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu_u8doi3.rkt:32:21: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpu_u8doi3.rkt:32:21\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index\
    \ arr min-even)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxiqm5b8d.rkt:33:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpxiqm5b8d.rkt:33:30\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (cons (first arr)\
    \ 1)]\n    [else (cons (first arr) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprosu8pnf.rkt:39:4

    actual:     ''(4 . 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprosu8pnf.rkt:40:4

    actual:     ''(1 . 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprosu8pnf.rkt:42:4

    actual:     ''(5 . 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprosu8pnf.rkt:43:4

    actual:     ''(1 . 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprosu8pnf.rkt:44:4

    actual:     ''(5 . 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprosu8pnf.rkt:45:4

    actual:     ''(7 . 0)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprosu8pnf.rkt:46:4

    actual:     ''(7 . 0)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(empty? (filter even? arr)) (list)]\n\
    \    [else (list (apply min (filter even? arr)) (index-of (apply min (filter even?\
    \ arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:39:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:40:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]\n                  [min-even-index-found\
    \ #f])\n                 ([i (in-naturals)])\n         (cond\n           [(even?\
    \ (list-ref arr i))\n            (cond\n              [(not min-even-index-found)\n\
    \               (values (list min-even i) #t)\n               ]\n            \
    \  [(< min-even (list-ref arr i))\n               (values (list min-even min-even-index)\
    \ #t)\n               ]\n              [else\n               (values (list (list-ref\
    \ arr i) i) #t)\n               ])\n            ]\n           [else\n        \
    \    (values (list min-even min-even-index) min-even-index-found)\n          \
    \  ])))]\n    [else\n     (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ne3yhvp.rkt:60:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(4 2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ne3yhvp.rkt:61:4\n\
    \nlist-ref: index too large for list\n  index: 2\n  in: '(2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ne3yhvp.rkt:63:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(0 3 0 4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ne3yhvp.rkt:64:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(2 3 0 5 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ne3yhvp.rkt:65:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(4 8 4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ne3yhvp.rkt:66:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([evens\
    \ (filter even? arr)])\n       (if (empty? evens)\n           empty\n        \
    \   (list (apply min evens)\n                 (apply min (map (lambda (x) (index-of\
    \ x arr)) evens))\n           )\n       )\n     )\n    ]\n    [else (pluck (rest\
    \ arr))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1a8lks3_.rkt:50:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 4\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1a8lks3_.rkt:51:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1a8lks3_.rkt:53:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1a8lks3_.rkt:54:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1a8lks3_.rkt:55:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1a8lks3_.rkt:56:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(empty? (filter even? arr)) (list)]\n\
    \    [else (list (apply min (filter even? arr)) (index-of (apply min (filter even?\
    \ arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:39:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:40:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mghp1ek.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(and (even? (first arr)) (empty? (rest\
    \ arr))) (list (first arr) 0)]\n    [(even? (first arr)) (cons (first arr) (cons\
    \ 0 (pluck (rest arr))))]\n    [else (cons (first arr) (pluck (rest arr)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb4zbjy79.rkt:40:4

    actual:     ''(4 0 2 0 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb4zbjy79.rkt:41:4

    actual:     ''(1 2 0 3)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb4zbjy79.rkt:43:4

    actual:     ''(5 0 0 3 0 0 4 0 2 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb4zbjy79.rkt:44:4

    actual:     ''(1 2 0 3 0 0 5 3)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb4zbjy79.rkt:45:4

    actual:     ''(5 4 0 8 0 4 0 8 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb4zbjy79.rkt:46:4

    actual:     ''(7 6 0 7 1)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb4zbjy79.rkt:47:4

    actual:     ''(7 9 7 1)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(and (even? (first arr)) (or (empty?\
    \ (rest arr)) (not (even? (second arr))))) (list (first arr) 0)]\n    [else (cons\
    \ (first (pluck (rest arr))) (add1 (second (pluck (rest arr)))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhx78ay1.rkt:39:4\n\
    actual:     '(2 . 1)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhx78ay1.rkt:40:4\nactual:\
    \     '(2 . 1)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhx78ay1.rkt:42:4\nactual:\
    \     '(0 . 1)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnhx78ay1.rkt:43:4\nactual:\
    \     '(2 . 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhx78ay1.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '(8 .\
    \ 1)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnhx78ay1.rkt:45:4\nactual:     '(6 . 1)\nexpected:   '(6 1)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnhx78ay1.rkt:46:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7rrsvxms.rkt:42:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n\
    \        (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfk5nj_j1.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  stdout: ''
  timestamp: 1660039797
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 1)]\n        [else (list (first arr) 0)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:38:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:39:4

    actual:     ''(1 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:41:4

    actual:     ''(5 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:42:4

    actual:     ''(1 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:43:4

    actual:     ''(5 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:44:4

    actual:     ''(7 0)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_zgerbrf.rkt:45:4

    actual:     ''(7 0)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039797
- exit_code: 1
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [min-even-index (index\
    \ arr min-even)])\n        (list min-even min-even-index))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxiqm5b8d.rkt:33:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpxiqm5b8d.rkt:33:30\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (let* ([plucked (pluck (rest arr))]\n                 [plucked-value\
    \ (first plucked)]\n                 [plucked-index (second plucked)])\n     \
    \        (cond\n               [(empty? plucked) (list)]\n               [(even?\
    \ plucked-value) (list plucked-value (+ 1 plucked-index))]\n               [else\
    \ (list (first arr) 0)]))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgywdcyxx.rkt:45:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgywdcyxx.rkt:49:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgywdcyxx.rkt:52:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [index (index-of min-even\
    \ arr)])\n        (list min-even index))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpipm1c9d1.rkt:48:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ (cons 1 empty))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp053dpk0o.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) empty]\n        [(even? (first arr)) (cons (first arr) 1)]\n\
    \        [else (cons (first arr) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg3zghdbc.rkt:38:4

    actual:     ''(4 . 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg3zghdbc.rkt:39:4

    actual:     ''(1 . 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg3zghdbc.rkt:41:4

    actual:     ''(5 . 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg3zghdbc.rkt:42:4

    actual:     ''(1 . 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg3zghdbc.rkt:43:4

    actual:     ''(5 . 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg3zghdbc.rkt:44:4

    actual:     ''(7 . 0)

    expected:   ''(6 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg3zghdbc.rkt:45:4

    actual:     ''(7 . 0)

    expected:   ''()

    --------------------

    '
  stdout: ''
  timestamp: 1660039799
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1xo7s6hn.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_0mwlc1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:39:4

    actual:     ''(4 1)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizz96f0_.rkt:43:4

    actual:     ''(2 1)

    expected:   ''(0 3)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
- exit_code: 0
  program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2\
    \ 1)\n;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
    \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
    ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
    ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:39:4

    actual:     ''(4 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:40:4

    actual:     ''(2 0)

    expected:   ''(2 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:42:4

    actual:     ''(0 0)

    expected:   ''(0 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:43:4

    actual:     ''(2 0)

    expected:   ''(0 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:44:4

    actual:     ''(4 0)

    expected:   ''(4 1)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5jlkr5s1.rkt:45:4

    actual:     ''(6 0)

    expected:   ''(6 1)

    --------------------

    '
  stdout: ''
  timestamp: 1660039796
