name: HumanEval_68_pluck
language: rkt
results:
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        (list)\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxl36pgsx.rkt:32:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxl36pgsx.rkt:33:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxl36pgsx.rkt:35:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxl36pgsx.rkt:36:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxl36pgsx.rkt:37:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxl36pgsx.rkt:38:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond [(empty? arr) (list)]\n\
    \        [(even? (first arr)) (list (first arr) 1)]\n        [else (cons (first\
    \ arr) (pluck (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2wcjfp1.rkt:30:4\n\
    actual:     '(4 1)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2wcjfp1.rkt:31:4\nactual:\
    \     '(1 2 1)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2wcjfp1.rkt:33:4\nactual:\
    \     '(5 0 1)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2wcjfp1.rkt:34:4\nactual:\
    \     '(1 2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2wcjfp1.rkt:35:4\nactual:\
    \     '(5 4 1)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2wcjfp1.rkt:36:4\nactual:\
    \     '(7 6 1)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc2wcjfp1.rkt:37:4\nactual:\
    \     '(7 9 7 1)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond [(empty? arr) (list)]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (list (first\
    \ arr) 1)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqrycalg.rkt:30:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqrycalg.rkt:31:4\nactual:\
    \     '(1 1)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqrycalg.rkt:33:4\nactual:\
    \     '(5 1)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqrycalg.rkt:34:4\nactual:\
    \     '(1 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqrycalg.rkt:35:4\nactual:\
    \     '(5 1)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqrycalg.rkt:36:4\nactual:\
    \     '(7 1)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzqrycalg.rkt:37:4\nactual:\
    \     '(7 1)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0uxlq9fg.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0uxlq9fg.rkt:32:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0uxlq9fg.rkt:34:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0uxlq9fg.rkt:35:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0uxlq9fg.rkt:36:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0uxlq9fg.rkt:37:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5bc5w_ew.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5bc5w_ew.rkt:32:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5bc5w_ew.rkt:34:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5bc5w_ew.rkt:35:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5bc5w_ew.rkt:36:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5bc5w_ew.rkt:37:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond [(empty? arr) (list)]\n\
    \        [(even? (first arr))\n         (let ([smallest-even (first arr)])\n \
    \          (for ([i (in-range (length arr))])\n             (when (and (even?\
    \ (list-ref arr i))\n                        (< (list-ref arr i) smallest-even))\n\
    \               (set! smallest-even (list-ref arr i))))\n           (list smallest-even\
    \ (for/first ([i (in-range (length arr))])\n                                 \
    \         (when (= (list-ref arr i) smallest-even)\n                         \
    \                   i)))]\n        [else (pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq6ompq1p.rkt:30:48: read-syntax: missing `)` to close `(` on line\
    \ 23, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond [(empty? arr) (list)]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7tuu0is.rkt:30:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7tuu0is.rkt:31:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7tuu0is.rkt:33:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7tuu0is.rkt:34:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7tuu0is.rkt:35:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7tuu0is.rkt:36:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond [(empty? arr) empty]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedt2p7nb.rkt:30:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedt2p7nb.rkt:31:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedt2p7nb.rkt:33:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedt2p7nb.rkt:34:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedt2p7nb.rkt:35:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedt2p7nb.rkt:36:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63bu1k_p.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63bu1k_p.rkt:32:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63bu1k_p.rkt:34:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63bu1k_p.rkt:35:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63bu1k_p.rkt:36:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp63bu1k_p.rkt:37:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond [(empty? arr) (list)]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0o5bbi1.rkt:30:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0o5bbi1.rkt:31:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0o5bbi1.rkt:33:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0o5bbi1.rkt:34:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0o5bbi1.rkt:35:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0o5bbi1.rkt:36:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr)) (pluck (rest arr))]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdsxaspm8.rkt:31:4\n\
    actual:     '()\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdsxaspm8.rkt:32:4\nactual:\
    \     '()\nexpected:   '(2 1)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdsxaspm8.rkt:34:4\nactual:     '()\n\
    expected:   '(0 1)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdsxaspm8.rkt:35:4\nactual:     '()\n\
    expected:   '(0 3)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdsxaspm8.rkt:36:4\nactual:     '()\n\
    expected:   '(4 1)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdsxaspm8.rkt:37:4\nactual:     '()\n\
    expected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (list-ref\
    \ (pluck (rest arr)) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_trztpx.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_trztpx.rkt:32:4\nactual:\
    \     2\nexpected:   '(2 1)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpr_trztpx.rkt:34:4\nactual:     0\n\
    expected:   '(0 1)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpr_trztpx.rkt:35:4\nactual:     2\nexpected:\
    \   '(0 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpr_trztpx.rkt:36:4\nactual:     4\nexpected:   '(4 1)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr_trztpx.rkt:37:4\n\
    actual:     6\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_trztpx.rkt:38:4\n\nlist-ref:\
    \ index too large for list\n  index: 0\n  in: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ '()]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4bdy7vw.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4bdy7vw.rkt:32:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4bdy7vw.rkt:34:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4bdy7vw.rkt:35:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4bdy7vw.rkt:36:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4bdy7vw.rkt:37:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (list (first\
    \ arr) 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4e7koo6.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4e7koo6.rkt:32:4\nactual:\
    \     '(1 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4e7koo6.rkt:34:4\nactual:\
    \     '(5 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4e7koo6.rkt:35:4\nactual:\
    \     '(1 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4e7koo6.rkt:36:4\nactual:\
    \     '(5 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4e7koo6.rkt:37:4\nactual:\
    \     '(7 0)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo4e7koo6.rkt:38:4\nactual:\
    \     '(7 0)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzaoap9na.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzaoap9na.rkt:32:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzaoap9na.rkt:34:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzaoap9na.rkt:35:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzaoap9na.rkt:36:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzaoap9na.rkt:37:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_2_grhkx.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_2_grhkx.rkt:32:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_2_grhkx.rkt:34:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_2_grhkx.rkt:35:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_2_grhkx.rkt:36:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_2_grhkx.rkt:37:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (if (empty? arr)\n  \
    \    (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index-of min-even arr)))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzg4e1ipm.rkt:34:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzg4e1ipm.rkt:35:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzg4e1ipm.rkt:37:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzg4e1ipm.rkt:38:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzg4e1ipm.rkt:39:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzg4e1ipm.rkt:40:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_cplyzm.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_cplyzm.rkt:32:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_cplyzm.rkt:34:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_cplyzm.rkt:35:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_cplyzm.rkt:36:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_cplyzm.rkt:37:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        (list)\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsudj2cm6.rkt:32:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsudj2cm6.rkt:33:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsudj2cm6.rkt:35:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsudj2cm6.rkt:36:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsudj2cm6.rkt:37:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsudj2cm6.rkt:38:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given a list representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given list\
    \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
    \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
    \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length\
    \ <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2mpp567u.rkt:31:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2mpp567u.rkt:32:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2mpp567u.rkt:34:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2mpp567u.rkt:35:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2mpp567u.rkt:36:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2mpp567u.rkt:37:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
