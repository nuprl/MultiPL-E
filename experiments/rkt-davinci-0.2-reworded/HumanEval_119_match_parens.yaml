name: HumanEval_119_match_parens
language: rkt
prompt: "#lang racket\n\n;; You are given a list of two strings, both strings consist\
  \ of open\n;; parentheses '(' or close parentheses ')' only.\n;; Your job is to\
  \ check if it is possible to concatenate the two strings in\n;; some order, that\
  \ the resulting string will be good.\n;; A string S is considered to be good if\
  \ and only if all parentheses in S\n;; are balanced. For example: the string '(())()'\
  \ is good, while the string\n;; '())' is not.\n;; Return 'Yes' if there's a way\
  \ to make a good string, and return 'No' otherwise.\n;; Examples:\n;; >>> (match_parens\
  \ (list \"()(\" \")\"))\n;; \"Yes\"\n;; >>> (match_parens (list \")\" \")\"))\n\
  ;; \"No\"\n(define (match_parens lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate match_parens))\n\
  \    (check-equal? (candidate (list \"()(\" \")\")) \"Yes\")\n    (check-equal?\
  \ (candidate (list \")\" \")\")) \"No\")\n    (check-equal? (candidate (list \"\
  (()(())\" \"())())\")) \"No\")\n    (check-equal? (candidate (list \")())\" \"(()()(\"\
  )) \"Yes\")\n    (check-equal? (candidate (list \"(())))\" \"(()())((\")) \"Yes\"\
  )\n    (check-equal? (candidate (list \"()\" \"())\")) \"No\")\n    (check-equal?\
  \ (candidate (list \"(()(\" \"()))()\")) \"Yes\")\n    (check-equal? (candidate\
  \ (list \"((((\" \"((())\")) \"No\")\n    (check-equal? (candidate (list \")(()\"\
  \ \"(()(\")) \"No\")\n    (check-equal? (candidate (list \")(\" \")(\")) \"No\"\
  )\n    (check-equal? (candidate (list \"(\" \")\")) \"Yes\")\n    (check-equal?\
  \ (candidate (list \")\" \"(\")) \"Yes\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-good? str)\n    (let loop ([str str] [count 0])\n   \
    \   (cond [(empty? str) (zero? count)]\n            [(char=? (first str) #\\()\
    \ (loop (rest str) (+ count 1))]\n            [(char=? (first str) #\\)) (and\
    \ (positive? count) (loop (rest str) (- count 1)))]\n            [else #f])))\n\
    \  (define (concat-and-check str1 str2)\n    (cond [(is-good? (string-append str1\
    \ str2)) \"Yes\"]\n          [(is-good? (string-append str2 str1)) \"Yes\"]\n\
    \          [else \"No\"]))\n  (concat-and-check (first lst) (second lst)))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(null? lst1) (null?\
    \ lst2)]\n      [(null? lst2) (null? lst1)]\n      [(and (equal? (car lst1) \"\
    (\") (equal? (car lst2) \")\")) (match-parens-helper (cdr lst1) (cdr lst2))]\n\
    \      [(and (equal? (car lst1) \")\") (equal? (car lst2) \"(\")) (match-parens-helper\
    \ (cdr lst1) (cdr lst2))]\n      [(and (equal? (car lst1) \"(\") (equal? (car\
    \ lst2) \"(\")) (or (match-parens-helper (cdr lst1) lst2) (match-parens-helper\
    \ lst1 (cdr lst2)))]\n      [(and (equal? (car lst1) \")\") (equal? (car lst2)\
    \ \")\")) (or (match-parens-helper (cdr lst1) lst2) (match-parens-helper lst1\
    \ (cdr lst2)))]\n      [else #f]))\n  (if (match-parens-helper (car lst) (cadr\
    \ lst))\n      \"Yes\"\n      \"No\"))\n", "  (define (is-good? str)\n    (let\
    \ loop ([str str] [acc 0])\n      (cond\n        [(empty? str) (= acc 0)]\n  \
    \      [(char=? (first str) #\\() (loop (rest str) (+ acc 1))]\n        [(char=?\
    \ (first str) #\\)) (loop (rest str) (- acc 1))])))\n  (define (is-good-concat?\
    \ str1 str2)\n    (and (is-good? str1) (is-good? str2) (is-good? (string-append\
    \ str1 str2))))\n  (cond\n    [(is-good-concat? (first lst) (second lst)) \"Yes\"\
    ]\n    [(is-good-concat? (second lst) (first lst)) \"Yes\"]\n    [else \"No\"\
    ]))\n", "  (define (is-good? s)\n    (define (is-good-helper s n)\n      (cond\n\
    \        [(empty? s) (= n 0)]\n        [(char=? (first s) #\\() (is-good-helper\
    \ (rest s) (+ n 1))]\n        [(char=? (first s) #\\)) (and (> n 0) (is-good-helper\
    \ (rest s) (- n 1)))]\n        [else #f]))\n    (is-good-helper s 0))\n  (define\
    \ (concat-and-check s1 s2)\n    (or (is-good? (string-append s1 s2))\n       \
    \ (is-good? (string-append s2 s1))))\n  (cond\n    [(empty? lst) \"Yes\"]\n  \
    \  [(empty? (rest lst)) \"Yes\"]\n    [(concat-and-check (first lst) (second lst))\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond ((null? lst1) (if (null? lst2) \"Yes\" \"No\"))\n          ((null?\
    \ lst2) (if (null? lst1) \"Yes\" \"No\"))\n          ((and (equal? (car lst1)\
    \ \"(\") (equal? (car lst2) \")\"))\n           (match-parens-helper (cdr lst1)\
    \ (cdr lst2)))\n          ((and (equal? (car lst1) \")\") (equal? (car lst2) \"\
    (\"))\n           (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((equal?\
    \ (car lst1) \"(\") (match-parens-helper (cdr lst1) lst2))\n          ((equal?\
    \ (car lst1) \")\") (match-parens-helper (cdr lst1) lst2))\n          ((equal?\
    \ (car lst2) \"(\") (match-parens-helper lst1 (cdr lst2)))\n          ((equal?\
    \ (car lst2) \")\") (match-parens-helper lst1 (cdr lst2)))))\n  (match-parens-helper\
    \ (car lst) (cadr lst)))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(null? lst1) (if (null? lst2) \"Yes\" \"No\")]\n      [(null? lst2) (if\
    \ (null? lst1) \"Yes\" \"No\")]\n      [(equal? (car lst1) (car lst2)) (match-parens-helper\
    \ (cdr lst1) (cdr lst2))]\n      [(equal? (car lst1) \")\") (match-parens-helper\
    \ (cdr lst1) lst2)]\n      [(equal? (car lst2) \"(\") (match-parens-helper lst1\
    \ (cdr lst2))]\n      [else \"No\"]))\n  (match-parens-helper (car lst) (cdr lst)))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(and (string=? (car lst) \")\") (string=?\
    \ (cadr lst) \")\")) \"No\"]\n    [(string=? (car lst) \")\") (match_parens (cdr\
    \ lst))]\n    [(string=? (cadr lst) \")\") (match_parens (cons (car lst) (cddr\
    \ lst)))]\n    [else (match_parens (cons (car lst) (cddr lst)))]))\n", "  (define\
    \ (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if\
    \ (empty? lst2)\n           \"Yes\"\n           \"No\")]\n      [(char=? (first\
    \ lst1) #\\()\n       (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n\
    \      [(char=? (first lst1) #\\))\n       (if (empty? lst2)\n           \"No\"\
    \n           (match-parens-helper (rest lst1) (rest lst2)))]))\n  (match-parens-helper\
    \ (string->list (first lst)) '())\n  (match-parens-helper (string->list (second\
    \ lst)) '()))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper (rest\
    \ lst)))]\n      [(equal? (first lst) \")\") (sub1 (match-parens-helper (rest\
    \ lst)))]))\n  (cond\n    [(equal? (match-parens-helper (first lst)) 0) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst)\n    (cond ((null?\
    \ lst) 0)\n          ((equal? (car lst) \"(\") (+ 1 (match-parens-helper (cdr\
    \ lst))))\n          ((equal? (car lst) \")\") (- 1 (match-parens-helper (cdr\
    \ lst))))))\n  (if (= (match-parens-helper (car lst)) 0)\n      \"Yes\"\n    \
    \  \"No\"))\n", "  (define (match-parens-helper lst)\n    (cond ((empty? lst)\
    \ 0)\n          ((equal? (first lst) \"(\") (add1 (match-parens-helper (rest lst))))\n\
    \          ((equal? (first lst) \")\") (sub1 (match-parens-helper (rest lst))))))\n\
    \  (cond ((equal? (match-parens-helper (first lst)) 0) \"Yes\")\n        (else\
    \ \"No\")))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n\
    \      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n\
    \  (cond\n    [(> (match-parens-helper (first lst)) 0) \"Yes\"]\n    [(< (match-parens-helper\
    \ (first lst)) 0) \"No\"]\n    [(= (match-parens-helper (first lst)) 0)\n    \
    \ (cond\n       [(> (match-parens-helper (rest lst)) 0) \"Yes\"]\n       [(< (match-parens-helper\
    \ (rest lst)) 0) \"No\"]\n       [(= (match-parens-helper (rest lst)) 0) \"Yes\"\
    ])]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(null?\
    \ lst1) (if (null? lst2) \"Yes\" \"No\")]\n      [(null? lst2) (if (null? lst1)\
    \ \"Yes\" \"No\")]\n      [(char=? (car lst1) ?\\() (match-parens-helper (cdr\
    \ lst1) lst2)]\n      [(char=? (car lst1) ?\\)) (match-parens-helper (cdr lst1)\
    \ (cdr lst2))]\n      [(char=? (car lst2) ?\\() (match-parens-helper lst1 (cdr\
    \ lst2))]\n      [(char=? (car lst2) ?\\)) (match-parens-helper (cdr lst1) (cdr\
    \ lst2))]))\n  (match-parens-helper (string->list (car lst)) (string->list (cadr\
    \ lst))))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond ((and (null?\
    \ lst1) (null? lst2)) #t)\n          ((and (null? lst1) (not (null? lst2))) #f)\n\
    \          ((and (not (null? lst1)) (null? lst2)) #f)\n          ((and (not (null?\
    \ lst1)) (not (null? lst2)))\n           (cond ((equal? (car lst1) \"(\")\n  \
    \                (match-parens-helper (cdr lst1) (cdr lst2)))\n              \
    \   ((equal? (car lst1) \")\")\n                  (match-parens-helper (cdr lst1)\
    \ (cdr lst2)))\n                 (else (or (match-parens-helper (cdr lst1) lst2)\n\
    \                           (match-parens-helper lst1 (cdr lst2))))))))\n  (cond\
    \ ((match-parens-helper (car lst) (cadr lst)) \"Yes\")\n        (else \"No\")))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond ((and (null? lst1) (null?\
    \ lst2)) #t)\n          ((and (null? lst1) (not (null? lst2))) #f)\n         \
    \ ((and (not (null? lst1)) (null? lst2)) #f)\n          ((and (equal? (car lst1)\
    \ \"(\") (equal? (car lst2) \")\"))\n           (match-parens-helper (cdr lst1)\
    \ (cdr lst2)))\n          ((and (equal? (car lst1) \"(\") (not (equal? (car lst2)\
    \ \")\")))\n           (or (match-parens-helper (cdr lst1) lst2)\n           \
    \    (match-parens-helper lst1 (cdr lst2))))\n          ((and (not (equal? (car\
    \ lst1) \"(\")) (equal? (car lst2) \")\"))\n           (or (match-parens-helper\
    \ (cdr lst1) lst2)\n               (match-parens-helper lst1 (cdr lst2))))\n \
    \         ((and (not (equal? (car lst1) \"(\")) (not (equal? (car lst2) \")\"\
    )))\n           (match-parens-helper (cdr lst1) (cdr lst2)))))\n  (if (match-parens-helper\
    \ (string->list (car lst)) (string->list (cadr lst)))\n      \"Yes\"\n      \"\
    No\"))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper (rest lst)))]\n\
    \      [(equal? (first lst) \")\") (sub1 (match-parens-helper (rest lst)))]))\n\
    \  (cond\n    [(< (match-parens-helper (first lst)) 0) \"No\"]\n    [(> (match-parens-helper\
    \ (second lst)) 0) \"No\"]\n    [else \"Yes\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond ((null? lst1) lst2)\n          ((null? lst2) lst1)\n \
    \         ((equal? (car lst1) (car lst2)) (match-parens-helper (cdr lst1) (cdr\
    \ lst2)))\n          ((equal? (car lst1) '(') (match-parens-helper (cdr lst1)\
    \ (cons (car lst1) lst2)))\n          ((equal? (car lst2) ')') (match-parens-helper\
    \ (cons (car lst2) lst1) (cdr lst2)))\n          (else (match-parens-helper (cdr\
    \ lst1) (cons (car lst1) lst2)))))\n  (define (is-good? lst)\n    (cond ((null?\
    \ lst) #t)\n          ((equal? (car lst) '(') (is-good? (cdr lst)))\n        \
    \  ((equal? (car lst) ')') #f)\n          (else (is-good? (cdr lst)))))\n  (if\
    \ (is-good? (match-parens-helper (string->list (car lst)) (string->list (cadr\
    \ lst))))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(empty? lst) \"Yes\"\
    ]\n    [(and (string=? (car lst) \")\") (string=? (cadr lst) \")\")) \"No\"]\n\
    \    [(string=? (car lst) \")\") (match_parens (cdr lst))]\n    [(string=? (cadr\
    \ lst) \")\") (match_parens (cons (car lst) (cddr lst)))]\n    [else (match_parens\
    \ (cons (car lst) (cddr lst)))]))\n", "  (let ([s1 (car lst)]\n        [s2 (cadr\
    \ lst)])\n    (cond\n      [(empty? s1)\n       (cond\n         [(empty? s2) \"\
    Yes\"]\n         [else \"No\"])]\n      [(empty? s2)\n       (cond\n         [(empty?\
    \ s1) \"Yes\"]\n         [else \"No\"])]\n      [(char=? (string-ref s1 0) ?\\\
    ()\n       (cond\n         [(char=? (string-ref s2 0) ?\\()\n          (match_parens\
    \ (list (substring s1 1) (substring s2 1)))]\n         [(char=? (string-ref s2\
    \ 0) ?\\))\n          (match_parens (list (substring s1 1) (substring s2 1)))]\n\
    \         [else \"No\"])]\n      [(char=? (string-ref s1 0) ?\\))\n       (cond\n\
    \         [(char=? (string-ref s2 0) ?\\()\n          (match_parens (list (substring\
    \ s1 1) (substring s2 1)))]\n         [(char=? (string-ref s2 0) ?\\))\n     \
    \     (match_parens (list (substring s1 1) (substring s2 1)))]\n         [else\
    \ \"No\"])]\n      [else \"No\"])))\n", "  (define (match-parens-helper lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest\
    \ lst)))]))\n  (if (equal? (match-parens-helper (first lst)) (match-parens-helper\
    \ (second lst)))\n      \"Yes\"\n      \"No\"))\n", "  (define (is-good? s)\n\
    \    (define (is-good-helper s n)\n      (cond ((empty? s) (= n 0))\n        \
    \    ((char=? (first s) #\\() (is-good-helper (rest s) (+ n 1)))\n           \
    \ ((char=? (first s) #\\)) (and (not (zero? n)) (is-good-helper (rest s) (- n\
    \ 1))))\n            (else #f)))\n    (is-good-helper s 0))\n  (define (concat-all\
    \ lst)\n    (if (empty? lst)\n        \"\"\n        (string-append (first lst)\
    \ (concat-all (rest lst)))))\n  (cond ((is-good? (concat-all lst)) \"Yes\")\n\
    \        (else \"No\")))\n", "  (define (is-good? str)\n    (define (helper str\
    \ count)\n      (cond\n        [(empty? str) (= count 0)]\n        [(char=? (first\
    \ str) #\\() (helper (rest str) (+ count 1))]\n        [(char=? (first str) #\\\
    )) (helper (rest str) (- count 1))]))\n    (helper str 0))\n  (define (helper\
    \ str1 str2)\n    (cond\n      [(empty? str1) (is-good? str2)]\n      [(empty?\
    \ str2) (is-good? str1)]\n      [(is-good? (string-append str1 str2)) \"Yes\"\
    ]\n      [(is-good? (string-append str2 str1)) \"Yes\"]\n      [else \"No\"]))\n\
    \  (helper (first lst) (second lst)))\n", "  (cond\n    [(empty? lst) \"Yes\"\
    ]\n    [(and (equal? (first lst) \")\") (equal? (last lst) \"(\")) \"No\"]\n \
    \   [else (match_parens (rest lst))]))\n", "  (define (match-parens-helper lst)\n\
    \    (cond ((null? lst) 0)\n          ((equal? (car lst) \"(\") (+ 1 (match-parens-helper\
    \ (cdr lst))))\n          ((equal? (car lst) \")\") (- 1 (match-parens-helper\
    \ (cdr lst))))))\n  (if (equal? (match-parens-helper (car lst)) 0)\n      \"Yes\"\
    \n      \"No\"))\n", "  (define (helper lst)\n    (cond\n      [(empty? lst) 0]\n\
    \      [(equal? (first lst) \"(\") (+ 1 (helper (rest lst)))]\n      [(equal?\
    \ (first lst) \")\") (- 1 (helper (rest lst)))]))\n  (cond\n    [(equal? (helper\
    \ (first lst)) 0) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (if (null? lst1)\n        (if (null? lst2)\n            \"Yes\"\
    \n            \"No\")\n        (if (null? lst2)\n            (match-parens-helper\
    \ (cdr lst1) (list (car lst1)))\n            (if (equal? (car lst1) (car lst2))\n\
    \                (match-parens-helper (cdr lst1) (cdr lst2))\n               \
    \ (match-parens-helper (cdr lst1) (list (car lst1) (car lst2)))))))\n  (match-parens-helper\
    \ (string->list (car lst)) (string->list (cadr lst))))\n", "  (match lst\n   \
    \ [(list (list '(') (list ')')) \"Yes\"]\n    [(list (list ')') (list ')')) \"\
    No\"]\n    [(list (list '(') (list '(')) \"Yes\"]\n    [(list (list ')') (list\
    \ '(')) \"No\"]\n    [(list (list '(') (list ')')) \"Yes\"]\n    [(list (list\
    \ ')') (list ')')) \"No\"]\n    [(list (list '(') (list '(')) \"Yes\"]\n    [(list\
    \ (list ')') (list '(')) \"No\"]\n    [(list (list '(') (list ')')) \"Yes\"]\n\
    \    [(list (list ')') (list ')')) \"No\"]\n    [(list (list '(') (list '('))\
    \ \"Yes\"]\n    [(list (list ')') (list '(')) \"No\"]\n    [(list (list '(') (list\
    \ ')')) \"Yes\"]\n    [(list (list ')') (list ')')) \"No\"]\n    [(list (list\
    \ '(') (list '(')) \"Yes\"]\n    [(list (list ')') (list '(')) \"No\"]\n    [(list\
    \ (list '(') (list ')')) \"Yes\"]\n    [(list (list ')') (list ')')) \"No\"]\n\
    \    [(list (list '(') (list '(')) \"Yes\"]\n    [(list (list ')') (list '('))\
    \ \"No\"]\n    [(list (list '(') (list ')')) \"Yes\"]\n    [(list (list ')') (list\
    \ ')')) \"No\"]\n    [(list (list '(') (list '(')) \"Yes\"]\n    [(list (list\
    \ ')') (list '(')) \"No\"]\n    [(list (list '(') (list ')')) \"Yes\"]\n    [(list\
    \ (list ')') (list ')')) \"No\"]\n    [(list (list '(') (list '(')) \"Yes\"]\n\
    \    [(list (list ')') (list '(')) \"No\"]\n    [(list (list '(') (list ')'))\
    \ \"Yes\"]\n    [(list (list ')') (list ')'", "  (cond [(empty? lst) \"Yes\"]\n\
    \        [(empty? (cdr lst)) \"Yes\"]\n        [(and (string=? (car lst) \"(\"\
    )\n              (string=? (cadr lst) \")\"))\n         (match_parens (cddr lst))]\n\
    \        [(and (string=? (car lst) \")\")\n              (string=? (cadr lst)\
    \ \"(\"))\n         (match_parens (cddr lst))]\n        [else \"No\"]))\n", " \
    \ (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and\
    \ (equal? (car lst) \")\") (equal? (cadr lst) \")\")) \"No\"]\n    [(and (equal?\
    \ (car lst) \"(\") (equal? (cadr lst) \")\")) (match_parens (cdr lst))]\n    [(and\
    \ (equal? (car lst) \"(\") (equal? (cadr lst) \"(\")) (match_parens (append (cdr\
    \ lst) (list (car lst))))]\n    [else (match_parens (append (cdr lst) (list (car\
    \ lst))))]))\n", "  (define (is-good? str)\n    (let loop ([str str] [count 0])\n\
    \      (cond [(empty? str) (= count 0)]\n            [(char=? (first str) #\\\
    () (loop (rest str) (+ count 1))]\n            [(char=? (first str) #\\)) (loop\
    \ (rest str) (- count 1))]\n            [else #f])))\n  (define (concat-and-check\
    \ str1 str2)\n    (cond [(is-good? (string-append str1 str2)) \"Yes\"]\n     \
    \     [(is-good? (string-append str2 str1)) \"Yes\"]\n          [else \"No\"]))\n\
    \  (concat-and-check (first lst) (second lst)))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (cond\n    [(= (match-parens-helper\
    \ (first lst)) 0) \"Yes\"]\n    [else \"No\"]))\n", "  (define (helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1) (append lst2 lst1)]\n      [(empty? lst2) (append\
    \ lst1 lst2)]\n      [(and (equal? (first lst1) \")\") (equal? (first lst2) \"\
    (\"))\n       (append (rest lst1) (rest lst2))]\n      [(and (equal? (first lst1)\
    \ \"(\") (equal? (first lst2) \")\"))\n       (append (rest lst1) (rest lst2))]\n\
    \      [else (append lst1 lst2)]))\n  (define (is_good? lst)\n    (define (helper2\
    \ lst)\n      (cond\n        [(empty? lst) #t]\n        [(equal? (first lst) \"\
    (\") (helper2 (rest lst))]\n        [(equal? (first lst) \")\") (and (not (empty?\
    \ lst)) (helper2 (rest lst)))]\n        [else #f]))\n    (helper2 lst))\n  (cond\n\
    \    [(is_good? (helper (first lst) (rest lst))) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (match-parens-helper lst)\n    (if (null? lst)\n        0\n        (if\
    \ (equal? (car lst) \"(\")\n            (+ 1 (match-parens-helper (cdr lst)))\n\
    \            (- 1 (match-parens-helper (cdr lst))))))\n  (if (equal? (match-parens-helper\
    \ (car lst)) (match-parens-helper (cadr lst)))\n      \"Yes\"\n      \"No\"))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and\
    \ (equal? (car lst) \"(\") (equal? (cadr lst) \")\")) (match_parens (cddr lst))]\n\
    \    [(and (equal? (car lst) \")\") (equal? (cadr lst) \"(\")) (match_parens (cddr\
    \ lst))]\n    [else \"No\"]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(string-empty?\
    \ (car lst)) (match_parens (cdr lst))]\n    [(string-empty? (cadr lst)) (match_parens\
    \ (cons (car lst) (cddr lst)))]\n    [(string-empty? (string-append (car lst)\
    \ (cadr lst))) \"Yes\"]\n    [else (match_parens (cons (string-append (car lst)\
    \ (cadr lst)) (cddr lst)))]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(and\
    \ (equal? (first lst) \")\") (equal? (second lst) \")\")) \"No\"]\n    [(and (equal?\
    \ (first lst) \"(\") (equal? (second lst) \")\")) \"Yes\"]\n    [(and (equal?\
    \ (first lst) \"(\") (equal? (second lst) \"(\")) \"Yes\"]\n    [(and (equal?\
    \ (first lst) \")\") (equal? (second lst) \"(\")) \"Yes\"]))\n", "  (define (helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\"\
    )]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first\
    \ lst1) #\\() (helper (rest lst1) (rest lst2))]\n      [(char=? (first lst1) #\\\
    )) (helper (rest lst1) (rest lst2))]\n      [(char=? (first lst2) #\\() (helper\
    \ (rest lst1) (rest lst2))]\n      [(char=? (first lst2) #\\)) (helper (rest lst1)\
    \ (rest lst2))]))\n  (helper (string->list (first lst)) (string->list (second\
    \ lst))))\n", "  (define (helper str)\n    (cond\n      [(empty? str) true]\n\
    \      [(equal? (first str) '(') (helper (rest str))]\n      [(equal? (first str)\
    \ ')')\n       (and (not (empty? str))\n            (or (equal? (first (rest str))\
    \ '(')\n                (helper (rest str))))]))\n  (cond\n    [(empty? lst) \"\
    No\"]\n    [(and (helper (first lst)) (helper (second lst))) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n\
    \      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n\
    \  (if (equal? (match-parens-helper (first lst)) (match-parens-helper (rest lst)))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2)\
    \ (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) #\\() (helper\
    \ (rest lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) #\\)) (if\
    \ (empty? lst2) \"No\" (helper (rest lst1) (rest lst2)))]\n      [(char=? (first\
    \ lst2) #\\() (helper (cons (first lst2) lst1) (rest lst2))]\n      [(char=? (first\
    \ lst2) #\\)) (if (empty? lst1) \"No\" (helper (rest lst1) (rest lst2)))]))\n\
    \  (helper (string->list (first lst)) (string->list (second lst))))\n", "  (define\
    \ (match-parens-helper lst)\n    (cond\n      [(null? lst) 0]\n      [(equal?\
    \ (car lst) \"(\") (+ 1 (match-parens-helper (cdr lst)))]\n      [(equal? (car\
    \ lst) \")\") (- 1 (match-parens-helper (cdr lst)))]))\n  (if (equal? (match-parens-helper\
    \ (car lst)) 0)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(good-parens? (string-append\
    \ (car lst) (cadr lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (define (helper\
    \ lst)\n    (cond ((null? lst) '())\n          ((string=? (car lst) \"(\") (cons\
    \ (car lst) (helper (cdr lst))))\n          ((string=? (car lst) \")\")\n    \
    \       (if (null? (helper (cdr lst)))\n               '()\n               (cons\
    \ (car lst) (helper (cdr lst)))))\n          (else (error \"Invalid input\"))))\n\
    \  (if (null? (helper (append (car lst) (cadr lst))))\n      \"Yes\"\n      \"\
    No\"))\n", "  (define (balanced? s)\n    (let loop ([s s] [count 0])\n      (cond\
    \ [(empty? s) (= count 0)]\n            [(char=? (first s) #\\() (loop (rest s)\
    \ (+ count 1))]\n            [(char=? (first s) #\\)) (loop (rest s) (- count\
    \ 1))]\n            [else (error \"invalid input\")])))\n  (define (concat-balanced?\
    \ s1 s2)\n    (and (balanced? s1) (balanced? s2) (balanced? (string-append s1\
    \ s2))))\n  (cond [(concat-balanced? (first lst) (second lst)) \"Yes\"]\n    \
    \    [(concat-balanced? (second lst) (first lst)) \"Yes\"]\n        [else \"No\"\
    ]))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty? lst) #t]\n\
    \      [(equal? (first lst) \"(\") (match-parens-helper (rest lst))]\n      [(equal?\
    \ (first lst) \")\") (and (match-parens-helper (rest lst)) (match-parens-helper\
    \ (rest (rest lst))))]))\n  (if (match-parens-helper (append (first lst) (second\
    \ lst)))\n      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper lst1\
    \ lst2)\n    (cond\n      [(empty? lst1)\n       (cond\n         [(empty? lst2)\
    \ \"Yes\"]\n         [else \"No\"])]\n      [(empty? lst2)\n       (cond\n   \
    \      [(empty? lst1) \"Yes\"]\n         [else \"No\"])]\n      [(char=? (first\
    \ lst1) ?\\()\n       (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=?\
    \ (first lst2) ?\\()\n       (match-parens-helper (rest lst1) (rest lst2))]\n\
    \      [(char=? (first lst1) ?\\))\n       (match-parens-helper (rest lst1) (rest\
    \ lst2))]\n      [(char=? (first lst2) ?\\))\n       (match-parens-helper (rest\
    \ lst1) (rest lst2))]\n      [else \"No\"]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\
    \n           \"No\")]\n      [(empty? lst2)\n       (if (empty? lst1)\n      \
    \     \"Yes\"\n           \"No\")]\n      [(and (equal? (first lst1) \")\")\n\
    \            (equal? (first lst2) \")\"))\n       (helper (rest lst1) (rest lst2))]\n\
    \      [(and (equal? (first lst1) \"(\")\n            (equal? (first lst2) \"\
    (\"))\n       (helper (rest lst1) (rest lst2))]\n      [(and (equal? (first lst1)\
    \ \"(\")\n            (equal? (first lst2) \")\"))\n       (helper (rest lst1)\
    \ (rest lst2))]\n      [(and (equal? (first lst1) \")\")\n            (equal?\
    \ (first lst2) \"(\"))\n       (helper (rest lst1) (rest lst2))]\n      [else\n\
    \       \"No\"]))\n  (helper (first lst) (rest lst)))\n", "  (cond\n    [(empty?\
    \ lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(string-contains? (car\
    \ lst) \")\") \"No\"]\n    [(string-contains? (cadr lst) \"(\") \"No\"]\n    [else\
    \ (match_parens (cdr lst))]))\n", "  (define (match-parens-helper lst)\n    (cond\n\
    \      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (sub1 (match-parens-helper\
    \ (rest lst)))]))\n  (define (match-parens-helper2 lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \")\") (add1 (match-parens-helper2 (rest\
    \ lst)))]\n      [(equal? (first lst) \"(\") (sub1 (match-parens-helper2 (rest\
    \ lst)))]))\n  (cond\n    [(and (equal? (match-parens-helper (first lst)) 0)\n\
    \          (equal? (match-parens-helper2 (second lst)) 0)) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n\
    \       (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n      [(empty?\
    \ lst2)\n       (if (empty? lst1)\n           \"Yes\"\n           \"No\")]\n \
    \     [(char=? (first lst1) ?\\()\n       (if (char=? (first lst2) ?\\))\n   \
    \        (helper (rest lst1) (rest lst2))\n           (helper (rest lst1) lst2))]\n\
    \      [(char=? (first lst1) ?\\))\n       (if (char=? (first lst2) ?\\()\n  \
    \         (helper (rest lst1) (rest lst2))\n           (helper (rest lst1) lst2))]\n\
    \      [else (helper (rest lst1) lst2)]))\n  (helper (list->string (first lst))\
    \ (list->string (second lst))))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond ((null? lst1) (string-append (string-join lst2) (string-join lst2)))\n\
    \          ((null? lst2) (string-append (string-join lst1) (string-join lst1)))\n\
    \          ((string=? (string-join lst1) (string-join lst2)) \"Yes\")\n      \
    \    ((string=? (string-join lst1) (string-reverse (string-join lst2))) \"Yes\"\
    )\n          ((string=? (string-reverse (string-join lst1)) (string-join lst2))\
    \ \"Yes\")\n          ((string=? (string-reverse (string-join lst1)) (string-reverse\
    \ (string-join lst2))) \"Yes\")\n          (else \"No\")))\n  (match-parens-helper\
    \ (car lst) (cadr lst)))\n", "  (define (is-good? str)\n    (define (helper str\
    \ count)\n      (cond\n        [(empty? str) (= count 0)]\n        [(char=? (first\
    \ str) #\\() (helper (rest str) (+ count 1))]\n        [(char=? (first str) #\\\
    )) (helper (rest str) (- count 1))]))\n    (helper str 0))\n  (define (helper\
    \ str1 str2)\n    (cond\n      [(empty? str1) (is-good? str2)]\n      [(empty?\
    \ str2) (is-good? str1)]\n      [else (or (helper (rest str1) str2)\n        \
    \        (helper str1 (rest str2)))]))\n  (define (concat-str str1 str2)\n   \
    \ (cond\n      [(empty? str1) str2]\n      [(empty? str2) str1]\n      [else (cons\
    \ (first str1) (concat-str (rest str1) str2))]))\n  (define (concat-lst lst)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (rest lst)) (first lst)]\n\
    \      [else (concat-str (first lst) (concat-lst (rest lst)))]))\n  (define (concat-all\
    \ lst)\n    (cond\n      [(empty? lst) empty]\n      [else (cons (concat-lst lst)\
    \ (concat-all (rest lst)))]))\n  (define (helper2 lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [else (or (is-good? (first lst)) (helper2 (rest lst)))]))\n\
    \  (cond\n    [(empty? lst) \"No\"]\n    [(empty? (rest lst)) \"No\"]\n    [(helper2\
    \ (concat-all lst)) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and (equal? (car lst) \")\"\
    ) (equal? (cadr lst) \")\")) \"No\"]\n    [(and (equal? (car lst) \"(\") (equal?\
    \ (cadr lst) \")\")) (match_parens (cdr lst))]\n    [(and (equal? (car lst) \"\
    (\") (equal? (cadr lst) \"(\")) (match_parens (append (cdr lst) (list (car lst))))]\n\
    \    [else (match_parens (append (cdr lst) (list (car lst))))]))\n", "  (define\
    \ (match-parens-helper lst)\n    (cond ((null? lst) 0)\n          ((equal? (car\
    \ lst) \"(\") (+ 1 (match-parens-helper (cdr lst))))\n          ((equal? (car\
    \ lst) \")\") (- 1 (match-parens-helper (cdr lst))))))\n  (if (equal? (match-parens-helper\
    \ (car lst)) 0)\n      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond ((null? lst) 0)\n          ((equal? (car lst) \"(\") (+ 1 (match-parens-helper\
    \ (cdr lst))))\n          ((equal? (car lst) \")\") (- 1 (match-parens-helper\
    \ (cdr lst))))))\n  (if (= (match-parens-helper (car lst)) 0)\n      \"Yes\"\n\
    \      \"No\"))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n\
    \      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n\
    \  (if (equal? (match-parens-helper (first lst)) 0)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (is-good? str)\n    (define (helper str count)\n      (cond\n\
    \        [(empty? str) (= count 0)]\n        [(char=? (first str) #\\() (helper\
    \ (rest str) (+ count 1))]\n        [(char=? (first str) #\\)) (helper (rest str)\
    \ (- count 1))]))\n    (helper str 0))\n  (define (helper str1 str2)\n    (cond\n\
    \      [(empty? str1) (is-good? str2)]\n      [(empty? str2) (is-good? str1)]\n\
    \      [(is-good? (string-append str1 str2)) #t]\n      [(is-good? (string-append\
    \ str2 str1)) #t]\n      [else #f]))\n  (cond\n    [(helper (first lst) (second\
    \ lst)) \"Yes\"]\n    [else \"No\"]))\n", "  (cond [(empty? lst) \"Yes\"]\n  \
    \      [(empty? (cdr lst)) \"Yes\"]\n        [(and (string=? (car lst) \"(\")\n\
    \              (string=? (cadr lst) \")\"))\n         (match_parens (cddr lst))]\n\
    \        [(and (string=? (car lst) \")\")\n              (string=? (cadr lst)\
    \ \"(\"))\n         (match_parens (cddr lst))]\n        [else \"No\"]))\n", " \
    \ (define (match-parens-helper lst1 lst2)\n    (cond\n      [(null? lst1) (if\
    \ (null? lst2) \"Yes\" \"No\")]\n      [(null? lst2) (if (null? lst1) \"Yes\"\
    \ \"No\")]\n      [(eq? (car lst1) (car lst2)) (match-parens-helper (cdr lst1)\
    \ (cdr lst2))]\n      [(eq? (car lst1) '(') (match-parens-helper (cdr lst1) lst2)]\n\
    \      [(eq? (car lst2) '(') (match-parens-helper lst1 (cdr lst2))]\n      [else\
    \ \"No\"]))\n  (match-parens-helper (string->list (car lst)) (string->list (cadr\
    \ lst))))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (first lst))\
    \ (match_parens (rest lst))]\n    [(empty? (second lst)) (match_parens (cons (rest\
    \ (first lst)) (rest lst)))]\n    [(char=? (first (first lst)) ?\\()\n     (match_parens\
    \ (cons (rest (first lst)) (cons (rest (second lst)) (rest lst))))]\n    [(char=?\
    \ (first (second lst)) ?\\()\n     (match_parens (cons (rest (first lst)) (cons\
    \ (rest (second lst)) (rest lst))))]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n    \
    \       \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n       (if (empty?\
    \ lst1)\n           \"Yes\"\n           \"No\")]\n      [(char=? (first lst1)\
    \ (first lst2))\n       (match-parens-helper (rest lst1) (rest lst2))]\n     \
    \ [(char=? (first lst1) #\\()\n       (match-parens-helper (rest lst1) lst2)]\n\
    \      [(char=? (first lst2) #\\()\n       (match-parens-helper lst1 (rest lst2))]\n\
    \      [else\n       \"No\"]))\n  (match-parens-helper (list->string (first lst))\
    \ (list->string (second lst))))\n", "  (define (is-good? str)\n    (let loop ([acc\
    \ 0] [i 0])\n      (cond [(= i (string-length str)) (= acc 0)]\n            [(char=?\
    \ (string-ref str i) #\\() (loop (+ acc 1) (+ i 1))]\n            [(char=? (string-ref\
    \ str i) #\\)) (loop (- acc 1) (+ i 1))]\n            [else (error \"Invalid string\"\
    )])))\n  (define (concat-and-check str1 str2)\n    (cond [(is-good? (string-append\
    \ str1 str2)) \"Yes\"]\n          [(is-good? (string-append str2 str1)) \"Yes\"\
    ]\n          [else \"No\"]))\n  (apply concat-and-check lst))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (if (null? lst1)\n        (if (null? lst2)\n            #t\n\
    \            #f)\n        (if (null? lst2)\n            #t\n            (if (eq?\
    \ (car lst1) (car lst2))\n                (match-parens-helper (cdr lst1) (cdr\
    \ lst2))\n                (match-parens-helper (cdr lst1) lst2)))))\n  (if (match-parens-helper\
    \ (string->list (car lst)) (string->list (cadr lst)))\n      \"Yes\"\n      \"\
    No\"))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty?\
    \ lst1)\n       (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n \
    \     [(empty? lst2)\n       (if (empty? lst1)\n           \"Yes\"\n         \
    \  \"No\")]\n      [(char=? (first lst1) ?\\()\n       (match-parens-helper (rest\
    \ lst1) lst2)]\n      [(char=? (first lst1) ?\\))\n       (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(char=? (first lst2) ?\\()\n       (match-parens-helper\
    \ lst1 (rest lst2))]\n      [(char=? (first lst2) ?\\))\n       (match-parens-helper\
    \ lst1 (rest lst2))]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2)\
    \ (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) ?\\() (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst1) ?\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]\n      [(char=? (first lst2) ?\\() (match-parens-helper\
    \ lst1 (rest lst2))]\n      [(char=? (first lst2) ?\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n\
    \      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n\
    \  (cond\n    [(equal? (match-parens-helper (first lst)) 0) \"Yes\"]\n    [(equal?\
    \ (match-parens-helper (second lst)) 0) \"Yes\"]\n    [else \"No\"]))\n", "  (define\
    \ (is-good? str)\n    (let loop ([str str] [count 0])\n      (cond [(empty? str)\
    \ (zero? count)]\n            [(char=? (first str) #\\() (loop (rest str) (+ count\
    \ 1))]\n            [(char=? (first str) #\\)) (loop (rest str) (- count 1))]\n\
    \            [else #f])))\n  (define (concat-and-check str1 str2)\n    (cond [(is-good?\
    \ (string-append str1 str2)) \"Yes\"]\n          [(is-good? (string-append str2\
    \ str1)) \"Yes\"]\n          [else \"No\"]))\n  (concat-and-check (first lst)\
    \ (second lst)))\n", "  (let ([s1 (car lst)]\n        [s2 (cadr lst)])\n    (if\
    \ (and (equal? s1 \"\") (equal? s2 \"\"))\n        \"Yes\"\n        (if (and (equal?\
    \ s1 \"\") (not (equal? s2 \"\")))\n            (if (equal? (string-ref s2 0)\
    \ ')')\n                \"No\"\n                (match_parens (list s1 (substring\
    \ s2 1))))\n            (if (and (not (equal? s1 \"\")) (equal? s2 \"\"))\n  \
    \              (if (equal? (string-ref s1 0) '(')\n                    \"No\"\n\
    \                    (match_parens (list (substring s1 1) s2)))\n            \
    \    (if (equal? (string-ref s1 0) '(')\n                    (if (equal? (string-ref\
    \ s2 0) ')')\n                        (match_parens (list (substring s1 1) (substring\
    \ s2 1)))\n                        (match_parens (list s1 (substring s2 1))))\n\
    \                    (if (equal? (string-ref s2 0) ')')\n                    \
    \    (match_parens (list (substring s1 1) s2))\n                        \"No\"\
    )))))))\n", "  (if (or (empty? lst)\n          (empty? (cdr lst)))\n      \"No\"\
    \n      (let* ([s1 (car lst)]\n             [s2 (cadr lst)]\n             [s1-good?\
    \ (good? s1)]\n             [s2-good? (good? s2)])\n        (cond\n         [(and\
    \ s1-good? s2-good?) \"Yes\"]\n         [(and s1-good? (not s2-good?)) \"Yes\"\
    ]\n         [(and (not s1-good?) s2-good?) \"Yes\"]\n         [(and (not s1-good?)\
    \ (not s2-good?)) \"No\"]))))\n", "  (define (is-good? str)\n    (let loop ([acc\
    \ 0] [i 0])\n      (cond\n        [(= i (string-length str)) (= acc 0)]\n    \
    \    [(char=? (string-ref str i) #\\() (loop (+ acc 1) (+ i 1))]\n        [(char=?\
    \ (string-ref str i) #\\)) (loop (- acc 1) (+ i 1))])))\n  (define (concat-and-check\
    \ str1 str2)\n    (cond\n      [(is-good? (string-append str1 str2)) \"Yes\"]\n\
    \      [(is-good? (string-append str2 str1)) \"Yes\"]\n      [else \"No\"]))\n\
    \  (concat-and-check (list-ref lst 0) (list-ref lst 1)))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) #t]\n      [(not (equal? (first lst) \"\
    (\")) #f]\n      [else (match-parens-helper (rest lst))]))\n  (cond\n    [(empty?\
    \ lst) \"No\"]\n    [(match-parens-helper (first lst)) \"Yes\"]\n    [else (match_parens\
    \ (rest lst))]))\n", "  (define (is-good? str)\n    (define (helper str count)\n\
    \      (cond\n        [(empty? str) (= count 0)]\n        [(char=? (first str)\
    \ #\\() (helper (rest str) (+ count 1))]\n        [(char=? (first str) #\\)) (and\
    \ (< count 1) (helper (rest str) (- count 1)))]))\n    (helper str 0))\n  (define\
    \ (helper lst)\n    (cond\n      [(empty? lst) \"Yes\"]\n      [(is-good? (first\
    \ lst)) (helper (rest lst))]\n      [else \"No\"]))\n  (helper lst))\n", "  (cond\n\
    \    [(empty? lst) \"Yes\"]\n    [(empty? (car lst)) (match_parens (cdr lst))]\n\
    \    [(empty? (cdr lst)) (match_parens (list (car lst) \"\"))]\n    [(string=?\
    \ (car lst) \")\") (match_parens (list (cdr lst) \"\"))]\n    [(string=? (cdr\
    \ lst) \"(\") (match_parens (list (car lst) \"\"))]\n    [else (match_parens (list\
    \ (car lst) (cdr lst)))]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty?\
    \ (cdr lst)) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst) \"\
    )\")) \"No\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \")\")) (match_parens\
    \ (cdr lst))]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \"(\")) (match_parens\
    \ (cons (string-append (car lst) (cadr lst)) (cddr lst)))]\n    [(and (equal?\
    \ (car lst) \")\") (equal? (cadr lst) \"(\")) (match_parens (cons (string-append\
    \ (car lst) (cadr lst)) (cddr lst)))]))\n", "  (if (or (empty? lst) (empty? (cdr\
    \ lst)))\n      \"No\"\n      (if (and (string=? (car lst) \"(\") (string=? (cadr\
    \ lst) \")\"))\n          \"Yes\"\n          (match_parens (cdr lst)))))\n", " \
    \ (define (match-parens-helper lst)\n    (cond\n      [(null? lst) #t]\n     \
    \ [(string=? (car lst) \"(\") (match-parens-helper (cdr lst))]\n      [(string=?\
    \ (car lst) \")\") (match-parens-helper (cdr lst))]\n      [else #f]))\n  (cond\n\
    \    [(match-parens-helper (append (car lst) (cadr lst))) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (is-good? s)\n    (let loop ([s s] [count 0])\n   \
    \   (cond [(empty? s) (= count 0)]\n            [(char=? (first s) #\\() (loop\
    \ (rest s) (+ count 1))]\n            [(char=? (first s) #\\)) (loop (rest s)\
    \ (- count 1))]\n            [else (error \"Invalid character in string\")])))\n\
    \  (define (concat-and-check s1 s2)\n    (cond [(is-good? (string-append s1 s2))\
    \ \"Yes\"]\n          [(is-good? (string-append s2 s1)) \"Yes\"]\n          [else\
    \ \"No\"]))\n  (concat-and-check (first lst) (second lst)))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (cond\n         [(empty?\
    \ lst2) \"Yes\"]\n         [else \"No\"])]\n      [(empty? lst2)\n       (cond\n\
    \         [(empty? lst1) \"Yes\"]\n         [else \"No\"])]\n      [(char=? (first\
    \ lst1) (first lst2))\n       (match-parens-helper (rest lst1) (rest lst2))]\n\
    \      [(char=? (first lst1) #\\()\n       (match-parens-helper (rest lst1) lst2)]\n\
    \      [(char=? (first lst2) #\\()\n       (match-parens-helper lst1 (rest lst2))]\n\
    \      [else \"No\"]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(char=? (first lst) #\\() (add1 (match-parens-helper (rest lst)))]\n\
    \      [(char=? (first lst) #\\)) (sub1 (match-parens-helper (rest lst)))]))\n\
    \  (define (match-parens-helper2 lst)\n    (cond\n      [(empty? lst) 0]\n   \
    \   [(char=? (first lst) #\\() (sub1 (match-parens-helper2 (rest lst)))]\n   \
    \   [(char=? (first lst) #\\)) (add1 (match-parens-helper2 (rest lst)))]))\n \
    \ (cond\n    [(zero? (match-parens-helper (first lst))) \"Yes\"]\n    [(zero?\
    \ (match-parens-helper2 (first lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (define\
    \ (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first\
    \ lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n  (if (equal? (match-parens-helper\
    \ (first lst)) (match-parens-helper (rest lst)))\n      \"Yes\"\n      \"No\"\
    ))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n\
    \    [(and (equal? (car lst) \")\") (equal? (cadr lst) \")\")) \"No\"]\n    [(and\
    \ (equal? (car lst) \"(\") (equal? (cadr lst) \")\")) \"Yes\"]\n    [(and (equal?\
    \ (car lst) \"(\") (equal? (cadr lst) \"(\")) \"Yes\"]\n    [(and (equal? (car\
    \ lst) \")\") (equal? (cadr lst) \"(\")) \"Yes\"]))\n", "  (define (is-good? str)\n\
    \    (let loop ([str str] [count 0])\n      (cond [(empty? str) (= count 0)]\n\
    \            [(char=? (first str) #\\() (loop (rest str) (+ count 1))]\n     \
    \       [(char=? (first str) #\\)) (loop (rest str) (- count 1))]\n          \
    \  [else (error \"Invalid input\")])))\n  (define (concat-and-check str1 str2)\n\
    \    (cond [(is-good? (string-append str1 str2)) \"Yes\"]\n          [(is-good?\
    \ (string-append str2 str1)) \"Yes\"]\n          [else \"No\"]))\n  (concat-and-check\
    \ (first lst) (second lst)))\n", "  (define (match-parens-helper lst)\n    (cond\n\
    \      [(empty? lst) #t]\n      [(string=? (first lst) \")\") #f]\n      [else\
    \ (match-parens-helper (rest lst))]))\n  (cond\n    [(match-parens-helper (first\
    \ lst)) \"Yes\"]\n    [(match-parens-helper (second lst)) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (define (is-good? str)\n    (let loop ([str str] [acc 0])\n\
    \      (cond [(empty? str) (= acc 0)]\n            [(char=? (first str) #\\()\
    \ (loop (rest str) (+ acc 1))]\n            [(char=? (first str) #\\)) (loop (rest\
    \ str) (- acc 1))]\n            [else (error \"Invalid input!\")])))\n  (define\
    \ (concat-and-check str1 str2)\n    (cond [(is-good? (string-append str1 str2))\
    \ \"Yes\"]\n          [(is-good? (string-append str2 str1)) \"Yes\"]\n       \
    \   [else \"No\"]))\n  (concat-and-check (first lst) (second lst)))\n", "  (cond\n\
    \    [(empty? lst) \"Yes\"]\n    [(empty? (car lst)) (match_parens (cdr lst))]\n\
    \    [(empty? (cdr lst)) (match_parens (list (car lst) \"\"))]\n    [(string=?\
    \ (car lst) \")\") (match_parens (list (cdr lst) \"\"))]\n    [(string=? (cdr\
    \ lst) \"(\") (match_parens (list (car lst) \"\"))]\n    [else \"No\"]))\n", " \
    \ (define (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n     \
    \ [(equal? (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n      [(equal?\
    \ (first lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n  (cond\n    [(=\
    \ (match-parens-helper (first lst)) (match-parens-helper (second lst))) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst)\n    (cond\n \
    \     [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest\
    \ lst)))]))\n  (cond\n    [(< (match-parens-helper (first lst)) 0) \"No\"]\n \
    \   [(> (match-parens-helper (second lst)) 0) \"No\"]\n    [else \"Yes\"]))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond ((null? lst1) (if (null? lst2)\
    \ \"Yes\" \"No\"))\n          ((null? lst2) (if (null? lst1) \"Yes\" \"No\"))\n\
    \          ((or (equal? (car lst1) \"(\") (equal? (car lst2) \"(\"))\n       \
    \    (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((or (equal? (car\
    \ lst1) \")\") (equal? (car lst2) \")\"))\n           (match-parens-helper (cdr\
    \ lst1) (cdr lst2)))\n          (else \"No\")))\n  (match-parens-helper (string->list\
    \ (car lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper lst)\n\
    \    (cond ((null? lst) 0)\n          ((equal? (car lst) \"(\") (+ 1 (match-parens-helper\
    \ (cdr lst))))\n          ((equal? (car lst) \")\") (- 1 (match-parens-helper\
    \ (cdr lst))))))\n  (if (equal? (match-parens-helper (car lst)) 0)\n      \"Yes\"\
    \n      \"No\"))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst))\
    \ \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst) \")\")) \"No\"\
    ]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \")\")) \"Yes\"]\n  \
    \  [(and (equal? (car lst) \"(\") (equal? (cadr lst) \"(\")) \"Yes\"]\n    [(and\
    \ (equal? (car lst) \")\") (equal? (cadr lst) \"(\")) \"Yes\"]))\n", "  (define\
    \ (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty?\
    \ lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\"\
    )]\n      [(char=? (first lst1) ?\\() (match-parens-helper (rest lst1) lst2)]\n\
    \      [(char=? (first lst1) ?\\)) (match-parens-helper (rest lst1) (rest lst2))]\n\
    \      [(char=? (first lst2) ?\\() (match-parens-helper lst1 (rest lst2))]\n \
    \     [(char=? (first lst2) ?\\)) (match-parens-helper (rest lst1) (rest lst2))]))\n\
    \  (match-parens-helper (string->list (first lst)) (string->list (second lst))))\n",
  "  (if (or (equal? (car lst) \")\") (equal? (cadr lst) \"(\"))\n      \"No\"\n \
    \     \"Yes\"))\n", "  (define (match-parens-helper lst)\n    (define (match-parens-helper-iter\
    \ lst acc)\n      (cond\n        [(empty? lst) acc]\n        [(char=? (first lst)\
    \ #\\() (match-parens-helper-iter (rest lst) (+ acc 1))]\n        [(char=? (first\
    \ lst) #\\)) (match-parens-helper-iter (rest lst) (- acc 1))]))\n    (match-parens-helper-iter\
    \ lst 0))\n  (if (= (match-parens-helper (first lst)) (match-parens-helper (second\
    \ lst)))\n      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper lst1\
    \ lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n         \
    \  \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n       (if (empty? lst1)\n\
    \           \"Yes\"\n           \"No\")]\n      [(char=? (first lst1) #\\()\n\
    \       (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n      [(char=?\
    \ (first lst1) #\\))\n       (if (empty? lst2)\n           \"No\"\n          \
    \ (match-parens-helper (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (cond\n    [(= (match-parens-helper\
    \ (first lst)) 0) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and (equal? (car lst) \"(\"\
    ) (equal? (cadr lst) \")\"))\n     (match_parens (cddr lst))]\n    [(and (equal?\
    \ (car lst) \")\") (equal? (cadr lst) \"(\"))\n     (match_parens (cddr lst))]\n\
    \    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1) (empty? lst2)]\n      [(empty? lst2) (empty? lst1)]\n  \
    \    [(and (char=? (first lst1) #\\() (char=? (first lst2) #\\)))\n       (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(and (char=? (first lst1) #\\() (char=? (first\
    \ lst2) #\\)))\n       (or (match-parens-helper (rest lst1) lst2)\n          \
    \ (match-parens-helper lst1 (rest lst2)))]\n      [(and (char=? (first lst1) #\\\
    )) (char=? (first lst2) #\\)))\n       (match-parens-helper (rest lst1) (rest\
    \ lst2))]\n      [(and (char=? (first lst1) #\\)) (char=? (first lst2) #\\)))\n\
    \       (or (match-parens-helper (rest lst1) lst2)\n           (match-parens-helper\
    \ lst1 (rest lst2)))]))\n  (if (match-parens-helper (string->list (first lst))\n\
    \                           (string->list (second lst)))\n      \"Yes\"\n    \
    \  \"No\"))\n", "  (define (helper lst acc)\n    (cond\n      [(empty? lst) (if\
    \ (zero? acc) \"Yes\" \"No\")]\n      [(char=? (first lst) #\\() (helper (rest\
    \ lst) (+ acc 1))]\n      [(char=? (first lst) #\\)) (if (zero? acc) \"No\" (helper\
    \ (rest lst) (- acc 1)))]))\n  (helper (string-append (first lst) (second lst))\
    \ 0))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond ((null? lst1)\
    \ (if (null? lst2) \"Yes\" \"No\"))\n          ((null? lst2) (if (null? lst1)\
    \ \"Yes\" \"No\"))\n          ((string=? (car lst1) \"(\")\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((string=? (car lst1) \")\")\n          \
    \ (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((string=? (car lst2)\
    \ \"(\")\n           (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((string=?\
    \ (car lst2) \")\")\n           (match-parens-helper (cdr lst1) (cdr lst2)))))\n\
    \  (match-parens-helper (string->list (car lst)) (string->list (cadr lst))))\n",
  "  (define (is-good? str)\n    (define (helper str n)\n      (cond\n        [(empty?\
    \ str) (= n 0)]\n        [(char=? (first str) #\\() (helper (rest str) (+ n 1))]\n\
    \        [(char=? (first str) #\\)) (and (> n 0) (helper (rest str) (- n 1)))]))\n\
    \    (helper str 0))\n  (define (helper str1 str2)\n    (cond\n      [(empty?\
    \ str1) (is-good? str2)]\n      [(empty? str2) (is-good? str1)]\n      [else (or\
    \ (helper (rest str1) (string-append str2 (string (first str1))))\n          \
    \      (helper (string-append str1 (string (first str2))) (rest str2)))]))\n \
    \ (cond\n    [(is-good? (string-append (first lst) (second lst))) \"Yes\"]\n \
    \   [else \"No\"]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr\
    \ lst)) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst) \")\"\
    )) \"No\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \")\")) (match_parens\
    \ (cdr lst))]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \"(\")) (match_parens\
    \ (cons (string-append (car lst) (cadr lst)) (cddr lst)))]\n    [(and (equal?\
    \ (car lst) \")\") (equal? (cadr lst) \"(\")) (match_parens (cons (string-append\
    \ (car lst) (cadr lst)) (cddr lst)))]))\n", "  (cond\n    [(empty? lst) \"Yes\"\
    ]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(string=? (car lst) \")\") \"No\"]\n\
    \    [(string=? (cadr lst) \"(\") \"No\"]\n    [else (match_parens (cdr lst))]))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (if (null? lst1)\n        (if (null?\
    \ lst2)\n            \"Yes\"\n            \"No\")\n        (if (null? lst2)\n\
    \            (match-parens-helper (cdr lst1) lst2)\n            (if (equal? (car\
    \ lst1) \"(\")\n                (if (equal? (car lst2) \")\")\n              \
    \      (match-parens-helper (cdr lst1) (cdr lst2))\n                    (match-parens-helper\
    \ (cdr lst1) lst2))\n                (if (equal? (car lst2) \"(\")\n         \
    \           (match-parens-helper (cdr lst1) (cdr lst2))\n                    (match-parens-helper\
    \ (cdr lst1) lst2))))))\n  (match-parens-helper (car lst) (cadr lst)))\n", " \
    \ (define (helper s)\n    (cond\n      [(empty? s) #t]\n      [(eq? (first s)\
    \ ') #f]\n      [else (helper (rest s))]))\n  (define (helper2 s)\n    (cond\n\
    \      [(empty? s) #t]\n      [(eq? (first s) ') (helper2 (rest s))]\n      [else\
    \ #f]))\n  (cond\n    [(and (helper (string->list (first lst))) (helper2 (string->list\
    \ (second lst)))) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and (equal? (car lst) \")\"\
    ) (equal? (cadr lst) \")\")) \"No\"]\n    [(and (equal? (car lst) \"(\") (equal?\
    \ (cadr lst) \")\")) \"Yes\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr\
    \ lst) \"(\")) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst)\
    \ \"(\")) \"Yes\"]))\n", "  (define (is-good? str)\n    (let loop ([str str] [count\
    \ 0])\n      (cond [(empty? str) (= count 0)]\n            [(char=? (first str)\
    \ #\\() (loop (rest str) (+ count 1))]\n            [(char=? (first str) #\\))\
    \ (loop (rest str) (- count 1))]\n            [else (error \"Invalid character\
    \ in string\")])))\n  (define (concat-and-check str1 str2)\n    (cond [(is-good?\
    \ (string-append str1 str2)) \"Yes\"]\n          [(is-good? (string-append str2\
    \ str1)) \"Yes\"]\n          [else \"No\"]))\n  (concat-and-check (first lst)\
    \ (second lst)))\n", "  (define (is-good? str)\n    (define (helper str count)\n\
    \      (cond\n        [(empty? str) (= count 0)]\n        [(char=? (first str)\
    \ #\\() (helper (rest str) (+ count 1))]\n        [(char=? (first str) #\\)) (and\
    \ (not (= count 0)) (helper (rest str) (- count 1)))]))\n    (helper str 0))\n\
    \  (define (helper lst)\n    (cond\n      [(empty? lst) #f]\n      [(is-good?\
    \ (string-append (first lst) (second lst))) #t]\n      [else (or (helper (rest\
    \ lst)) (helper (cons (second lst) (cons (first lst) (rest (rest lst))))))]))\n\
    \  (cond\n    [(helper lst) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (cond\n    [(< (match-parens-helper\
    \ (first lst)) 0) \"No\"]\n    [(> (match-parens-helper (second lst)) 0) \"No\"\
    ]\n    [else \"Yes\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2)\
    \ (if (empty? lst1) \"Yes\" \"No\")]\n      [(equal? (first lst1) (first lst2))\
    \ (match-parens-helper (rest lst1) (rest lst2))]\n      [(equal? (first lst1)\
    \ '()) (match-parens-helper (rest lst1) lst2)]\n      [(equal? (first lst2) '())\
    \ (match-parens-helper lst1 (rest lst2))]\n      [else \"No\"]))\n  (match-parens-helper\
    \ (list->string (first lst)) (list->string (second lst))))\n", "  (cond\n    [(empty?\
    \ lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(or (string=? (car lst)\
    \ \")\") (string=? (cadr lst) \"(\")) \"No\"]\n    [else (match_parens (cdr lst))]))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n  \
    \     (cond\n         [(empty? lst2) \"Yes\"]\n         [else \"No\"])]\n    \
    \  [(empty? lst2)\n       (cond\n         [(empty? lst1) \"Yes\"]\n         [else\
    \ \"No\"])]\n      [(and (equal? (first lst1) (first lst2))\n            (equal?\
    \ (first lst1) \"(\"))\n       (match-parens-helper (rest lst1) (rest lst2))]\n\
    \      [(and (equal? (first lst1) (first lst2))\n            (equal? (first lst1)\
    \ \")\"))\n       (match-parens-helper (rest lst1) (rest lst2))]\n      [(and\
    \ (equal? (first lst1) \"(\")\n            (equal? (first lst2) \")\"))\n    \
    \   (match-parens-helper (rest lst1) (rest lst2))]\n      [(and (equal? (first\
    \ lst1) \")\")\n            (equal? (first lst2) \"(\"))\n       (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [else \"No\"]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (cond\n    [(empty? lst) \"\
    Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal?\
    \ (cadr lst) \")\")) \"No\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr\
    \ lst) \")\")) (match_parens (cdr lst))]\n    [(and (equal? (car lst) \"(\") (equal?\
    \ (cadr lst) \"(\")) (match_parens (cons (string-append (car lst) (cadr lst))\
    \ (cddr lst)))]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst) \"(\"))\
    \ (match_parens (cons (string-append (car lst) (cadr lst)) (cddr lst)))]))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n  \
    \     (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n      [(empty?\
    \ lst2)\n       (if (empty? lst1)\n           \"Yes\"\n           \"No\")]\n \
    \     [(char=? (first lst1) ?\\()\n       (match-parens-helper (rest lst1) (cons\
    \ (first lst1) lst2))]\n      [(char=? (first lst1) ?\\))\n       (if (empty?\
    \ lst2)\n           \"No\"\n           (match-parens-helper (rest lst1) (rest\
    \ lst2)))]))\n  (match-parens-helper (string->list (first lst)) '()))\n", "  (define\
    \ (helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(eq? (first lst) '())\
    \ 1]\n      [(eq? (first lst) ')) -1]))\n  (cond\n    [(= (helper (first lst))\
    \ (helper (second lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond ((null? lst1) lst2)\n          ((null? lst2) lst1)\n \
    \         ((eq? (car lst1) (car lst2))\n           (match-parens-helper (cdr lst1)\
    \ (cdr lst2)))\n          ((eq? (car lst1) ')')\n           (match-parens-helper\
    \ (cdr lst1) (cons (car lst1) lst2)))\n          ((eq? (car lst2) ')')\n     \
    \      (match-parens-helper (cons (car lst2) lst1) (cdr lst2)))\n          (else\
    \ (match-parens-helper (cdr lst1) (cdr lst2)))))\n  (let ((lst1 (string->list\
    \ (car lst)))\n        (lst2 (string->list (cadr lst))))\n    (if (null? (match-parens-helper\
    \ lst1 lst2))\n        \"Yes\"\n        \"No\")))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (if (equal? (match-parens-helper (first\
    \ lst)) (match-parens-helper (second lst)))\n      \"Yes\"\n      \"No\"))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n  \
    \     (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n      [(char=?\
    \ (first lst1) #\\()\n       (match-parens-helper (rest lst1) (cons (first lst1)\
    \ lst2))]\n      [(char=? (first lst1) #\\))\n       (if (empty? lst2)\n     \
    \      \"No\"\n           (match-parens-helper (rest lst1) (rest lst2)))]))\n\
    \  (match-parens-helper (string->list (first lst)) '())\n  (match-parens-helper\
    \ (string->list (second lst)) '()))\n", "  (define (is-good? str)\n    (define\
    \ (helper str count)\n      (cond\n        [(empty? str) (= count 0)]\n      \
    \  [(char=? (first str) #\\() (helper (rest str) (+ count 1))]\n        [(char=?\
    \ (first str) #\\)) (helper (rest str) (- count 1))]))\n    (helper str 0))\n\
    \  (define (helper lst)\n    (cond\n      [(empty? lst) \"Yes\"]\n      [(is-good?\
    \ (first lst)) (helper (rest lst))]\n      [else \"No\"]))\n  (helper lst))\n",
  "  (define (is-good? str)\n    (let loop ([s str] [cnt 0])\n      (cond [(empty?\
    \ s) (zero? cnt)]\n            [(char=? (first s) #\\() (loop (rest s) (+ cnt\
    \ 1))]\n            [(char=? (first s) #\\)) (loop (rest s) (- cnt 1))]\n    \
    \        [else #f])))\n  (define (concat-all lst)\n    (if (empty? lst)\n    \
    \    \"\"\n        (string-append (first lst) (concat-all (rest lst)))))\n  (let\
    \ loop ([lst lst] [acc '()])\n    (cond [(empty? lst) (if (is-good? (concat-all\
    \ acc)) \"Yes\" \"No\")]\n          [(is-good? (concat-all acc)) (loop (rest lst)\
    \ (cons (first lst) acc))]\n          [else (loop (rest lst) (cons (first lst)\
    \ acc))])))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper (rest\
    \ lst)))]\n      [(equal? (first lst) \")\") (sub1 (match-parens-helper (rest\
    \ lst)))]))\n  (cond\n    [(equal? (match-parens-helper (first lst)) 0) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\
    \ ((null? lst1) (null? lst2))\n          ((null? lst2) (null? lst1))\n       \
    \   ((and (equal? (car lst1) \"(\") (equal? (car lst2) \")\")) (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((and (equal? (car lst1) \")\") (equal? (car\
    \ lst2) \"(\")) (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and\
    \ (equal? (car lst1) \"(\") (equal? (car lst2) \"(\")) (or (match-parens-helper\
    \ (cdr lst1) lst2) (match-parens-helper lst1 (cdr lst2))))\n          ((and (equal?\
    \ (car lst1) \")\") (equal? (car lst2) \")\")) (or (match-parens-helper (cdr lst1)\
    \ lst2) (match-parens-helper lst1 (cdr lst2))))\n          (else #f)))\n  (if\
    \ (match-parens-helper (string->list (car lst)) (string->list (cadr lst)))\n \
    \     \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty?\
    \ lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) ?\\()\n\
    \       (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n      [(char=?\
    \ (first lst1) ?\\))\n       (if (empty? lst2) \"No\"\n           (match-parens-helper\
    \ (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list (first lst))\
    \ (string->list (second lst))))\n", "  (define (is-good? s)\n    (let loop ([s\
    \ s] [acc 0])\n      (cond\n        [(empty? s) (= acc 0)]\n        [(char=? (first\
    \ s) #\\() (loop (rest s) (+ acc 1))]\n        [(char=? (first s) #\\)) (loop\
    \ (rest s) (- acc 1))])))\n  (define (concat-and-check s1 s2)\n    (cond\n   \
    \   [(is-good? (string-append s1 s2)) \"Yes\"]\n      [(is-good? (string-append\
    \ s2 s1)) \"Yes\"]\n      [else \"No\"]))\n  (concat-and-check (first lst) (second\
    \ lst)))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"\
    Yes\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \")\"))\n     (match_parens\
    \ (cddr lst))]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst) \"(\"))\n\
    \     (match_parens (cddr lst))]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond ((and (null? lst1) (null? lst2)) \"Yes\")\n          ((and\
    \ (null? lst1) (not (null? lst2))) \"No\")\n          ((and (not (null? lst1))\
    \ (null? lst2)) \"No\")\n          ((and (not (null? lst1)) (not (null? lst2)))\n\
    \           (cond ((equal? (car lst1) \"(\")\n                  (match-parens-helper\
    \ (cdr lst1) (cons (car lst1) lst2)))\n                 ((equal? (car lst1) \"\
    )\")\n                  (cond ((null? lst2) \"No\")\n                        ((equal?\
    \ (car lst2) \"(\")\n                         (match-parens-helper (cdr lst1)\
    \ (cdr lst2)))\n                        (else \"No\")))\n                 (else\
    \ \"No\")))))\n  (match-parens-helper (string->list (car lst)) '()))\n", "  (let\
    \ ((s1 (car lst))\n        (s2 (cadr lst)))\n    (cond ((and (string=? s1 \"\"\
    ) (string=? s2 \"\")) \"Yes\")\n          ((and (string=? s1 \"\") (not (string=?\
    \ s2 \"\"))) \"No\")\n          ((and (not (string=? s1 \"\")) (string=? s2 \"\
    \")) \"No\")\n          ((and (not (string=? s1 \"\")) (not (string=? s2 \"\"\
    )))\n           (let ((c1 (string-ref s1 0))\n                 (c2 (string-ref\
    \ s2 0)))\n             (cond ((and (char=? c1 #\\() (char=? c2 #\\()))\n    \
    \                (match_parens (list (substring s1 1) (substring s2 1))))\n  \
    \                 ((and (char=? c1 #\\() (char=? c2 #\\)))\n                 \
    \   (match_parens (list (substring s1 1) (substring s2 1))))\n               \
    \    ((and (char=? c1 #\\)) (char=? c2 #\\()))\n                   ((and (char=?\
    \ c1 #\\)) (char=? c2 #\\)))\n                   (else \"No\")))))))\n", "  (define\
    \ (is-good? s)\n    (define (helper s n)\n      (cond\n        [(empty? s) (=\
    \ n 0)]\n        [(char=? (first s) #\\() (helper (rest s) (+ n 1))]\n       \
    \ [(char=? (first s) #\\)) (and (not (zero? n)) (helper (rest s) (- n 1)))]))\n\
    \    (helper s 0))\n  (define (helper lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(is-good? (first lst)) #t]\n      [else (helper (rest lst))]))\n  (if\
    \ (helper lst) \"Yes\" \"No\"))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\
    \n           \"No\")]\n      [(char=? (first lst1) #\\()\n       (match-parens-helper\
    \ (rest lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) #\\))\n\
    \       (if (empty? lst2)\n           \"No\"\n           (match-parens-helper\
    \ (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list (first lst))\
    \ (string->list (second lst))))\n", "  (define (match-parens-helper lst)\n   \
    \ (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (sub1 (match-parens-helper\
    \ (rest lst)))]))\n  (cond\n    [(equal? (match-parens-helper (first lst)) 0)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\
    \n           \"No\")]\n      [(empty? lst2)\n       (if (empty? lst1)\n      \
    \     \"Yes\"\n           \"No\")]\n      [(char=? (first lst1) ?\\()\n      \
    \ (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n      [(char=?\
    \ (first lst1) ?\\))\n       (if (char=? (first lst2) ?\\()\n           (match-parens-helper\
    \ (rest lst1) (rest lst2))\n           \"No\")]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond ((null? lst) 0)\n          ((equal? (car lst) \"(\") (add1 (match-parens-helper\
    \ (cdr lst))))\n          ((equal? (car lst) \")\") (sub1 (match-parens-helper\
    \ (cdr lst))))))\n  (if (equal? (match-parens-helper (car lst)) (match-parens-helper\
    \ (cadr lst)))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \")\"))\
    \ \"No\"]\n    [(and (equal? (first lst) \"(\") (equal? (second lst) \")\")) \"\
    Yes\"]\n    [(and (equal? (first lst) \"(\") (equal? (second lst) \"(\")) \"Yes\"\
    ]\n    [(and (equal? (first lst) \")\") (equal? (second lst) \"(\")) \"Yes\"]))\n",
  "  (define (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (add1 (match-parens-helper (rest lst)))]\n      [(equal?\
    \ (first lst) \")\") (sub1 (match-parens-helper (rest lst)))]))\n  (if (equal?\
    \ (match-parens-helper (append (first lst) (second lst))) 0)\n      \"Yes\"\n\
    \      \"No\"))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (car lst))\
    \ (match_parens (cdr lst))]\n    [(empty? (cdr lst)) (match_parens (list (car\
    \ lst) \"\"))]\n    [(equal? (car (car lst)) \")\")\n     (if (equal? (car (cdr\
    \ lst)) \"(\")\n         (match_parens (list (substring (car lst) 1) (substring\
    \ (cadr lst) 1)))\n         (match_parens (list (substring (car lst) 1) (cdr lst))))]\n\
    \    [(equal? (car (cdr lst)) \"(\")\n     (if (equal? (car (car lst)) \")\")\n\
    \         (match_parens (list (substring (car lst) 1) (substring (cadr lst) 1)))\n\
    \         (match_parens (list (car lst) (substring (cadr lst) 1))))]\n    [else\
    \ (match_parens (list (substring (car lst) 1) (substring (cadr lst) 1)))])\n \
    \ )\n", "  (let ([s1 (car lst)]\n        [s2 (cadr lst)])\n    (if (and (string=?\
    \ s1 \"\") (string=? s2 \"\"))\n        \"Yes\"\n        (if (string=? s1 \"\"\
    )\n            (if (string=? (substring s2 0 1) \"(\")\n                (match_parens\
    \ (list s1 (substring s2 1)))\n                (match_parens (list (substring\
    \ s2 1) \"\")))\n            (if (string=? (substring s1 0 1) \"(\")\n       \
    \         (match_parens (list (substring s1 1) s2))\n                (match_parens\
    \ (list \"\" (substring s2 1))))))))\n", "  (define (match-parens-helper lst1\
    \ lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n         \
    \  \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n       (if (empty? lst1)\n\
    \           \"Yes\"\n           \"No\")]\n      [(char=? (first lst1) ?\\()\n\
    \       (match-parens-helper (rest lst1) lst2)]\n      [(char=? (first lst1) ?\\\
    ))\n       (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first\
    \ lst2) ?\\()\n       (match-parens-helper lst1 (rest lst2))]\n      [(char=?\
    \ (first lst2) ?\\))\n       (match-parens-helper lst1 (rest lst2))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (helper\
    \ str)\n    (cond\n      [(empty? str) #t]\n      [(string=? (first str) \"(\"\
    ) (helper (rest str))]\n      [(string=? (first str) \")\") (and (not (empty?\
    \ (rest str))) (helper (rest str)))]))\n  (define (concat-str str1 str2)\n   \
    \ (string-append str1 str2))\n  (define (concat-lst lst)\n    (cond\n      [(empty?\
    \ lst) \"\"]\n      [(empty? (rest lst)) (first lst)]\n      [else (concat-str\
    \ (first lst) (concat-lst (rest lst)))]))\n  (define (permutations lst)\n    (cond\n\
    \      [(empty? lst) (list '())]\n      [else (for/list ([e (in-list lst)]\n \
    \                      [p (in-list (permutations (remove e lst)))])\n        \
    \      (cons e p))]))\n  (define (check-permutations lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(helper (concat-lst (first lst))) #t]\n      [else (check-permutations\
    \ (rest lst))]))\n  (cond\n    [(check-permutations (permutations lst)) \"Yes\"\
    ]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1)\n       (cond\n         [(empty? lst2) \"Yes\"]\n      \
    \   [else \"No\"])]\n      [(empty? lst2)\n       (cond\n         [(empty? lst1)\
    \ \"Yes\"]\n         [else \"No\"])]\n      [(char=? (first lst1) ?\\()\n    \
    \   (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first lst2)\
    \ ?\\()\n       (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=?\
    \ (first lst1) ?\\))\n       (match-parens-helper (rest lst1) (rest lst2))]\n\
    \      [(char=? (first lst2) ?\\))\n       (match-parens-helper (rest lst1) (rest\
    \ lst2))]\n      [else \"No\"]))\n  (match-parens-helper (string->list (first\
    \ lst)) (string->list (second lst))))\n", "  (define (is-good? s)\n    (let loop\
    \ ([s s] [n 0])\n      (cond [(empty? s) (zero? n)]\n            [(char=? (first\
    \ s) #\\() (loop (rest s) (+ n 1))]\n            [(char=? (first s) #\\)) (loop\
    \ (rest s) (- n 1))]\n            [else (error 'is-good? \"bad character\" (first\
    \ s))])))\n  (define (is-good-pair? s1 s2)\n    (and (is-good? s1) (is-good? s2)\
    \ (is-good? (string-append s1 s2))))\n  (cond [(is-good-pair? (first lst) (second\
    \ lst)) \"Yes\"]\n        [(is-good-pair? (second lst) (first lst)) \"Yes\"]\n\
    \        [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\n        \
    \   \"No\")]\n      [(empty? lst2)\n       (if (empty? lst1)\n           \"Yes\"\
    \n           \"No\")]\n      [(char=? (first lst1) ?\\()\n       (match-parens-helper\
    \ (rest lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) ?\\))\n\
    \       (if (empty? lst2)\n           \"No\"\n           (match-parens-helper\
    \ (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list (first lst))\
    \ (string->list (second lst))))\n", "  (define (helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2)\
    \ (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) ?\\() (helper\
    \ (rest lst1) (cons (first lst2) lst2))]\n      [(char=? (first lst1) ?\\)) (if\
    \ (empty? lst2) \"No\" (helper (rest lst1) (rest lst2)))]))\n  (helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (if (equal? (match-parens-helper (first\
    \ lst)) (match-parens-helper (second lst)))\n      \"Yes\"\n      \"No\"))\n",
  "  (cond [(empty? lst) \"Yes\"]\n        [(empty? (first lst)) (match_parens (rest\
    \ lst))]\n        [(empty? (second lst)) (match_parens (list (first lst) (rest\
    \ (rest lst))))]\n        [(char=? (first (first lst)) (first (second lst)))\n\
    \         (match_parens (list (rest (first lst)) (rest (second lst))))]\n    \
    \    [else \"No\"]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr\
    \ lst)) \"Yes\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \")\"\
    )) (match_parens (cddr lst))]\n    [(and (equal? (car lst) \")\") (equal? (cadr\
    \ lst) \"(\")) (match_parens (cddr lst))]\n    [else \"No\"]))\n", "  (define\
    \ (balanced? str)\n    (define (helper str count)\n      (cond\n        [(empty?\
    \ str) (= count 0)]\n        [(char=? (first str) #\\() (helper (rest str) (+\
    \ count 1))]\n        [(char=? (first str) #\\)) (helper (rest str) (- count 1))]))\n\
    \    (helper str 0))\n  (define (concat-balanced? str1 str2)\n    (define (helper\
    \ str1 str2 count)\n      (cond\n        [(empty? str1) (balanced? str2)]\n  \
    \      [(char=? (first str1) #\\() (helper (rest str1) str2 (+ count 1))]\n  \
    \      [(char=? (first str1) #\\)) (helper (rest str1) str2 (- count 1))]))\n\
    \    (helper str1 str2 0))\n  (cond\n    [(empty? lst) \"Yes\"]\n    [(concat-balanced?\
    \ (first lst) (second lst)) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond ((null? lst1) (null? lst2))\n          ((null? lst2) (null?\
    \ lst1))\n          ((and (equal? (car lst1) \"(\") (equal? (car lst2) \")\"))\n\
    \           (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and (equal?\
    \ (car lst1) \")\") (equal? (car lst2) \"(\"))\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((and (equal? (car lst1) \"(\") (equal? (car\
    \ lst2) \"(\"))\n           (or (match-parens-helper (cdr lst1) lst2)\n      \
    \         (match-parens-helper lst1 (cdr lst2))))\n          ((and (equal? (car\
    \ lst1) \")\") (equal? (car lst2) \")\"))\n           (or (match-parens-helper\
    \ (cdr lst1) lst2)\n               (match-parens-helper lst1 (cdr lst2))))))\n\
    \  (if (match-parens-helper (string->list (car lst)) (string->list (cadr lst)))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n           \"Yes\"\
    \n           \"No\")]\n      [(char=? (first lst1) #\\()\n       (match-parens-helper\
    \ (rest lst1) (cons (first lst1) lst2))]\n      [(char=? (first lst1) #\\))\n\
    \       (if (empty? lst2)\n           \"No\"\n           (match-parens-helper\
    \ (rest lst1) (rest lst2)))]))\n  (match-parens-helper (string->list (first lst))\
    \ '()))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(= (first lst) #\\() (add1 (match-parens-helper (rest lst)))]\n \
    \     [(= (first lst) #\\)) (sub1 (match-parens-helper (rest lst)))]))\n  (define\
    \ (check-parens lst)\n    (cond\n      [(empty? lst) #t]\n      [(= (first lst)\
    \ #\\() (check-parens (rest lst))]\n      [(= (first lst) #\\)) (check-parens\
    \ (rest lst))]\n      [else #f]))\n  (define (check-parens-helper lst)\n    (cond\n\
    \      [(empty? lst) #t]\n      [(= (first lst) #\\() (check-parens-helper (rest\
    \ lst))]\n      [(= (first lst) #\\)) (check-parens-helper (rest lst))]\n    \
    \  [else #f]))\n  (define (check-parens-helper2 lst)\n    (cond\n      [(empty?\
    \ lst) #t]\n      [(= (first lst) #\\() (check-parens-helper2 (rest lst))]\n \
    \     [(= (first lst) #\\)) (check-parens-helper2 (rest lst))]\n      [else #f]))\n\
    \  (cond\n    [(and (check-parens (first lst)) (check-parens (second lst)))\n\
    \     (cond\n       [(= (match-parens-helper (first lst)) (match-parens-helper\
    \ (second lst))) \"Yes\"]\n       [else \"No\"])]\n    [else \"No\"]))\n", " \
    \ (define (is-good? str)\n    (let loop ([s (string->list str)] [cnt 0])\n   \
    \   (cond [(empty? s) (zero? cnt)]\n            [(char=? (first s) #\\() (loop\
    \ (rest s) (+ cnt 1))]\n            [(char=? (first s) #\\)) (loop (rest s) (-\
    \ cnt 1))]\n            [else #f])))\n  (define (concat-and-check str1 str2)\n\
    \    (cond [(is-good? (string-append str1 str2)) \"Yes\"]\n          [(is-good?\
    \ (string-append str2 str1)) \"Yes\"]\n          [else \"No\"]))\n  (concat-and-check\
    \ (first lst) (second lst)))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n           'Yes\n\
    \           'No)]\n      [(empty? lst2)\n       (if (empty? lst1)\n          \
    \ 'Yes\n           'No)]\n      [(and (equal? (first lst1) '())\n            (equal?\
    \ (first lst2) '()))\n       (match-parens-helper (rest lst1) (rest lst2))]\n\
    \      [(and (equal? (first lst1) '())\n            (equal? (first lst2) '()))\n\
    \       (match-parens-helper (rest lst1) (rest lst2))]\n      [(and (equal? (first\
    \ lst1) '())\n            (equal? (first lst2) '()))\n       (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(and (equal? (first lst1) '())\n         \
    \   (equal? (first lst2) '()))\n       (match-parens-helper (rest lst1) (rest\
    \ lst2))]\n      [(and (equal? (first lst1) '())\n            (equal? (first lst2)\
    \ '()))\n       (match-parens-helper (rest lst1) (rest lst2))]\n      [(and (equal?\
    \ (first lst1) '())\n            (equal? (first lst2) '()))\n       (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(and (equal? (first lst1) '())\n         \
    \   (equal? (first lst2) '()))\n       (match-parens-helper (rest lst1) (rest\
    \ lst2))]\n      [(and (equal? (first lst1) '())\n            (equal? (first lst2)\
    \ '()))\n       (match-parens-helper (rest lst1) (rest lst2))]\n      [(and (equal?\
    \ (first lst1) '())", "  (define (match-parens-helper lst1 lst2)\n    (cond ((and\
    \ (null? lst1) (null? lst2)) #t)\n          ((and (null? lst1) (not (null? lst2)))\
    \ #f)\n          ((and (not (null? lst1)) (null? lst2)) #f)\n          ((and (equal?\
    \ (car lst1) \"(\") (equal? (car lst2) \")\"))\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((and (equal? (car lst1) \"(\") (not (equal?\
    \ (car lst2) \")\")))\n           (or (match-parens-helper (cdr lst1) lst2)\n\
    \               (match-parens-helper lst1 (cdr lst2))))\n          ((and (not\
    \ (equal? (car lst1) \"(\")) (equal? (car lst2) \")\"))\n           (or (match-parens-helper\
    \ (cdr lst1) lst2)\n               (match-parens-helper lst1 (cdr lst2))))\n \
    \         ((and (not (equal? (car lst1) \"(\")) (not (equal? (car lst2) \")\"\
    )))\n           (or (match-parens-helper (cdr lst1) lst2)\n               (match-parens-helper\
    \ lst1 (cdr lst2))))))\n  (cond ((match-parens-helper (car lst) (cadr lst)) \"\
    Yes\")\n        (else \"No\")))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond ((and (null? lst1) (null? lst2)) \"Yes\")\n          ((and (null? lst1)\
    \ (not (null? lst2))) \"No\")\n          ((and (not (null? lst1)) (null? lst2))\
    \ \"No\")\n          ((and (not (null? lst1)) (not (null? lst2)))\n          \
    \ (cond ((equal? (car lst1) \"(\")\n                  (match-parens-helper (cdr\
    \ lst1) (cdr lst2)))\n                 ((equal? (car lst1) \")\")\n          \
    \        (match-parens-helper (cdr lst1) (cons (car lst2) (cdr lst2))))\n    \
    \             (else \"No\")))))\n  (match-parens-helper (string->list (car lst))\
    \ (string->list (cadr lst))))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(string=?\
    \ (car lst) \")\") \"No\"]\n    [else (match_parens (cdr lst))]))\n", "  (define\
    \ (match-parens-helper lst1 lst2)\n    (cond ((null? lst1) (if (null? lst2) \"\
    Yes\" \"No\"))\n          ((null? lst2) (if (null? lst1) \"Yes\" \"No\"))\n  \
    \        ((and (equal? (car lst1) \"(\") (equal? (car lst2) \")\"))\n        \
    \   (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and (equal? (car\
    \ lst1) \")\") (equal? (car lst2) \"(\"))\n           (match-parens-helper (cdr\
    \ lst1) (cdr lst2)))\n          ((and (equal? (car lst1) \"(\") (equal? (car lst2)\
    \ \"(\"))\n           (match-parens-helper (cdr lst1) lst2))\n          ((and\
    \ (equal? (car lst1) \")\") (equal? (car lst2) \")\"))\n           (match-parens-helper\
    \ (cdr lst1) lst2))\n          (else \"No\")))\n  (match-parens-helper (car lst)\
    \ (cadr lst)))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst))\
    \ \"Yes\"]\n    [(empty? (car lst)) (match_parens (cdr lst))]\n    [(empty? (cadr\
    \ lst)) (match_parens (cons (car lst) (cddr lst)))]\n    [(string=? (string-append\
    \ (car lst) (cadr lst)) \"()\")\n     (match_parens (cons (string-append (car\
    \ lst) (cadr lst)) (cddr lst)))]\n    [else (match_parens (cons (string-append\
    \ (car lst) (cadr lst)) (cddr lst)))]))\n", "  (define (match-parens-helper lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (add1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (sub1 (match-parens-helper\
    \ (rest lst)))]))\n  (cond\n    [(equal? (match-parens-helper (first lst)) 0)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n\
    \    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty?\
    \ lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) #\\()\
    \ (match-parens-helper (rest lst1) lst2)]\n      [(char=? (first lst1) #\\)) (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(char=? (first lst2) #\\() (match-parens-helper\
    \ lst1 (rest lst2))]\n      [(char=? (first lst2) #\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (match-parens-helper lst)\n    (cond ((null?\
    \ lst) 0)\n          ((equal? (car lst) \"(\") (+ 1 (match-parens-helper (cdr\
    \ lst))))\n          ((equal? (car lst) \")\") (- 1 (match-parens-helper (cdr\
    \ lst))))))\n  (if (= (match-parens-helper (car lst)) 0)\n      \"Yes\"\n    \
    \  \"No\"))\n", "  (cond [(empty? lst) \"Yes\"]\n        [(empty? (cdr lst)) \"\
    Yes\"]\n        [(string-contains? (car lst) \")\")\n         (cond [(string-contains?\
    \ (cadr lst) \"(\") \"Yes\"]\n               [else \"No\"])]\n        [else (cond\
    \ [(string-contains? (cadr lst) \")\") \"Yes\"]\n                    [else \"\
    No\"])]))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(not (equal? (car lst)\
    \ (cadr lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(null? lst1) (if (null? lst2) \"Yes\" \"No\")]\n\
    \      [(null? lst2) (if (null? lst1) \"Yes\" \"No\")]\n      [(char=? (car lst1)\
    \ ?\\() (match-parens-helper (cdr lst1) lst2)]\n      [(char=? (car lst1) ?\\\
    )) (match-parens-helper (cdr lst1) (cdr lst2))]\n      [(char=? (car lst2) ?\\\
    () (match-parens-helper lst1 (cdr lst2))]\n      [(char=? (car lst2) ?\\)) (match-parens-helper\
    \ (cdr lst1) (cdr lst2))]))\n  (match-parens-helper (string->list (car lst)) (string->list\
    \ (cadr lst))))\n", "  (define (match-parens-helper lst)\n    (cond ((null? lst)\
    \ 0)\n          ((equal? (car lst) \"(\") (+ 1 (match-parens-helper (cdr lst))))\n\
    \          ((equal? (car lst) \")\") (- 1 (match-parens-helper (cdr lst))))))\n\
    \  (if (equal? (match-parens-helper (car lst)) (match-parens-helper (cadr lst)))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper lst)\n    (cond\n\
    \      [(empty? lst) #t]\n      [(equal? (first lst) \"(\") (match-parens-helper\
    \ (rest lst))]\n      [(equal? (first lst) \")\") (match-parens-helper (rest lst))]\n\
    \      [else #f]))\n  (if (match-parens-helper (append (first lst) (second lst)))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper lst)\n    (cond\n\
    \      [(null? lst) 0]\n      [(string=? (car lst) \"(\") (+ 1 (match-parens-helper\
    \ (cdr lst)))]\n      [(string=? (car lst) \")\") (- 1 (match-parens-helper (cdr\
    \ lst)))]))\n  (if (= (match-parens-helper (car lst)) (match-parens-helper (cadr\
    \ lst)))\n      \"Yes\"\n      \"No\"))\n", "  (define (match-parens-helper lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest\
    \ lst)))]))\n  (cond\n    [(< (match-parens-helper (first lst)) 0) \"No\"]\n \
    \   [(> (match-parens-helper (first lst)) 0) \"No\"]\n    [(= (match-parens-helper\
    \ (first lst)) 0)\n     (cond\n       [(< (match-parens-helper (rest lst)) 0)\
    \ \"No\"]\n       [(> (match-parens-helper (rest lst)) 0) \"No\"]\n       [(=\
    \ (match-parens-helper (rest lst)) 0) \"Yes\"])]))\n  )", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n    \
    \       \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n       (if (empty?\
    \ lst1)\n           \"Yes\"\n           \"No\")]\n      [(char=? (first lst1)\
    \ #\\()\n       (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n\
    \      [(char=? (first lst1) #\\))\n       (if (empty? lst2)\n           \"No\"\
    \n           (match-parens-helper (rest lst1) (rest lst2)))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(empty? str2) str1]\n\
    \      [(char=? (first str1) ?\\() (match-parens-helper (rest str1) (cons (first\
    \ str1) str2))]\n      [(char=? (first str1) ?\\)) (if (empty? str2) #f (match-parens-helper\
    \ (rest str1) (rest str2)))]))\n  (if (match-parens-helper (first lst) (list))\
    \ \"Yes\" \"No\"))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond ((null?\
    \ lst1) (if (null? lst2) \"Yes\" \"No\"))\n          ((null? lst2) (if (null?\
    \ lst1) \"Yes\" \"No\"))\n          ((and (equal? (car lst1) \"(\") (equal? (car\
    \ lst2) \")\")) (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and\
    \ (equal? (car lst1) \"(\") (equal? (car lst2) \"(\")) (match-parens-helper (cdr\
    \ lst1) lst2))\n          ((and (equal? (car lst1) \")\") (equal? (car lst2) \"\
    )\")) (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and (equal? (car\
    \ lst1) \")\") (equal? (car lst2) \"(\")) (match-parens-helper (cdr lst1) lst2))\n\
    \          (else \"No\")))\n  (match-parens-helper (string->list (car lst)) (string->list\
    \ (cadr lst))))\n", "  (define (helper lst1 lst2)\n    (cond\n      [(empty? lst1)\
    \ (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if (empty? lst1) \"\
    Yes\" \"No\")]\n      [(char=? (first lst1) #\\() (helper (rest lst1) (cons (first\
    \ lst1) lst2))]\n      [(char=? (first lst1) #\\)) (if (empty? lst2) \"No\" (helper\
    \ (rest lst1) (rest lst2)))]\n      [(char=? (first lst2) #\\() (helper (cons\
    \ (first lst2) lst1) (rest lst2))]\n      [(char=? (first lst2) #\\)) (if (empty?\
    \ lst1) \"No\" (helper (rest lst1) (rest lst2)))]))\n  (helper (string->list (first\
    \ lst)) (string->list (second lst))))\n", "  (define (match-parens-helper lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper\
    \ (rest lst)))]\n      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest\
    \ lst)))]))\n  (cond\n    [(> (match-parens-helper (first lst)) 0) \"Yes\"]\n\
    \    [(< (match-parens-helper (first lst)) 0) \"No\"]\n    [(= (match-parens-helper\
    \ (first lst)) 0)\n     (cond\n       [(> (match-parens-helper (rest lst)) 0)\
    \ \"Yes\"]\n       [(< (match-parens-helper (rest lst)) 0) \"No\"]\n       [(=\
    \ (match-parens-helper (rest lst)) 0) \"Yes\"])]))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (cond\n    [(> (match-parens-helper\
    \ (first lst)) 0) \"Yes\"]\n    [(< (match-parens-helper (first lst)) 0) \"No\"\
    ]\n    [(= (match-parens-helper (first lst)) 0)\n     (cond\n       [(> (match-parens-helper\
    \ (rest lst)) 0) \"Yes\"]\n       [(< (match-parens-helper (rest lst)) 0) \"No\"\
    ]\n       [(= (match-parens-helper (rest lst)) 0) \"Yes\"])]))\n", "  (define\
    \ (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (cond\n\
    \         [(empty? lst2) 'Yes]\n         [else (match-parens-helper lst1 (rest\
    \ lst2))])]\n      [(empty? lst2)\n       (cond\n         [(empty? lst1) 'Yes]\n\
    \         [else (match-parens-helper (rest lst1) lst2)])]\n      [(char=? (first\
    \ lst1) (first lst2))\n       (cond\n         [(empty? (rest lst1)) (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n         [(empty? (rest lst2)) (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n         [else (match-parens-helper (rest lst1) (rest\
    \ lst2))])]\n      [else (cond\n              [(empty? (rest lst1)) (match-parens-helper\
    \ (rest lst1) lst2)]\n              [(empty? (rest lst2)) (match-parens-helper\
    \ lst1 (rest lst2))]\n              [else (match-parens-helper (rest lst1) (rest\
    \ lst2))])]))\n  (match-parens-helper (first lst) (second lst)))\n", "  (cond\n\
    \    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(string-contains?\
    \ (car lst) \")\") \"No\"]\n    [(string-contains? (cadr lst) \"(\") \"No\"]\n\
    \    [else (match_parens (cdr lst))]))\n", "  (define (match-parens-helper lst1\
    \ lst2)\n    (cond ((null? lst1) (null? lst2))\n          ((null? lst2) (null?\
    \ lst1))\n          ((and (equal? (car lst1) \"(\") (equal? (car lst2) \")\"))\n\
    \           (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and (equal?\
    \ (car lst1) \")\") (equal? (car lst2) \"(\"))\n           (match-parens-helper\
    \ (cdr lst1) (cdr lst2)))\n          ((and (equal? (car lst1) \"(\") (equal? (car\
    \ lst2) \"(\"))\n           (or (match-parens-helper (cdr lst1) lst2)\n      \
    \         (match-parens-helper lst1 (cdr lst2))))\n          ((and (equal? (car\
    \ lst1) \")\") (equal? (car lst2) \")\"))\n           (or (match-parens-helper\
    \ (cdr lst1) lst2)\n               (match-parens-helper lst1 (cdr lst2))))))\n\
    \  (if (match-parens-helper (car lst) (cadr lst))\n      \"Yes\"\n      \"No\"\
    ))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n\
    \      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n \
    \     [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n\
    \  (cond\n    [(> (match-parens-helper (first lst)) 0) \"Yes\"]\n    [(> (match-parens-helper\
    \ (second lst)) 0) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n    \
    \       'Yes\n           'No)]\n      [(empty? lst2)\n       (if (empty? lst1)\n\
    \           'Yes\n           'No)]\n      [(char=? (first lst1) (first lst2))\n\
    \       (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first\
    \ lst1) #\\()\n       (match-parens-helper (rest lst1) lst2)]\n      [(char=?\
    \ (first lst2) #\\()\n       (match-parens-helper lst1 (rest lst2))]\n      [else\n\
    \       'No]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr\
    \ lst)) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst) \")\"\
    )) \"No\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \")\")) (match_parens\
    \ (cdr lst))]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \"(\")) (match_parens\
    \ (cons (string-append (car lst) (cadr lst)) (cddr lst)))]\n    [(and (equal?\
    \ (car lst) \")\") (equal? (cadr lst) \"(\")) (match_parens (cons (string-append\
    \ (car lst) (cadr lst)) (cddr lst)))]))\n", "  (cond\n    [(empty? lst) \"Yes\"\
    ]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal?\
    \ (cadr lst) \")\")) \"No\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr\
    \ lst) \")\")) \"Yes\"]\n    [(and (equal? (car lst) \"(\") (equal? (cadr lst)\
    \ \"(\")) \"Yes\"]\n    [(and (equal? (car lst) \")\") (equal? (cadr lst) \"(\"\
    )) \"Yes\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n    \
    \  [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\")]\n      [(empty? lst2) (if\
    \ (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first lst1) ?\\() (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst1) ?\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]\n      [(char=? (first lst2) ?\\() (match-parens-helper\
    \ lst1 (rest lst2))]\n      [(char=? (first lst2) ?\\)) (match-parens-helper (rest\
    \ lst1) (rest lst2))]))\n  (match-parens-helper (string->list (first lst)) (string->list\
    \ (second lst))))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(null? lst1) (if (null? lst2) \"Yes\" \"No\")]\n      [(null? lst2) (if\
    \ (null? lst1) \"Yes\" \"No\")]\n      [(equal? (car lst1) (car lst2)) (match-parens-helper\
    \ (cdr lst1) (cdr lst2))]\n      [(equal? (car lst1) \")\") (match-parens-helper\
    \ (cdr lst1) lst2)]\n      [(equal? (car lst2) \"(\") (match-parens-helper lst1\
    \ (cdr lst2))]\n      [else \"No\"]))\n  (match-parens-helper (car lst) (cdr lst)))\n",
  "  (cond\n    [(empty? lst) \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(or\
    \ (string=? (car lst) \")\") (string=? (cadr lst) \"(\")) \"No\"]\n    [else (match_parens\
    \ (cdr lst))]))\n", "  (define (match-parens-helper lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(equal? (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n\
    \      [(equal? (first lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n\
    \  (cond\n    [(>= (match-parens-helper (first lst)) 0) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty?\
    \ lst1)\n       (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n \
    \     [(empty? lst2)\n       (if (empty? lst1)\n           \"Yes\"\n         \
    \  \"No\")]\n      [(char=? (first lst1) (first lst2))\n       (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [(char=? (first lst1) #\\()\n       (match-parens-helper\
    \ (rest lst1) lst2)]\n      [(char=? (first lst2) #\\()\n       (match-parens-helper\
    \ lst1 (rest lst2))]\n      [else\n       \"No\"]))\n  (match-parens-helper (string->list\
    \ (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (if (empty? lst2)\n    \
    \       \"Yes\"\n           \"No\")]\n      [(empty? lst2)\n       (if (empty?\
    \ lst1)\n           \"Yes\"\n           \"No\")]\n      [(char=? (first lst1)\
    \ ?\\()\n       (match-parens-helper (rest lst1) (cons (first lst1) lst2))]\n\
    \      [(char=? (first lst1) ?\\))\n       (if (empty? lst2)\n           \"No\"\
    \n           (match-parens-helper (rest lst1) (rest lst2)))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1) (if (empty? lst2) \"Yes\" \"No\"\
    )]\n      [(empty? lst2) (if (empty? lst1) \"Yes\" \"No\")]\n      [(char=? (first\
    \ lst1) ?\\() (match-parens-helper (rest lst1) lst2)]\n      [(char=? (first lst1)\
    \ ?\\)) (match-parens-helper (rest lst1) (rest lst2))]\n      [(char=? (first\
    \ lst2) ?\\() (match-parens-helper lst1 (rest lst2))]\n      [(char=? (first lst2)\
    \ ?\\)) (match-parens-helper (rest lst1) (rest lst2))]))\n  (match-parens-helper\
    \ (string->list (first lst)) (string->list (second lst))))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) #t]\n      [(equal? (first lst) \"(\")\
    \ (match-parens-helper (rest lst))]\n      [(equal? (first lst) \")\") (match-parens-helper\
    \ (rest lst))]\n      [else #f]))\n  (cond\n    [(match-parens-helper (append\
    \ (first lst) (second lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (define (match-parens-helper\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal? (first lst) \"(\") (+\
    \ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first lst) \")\") (- 1\
    \ (match-parens-helper (rest lst)))]))\n  (cond\n    [(equal? (match-parens-helper\
    \ (first lst)) (match-parens-helper (rest lst))) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (add1 (match-parens-helper (rest lst)))]\n      [(equal?\
    \ (first lst) \")\") (sub1 (match-parens-helper (rest lst)))]))\n  (cond\n   \
    \ [(equal? (match-parens-helper (first lst)) 0) \"Yes\"]\n    [else \"No\"]))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond\n      [(empty? lst1)\n  \
    \     (if (empty? lst2)\n           \"Yes\"\n           \"No\")]\n      [(char=?\
    \ (first lst1) #\\()\n       (match-parens-helper (rest lst1) (cons (first lst1)\
    \ lst2))]\n      [(char=? (first lst1) #\\))\n       (if (empty? lst2)\n     \
    \      \"No\"\n           (match-parens-helper (rest lst1) (rest lst2)))]))\n\
    \  (match-parens-helper (string->list (first lst)) (string->list (second lst))))\n",
  "  (define (match-parens-helper lst1 lst2)\n    (cond ((null? lst1) (if (null? lst2)\
    \ \"Yes\" \"No\"))\n          ((null? lst2) (if (null? lst1) \"Yes\" \"No\"))\n\
    \          ((and (equal? (car lst1) \"(\") (equal? (car lst2) \")\"))\n      \
    \     (match-parens-helper (cdr lst1) (cdr lst2)))\n          ((and (equal? (car\
    \ lst1) \")\") (equal? (car lst2) \"(\"))\n           (match-parens-helper (cdr\
    \ lst1) (cdr lst2)))\n          ((and (equal? (car lst1) \"(\") (equal? (car lst2)\
    \ \"(\"))\n           (or (match-parens-helper (cdr lst1) lst2)\n            \
    \   (match-parens-helper lst1 (cdr lst2))))\n          ((and (equal? (car lst1)\
    \ \")\") (equal? (car lst2) \")\"))\n           (or (match-parens-helper (cdr\
    \ lst1) lst2)\n               (match-parens-helper lst1 (cdr lst2))))\n      \
    \    (else \"No\")))\n  (match-parens-helper (car lst) (cadr lst)))\n", "  (define\
    \ (match-parens-helper lst)\n    (cond\n      [(empty? lst) 0]\n      [(equal?\
    \ (first lst) \"(\") (+ 1 (match-parens-helper (rest lst)))]\n      [(equal? (first\
    \ lst) \")\") (- 1 (match-parens-helper (rest lst)))]))\n  (cond\n    [(< (match-parens-helper\
    \ (first lst)) 0) \"No\"]\n    [(> (match-parens-helper (first lst)) 0) \"No\"\
    ]\n    [(< (match-parens-helper (rest lst)) 0) \"No\"]\n    [(> (match-parens-helper\
    \ (rest lst)) 0) \"No\"]\n    [else \"Yes\"]))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(empty? (cdr lst)) \"Yes\"]\n    [(empty? (car lst)) (match_parens\
    \ (cdr lst))]\n    [(empty? (cadr lst)) (match_parens (cons (car lst) (cddr lst)))]\n\
    \    [(and (equal? (car lst) \"(\") (equal? (cadr lst) \")\")) (match_parens (cddr\
    \ lst))]\n    [else (match_parens (cons (car lst) (cddr lst)))]))\n", "  (define\
    \ (match-parens-helper lst1 lst2)\n    (cond ((null? lst1) (if (null? lst2) \"\
    Yes\" \"No\"))\n          ((null? lst2) (if (null? lst1) \"Yes\" \"No\"))\n  \
    \        ((char=? (car lst1) #\\()\n           (if (char=? (car lst2) #\\()\n\
    \               (match-parens-helper (cdr lst1) (cdr lst2))\n               (match-parens-helper\
    \ (cdr lst1) lst2)))\n          ((char=? (car lst1) #\\))\n           (if (char=?\
    \ (car lst2) #\\))\n               (match-parens-helper (cdr lst1) (cdr lst2))\n\
    \               (match-parens-helper lst1 (cdr lst2))))))\n  (match-parens-helper\
    \ (string->list (car lst)) (string->list (cadr lst))))\n", "  (define (match-parens-helper\
    \ lst1 lst2)\n    (cond\n      [(empty? lst1)\n       (cond\n         [(empty?\
    \ lst2)\n          \"Yes\"]\n         [else\n          (match-parens-helper lst2\
    \ lst1)])]\n      [(empty? lst2)\n       (cond\n         [(empty? lst1)\n    \
    \      \"Yes\"]\n         [else\n          (match-parens-helper lst2 lst1)])]\n\
    \      [(char=? (first lst1) (first lst2))\n       (match-parens-helper (rest\
    \ lst1) (rest lst2))]\n      [(char=? (first lst1) (first (reverse lst2)))\n \
    \      (match-parens-helper (rest lst1) (reverse (rest (reverse lst2))))]\n  \
    \    [else\n       \"No\"]))\n  (match-parens-helper (string->list (first lst))\
    \ (string->list (second lst))))\n", "  (cond\n    [(empty? lst) \"Yes\"]\n   \
    \ [(and (string=? (car lst) \")\") (string=? (cadr lst) \")\")) \"No\"]\n    [(string=?\
    \ (car lst) \")\") (match_parens (cdr lst))]\n    [(string=? (cadr lst) \")\"\
    ) (match_parens (cons (car lst) (cddr lst)))]\n    [else (match_parens (cons (car\
    \ lst) (cddr lst)))]))\n", "  (define (match-parens-helper lst1 lst2)\n    (cond\n\
    \      [(empty? lst1) (match-parens-helper lst2 (reverse lst2))]\n      [(empty?\
    \ lst2) \"Yes\"]\n      [(eq? (first lst1) (first lst2)) (match-parens-helper\
    \ (rest lst1) (rest lst2))]\n      [else \"No\"]))\n  (match-parens-helper (first\
    \ lst) (second lst)))\n", "  (define (helper lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(equal? (first lst) \"(\") (+ 1 (helper (rest lst)))]\n      [(equal?\
    \ (first lst) \")\") (- 1 (helper (rest lst)))]))\n  (cond\n    [(> (helper (first\
    \ lst)) 0) \"Yes\"]\n    [(< (helper (first lst)) 0) \"No\"]\n    [(= (helper\
    \ (first lst)) 0) (cond\n                                 [(> (helper (rest lst))\
    \ 0) \"Yes\"]\n                                 [(< (helper (rest lst)) 0) \"\
    No\"]\n                                 [(= (helper (rest lst)) 0) \"Yes\"])]))\n",
  "  (define (check-parens str)\n    (cond\n      [(empty? str) #t]\n      [(equal?\
    \ (first str) '(') (check-parens (rest str))]\n      [(equal? (first str) ')')\n\
    \       (cond\n         [(empty? (rest str)) #f]\n         [else (check-parens\
    \ (rest str))])]))\n  (cond\n    [(and (check-parens (first lst)) (check-parens\
    \ (second lst))) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(empty? lst)\
    \ \"Yes\"]\n    [(empty? (first lst)) (match_parens (rest lst))]\n    [(empty?\
    \ (second lst)) (match_parens (list (first lst) (rest (rest lst))))]\n    [(and\
    \ (equal? (first (first lst)) #\\() (equal? (first (second lst)) #\\)))\n    \
    \ (match_parens (list (rest (first lst)) (rest (second lst))))]\n    [(and (equal?\
    \ (first (first lst)) #\\)) (equal? (first (second lst)) #\\())]\n    [else \"\
    No\"]))\n", "  (define (is-good? str)\n    (let loop ([str str] [count 0])\n \
    \     (cond\n        [(empty? str) (= count 0)]\n        [(char=? (first str)\
    \ #\\() (loop (rest str) (+ count 1))]\n        [(char=? (first str) #\\)) (loop\
    \ (rest str) (- count 1))])))\n  (define (is-good-concat? str1 str2)\n    (and\
    \ (is-good? str1) (is-good? str2) (is-good? (string-append str1 str2))))\n  (cond\n\
    \    [(is-good-concat? (first lst) (second lst)) \"Yes\"]\n    [(is-good-concat?\
    \ (second lst) (first lst)) \"Yes\"]\n    [else \"No\"]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
