name: HumanEval_115_max_fill
language: rkt
prompt: "#lang racket\n\n;; You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n;; and each 1 in a row represents a single unit of water.\n;;\
  \ Each well has a corresponding bucket that can be used to extract water from it,\
  \ \n;; and all buckets have the same capacity.\n;; Your task is to use the buckets\
  \ to empty the wells.\n;; Output the number of times you need to lower the buckets.\n\
  ;; Example 1:\n;; >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1\
  \ 1)) 1)\n;; 6\n;; Example 2:\n;; >>> (max_fill (list (list 0 0 1 1) (list 0 0 0\
  \ 0) (list 1 1 1 1) (list 0 1 1 1)) 2)\n;; 5\n;; Example 3:\n;; >>> (max_fill (list\
  \ (list 0 0 0) (list 0 0 0)) 5)\n;; 0\n;; Constraints:\n;; * all wells have the\
  \ same length\n;; * 1 <= grid.length <= 10^2\n;; * 1 <= grid[:,1].length <= 10^2\n\
  ;; * grid[i][j] -> 0 | 1\n;; * 1 <= capacity <= 10\n(define (max_fill grid capacity)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n\
  \    (check-equal? (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1))\
  \ 1) 6)\n    (check-equal? (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list\
  \ 1 1 1 1) (list 0 1 1 1)) 2) 5)\n    (check-equal? (candidate (list (list 0 0 0)\
  \ (list 0 0 0)) 5) 0)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1\
  \ 1 1 1)) 2) 4)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1))\
  \ 9) 2)\n))\n\n(test-humaneval)"
completions: ["  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n\
    \      [else (+ (max_fill-helper (rest grid) capacity)\n               (min capacity\
    \ (first (first grid))))]))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n        (let*\
    \ ([row (car grid)]\n               [row-sum (apply + row)]\n               [row-len\
    \ (length row)]\n               [row-max (apply max row)]\n               [row-min\
    \ (apply min row)]\n               [row-max-count (count row-max row)]\n     \
    \          [row-min-count (count row-min row)]\n               [row-max-count-sum\
    \ (apply + row-max-count)]\n               [row-min-count-sum (apply + row-min-count)]\n\
    \               [row-max-count-sum-div (quotient row-max-count-sum capacity)]\n\
    \               [row-min-count-sum-div (quotient row-min-count-sum capacity)]\n\
    \               [row-max-count-sum-mod (modulo row-max-count-sum capacity)]\n\
    \               [row-min-count-sum-mod (modulo row-min-count-sum capacity)]\n\
    \               [row-max-count-sum-mod-div (quotient row-max-count-sum-mod capacity)]\n\
    \               [row-min-count-sum-mod-div (quotient row-min-count-sum-mod capacity)]\n\
    \               [row-max-count-sum-mod-div-sum (apply + row-max-count-sum-mod-div)]\n\
    \               [row-min-count-sum-mod-div-sum (apply + row-min-count-sum-mod-div)]\n\
    \               [row-max-count-sum-mod-div-sum-div (quotient row-max-count-sum-mod-div-sum\
    \ capacity)]\n               [row-min-count-sum-mod-div-sum-div (quotient row-min-count-sum-mod-div-sum\
    \ capacity)]\n               [row-max-count-sum-mod-div-sum-div-sum (apply + row-max-count-sum-mod-div-sum-div)]\n\
    \               [row-min-count-sum-mod-div-sum-div-sum (apply + row-min-count-sum-mod-",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\
    \ (+ capacity (max_fill_helper (rest grid) capacity))]))\n  (max_fill_helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n     \
    \ [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n      \
    \           (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (define (max-row-sum row)\n      (apply + row))\n    (define\
    \ (max-col-sum grid)\n      (apply max (map (lambda (col) (apply + col)) (transpose\
    \ grid))))\n    (define (transpose grid)\n      (apply map list grid))\n    (define\
    \ (fill-row row capacity)\n      (define (fill-row-helper row capacity)\n    \
    \    (cond ((null? row) 0)\n              ((= capacity 0) 0)\n              ((=\
    \ (car row) 0) (fill-row-helper (cdr row) capacity))\n              ((= capacity\
    \ 1) (add1 (fill-row-helper (cdr row) capacity)))\n              (else (add1 (fill-row-helper\
    \ (cdr row) (sub1 capacity))))))\n      (fill-row-helper row capacity))\n    (define\
    \ (fill-col grid capacity)\n      (define (fill-col-helper grid capacity)\n  \
    \      (cond ((null? grid) 0)\n              ((= capacity 0) 0)\n            \
    \  ((= (car (car grid)) 0) (fill-col-helper (cdr grid) capacity))\n          \
    \    ((= capacity 1) (add1 (fill-col-helper (cdr grid) capacity)))\n         \
    \     (else (add1 (fill-col-helper (cdr grid) (sub1 capacity))))))\n      (fill-col-helper\
    \ grid capacity))\n    (define (fill-grid grid capacity)\n      (define (fill-grid-helper\
    \ grid capacity)\n        (cond ((null? grid) 0)\n              ((= capacity 0)\
    \ 0)\n              ((= capacity 1) (add1 (fill-grid-helper (cdr grid) capacity)))\n\
    \              (else (add1 (fill-grid-helper (cdr grid) (sub1 capacity))))))\n\
    \      (fill-grid-helper grid capacity))\n    (define (fill-row-col grid capacity)\n\
    \      (define (fill-row-col-helper grid capacity)\n        (cond ((null? grid)\
    \ 0)\n              ((= capacity 0) 0)\n              ((= capacity 1) (add1 (",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner grid\
    \ capacity)\n      (if (null? grid)\n          0\n          (let* ([row (car grid)]\n\
    \                 [row-max (apply max row)]\n                 [row-min (apply\
    \ min row)]\n                 [row-diff (- row-max row-min)])\n            (if\
    \ (> row-diff capacity)\n                (+ row-diff (max-fill-helper-inner (cdr\
    \ grid) capacity))\n                (max-fill-helper-inner (cdr grid) capacity)))))\n\
    \    (max-fill-helper-inner (reverse grid) capacity))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n     \
    \ [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n      \
    \           (max-fill-helper (rest grid) (- capacity (first (first grid)))))])\n\
    \    )\n  (max-fill-helper grid capacity)\n  )\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (let* ([row (first\
    \ grid)]\n              [row-max (apply max row)]\n              [row-min (apply\
    \ min row)]\n              [row-diff (- row-max row-min)])\n         (if (> row-diff\
    \ capacity)\n             (+ row-diff (max-fill-helper (rest grid) capacity))\n\
    \             (max-fill-helper (rest grid) capacity)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity (count-ones (first grid))) (add1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (max-fill-helper (rest grid) (sub1 capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n      [else (+ capacity (max_fill-helper (rest grid)\
    \ capacity))]))\n  (max_fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity row)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity (+ row 1))]\n          [(= capacity 0)\
    \ (max_fill-helper (rest grid) capacity (+ row 1))]\n          [else (+ (max_fill-helper\
    \ (rest grid) capacity (+ row 1))\n                   (max_fill-helper (rest grid)\
    \ (- capacity (first (first grid))) (+ row 1)))]))\n  (max_fill-helper grid capacity\
    \ 0))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \      [else\n       (define (fill-row row capacity)\n         (cond\n       \
    \    [(empty? row) capacity]\n           [(zero? (first row)) (fill-row (rest\
    \ row) capacity)]\n           [else\n            (define (fill-cell cell capacity)\n\
    \              (cond\n                [(zero? capacity) cell]\n              \
    \  [else (fill-cell (sub1 cell) (sub1 capacity))]))\n            (fill-cell (first\
    \ row) capacity)]))\n       (add1 (max-fill-helper (rest grid) (fill-row (first\
    \ grid) capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [next-row (cdr grid)]\n               [row-sum (apply + row)]\n\
    \               [next-row-sum (apply + next-row)]\n               [row-max (apply\
    \ max row)]\n               [next-row-max (apply max next-row)])\n          (if\
    \ (> row-max next-row-max)\n              (+ row-sum (max_fill-helper next-row\
    \ capacity))\n              (+ (max_fill-helper (map (lambda (x) (- x capacity))\
    \ row) capacity)\n                 (max_fill-helper next-row capacity))))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-row-sum row)\n    (apply\
    \ max (map sum (split row capacity))))\n  (apply + (map max-row-sum grid)))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\n\
    \       (let ([row (first grid)]\n             [row-rest (rest grid)]\n      \
    \       [row-first (first row)]\n             [row-rest (rest row)])\n       \
    \  (cond\n           [(zero? row-first) (max_fill-helper (cons row-rest row-rest)\
    \ capacity)]\n           [(zero? capacity) (max_fill-helper (cons row-rest row-rest)\
    \ capacity)]\n           [else\n            (let ([row-rest (cons (sub1 capacity)\
    \ row-rest)])\n              (+ 1 (max_fill-helper (cons row-rest row-rest) capacity)))]))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(zero? (first (first grid))) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n\
    \                     (+ capacity (max-fill-helper (rest grid) capacity)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (if (null? grid)\n\
    \          0\n          (let* ([row (car grid)]\n                 [row-length\
    \ (length row)]\n                 [row-sum (apply + row)]\n                 [row-max\
    \ (apply max row)]\n                 [row-max-count (count row-max row)]\n   \
    \              [row-max-count-sum (apply + row-max-count)]\n                 [row-max-count-sum-divided-by-capacity\
    \ (quotient row-max-count-sum capacity)]\n                 [row-max-count-sum-modulo-capacity\
    \ (remainder row-max-count-sum capacity)])\n            (if (zero? row-max-count-sum-modulo-capacity)\n\
    \                (+ row-max-count-sum-divided-by-capacity (max-fill-helper-helper\
    \ (cdr grid) capacity))\n                (+ row-max-count-sum-divided-by-capacity\
    \ 1 (max-fill-helper-helper (cdr grid) capacity))))))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [row-len (length row)]\n               [row-sum (apply + row)]\n\
    \               [row-max (apply max row)]\n               [row-min (apply min\
    \ row)]\n               [row-fill (if (> row-sum capacity)\n                 \
    \            capacity\n                             row-sum)])\n          (+ row-fill\
    \ (max_fill-helper (cdr grid) capacity)))))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill-helper (rest grid) capacity)\n                 (max_fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (+\
    \ 1 (max_fill-helper (rest grid) capacity)))]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\n\
    \       (let* ([row (first grid)]\n              [col (first row)]\n         \
    \     [rest-row (rest row)]\n              [rest-grid (rest grid)]\n         \
    \     [rest-grid-filled (max_fill_helper rest-grid capacity)])\n         (cond\n\
    \           [(= col 1)\n            (+ 1 (max rest-grid-filled (max_fill_helper\
    \ (cons rest-row rest-grid) capacity)))]\n           [else\n            (max_fill_helper\
    \ (cons rest-row rest-grid) capacity)]))]))\n  (max_fill_helper grid capacity))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
