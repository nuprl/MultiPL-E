name: HumanEval_115_max_fill
language: rkt
prompt: "#lang racket\n\n;; You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n;; and each 1 in a row represents a single unit of water.\n;;\
  \ Each well has a corresponding bucket that can be used to extract water from it,\
  \ \n;; and all buckets have the same capacity.\n;; Your task is to use the buckets\
  \ to empty the wells.\n;; Output the number of times you need to lower the buckets.\n\
  ;; Example 1:\n;; >>> (max_fill (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1\
  \ 1)) 1)\n;; 6\n;; Example 2:\n;; >>> (max_fill (list (list 0 0 1 1) (list 0 0 0\
  \ 0) (list 1 1 1 1) (list 0 1 1 1)) 2)\n;; 5\n;; Example 3:\n;; >>> (max_fill (list\
  \ (list 0 0 0) (list 0 0 0)) 5)\n;; 0\n;; Constraints:\n;; * all wells have the\
  \ same length\n;; * 1 <= grid.length <= 10^2\n;; * 1 <= grid[:,1].length <= 10^2\n\
  ;; * grid[i][j] -> 0 | 1\n;; * 1 <= capacity <= 10\n(define (max_fill grid capacity)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_fill))\n\
  \    (check-equal? (candidate (list (list 0 0 1 0) (list 0 1 0 0) (list 1 1 1 1))\
  \ 1) 6)\n    (check-equal? (candidate (list (list 0 0 1 1) (list 0 0 0 0) (list\
  \ 1 1 1 1) (list 0 1 1 1)) 2) 5)\n    (check-equal? (candidate (list (list 0 0 0)\
  \ (list 0 0 0)) 5) 0)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1\
  \ 1 1 1)) 2) 4)\n    (check-equal? (candidate (list (list 1 1 1 1) (list 1 1 1 1))\
  \ 9) 2)\n))\n\n(test-humaneval)"
completions: ["  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n\
    \      [else (+ (max_fill-helper (rest grid) capacity)\n               (min capacity\
    \ (first (first grid))))]))\n  (max_fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n        (let*\
    \ ([row (car grid)]\n               [row-sum (apply + row)]\n               [row-len\
    \ (length row)]\n               [row-max (apply max row)]\n               [row-min\
    \ (apply min row)]\n               [row-max-count (count row-max row)]\n     \
    \          [row-min-count (count row-min row)]\n               [row-max-count-sum\
    \ (apply + row-max-count)]\n               [row-min-count-sum (apply + row-min-count)]\n\
    \               [row-max-count-sum-div (quotient row-max-count-sum capacity)]\n\
    \               [row-min-count-sum-div (quotient row-min-count-sum capacity)]\n\
    \               [row-max-count-sum-mod (modulo row-max-count-sum capacity)]\n\
    \               [row-min-count-sum-mod (modulo row-min-count-sum capacity)]\n\
    \               [row-max-count-sum-mod-div (quotient row-max-count-sum-mod capacity)]\n\
    \               [row-min-count-sum-mod-div (quotient row-min-count-sum-mod capacity)]\n\
    \               [row-max-count-sum-mod-div-sum (apply + row-max-count-sum-mod-div)]\n\
    \               [row-min-count-sum-mod-div-sum (apply + row-min-count-sum-mod-div)]\n\
    \               [row-max-count-sum-mod-div-sum-div (quotient row-max-count-sum-mod-div-sum\
    \ capacity)]\n               [row-min-count-sum-mod-div-sum-div (quotient row-min-count-sum-mod-div-sum\
    \ capacity)]\n               [row-max-count-sum-mod-div-sum-div-sum (apply + row-max-count-sum-mod-div-sum-div)]\n\
    \               [row-min-count-sum-mod-div-sum-div-sum (apply + row-min-count-sum-mod-",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\
    \ (+ capacity (max_fill_helper (rest grid) capacity))]))\n  (max_fill_helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n     \
    \ [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n      \
    \           (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (define (max-row-sum row)\n      (apply + row))\n    (define\
    \ (max-col-sum grid)\n      (apply max (map (lambda (col) (apply + col)) (transpose\
    \ grid))))\n    (define (transpose grid)\n      (apply map list grid))\n    (define\
    \ (fill-row row capacity)\n      (define (fill-row-helper row capacity)\n    \
    \    (cond ((null? row) 0)\n              ((= capacity 0) 0)\n              ((=\
    \ (car row) 0) (fill-row-helper (cdr row) capacity))\n              ((= capacity\
    \ 1) (add1 (fill-row-helper (cdr row) capacity)))\n              (else (add1 (fill-row-helper\
    \ (cdr row) (sub1 capacity))))))\n      (fill-row-helper row capacity))\n    (define\
    \ (fill-col grid capacity)\n      (define (fill-col-helper grid capacity)\n  \
    \      (cond ((null? grid) 0)\n              ((= capacity 0) 0)\n            \
    \  ((= (car (car grid)) 0) (fill-col-helper (cdr grid) capacity))\n          \
    \    ((= capacity 1) (add1 (fill-col-helper (cdr grid) capacity)))\n         \
    \     (else (add1 (fill-col-helper (cdr grid) (sub1 capacity))))))\n      (fill-col-helper\
    \ grid capacity))\n    (define (fill-grid grid capacity)\n      (define (fill-grid-helper\
    \ grid capacity)\n        (cond ((null? grid) 0)\n              ((= capacity 0)\
    \ 0)\n              ((= capacity 1) (add1 (fill-grid-helper (cdr grid) capacity)))\n\
    \              (else (add1 (fill-grid-helper (cdr grid) (sub1 capacity))))))\n\
    \      (fill-grid-helper grid capacity))\n    (define (fill-row-col grid capacity)\n\
    \      (define (fill-row-col-helper grid capacity)\n        (cond ((null? grid)\
    \ 0)\n              ((= capacity 0) 0)\n              ((= capacity 1) (add1 (",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner grid\
    \ capacity)\n      (if (null? grid)\n          0\n          (let* ([row (car grid)]\n\
    \                 [row-max (apply max row)]\n                 [row-min (apply\
    \ min row)]\n                 [row-diff (- row-max row-min)])\n            (if\
    \ (> row-diff capacity)\n                (+ row-diff (max-fill-helper-inner (cdr\
    \ grid) capacity))\n                (max-fill-helper-inner (cdr grid) capacity)))))\n\
    \    (max-fill-helper-inner (reverse grid) capacity))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n     \
    \ [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n      \
    \           (max-fill-helper (rest grid) (- capacity (first (first grid)))))])\n\
    \    )\n  (max-fill-helper grid capacity)\n  )\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (let* ([row (first\
    \ grid)]\n              [row-max (apply max row)]\n              [row-min (apply\
    \ min row)]\n              [row-diff (- row-max row-min)])\n         (if (> row-diff\
    \ capacity)\n             (+ row-diff (max-fill-helper (rest grid) capacity))\n\
    \             (max-fill-helper (rest grid) capacity)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity (count-ones (first grid))) (add1 (max-fill-helper (rest\
    \ grid) capacity))]\n          [else (max-fill-helper (rest grid) (sub1 capacity))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n      [else (+ capacity (max_fill-helper (rest grid)\
    \ capacity))]))\n  (max_fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity row)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity (+ row 1))]\n          [(= capacity 0)\
    \ (max_fill-helper (rest grid) capacity (+ row 1))]\n          [else (+ (max_fill-helper\
    \ (rest grid) capacity (+ row 1))\n                   (max_fill-helper (rest grid)\
    \ (- capacity (first (first grid))) (+ row 1)))]))\n  (max_fill-helper grid capacity\
    \ 0))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \      [else\n       (define (fill-row row capacity)\n         (cond\n       \
    \    [(empty? row) capacity]\n           [(zero? (first row)) (fill-row (rest\
    \ row) capacity)]\n           [else\n            (define (fill-cell cell capacity)\n\
    \              (cond\n                [(zero? capacity) cell]\n              \
    \  [else (fill-cell (sub1 cell) (sub1 capacity))]))\n            (fill-cell (first\
    \ row) capacity)]))\n       (add1 (max-fill-helper (rest grid) (fill-row (first\
    \ grid) capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [next-row (cdr grid)]\n               [row-sum (apply + row)]\n\
    \               [next-row-sum (apply + next-row)]\n               [row-max (apply\
    \ max row)]\n               [next-row-max (apply max next-row)])\n          (if\
    \ (> row-max next-row-max)\n              (+ row-sum (max_fill-helper next-row\
    \ capacity))\n              (+ (max_fill-helper (map (lambda (x) (- x capacity))\
    \ row) capacity)\n                 (max_fill-helper next-row capacity))))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-row-sum row)\n    (apply\
    \ max (map sum (split row capacity))))\n  (apply + (map max-row-sum grid)))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\n\
    \       (let ([row (first grid)]\n             [row-rest (rest grid)]\n      \
    \       [row-first (first row)]\n             [row-rest (rest row)])\n       \
    \  (cond\n           [(zero? row-first) (max_fill-helper (cons row-rest row-rest)\
    \ capacity)]\n           [(zero? capacity) (max_fill-helper (cons row-rest row-rest)\
    \ capacity)]\n           [else\n            (let ([row-rest (cons (sub1 capacity)\
    \ row-rest)])\n              (+ 1 (max_fill-helper (cons row-rest row-rest) capacity)))]))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(zero? (first (first grid))) (max-fill-helper\
    \ (rest grid) capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n\
    \                     (+ capacity (max-fill-helper (rest grid) capacity)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-helper grid capacity)\n      (if (null? grid)\n\
    \          0\n          (let* ([row (car grid)]\n                 [row-length\
    \ (length row)]\n                 [row-sum (apply + row)]\n                 [row-max\
    \ (apply max row)]\n                 [row-max-count (count row-max row)]\n   \
    \              [row-max-count-sum (apply + row-max-count)]\n                 [row-max-count-sum-divided-by-capacity\
    \ (quotient row-max-count-sum capacity)]\n                 [row-max-count-sum-modulo-capacity\
    \ (remainder row-max-count-sum capacity)])\n            (if (zero? row-max-count-sum-modulo-capacity)\n\
    \                (+ row-max-count-sum-divided-by-capacity (max-fill-helper-helper\
    \ (cdr grid) capacity))\n                (+ row-max-count-sum-divided-by-capacity\
    \ 1 (max-fill-helper-helper (cdr grid) capacity))))))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [row-len (length row)]\n               [row-sum (apply + row)]\n\
    \               [row-max (apply max row)]\n               [row-min (apply min\
    \ row)]\n               [row-fill (if (> row-sum capacity)\n                 \
    \            capacity\n                             row-sum)])\n          (+ row-fill\
    \ (max_fill-helper (cdr grid) capacity)))))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill-helper (rest grid) capacity)\n                 (max_fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (+\
    \ 1 (max_fill-helper (rest grid) capacity)))]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n      [else\n\
    \       (let* ([row (first grid)]\n              [col (first row)]\n         \
    \     [rest-row (rest row)]\n              [rest-grid (rest grid)]\n         \
    \     [rest-grid-filled (max_fill_helper rest-grid capacity)])\n         (cond\n\
    \           [(= col 1)\n            (+ 1 (max rest-grid-filled (max_fill_helper\
    \ (cons rest-row rest-grid) capacity)))]\n           [else\n            (max_fill_helper\
    \ (cons rest-row rest-grid) capacity)]))]))\n  (max_fill_helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper-helper (rest grid) capacity)]\n        [(= capacity\
    \ 0) (max-fill-helper-helper (rest grid) capacity)]\n        [(= (first (first\
    \ grid)) 0) (max-fill-helper-helper (rest grid) capacity)]\n        [else (+ 1\
    \ (max-fill-helper-helper (rest grid) (- capacity 1)))]))\n    (max-fill-helper-helper\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill_helper\
    \ grid capacity)\n    (define (max_fill_helper_helper grid capacity)\n      (define\
    \ (max_fill_helper_helper_helper grid capacity)\n        (define (max_fill_helper_helper_helper_helper\
    \ grid capacity)\n          (define (max_fill_helper_helper_helper_helper_helper\
    \ grid capacity)\n            (define (max_fill_helper_helper_helper_helper_helper_helper\
    \ grid capacity)\n              (define (max_fill_helper_helper_helper_helper_helper_helper_helper\
    \ grid capacity)\n                (define (max_fill_helper_helper_helper_helper_helper_helper_helper_helper\
    \ grid capacity)\n                  (define (max_fill_helper_helper_helper_helper_helper_helper_helper_helper_helper\
    \ grid capacity)\n                    (define (max_fill_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper\
    \ grid capacity)\n                      (define (max_fill_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper\
    \ grid capacity)\n                        (define (max_fill_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper\
    \ grid capacity)\n                          (define (max_fill_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper\
    \ grid capacity)\n                            (define (max_fill_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper\
    \ grid capacity)\n                              (define (max_fill_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_hel",
  "  (define (max_fill-helper grid capacity)\n    (define (max-row-sum grid)\n   \
    \   (apply max (map sum grid)))\n    (define (fill-row row capacity)\n      (define\
    \ (fill-row-helper row capacity)\n        (cond ((null? row) 0)\n            \
    \  ((= (car row) 0) (fill-row-helper (cdr row) capacity))\n              ((= capacity\
    \ 0) (fill-row-helper (cdr row) capacity))\n              (else (add1 (fill-row-helper\
    \ (cdr row) (sub1 capacity))))))\n      (fill-row-helper row capacity))\n    (cond\
    \ ((= (max-row-sum grid) 0) 0)\n          (else (add1 (max-fill-helper (map (lambda\
    \ (row) (map (lambda (x) (if (= x 1) (sub1 x) x)) row)) grid) capacity)))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (define (max-fill-helper-helper\
    \ grid capacity)\n         (cond\n           [(empty? grid) 0]\n           [(empty?\
    \ (first grid)) (max-fill-helper-helper (rest grid) capacity)]\n           [else\n\
    \            (define (max-fill-helper-helper-helper grid capacity)\n         \
    \     (cond\n                [(empty? grid) 0]\n                [(empty? (first\
    \ grid)) (max-fill-helper-helper-helper (rest grid) capacity)]\n             \
    \   [else\n                 (define (max-fill-helper-helper-helper-helper grid\
    \ capacity)\n                   (cond\n                     [(empty? grid) 0]\n\
    \                     [(empty? (first grid)) (max-fill-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                     [else\n                      (define\
    \ (max-fill-helper-helper-helper-helper-helper grid capacity)\n              \
    \          (cond\n                          [(empty? grid) 0]\n              \
    \            [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                          [else\n                  \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \                             (cond\n                               [(empty? grid)\
    \ 0]\n                               [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                               [else\n             \
    \                   (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                                  (cond\n                  \
    \                  [(empty? grid) 0]\n                                    [(empty?\
    \ (first grid)) (max-fill-helper-helper-helper-helper-helper-helper-helper (rest\
    \ grid) capacity)]\n                                    [else\n              \
    \  ", "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid)\
    \ 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n \
    \     [else (max (max-fill-helper (rest grid) capacity)\n                 (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))])\n    )\n  (max-fill-helper\
    \ grid capacity)\n  )\n", "  (define (fill-row row)\n    (let loop ([i 0] [j 0]\
    \ [count 0])\n      (cond\n        [(= i (length row)) count]\n        [(= j capacity)\
    \ (loop (+ i 1) 0 count)]\n        [(= (vector-ref row i) 1) (loop i (+ j 1) (+\
    \ count 1))]\n        [else (loop i (+ j 1) count)])))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (fill-row row)\n    (define (fill-wells wells)\n    \
    \  (if (null? wells)\n          0\n          (if (car wells)\n              (if\
    \ (cdr wells)\n                  (+ capacity (fill-wells (cdr wells)))\n     \
    \             capacity)\n              (fill-wells (cdr wells)))))\n    (fill-wells\
    \ row))\n  (define (fill-grid grid)\n    (if (null? grid)\n        0\n       \
    \ (+ (fill-row (car grid)) (fill-grid (cdr grid)))))\n  (fill-grid grid))\n",
  "  (define (max-fill-iter grid capacity)\n    (cond\n      [(empty? grid) 0]\n \
    \     [(empty? (first grid)) (max-fill-iter (rest grid) capacity)]\n      [(=\
    \ capacity 0) (max-fill-iter (rest grid) capacity)]\n      [else\n       (let\
    \ ([new-capacity (- capacity (first (first grid)))])\n         (if (> new-capacity\
    \ 0)\n             (max-fill-iter (rest grid) new-capacity)\n             (max-fill-iter\
    \ (rest grid) capacity)))]))\n  (max-fill-iter grid capacity))\n", "  (define\
    \ (fill-row row)\n    (cond\n      [(empty? row) 0]\n      [(= capacity (length\
    \ row)) capacity]\n      [else (length row)]))\n  (define (fill-grid grid)\n \
    \   (cond\n      [(empty? grid) 0]\n      [else (+ (fill-row (first grid)) (fill-grid\
    \ (rest grid)))]))\n  (fill-grid grid))\n", "  (define (max-wells-in-row row)\n\
    \    (apply max (filter (lambda (x) (not (zero? x))) row)))\n  (define (max-wells-in-grid\
    \ grid)\n    (apply max (map max-wells-in-row grid)))\n  (define (fill-wells-in-row\
    \ row capacity)\n    (define (fill-wells-in-row-helper row capacity)\n      (if\
    \ (null? row)\n          0\n          (if (zero? capacity)\n              0\n\
    \              (+ 1 (fill-wells-in-row-helper (cdr row) (- capacity (car row)))))))\n\
    \    (fill-wells-in-row-helper row capacity))\n  (define (fill-wells-in-grid grid\
    \ capacity)\n    (define (fill-wells-in-grid-helper grid capacity)\n      (if\
    \ (null? grid)\n          0\n          (+ (fill-wells-in-row (car grid) capacity)\n\
    \             (fill-wells-in-grid-helper (cdr grid) capacity))))\n    (fill-wells-in-grid-helper\
    \ grid capacity))\n  (define (fill-wells grid capacity)\n    (define (fill-wells-helper\
    \ grid capacity)\n      (if (zero? capacity)\n          0\n          (+ (fill-wells-in-grid\
    \ grid capacity)\n             (fill-wells-helper grid (- capacity 1)))))\n  \
    \  (fill-wells-helper grid capacity))\n  (fill-wells grid capacity))\n", "  (let\
    \ ([rows (length grid)])\n    (define (max-fill-helper grid capacity row)\n  \
    \    (if (= row rows)\n          0\n          (let ([cols (length (car grid))])\n\
    \            (define (max-fill-helper-helper grid capacity row col)\n        \
    \      (if (= col cols)\n                  0\n                  (let ([water (if\
    \ (and (not (= 0 (list-ref (list-ref grid row) col)))\n                      \
    \                 (not (= 0 (list-ref (list-ref grid (- row 1)) col))))\n    \
    \                              capacity\n                                  0)])\n\
    \                    (+ water\n                       (max-fill-helper-helper\
    \ grid capacity row (+ col 1))))))\n            (+ (max-fill-helper-helper grid\
    \ capacity row 0)\n               (max-fill-helper grid capacity (+ row 1)))))))\n\
    \    (max-fill-helper grid capacity 0)))\n", "  (define (fill-row row)\n    (let\
    \ loop ([i 0] [water 0])\n      (cond\n        [(= i (length row)) water]\n  \
    \      [(= (vector-ref row i) 1) (loop (+ i 1) (+ water capacity))]\n        [else\
    \ (loop (+ i 1) water)])))\n  (let loop ([grid grid] [water 0])\n    (cond\n \
    \     [(empty? grid) water]\n      [else (loop (rest grid) (+ water (fill-row\
    \ (first grid))))])))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty? grid)\
    \ 0]\n        [(empty? (first grid)) (max-fill-helper-helper (rest grid) capacity)]\n\
    \        [(= capacity 0) (max-fill-helper-helper (rest grid) capacity)]\n    \
    \    [(= (first (first grid)) 0) (max-fill-helper-helper (rest grid) capacity)]\n\
    \        [else\n         (define new-capacity (- capacity 1))\n         (define\
    \ new-grid (list (rest (first grid)) (rest grid)))\n         (+ 1 (max-fill-helper-helper\
    \ new-grid new-capacity))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (max 0 (- capacity (first (first\
    \ grid)))))\n                 (+ 1 (max-fill-helper (rest grid) capacity)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (define (max-row-sum grid)\n      (apply max (map sum grid)))\n    (define\
    \ (fill-row row capacity)\n      (define (fill-row-helper row capacity)\n    \
    \    (if (null? row)\n            0\n            (if (and (not (null? row)) (not\
    \ (null? (cdr row))))\n                (if (>= capacity (car row))\n         \
    \           (+ capacity (fill-row-helper (cdr row) (- capacity (car row))))\n\
    \                    (+ (car row) (fill-row-helper (cdr row) 0)))\n          \
    \      (car row))))\n      (fill-row-helper row capacity))\n    (define (fill-grid\
    \ grid capacity)\n      (if (null? grid)\n          0\n          (+ (fill-row\
    \ (car grid) capacity) (fill-grid (cdr grid) capacity))))\n    (fill-grid grid\
    \ capacity))\n  (max-row-sum grid))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max_fill-helper (rest grid)\
    \ capacity)]\n          [(= (first (first grid)) 0) (max_fill-helper (rest grid)\
    \ capacity)]\n          [else (+ 1 (max_fill-helper (rest grid) (- capacity 1)))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-row grid capacity)\n      (define (max-fill-helper-row-helper\
    \ grid capacity)\n        (if (null? grid)\n            0\n            (if (null?\
    \ (cdr grid))\n                (if (car grid)\n                    capacity\n\
    \                    0)\n                (if (car grid)\n                    (if\
    \ (> capacity (car grid))\n                        (max-fill-helper-row-helper\
    \ (cdr grid) (- capacity (car grid)))\n                        (max-fill-helper-row-helper\
    \ (cdr grid) 0))\n                    (max-fill-helper-row-helper (cdr grid) capacity)))))\n\
    \      (max-fill-helper-row-helper grid capacity))\n    (if (null? grid)\n   \
    \     0\n        (+ (max-fill-helper-row (car grid) capacity)\n           (max-fill-helper\
    \ (cdr grid) capacity))))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n          [(= capacity 0) (max_fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 1) (add1 (max_fill-helper (rest\
    \ grid) capacity))]\n          [else (add1 (max_fill-helper (rest grid) (- capacity\
    \ 1)))]))\n  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else\n       (let* ([row (first\
    \ grid)]\n              [col (first row)]\n              [rest-of-row (rest row)]\n\
    \              [rest-of-grid (rest grid)])\n         (cond\n           [(= col\
    \ 0) (max-fill-helper rest-of-grid capacity)]\n           [(= capacity 0) (max-fill-helper\
    \ rest-of-grid capacity)]\n           [else\n            (let* ([new-capacity\
    \ (- capacity 1)]\n                   [new-row (cons 0 rest-of-row)]\n       \
    \            [new-grid (cons new-row rest-of-grid)])\n              (+ 1 (max-fill-helper\
    \ new-grid new-capacity)))]))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n       (define\
    \ (fill-bucket row)\n         (cond\n           [(empty? row) 0]\n           [(zero?\
    \ (first row)) (fill-bucket (rest row))]\n           [else (add1 (fill-bucket\
    \ (rest row)))]))\n       (define (fill-well row)\n         (cond\n          \
    \ [(empty? row) 0]\n           [(zero? (first row)) (fill-well (rest row))]\n\
    \           [else (add1 (fill-well (rest row)))]))\n       (define (fill-bucket-helper\
    \ row)\n         (cond\n           [(empty? row) 0]\n           [(zero? (first\
    \ row)) (fill-bucket-helper (rest row))]\n           [else (add1 (fill-bucket-helper\
    \ (rest row)))]))\n       (define (fill-well-helper row)\n         (cond\n   \
    \        [(empty? row) 0]\n           [(zero? (first row)) (fill-well-helper (rest\
    \ row))]\n           [else (add1 (fill-well-helper (rest row)))]))\n       (define\
    \ (fill-bucket-helper-2 row)\n         (cond\n           [(empty? row) 0]\n  \
    \         [(zero? (first row)) (fill-bucket-helper-2 (rest row))]\n          \
    \ [else (add1 (fill-bucket-helper-2 (rest row)))]))\n       (define (fill-well-helper-2\
    \ row)\n         (cond\n           [(empty? row) 0]\n           [(zero? (first\
    \ row)) (fill-well-helper-2 (rest row))]\n           [else (add1 (fill-well-helper-2\
    \ (rest row)))]))\n       (define (fill-bucket-helper-3 row)\n         (cond\n\
    \           [(empty? row) 0]\n           [(zero? (first row)) (fill-bucket-helper-3\
    \ (rest row))]\n", "  (define (max-fill-helper grid capacity)\n    (cond\n   \
    \   [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n      [else\n       (define (fill-row row capacity)\n         (cond\n\
    \           [(empty? row) capacity]\n           [(zero? (first row)) (fill-row\
    \ (rest row) capacity)]\n           [else (fill-row (rest row) (sub1 capacity))]))\n\
    \       (define (fill-row-helper row capacity)\n         (cond\n           [(zero?\
    \ capacity) 0]\n           [(zero? (first row)) (fill-row-helper (rest row) capacity)]\n\
    \           [else (add1 (fill-row-helper (rest row) (sub1 capacity)))]))\n   \
    \    (add1 (fill-row-helper (first grid) capacity)\n             (max-fill-helper\
    \ (rest grid) (fill-row (first grid) capacity)))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner grid\
    \ capacity)\n      (define (max-fill-helper-inner-inner grid capacity)\n     \
    \   (if (null? grid)\n            0\n            (+ (max-fill-helper-inner-inner\
    \ (cdr grid) capacity)\n               (if (null? (car grid))\n              \
    \     0\n                   (if (>= capacity (car grid))\n                   \
    \    (car grid)\n                       capacity)))))\n      (if (null? grid)\n\
    \          0\n          (+ (max-fill-helper-inner-inner (car grid) capacity)\n\
    \             (max-fill-helper-inner (cdr grid) capacity))))\n    (if (null? grid)\n\
    \        0\n        (+ (max-fill-helper-inner grid capacity)\n           (max-fill-helper\
    \ (map (lambda (row) (map (lambda (x) (- x capacity)) row)) grid) capacity))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (empty-wells grid)\n      (define (empty-wells-helper grid acc)\n\
    \        (cond\n          [(empty? grid) acc]\n          [(empty? (first grid))\
    \ (empty-wells-helper (rest grid) acc)]\n          [else (empty-wells-helper (rest\
    \ grid) (cons (first grid) acc))]))\n      (empty-wells-helper grid '()))\n  \
    \  (define (fill-wells wells capacity)\n      (define (fill-wells-helper wells\
    \ capacity acc)\n        (cond\n          [(empty? wells) acc]\n          [(empty?\
    \ (first wells)) (fill-wells-helper (rest wells) capacity acc)]\n          [(=\
    \ capacity (first wells)) (fill-wells-helper (rest wells) capacity (add1 acc))]\n\
    \          [else (fill-wells-helper (rest wells) capacity (add1 acc))]))\n   \
    \   (fill-wells-helper wells capacity 0))\n    (fill-wells (empty-wells grid)\
    \ capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else (max (max-fill-helper (rest\
    \ grid) capacity)\n                 (max-fill-helper (rest grid) (max 0 (- capacity\
    \ (first (first grid)))))\n                 (+ 1 (max-fill-helper (rest grid)\
    \ capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-inner grid capacity)\n      (cond\n\
    \        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n        [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= capacity (count (first grid) 1)) (add1 (max-fill-helper (rest grid)\
    \ capacity))]\n        [else (add1 (max-fill-helper (rest grid) (sub1 capacity)))]))\n\
    \    (max-fill-helper-inner (reverse grid) capacity))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-iter grid capacity count)\n    (if (empty?\
    \ grid)\n        count\n        (let* ([row (first grid)]\n               [new-grid\
    \ (rest grid)]\n               [new-row (fill-row row capacity)])\n          (max-fill-iter\
    \ new-grid capacity (+ count (count-ones new-row))))))\n  (max-fill-iter grid\
    \ capacity 0))\n", "  (define (max_fill-helper grid capacity count)\n    (if (null?\
    \ grid)\n        count\n        (let* ([row (car grid)]\n               [new-grid\
    \ (cdr grid)]\n               [new-count (+ count (count-ones row capacity))])\n\
    \          (max_fill-helper new-grid capacity new-count))))\n  (max-fill-helper\
    \ grid capacity 0))\n", "  (let loop ([grid grid] [capacity capacity] [count 0])\n\
    \    (cond [(empty? grid) count]\n          [else (loop (map (\u03BB (row) (map\
    \ (\u03BB (x) (if (> x capacity) (- x capacity) 0)) row)) grid) capacity (+ count\
    \ capacity))])))\n", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max_fill_helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [row-sum (apply + row)]\n     \
    \          [row-max (apply max row)]\n               [row-min (apply min row)]\n\
    \               [row-max-index (index-of row-max row)]\n               [row-min-index\
    \ (index-of row-min row)]\n               [row-max-left (take row-max-index row)]\n\
    \               [row-max-right (drop (+ row-max-index 1) row)]\n             \
    \  [row-max-left-sum (apply + row-max-left)]\n               [row-max-right-sum\
    \ (apply + row-max-right)]\n               [row-max-left-max (apply max row-max-left)]\n\
    \               [row-max-right-max (apply max row-max-right)]\n              \
    \ [row-max-left-min (apply min row-max-left)]\n               [row-max-right-min\
    \ (apply min row-max-right)]\n               [row-max-left-max-index (index-of\
    \ row-max-left-max row-max-left)]\n               [row-max-right-max-index (index-of\
    \ row-max-right-max row-max-right)]\n               [row-max-left-min-index (index-of\
    \ row-max-left-min row-max-left)]\n               [row-max-right-min-index (index-of\
    \ row-max-right-min row-max-right)]\n               [row-max-left-max-index-in-row\
    \ (+ row-max-left-max-index row-max-index)]\n               [row-max-right-max-index-in-row\
    \ (+ row-max-right-max-index row-max-index)]\n               [row-max-left-min-index-in-row\
    \ (+ row-max-left-min-index row-max-index)]\n               [row-max-right-min-index-in-row\
    \ (+ row-max-right-min-index row-max-index)]\n               [row-max-left-max-index-",
  "  (let ((wells (map (lambda (row) (apply max row)) grid)))\n    (apply + (map (lambda\
    \ (well) (ceiling (/ well capacity))) wells))))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (fill-row row)\n      (define (fill-row-helper row\
    \ capacity)\n        (if (null? row)\n            capacity\n            (if (equal?\
    \ (car row) 1)\n                (fill-row-helper (cdr row) (- capacity 1))\n \
    \               (fill-row-helper (cdr row) capacity))))\n      (fill-row-helper\
    \ row capacity))\n    (if (null? grid)\n        0\n        (+ (fill-row (car grid))\n\
    \           (max-fill-helper (cdr grid) capacity))))\n  (max-fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n     \
    \ [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid)\
    \ capacity)]\n      [else\n       (let* ([row (first grid)]\n              [rest-grid\
    \ (rest grid)]\n              [first-well (first row)]\n              [rest-row\
    \ (rest row)]\n              [num-of-fills (if (zero? first-well) 0 capacity)])\n\
    \         (+ num-of-fills\n            (max-fill-helper (cons (cons 0 rest-row)\
    \ rest-grid) capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max_fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max_fill-helper (rest grid) capacity)]\n          [(>= capacity\
    \ (first (first grid))) (max_fill-helper (rest grid) capacity)]\n          [else\
    \ (+ capacity (max_fill-helper (rest grid) capacity))]))\n  (max_fill-helper grid\
    \ capacity))\n", "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n\
    \        0\n        (let* ([row (car grid)]\n               [max-fill (apply max\
    \ row)]\n               [num-buckets (ceiling (/ max-fill capacity))])\n     \
    \     (+ num-buckets (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-inner grid capacity)\n      (cond\n        [(empty? grid) 0]\n\
    \        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n    \
    \    [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n        [(= capacity\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n        [(> capacity\
    \ (first grid)) (max-fill-helper (rest grid) (- capacity (first grid)))]\n   \
    \     [else (max-fill-helper (rest grid) capacity)]))\n    (max-fill-helper-inner\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max-fill-helper (rest grid) capacity)]\n      [else (max (max-fill-helper (rest\
    \ grid) capacity)\n                 (max-fill-helper (rest grid) (- capacity (first\
    \ (first grid)))))])\n    )\n  (max-fill-helper grid capacity)\n  )\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner grid capacity)\n\
    \      (cond\n        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= capacity (first (first grid))) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(> capacity (first (first grid))) (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid))))]\n        [else (max-fill-helper\
    \ (rest grid) capacity)]))\n    (max-fill-helper-inner grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-aux grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-sum (apply\
    \ + row)]\n               [row-len (length row)]\n               [row-max (apply\
    \ max row)]\n               [row-min (apply min row)]\n               [row-max-count\
    \ (count row-max row)]\n               [row-min-count (count row-min row)]\n \
    \              [row-max-count-min (min row-max-count capacity)]\n            \
    \   [row-min-count-min (min row-min-count capacity)]\n               [row-max-count-min-max\
    \ (max row-max-count-min 0)]\n               [row-min-count-min-max (max row-min-count-min\
    \ 0)]\n               [row-max-count-min-max-sum (apply + row-max-count-min-max)]\n\
    \               [row-min-count-min-max-sum (apply + row-min-count-min-max)]\n\
    \               [row-max-count-min-max-sum-min (min row-max-count-min-max-sum\
    \ capacity)]\n               [row-min-count-min-max-sum-min (min row-min-count-min-max-sum\
    \ capacity)]\n               [row-max-count-min-max-sum-min-max (max row-max-count-min-max-sum-min\
    \ 0)]\n               [row-min-count-min-max-sum-min-max (max row-min-count-min-max-sum-min\
    \ 0)]\n               [row-max-count-min-max-sum-min-max-sum (apply + row-max-count-min-max-sum-min-max)]\n\
    \               [row-min-count-min-max-sum-min-max-sum (apply + row-min-count-min-max-sum-min-max)]\n\
    \               [row-max-count-min-max-sum-min-max-sum-min (min row-max-count-min-max-sum-min-max-sum\
    \ capacity)]\n               [row-min-count-min-max", "  (define (fill-row row)\n\
    \    (define (fill-wells wells)\n      (cond\n        [(empty? wells) 0]\n   \
    \     [(= (first wells) 1) (add1 (fill-wells (rest wells)))]\n        [else (fill-wells\
    \ (rest wells))]))\n    (define (fill-buckets buckets)\n      (cond\n        [(empty?\
    \ buckets) 0]\n        [(= (first buckets) 1) (add1 (fill-buckets (rest buckets)))]\n\
    \        [else (fill-buckets (rest buckets))]))\n    (add1 (min (fill-wells row)\
    \ (fill-buckets row))))\n  (define (fill-grid grid)\n    (cond\n      [(empty?\
    \ grid) 0]\n      [else (add (fill-row (first grid)) (fill-grid (rest grid)))]))\n\
    \  (define (fill-buckets buckets)\n    (cond\n      [(empty? buckets) 0]\n   \
    \   [(= (first buckets) 1) (add1 (fill-buckets (rest buckets)))]\n      [else\
    \ (fill-buckets (rest buckets))]))\n  (define (fill-wells wells)\n    (cond\n\
    \      [(empty? wells) 0]\n      [(= (first wells) 1) (add1 (fill-wells (rest\
    \ wells)))]\n      [else (fill-wells (rest wells))]))\n  (define (fill-row row)\n\
    \    (add1 (min (fill-wells row) (fill-buckets row))))\n  (define (fill-grid grid)\n\
    \    (cond\n      [(empty? grid) 0]\n      [else (add (fill-row (first grid))\
    \ (fill-grid (rest grid)))]))\n  (define (fill-buckets buckets)\n    (cond\n \
    \     [(empty? buckets) 0]\n      [(= (first buckets) 1) (add1 (fill-buckets (rest\
    \ buckets)))]\n      [else (fill-buckets (rest buckets))]))\n  (define (fill-wells\
    \ wells)\n    (cond\n      [(empty? wells) 0]\n      [(= (first wells) 1) (add1\
    \ (fill-wells (rest wells))", "  (define (max-fill-helper grid capacity)\n   \
    \ (if (null? grid)\n        0\n        (let* ([row (car grid)]\n             \
    \  [num-ones (count-ones row)]\n               [num-zeros (count-zeros row)]\n\
    \               [num-buckets (ceiling (/ num-ones capacity))]\n              \
    \ [num-zeros-to-add (sub1 (* num-buckets capacity))]\n               [new-row\
    \ (add-zeros num-zeros-to-add row)])\n          (+ num-buckets (max-fill-helper\
    \ (cdr grid) capacity)))))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max_fill-helper grid capacity)\n    (if (null? grid)\n        0\n        (let\
    \ ([row (car grid)])\n          (if (null? row)\n              0\n           \
    \   (let ([max-fill (max-fill-helper (cdr grid) capacity)])\n                (if\
    \ (null? (cdr row))\n                    max-fill\n                    (let ([next-fill\
    \ (max-fill-helper (cdr grid) capacity)])\n                      (if (null? (cddr\
    \ row))\n                          (if (car row)\n                           \
    \   (+ max-fill capacity)\n                              max-fill)\n         \
    \                 (if (car row)\n                              (if (cadr row)\n\
    \                                  (+ max-fill capacity)\n                   \
    \               (+ max-fill capacity next-fill))\n                           \
    \   max-fill)))))))))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(empty? (rest grid)) (max-fill-helper (list (rest (first grid))) capacity)]\n\
    \          [else (max (max-fill-helper (list (rest (first grid))) capacity)\n\
    \                     (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(empty? (rest grid)) (max-fill-helper (list (rest (first grid))) capacity)]\n\
    \          [else (max (max-fill-helper (list (rest (first grid))) capacity)\n\
    \                     (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (define (fill-wells wells)\n\
    \      (cond\n        [(empty? wells) 0]\n        [(= (first wells) 0) (fill-wells\
    \ (rest wells))]\n        [else (+ 1 (fill-wells (rest wells)))]))\n    (fill-wells\
    \ row))\n  (define (fill-grid grid)\n    (cond\n      [(empty? grid) 0]\n    \
    \  [else (+ (fill-row (first grid)) (fill-grid (rest grid)))]))\n  (fill-grid\
    \ grid))\n", "  (let ([n (length grid)])\n    (define (max_fill-helper grid capacity)\n\
    \      (if (null? grid)\n          0\n          (let ([row (car grid)])\n    \
    \        (if (null? row)\n                (max_fill-helper (cdr grid) capacity)\n\
    \                (let ([cell (car row)])\n                  (if (zero? cell)\n\
    \                      (max_fill-helper (cons (cdr row) (cdr grid)) capacity)\n\
    \                      (if (> capacity cell)\n                          (max_fill-helper\
    \ (cons (cdr row) (cdr grid)) (- capacity cell))\n                          (max_fill-helper\
    \ (cons (cdr row) (cdr grid)) capacity)))))))))\n    (max_fill-helper grid capacity)))\n",
  "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let* ([row (car grid)]\n               [row-len (length row)]\n      \
    \         [row-sum (apply + row)]\n               [row-max (apply max row)]\n\
    \               [row-min (apply min row)]\n               [row-max-count (count\
    \ row-max row)]\n               [row-min-count (count row-min row)]\n        \
    \       [row-max-count-max (apply max row-max-count)]\n               [row-min-count-max\
    \ (apply max row-min-count)]\n               [row-max-count-min (apply min row-max-count)]\n\
    \               [row-min-count-min (apply min row-min-count)]\n              \
    \ [row-max-count-min-max (apply max row-max-count-min)]\n               [row-min-count-min-max\
    \ (apply max row-min-count-min)]\n               [row-max-count-min-max-max (apply\
    \ max row-max-count-min-max)]\n               [row-min-count-min-max-max (apply\
    \ max row-min-count-min-max)]\n               [row-max-count-min-max-max-max (apply\
    \ max row-max-count-min-max-max)]\n               [row-min-count-min-max-max-max\
    \ (apply max row-min-count-min-max-max)]\n               [row-max-count-min-max-max-max-max\
    \ (apply max row-max-count-min-max-max-max)]\n               [row-min-count-min-max-max-max-max\
    \ (apply max row-min-count-min-max-max-max)]\n               [row-max-count-min-max-max-max-max-max\
    \ (apply max row-max-count-min-max-max-max-max)]\n               [row-min-count-min-max-max-max-max-max\
    \ (apply max row-min-count-min-max-max-max-max)]\n               [row-max-count-min-max-max-max",
  "  (define (max_fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n        \
    \  [(empty? (rest grid)) (max_fill-helper (list (rest (first grid))) capacity)]\n\
    \          [else (max (max_fill-helper (list (rest (first grid))) capacity)\n\
    \                     (max_fill-helper (rest grid) capacity))]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max_fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max_fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max_fill-helper (rest grid) (- capacity 1)))]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else\n       (let* ([row (first grid)]\n          \
    \    [first-well (first row)]\n              [rest-row (rest row)]\n         \
    \     [rest-grid (rest grid)]\n              [rest-fill (max-fill-helper rest-grid\
    \ capacity)])\n         (cond\n           [(zero? first-well) (add1 rest-fill)]\n\
    \           [(zero? capacity) (add1 rest-fill)]\n           [else\n          \
    \  (let* ([rest-row-fill (max-fill-helper (list rest-row) capacity)]\n       \
    \            [rest-grid-fill (max-fill-helper rest-grid (sub1 capacity))])\n \
    \             (add1 (min rest-row-fill rest-grid-fill)))]))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [else (+ (max-fill-helper (rest grid) capacity)\n                   (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (if (empty? grid)\n        0\n \
    \       (let ([row (first grid)])\n          (if (empty? row)\n              0\n\
    \              (let ([col (first row)])\n                (if (zero? col)\n   \
    \                 (max-fill-helper (rest grid) capacity)\n                   \
    \ (let ([next-row (rest grid)])\n                      (if (empty? next-row)\n\
    \                          (max-fill-helper (rest grid) capacity)\n          \
    \                (let ([next-col (first (first next-row))])\n                \
    \            (if (zero? next-col)\n                                (max-fill-helper\
    \ (rest grid) capacity)\n                                (let ([next-capacity\
    \ (- capacity (add1 col))])\n                                  (if (negative?\
    \ next-capacity)\n                                      (max-fill-helper (rest\
    \ grid) capacity)\n                                      (add1 (max-fill-helper\
    \ (rest grid) next-capacity))))))))))))))\n  (max-fill-helper grid capacity))\n",
  "  (define (fill-row row)\n    (let loop ([i 0] [count 0])\n      (cond [(= i (length\
    \ row)) count]\n            [(= (vector-ref row i) 1)\n             (loop (+ i\
    \ capacity) (+ count 1))]\n            [else (loop (+ i 1) count)])))\n  (let\
    \ loop ([i 0] [count 0])\n    (cond [(= i (length grid)) count]\n          [else\
    \ (loop (+ i 1) (+ count (fill-row (vector-ref grid i))))])))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (define (max-row-sum row)\n      (apply + row))\n    (define\
    \ (max-col-sum grid)\n      (apply max (map max-row-sum (transpose grid))))\n\
    \    (define (transpose grid)\n      (apply map list grid))\n    (define (sum-grid\
    \ grid)\n      (apply + (map max-row-sum grid)))\n    (define (fill-grid grid\
    \ capacity)\n      (map (lambda (row)\n             (map (lambda (cell)\n    \
    \                (if (> cell capacity)\n                        capacity\n   \
    \                     cell))\n                  row))\n           grid))\n   \
    \ (define (fill-row row capacity)\n      (map (lambda (cell)\n             (if\
    \ (> cell capacity)\n                 capacity\n                 cell))\n    \
    \       row))\n    (define (fill-col grid capacity)\n      (map (lambda (row)\n\
    \             (fill-row row capacity))\n           grid))\n    (define (fill-grid-helper\
    \ grid capacity)\n      (if (= (sum-grid grid) 0)\n          grid\n          (fill-grid-helper\
    \ (fill-col grid capacity) capacity)))\n    (define (fill-grid-helper-2 grid capacity)\n\
    \      (if (= (sum-grid grid) 0)\n          grid\n          (fill-grid-helper-2\
    \ (fill-grid grid capacity) capacity)))\n    (define (fill-grid-helper-3 grid\
    \ capacity)\n      (if (= (sum-grid grid) 0)\n          grid\n          (fill-grid-helper-3\
    \ (fill-col grid capacity) capacity)))\n    (define (fill-grid-helper-4 grid capacity)\n\
    \      (if (= (sum-grid grid) 0)\n          grid\n          (fill-grid-helper-4\
    \ (fill-grid grid capacity) capacity)))\n    (define (fill-grid-helper-5 grid\
    \ capacity)\n      (if (= (sum-grid grid) 0)\n          grid\n          (fill-grid-helper-5\
    \ (fill-col grid capacity) capacity)))\n    (define (fill-grid-helper-6 grid capacity)\n\
    \      (if (= (sum-grid grid) 0)", "  (define (max-fill-helper grid capacity)\n\
    \    (define (fill-row row capacity)\n      (cond\n        [(empty? row) 0]\n\
    \        [(= capacity 0) 0]\n        [(= (first row) 1) (add1 (fill-row (rest\
    \ row) (sub1 capacity)))]\n        [else (fill-row (rest row) capacity)]))\n \
    \   (cond\n      [(empty? grid) 0]\n      [else (add1 (max-fill-helper (rest grid)\
    \ (fill-row (first grid) capacity)))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper-helper (rest grid) capacity)]\n        [(empty? (rest\
    \ grid)) (max-fill-helper-helper (list (rest (first grid))) capacity)]\n     \
    \   [else\n         (define (max-fill-helper-helper-helper grid capacity)\n  \
    \         (cond\n             [(empty? grid) 0]\n             [(empty? (first\
    \ grid)) (max-fill-helper-helper-helper (rest grid) capacity)]\n             [(empty?\
    \ (rest grid)) (max-fill-helper-helper-helper (list (rest (first grid))) capacity)]\n\
    \             [else\n              (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n                (cond\n                  [(empty? grid) 0]\n\
    \                  [(empty? (first grid)) (max-fill-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                  [(empty? (rest grid)) (max-fill-helper-helper-helper-helper\
    \ (list (rest (first grid))) capacity)]\n                  [else\n           \
    \        (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \                     (cond\n                       [(empty? grid) 0]\n      \
    \                 [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                       [(empty? (rest grid)) (max-fill-helper-helper-helper-helper-helper\
    \ (list (rest (first grid))) capacity)]\n                       [else\n      \
    \                  (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (cond\n                          \
    \  [(empty? grid) 0]\n                            [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                            [(empty? (rest grid))",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n\
    \       (define (fill-bucket row capacity)\n         (cond\n           [(empty?\
    \ row) capacity]\n           [(= (first row) 1) (fill-bucket (rest row) (- capacity\
    \ 1))]\n           [else (fill-bucket (rest row) capacity)]))\n       (+ (max-fill-helper\
    \ (rest grid) (fill-bucket (first grid) capacity))\n          (if (= capacity\
    \ 0) 1 0))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\n\
    \       (define (max-fill-helper-helper grid capacity)\n         (cond\n     \
    \      [(empty? grid) 0]\n           [(empty? (first grid)) (max-fill-helper-helper\
    \ (rest grid) capacity)]\n           [else\n            (define (max-fill-helper-helper-helper\
    \ grid capacity)\n              (cond\n                [(empty? grid) 0]\n   \
    \             [(empty? (first grid)) (max-fill-helper-helper-helper (rest grid)\
    \ capacity)]\n                [else\n                 (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n                   (cond\n                     [(empty? grid)\
    \ 0]\n                     [(empty? (first grid)) (max-fill-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                     [else\n                      (define\
    \ (max-fill-helper-helper-helper-helper-helper grid capacity)\n              \
    \          (cond\n                          [(empty? grid) 0]\n              \
    \            [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                          [else\n                  \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \                             (cond\n                               [(empty? grid)\
    \ 0]\n                               [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                               [else\n             \
    \                   (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                                  (cond\n                  \
    \                  [(empty? grid) 0]\n                                    [(empty?\
    \ (first grid)) (max-fill-helper-helper-helper-helper-helper-helper-helper (rest\
    \ grid) capacity)]\n                                    [else\n              \
    \  ", "  (define (max_fill-helper grid capacity)\n    (if (null? grid)\n     \
    \   0\n        (let ([row (car grid)])\n          (if (null? row)\n          \
    \    0\n              (let ([fill (min capacity (apply max row))])\n         \
    \       (+ fill (max_fill-helper (cdr grid) capacity)))))))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (define\
    \ (max-row grid)\n      (apply max (map sum grid)))\n    (define (remove-row grid)\n\
    \      (map (lambda (row) (remove (max row) row)) grid))\n    (if (empty? grid)\n\
    \        0\n        (+ capacity (max-row grid) (max_fill-helper (remove-row grid)\
    \ capacity))))\n  (max_fill-helper grid capacity))\n", "  (let ([max-row (apply\
    \ max (map (lambda (row) (apply + row)) grid))])\n    (if (zero? max-row)\n  \
    \      0\n        (+ max-row capacity))))\n", "  (define (max_fill-helper grid\
    \ capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n      [else (max (max_fill-helper (rest\
    \ grid) capacity)\n                 (max_fill-helper (rest grid) (+ capacity (first\
    \ (first grid)) -1)))]))\n  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (if\
    \ (empty? grid)\n          0\n          (let ([row (first grid)])\n          \
    \  (if (empty? row)\n                (max-fill-helper (rest grid) capacity)\n\
    \                (let ([water (first row)])\n                  (if (zero? water)\n\
    \                      (max-fill-helper (rest grid) capacity)\n              \
    \        (if (> capacity water)\n                          (+ (max-fill-helper-helper\
    \ (rest grid) (- capacity water)) water)\n                          (+ (max-fill-helper-helper\
    \ (rest grid) capacity) capacity))))))))\n    (max-fill-helper-helper grid capacity))\n\
    \  (max-fill-helper grid capacity))\n", "  (let loop ((grid grid) (capacity capacity)\
    \ (count 0))\n    (cond ((null? grid) count)\n          ((>= capacity (apply max\
    \ (car grid)))\n           (loop (cdr grid) capacity (+ count capacity)))\n  \
    \        (else (loop (cdr grid) capacity (+ count (apply max (car grid))))))))\n",
  "  (define (max_fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let ((row (car grid))\n              (rest (cdr grid)))\n          (if\
    \ (null? row)\n              (max_fill-helper rest capacity)\n              (let\
    \ ((first (car row))\n                    (rest (cdr row)))\n                (if\
    \ (= first 1)\n                    (+ capacity (max_fill-helper rest capacity))\n\
    \                    (max_fill-helper rest capacity)))))))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (if (null? grid)\n          0\n\
    \          (let* ([row (car grid)]\n                 [row-sum (apply + row)]\n\
    \                 [row-max (apply max row)]\n                 [row-min (apply\
    \ min row)]\n                 [row-max-index (index-of row-max row)]\n       \
    \          [row-min-index (index-of row-min row)]\n                 [row-max-index-left\
    \ (index-of row-max (take row-max-index row))]\n                 [row-max-index-right\
    \ (index-of row-max (drop (+ row-max-index 1) row))]\n                 [row-min-index-left\
    \ (index-of row-min (take row-min-index row))]\n                 [row-min-index-right\
    \ (index-of row-min (drop (+ row-min-index 1) row))]\n                 [row-max-index-left-sum\
    \ (apply + (take row-max-index-left row))]\n                 [row-max-index-right-sum\
    \ (apply + (take row-max-index-right row))]\n                 [row-min-index-left-sum\
    \ (apply + (take row-min-index-left row))]\n                 [row-min-index-right-sum\
    \ (apply + (take row-min-index-right row))]\n                 [row-max-index-left-sum-max\
    \ (apply max (take row-max-index-left row))]\n                 [row-max-index-right-sum-max\
    \ (apply max (take row-max-index-right row))]\n                 [row-min-index-left-sum-max\
    \ (apply max (take row-min-index-left row))]\n                 [row-min-index-right-sum-max\
    \ (apply max (take row-min-index-right row))]\n                 [row-max-index-left-sum-min\
    \ (apply min (take row-max-index-left row))]\n                 [row-max-index-right-sum-min\
    \ (apply min (take row-max-index", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n  \
    \                   (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \          ]))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n          [(= (first (first grid))\
    \ 1)\n           (max_fill-helper (rest grid) capacity)]\n          [else\n  \
    \         (max_fill-helper (rest grid) capacity)]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n\
    \       (define (fill-row row capacity)\n         (cond\n           [(empty? row)\
    \ capacity]\n           [(= capacity 0) capacity]\n           [(= (first row)\
    \ 1) (fill-row (rest row) (- capacity 1))]\n           [else (fill-row (rest row)\
    \ capacity)]))\n       (+ (fill-row (first grid) capacity)\n          (max-fill-helper\
    \ (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-row row capacity)\n    (define (max-fill-row-helper row capacity acc)\n\
    \      (cond\n        [(empty? row) acc]\n        [(= capacity 0) acc]\n     \
    \   [(= (first row) 1) (max-fill-row-helper (rest row) capacity (+ acc 1))]\n\
    \        [else (max-fill-row-helper (rest row) (- capacity 1) acc)]))\n    (max-fill-row-helper\
    \ row capacity 0))\n  (define (max-fill-grid grid capacity acc)\n    (cond\n \
    \     [(empty? grid) acc]\n      [else (max-fill-grid (rest grid) capacity (+\
    \ acc (max-fill-row (first grid) capacity)))]))\n  (max-fill-grid grid capacity\
    \ 0))\n", "  (define (max_fill-helper grid capacity)\n    (cond [(empty? grid)\
    \ 0]\n          [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max_fill-helper (rest grid) capacity)]\n         \
    \ [(= (first (first grid)) 0) (max_fill-helper (rest grid) capacity)]\n      \
    \    [else (+ 1 (max_fill-helper (rest grid) (- capacity 1)))]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (fill-bucket bucket-capacity)\n    (define (fill-bucket-helper\
    \ bucket-capacity row)\n      (cond\n        [(empty? row) 0]\n        [(= bucket-capacity\
    \ 0) 0]\n        [(= (first row) 0) (fill-bucket-helper bucket-capacity (rest\
    \ row))]\n        [else (+ 1 (fill-bucket-helper (- bucket-capacity 1) (rest row)))]))\n\
    \    (define (fill-bucket-helper2 bucket-capacity grid)\n      (cond\n       \
    \ [(empty? grid) 0]\n        [else (+ (fill-bucket-helper bucket-capacity (first\
    \ grid))\n                 (fill-bucket-helper2 bucket-capacity (rest grid)))]))\n\
    \    (fill-bucket-helper2 bucket-capacity grid))\n  (fill-bucket capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max-fill-helper (rest grid) capacity)\n                 (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))\n      ]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [else (+ (max-fill-helper (rest grid) capacity)\n                   (max-fill-helper\
    \ (rest grid) (- capacity (first grid))))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [else (max\
    \ (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))\n           ]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (define (fill-well well)\n\
    \      (if (zero? well)\n          0\n          capacity))\n    (apply + (map\
    \ fill-well row)))\n  (apply + (map fill-row grid)))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (if (empty? grid)\n        0\n        (let* ([row (first\
    \ grid)]\n               [row-len (length row)]\n               [row-sum (apply\
    \ + row)]\n               [row-fill (min capacity row-sum)]\n               [next-grid\
    \ (rest grid)]\n               [next-capacity (if (zero? row-fill) capacity (-\
    \ capacity row-fill))])\n          (+ row-fill (max_fill-helper next-grid next-capacity)))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))])\n\
    \    )\n  (max-fill-helper grid capacity)\n  )\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (define (max-row-fill row)\n      (define (max-row-fill-helper\
    \ row capacity)\n        (cond\n          [(empty? row) capacity]\n          [(=\
    \ (first row) 1) (max-row-fill-helper (rest row) (- capacity 1))]\n          [else\
    \ (max-row-fill-helper (rest row) capacity)]))\n      (max-row-fill-helper row\
    \ capacity))\n    (cond\n      [(empty? grid) 0]\n      [else (+ (max-row-fill\
    \ (first grid)) (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (max_fill_helper grid capacity 0))\n", "  (define (helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (helper (rest grid) capacity)]\n          [(>= capacity (first grid))\n    \
    \       (add1 (helper (rest grid) capacity))]\n          [else (add1 (helper (rest\
    \ grid) (sub1 capacity)))]))\n  (helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (fill-bucket grid capacity)\n      (define (fill-bucket-helper\
    \ grid capacity)\n        (cond\n          [(empty? grid) (list capacity 0)]\n\
    \          [(empty? (first grid)) (fill-bucket-helper (rest grid) capacity)]\n\
    \          [(> capacity (first (first grid))) (fill-bucket-helper (rest grid)\
    \ (- capacity (first (first grid))))]\n          [else (list capacity (first (first\
    \ grid)))]))\n      (let ([bucket-result (fill-bucket-helper grid capacity)])\n\
    \        (list (first bucket-result) (rest grid) (second bucket-result))))\n \
    \   (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else (let ([bucket-result (fill-bucket grid capacity)])\n\
    \              (+ (second bucket-result) (max-fill-helper (first bucket-result)\
    \ capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n      [else\n       (define (fill-row\
    \ row capacity)\n         (cond\n           [(empty? row) 0]\n           [(zero?\
    \ (first row)) (fill-row (rest row) capacity)]\n           [else\n           \
    \ (define (fill-cell cell capacity)\n              (cond\n                [(zero?\
    \ capacity) cell]\n                [(zero? cell) capacity]\n                [else\
    \ (fill-cell (sub1 cell) (sub1 capacity))]))\n            (add1 (fill-cell (first\
    \ row) capacity))]))\n       (add1 (max_fill-helper (rest grid) capacity))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill_helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill_helper (rest grid) capacity)]\n      [else (max (max_fill_helper (rest\
    \ grid) capacity)\n                 (max_fill_helper (rest grid) (- capacity (first\
    \ (first grid)))))\n      ]))\n  (max_fill_helper grid capacity))\n", "  (define\
    \ (max_fill_helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max_fill_helper (rest grid) capacity)]\n          [(= capacity\
    \ 0) (max_fill_helper (rest grid) capacity)]\n          [else (max (max_fill_helper\
    \ (rest grid) capacity)\n                     (max_fill_helper (rest grid) (-\
    \ capacity (first (first grid)))))\n          ]))\n  (max_fill_helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(null? grid) 0]\n\
    \      [(null? (car grid)) 0]\n      [else\n       (let* ([row (car grid)]\n \
    \             [row-len (length row)]\n              [row-sum (apply + row)]\n\
    \              [row-max (apply max row)]\n              [row-min (apply min row)]\n\
    \              [row-max-count (count row-max row)]\n              [row-min-count\
    \ (count row-min row)]\n              [row-max-count-mod (modulo row-max-count\
    \ capacity)]\n              [row-min-count-mod (modulo row-min-count capacity)]\n\
    \              [row-max-count-div (quotient row-max-count capacity)]\n       \
    \       [row-min-count-div (quotient row-min-count capacity)]\n              [row-max-count-div-mod\
    \ (modulo row-max-count-div capacity)]\n              [row-min-count-div-mod (modulo\
    \ row-min-count-div capacity)]\n              [row-max-count-div-mod-sum (+ row-max-count-div-mod\
    \ row-max-count-mod)]\n              [row-min-count-div-mod-sum (+ row-min-count-div-mod\
    \ row-min-count-mod)]\n              [row-max-count-div-mod-sum-mod (modulo row-max-count-div-mod-sum\
    \ capacity)]\n              [row-min-count-div-mod-sum-mod (modulo row-min-count-div-mod-sum\
    \ capacity)]\n              [row-max-count-div-mod-sum-mod-sum (+ row-max-count-div-mod-sum-mod\
    \ row-max-count-div)]\n              [row-min-count-div-mod-sum-mod-sum (+ row-min-count-div-mod-sum-mod\
    \ row-min-count-div)]\n              [row-max-count-div-mod-sum-mod-sum-mod (modulo\
    \ row-max-count-div-mod-sum-mod-sum capacity)]\n              [row-min-count",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max-fill-helper (rest grid) capacity)\n                 (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))\n      ]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper (rest\
    \ grid) capacity)]\n      [else\n       (let ([row (first grid)]\n           \
    \  [rest (rest grid)])\n         (cond\n           [(empty? row) (max_fill-helper\
    \ rest capacity)]\n           [(= (first row) 1)\n            (let ([rest-row\
    \ (rest row)])\n              (cond\n                [(empty? rest-row) (max_fill-helper\
    \ rest capacity)]\n                [(= (first rest-row) 1)\n                 (max_fill-helper\
    \ (cons (cons 0 (rest row)) rest) capacity)]\n                [else (max_fill-helper\
    \ (cons (cons 0 row) rest) capacity)]))]\n           [else (max_fill-helper (cons\
    \ (cons 0 row) rest) capacity)]))]))\n  (max_fill-helper grid capacity))\n", " \
    \ (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max_fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n        \
    \  [(= (first (first grid)) 1)\n           (max_fill-helper (rest grid) capacity)]\n\
    \          [else\n           (max_fill-helper (rest grid) capacity)]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n         \
    \ [else (max (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))\n           ]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let ((max-fill-row (max-fill-row (car grid) capacity)))\n\
    \          (+ max-fill-row (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (cond [(empty?\
    \ grid) 0]\n          [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n\
    \          [(= capacity 0) (max_fill-helper (rest grid) capacity)]\n         \
    \ [(= capacity (first grid)) (max_fill-helper (rest grid) capacity)]\n       \
    \   [(> capacity (first grid)) (max_fill-helper (rest grid) (- capacity (first\
    \ grid)))]\n          [else (max_fill-helper (rest grid) capacity)]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let* ([row (car grid)]\n               [row-length\
    \ (length row)]\n               [row-sum (apply + row)]\n               [row-fill\
    \ (min row-length capacity)]\n               [row-remaining (max 0 (- row-length\
    \ capacity))]\n               [row-fill-count (if (zero? row-remaining)\n    \
    \                               0\n                                   (max-fill-helper\
    \ (list (drop row-fill row)) capacity))])\n          (+ row-fill-count row-sum))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-inner grid capacity)\n      (cond\n        [(empty?\
    \ grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n        [(=\
    \ (first (first grid)) 0) (max-fill-helper (rest grid) capacity)]\n        [else\
    \ (+ 1 (max-fill-helper-inner (rest grid) (- capacity 1)))]))\n    (max-fill-helper-inner\
    \ grid capacity))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row\
    \ row)\n    (define (fill-well well)\n      (if (zero? well)\n          0\n  \
    \        capacity))\n    (apply + (map fill-well row)))\n  (apply + (map fill-row\
    \ grid)))\n", "  (define (helper grid capacity)\n    (cond\n      [(empty? grid)\
    \ 0]\n      [(empty? (first grid)) (helper (rest grid) capacity)]\n      [(= capacity\
    \ 0) (helper (rest grid) capacity)]\n      [(= capacity (first grid)) (add1 (helper\
    \ (rest grid) capacity))]\n      [(> capacity (first grid)) (helper (rest grid)\
    \ (- capacity (first grid)))]\n      [else (helper (rest grid) capacity)]))\n\
    \  (helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n  \
    \  (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (add1 (max-fill-helper (rest grid) (sub1 capacity)))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (let* ((grid-length (length grid))\n\
    \         (grid-width (length (first grid)))\n         (grid-max-height (apply\
    \ max (map (lambda (row) (apply max row)) grid)))\n         (grid-max-height-index\
    \ (lambda (height) (map (lambda (row) (index-of row height)) grid)))\n       \
    \  (grid-max-height-index-list (map grid-max-height-index (range 1 (add1 grid-max-height))))\n\
    \         (grid-max-height-index-list-filtered (filter (lambda (l) (not (empty?\
    \ l))) grid-max-height-index-list))\n         (grid-max-height-index-list-filtered-length\
    \ (length grid-max-height-index-list-filtered))\n         (grid-max-height-index-list-filtered-length-sum\
    \ (apply + grid-max-height-index-list-filtered-length)))\n    (add1 grid-max-height-index-list-filtered-length-sum)))\n",
  "  (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill-helper (rest grid) capacity)\n                 (max_fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (+\
    \ 1 (max_fill-helper (rest grid) capacity)))]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner grid\
    \ capacity)\n      (define (max-fill-helper-inner-inner grid capacity)\n     \
    \   (define (max-fill-helper-inner-inner-inner grid capacity)\n          (define\
    \ (max-fill-helper-inner-inner-inner-inner grid capacity)\n            (define\
    \ (max-fill-helper-inner-inner-inner-inner-inner grid capacity)\n            \
    \  (define (max-fill-helper-inner-inner-inner-inner-inner-inner grid capacity)\n\
    \                (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                  (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                    (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                      (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                        (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                          (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                            (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                              (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                                (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid capacity)\n                                  (define (max-fill-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(zero? (first (first grid))) (max-fill-helper (rest grid) capacity)]\n   \
    \       [else (max (max-fill-helper (rest grid) capacity)\n                  \
    \   (+ (count-ones (first grid))\n                        (max-fill-helper (rest\
    \ grid) capacity)))]))\n  (max-fill-helper grid capacity))\n", "  (define (fill-row\
    \ row)\n    (define (fill-cell cell)\n      (cond\n        [(= cell 1)\n     \
    \    (set! capacity (- capacity 1))\n         (set! cell 0)]\n        [else\n\
    \         (set! cell cell)]))\n    (map fill-cell row))\n  (define (fill-grid\
    \ grid)\n    (define (fill-row row)\n      (cond\n        [(> capacity 0)\n  \
    \       (set! capacity (fill-row row))]\n        [else\n         (set! capacity\
    \ capacity)]))\n    (map fill-row grid))\n  (define (count-water grid)\n    (define\
    \ (count-row row)\n      (define (count-cell cell)\n        (cond\n          [(=\
    \ cell 1)\n           (set! cell 1)]\n          [else\n           (set! cell 0)]))\n\
    \      (map count-cell row))\n    (map count-row grid))\n  (define (sum-grid grid)\n\
    \    (apply + (apply + grid)))\n  (define (fill-grid-count grid capacity)\n  \
    \  (set! grid (fill-grid grid))\n    (set! grid (count-water grid))\n    (set!\
    \ capacity (sum-grid grid)))\n  (fill-grid-count grid capacity))\n", "  (define\
    \ (max_fill_helper grid capacity acc)\n    (cond\n      [(empty? grid) acc]\n\
    \      [(empty? (first grid)) (max_fill_helper (rest grid) capacity acc)]\n  \
    \    [(= (first (first grid)) 1)\n       (max_fill_helper (rest grid) capacity\
    \ (+ acc capacity))]\n      [else (max_fill_helper (rest grid) capacity acc)]))\n\
    \  (max_fill_helper grid capacity 0))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond [(empty? grid) 0]\n          [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n          [(= capacity 0) (max-fill-helper (rest grid)\
    \ capacity)]\n          [else (max (max-fill-helper (rest grid) capacity)\n  \
    \                   (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \          ]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (cond\n      [(null? grid) 0]\n      [(null? (car grid))\
    \ (max-fill-helper (cdr grid) capacity)]\n      [(> capacity 0)\n       (max-fill-helper\
    \ (cdr grid) (- capacity 1))]\n      [else (max-fill-helper (cdr grid) capacity)]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (fill-row row)\n    (define\
    \ (fill-wells wells)\n      (cond ((null? wells) 0)\n            ((= (car wells)\
    \ 0) (fill-wells (cdr wells)))\n            (else (add1 (fill-wells (cdr wells))))))\n\
    \    (fill-wells row))\n  (define (fill-grid grid)\n    (cond ((null? grid) 0)\n\
    \          (else (add1 (fill-grid (cdr grid))))))\n  (define (fill-wells wells)\n\
    \    (cond ((null? wells) 0)\n          ((= (car wells) 0) (fill-wells (cdr wells)))\n\
    \          (else (add1 (fill-wells (cdr wells))))))\n  (define (fill-row row)\n\
    \    (fill-wells row))\n  (define (fill-grid grid)\n    (cond ((null? grid) 0)\n\
    \          (else (add1 (fill-grid (cdr grid))))))\n  (define (fill-all grid)\n\
    \    (cond ((null? grid) 0)\n          (else (add1 (fill-all (cdr grid))))))\n\
    \  (define (fill-all grid)\n    (cond ((null? grid) 0)\n          (else (add1\
    \ (fill-all (cdr grid))))))\n  (define (fill-all grid)\n    (cond ((null? grid)\
    \ 0)\n          (else (add1 (fill-all (cdr grid))))))\n  (define (fill-all grid)\n\
    \    (cond ((null? grid) 0)\n          (else (add1 (fill-all (cdr grid))))))\n\
    \  (define (fill-all grid)\n    (cond ((null? grid) 0)\n          (else (add1\
    \ (fill-all (cdr grid))))))\n  (define (fill-all grid)\n    (cond ((null? grid)\
    \ 0)\n          (else (add1 (fill-all (cdr grid))))))\n  (define (fill-all grid)\n\
    \    (cond ((null? grid) 0)\n          (else (add1 (fill-all (cdr grid))))))\n\
    \  (define (fill-all grid)\n   ", "  (let ([grid (map (lambda (row) (map (lambda\
    \ (x) (if (zero? x) 0 capacity)) row)) grid)])\n    (let loop ([grid grid] [count\
    \ 0])\n      (if (null? grid)\n          count\n          (let ([new-grid (map\
    \ (lambda (row) (map (lambda (x) (if (zero? x) 0 (- x 1))) row)) grid)])\n   \
    \         (loop (map (lambda (row) (map (lambda (x) (if (zero? x) 0 (- x 1)))\
    \ row)) grid) (+ count 1)))))))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (define (fill-bucket bucket)\n \
    \        (cond\n           [(empty? bucket) 0]\n           [(empty? (rest bucket))\
    \ (first bucket)]\n           [else\n            (define (fill-bucket-helper bucket\
    \ capacity)\n              (cond\n                [(empty? bucket) 0]\n      \
    \          [(empty? (rest bucket)) (first bucket)]\n                [else\n  \
    \               (define (fill-bucket-helper bucket capacity)\n               \
    \    (cond\n                     [(empty? bucket) 0]\n                     [(empty?\
    \ (rest bucket)) (first bucket)]\n                     [else\n               \
    \       (define (fill-bucket-helper bucket capacity)\n                       \
    \ (cond\n                          [(empty? bucket) 0]\n                     \
    \     [(empty? (rest bucket)) (first bucket)]\n                          [else\n\
    \                           (define (fill-bucket-helper bucket capacity)\n   \
    \                          (cond\n                               [(empty? bucket)\
    \ 0]\n                               [(empty? (rest bucket)) (first bucket)]\n\
    \                               [else\n                                (define\
    \ (fill-bucket-helper bucket capacity)\n                                  (cond\n\
    \                                    [(empty? bucket) 0]\n                   \
    \                 [(empty? (rest bucket)) (first bucket)]\n                  \
    \                  [else\n                                     (define (fill-bucket-helper\
    \ bucket capacity)\n                                       (cond\n           \
    \                              [(empty? bucket) 0]\n                         \
    \                [(empty? (rest bucket)) (first bucket)]\n                   \
    \                      [else\n                                          (define\
    \ (fill-bucket-helper bucket capacity)\n                                     \
    \       (cond\n                                              [(empty? bucket)\
    \ 0]\n                                              [(empty? (rest bucket)) (first\
    \ bucket)]\n                                              [else\n            \
    \                                   (define (fill-bucket-helper bucket capacity)\n\
    \                                                 (cond\n                    \
    \                               [(empty? bucket) 0]\n                        \
    \                           [(empty? (rest bucket)) (first bucket)]\n        \
    \                                           [else\n                          \
    \                          (define (fill-bucket-helper bucket capacity)\n    \
    \                            ", "  (let ([rows (length grid)])\n    (let ([cols\
    \ (length (car grid))])\n      (let ([grid (list->vector grid)])\n        (let\
    \ ([grid (vector-map (lambda (row) (list->vector row)) grid)])\n          (let\
    \ ([grid (vector-map (lambda (row) (vector-map (lambda (x) (if (eq? x 1) capacity\
    \ 0)) row)) grid)])\n            (let ([grid (vector-map (lambda (row) (vector-map\
    \ (lambda (x) (if (eq? x 0) 0 capacity)) row)) grid)])\n              (let ([grid\
    \ (vector-map (lambda (row) (vector-map (lambda (x) (if (eq? x capacity) 1 0))\
    \ row)) grid)])\n                (let ([grid (vector-map (lambda (row) (vector-map\
    \ (lambda (x) (if (eq? x 0) 0 capacity)) row)) grid)])\n                  (let\
    \ ([grid (vector-map (lambda (row) (vector-map (lambda (x) (if (eq? x capacity)\
    \ 1 0)) row)) grid)])\n                    (let ([grid (vector-map (lambda (row)\
    \ (vector-map (lambda (x) (if (eq? x 0) 0 capacity)) row)) grid)])\n         \
    \             (let ([grid (vector-map (lambda (row) (vector-map (lambda (x) (if\
    \ (eq? x capacity) 1 0)) row)) grid)])\n                        (let ([grid (vector-map\
    \ (lambda (row) (vector-map (lambda (x) (if (eq? x 0) 0 capacity)) row)) grid)])\n\
    \                          (let ([grid (vector-map (lambda (row) (vector-map (lambda\
    \ (x) (if (eq? x capacity) 1 0)) row)) grid)])\n                            (let\
    \ ([grid (vector-map (lambda (row) (vector-map (lambda (x) (if (eq? x 0) 0 capacity))\
    \ row)) grid)])\n                              (let ([grid (vector-map (lambda\
    \ (row) (vector-map (lambda (x) (if (eq? x capacity) 1 0)) row)) grid)])\n   \
    \                             (let ([grid", "  (define (max-fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [row-sum (apply + row)]\n               [row-max (apply max row)]\n    \
    \           [row-min (apply min row)]\n               [row-fill (if (> row-sum\
    \ capacity)\n                             capacity\n                         \
    \    row-sum)])\n          (+ row-fill (max-fill-helper (cdr grid) capacity)))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max_fill-helper (rest grid) capacity)\n\
    \                 (max_fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max_fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n          [(= (first (first grid))\
    \ 1)\n           (if (> capacity 0)\n               (max_fill-helper (rest grid)\
    \ (- capacity 1))\n               (max_fill-helper (rest grid) capacity))]\n \
    \         [else (max_fill-helper (rest grid) capacity)]))\n  (max_fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (min capacity (first grid))))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (define (fill-bucket row)\n    \
    \     (cond\n           [(empty? row) 0]\n           [(zero? (first row)) (fill-bucket\
    \ (rest row))]\n           [else\n            (define (fill-bucket-helper row\
    \ capacity)\n              (cond\n                [(empty? row) capacity]\n  \
    \              [(zero? (first row)) (fill-bucket-helper (rest row) capacity)]\n\
    \                [else\n                 (fill-bucket-helper (rest row) (- capacity\
    \ 1))]))\n            (fill-bucket-helper (rest row) capacity)]))\n       (+ (fill-bucket\
    \ (first grid)) (max-fill-helper (rest grid) capacity))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (define\
    \ (max-row-sum row)\n      (apply + row))\n    (define (max-col-sum grid)\n  \
    \    (apply max (map max-row-sum (transpose grid))))\n    (define (max-row-sum-with-capacity\
    \ row capacity)\n      (let* ([row-sum (max-row-sum row)]\n             [row-sum-with-capacity\
    \ (min row-sum capacity)])\n        row-sum-with-capacity))\n    (define (max-col-sum-with-capacity\
    \ grid capacity)\n      (let* ([col-sum (max-col-sum grid)]\n             [col-sum-with-capacity\
    \ (min col-sum capacity)])\n        col-sum-with-capacity))\n    (define (max-row-sum-with-capacity-and-subtract\
    \ row capacity)\n      (let* ([row-sum (max-row-sum row)]\n             [row-sum-with-capacity\
    \ (min row-sum capacity)]\n             [row-sum-with-capacity-and-subtract (max\
    \ 0 (- row-sum-with-capacity))])\n        row-sum-with-capacity-and-subtract))\n\
    \    (define (max-col-sum-with-capacity-and-subtract grid capacity)\n      (let*\
    \ ([col-sum (max-col-sum grid)]\n             [col-sum-with-capacity (min col-sum\
    \ capacity)]\n             [col-sum-with-capacity-and-subtract (max 0 (- col-sum-with-capacity))])\n\
    \        col-sum-with-capacity-and-subtract))\n    (define (max-row-sum-with-capacity-and-subtract-and-update\
    \ row capacity)\n      (let* ([row-sum (max-row-sum row)]\n             [row-sum-with-capacity\
    \ (min row-sum capacity)]\n             [row-sum-with-capacity-and-subtract (max\
    \ 0 (- row-sum-with-capacity))])\n        (map (lambda (x) (if (= x 1) row-sum-with-capacity-and-subtract\
    \ x)) row)))", "  (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-inner\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [(= (first (first grid)) 0) (max-fill-helper\
    \ (rest grid) capacity)]\n        [else (+ 1 (max-fill-helper-inner (rest grid)\
    \ (- capacity 1)))]))\n    (max-fill-helper-inner grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill_helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill_helper (rest\
    \ grid) capacity)]\n      [else\n       (define (max_fill_helper_helper grid capacity)\n\
    \         (cond\n           [(empty? grid) 0]\n           [(empty? (first grid))\
    \ (max_fill_helper_helper (rest grid) capacity)]\n           [(= (first (first\
    \ grid)) 1)\n            (define (max_fill_helper_helper_helper grid capacity)\n\
    \              (cond\n                [(empty? grid) capacity]\n             \
    \   [(empty? (first grid)) (max_fill_helper_helper_helper (rest grid) capacity)]\n\
    \                [(= (first (first grid)) 1)\n                 (max_fill_helper_helper_helper\
    \ (rest grid) (- capacity 1))]\n                [else (max_fill_helper_helper_helper\
    \ (rest grid) capacity)]))\n            (max_fill_helper_helper_helper grid capacity)]\n\
    \           [else (max_fill_helper_helper (rest grid) capacity)]))\n       (+\
    \ (max_fill_helper_helper grid capacity)\n          (max_fill_helper (rest grid)\
    \ capacity))]))\n  (max_fill_helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n      [else\n       (define (fill-row\
    \ row capacity)\n         (cond\n           [(empty? row) capacity]\n        \
    \   [(= (first row) 1) (fill-row (rest row) (- capacity 1))]\n           [else\
    \ (fill-row (rest row) capacity)]))\n       (+ 1 (max_fill-helper (rest grid)\
    \ (fill-row (first grid) capacity)))]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max_fill-helper grid capacity)\n    (define (max-row-sum row)\n    \
    \  (apply + row))\n    (define (max-row-index row)\n      (define (max-row-index-helper\
    \ row index max-index max-sum)\n        (cond [(empty? row) max-index]\n     \
    \         [(> (first row) max-sum) (max-row-index-helper (rest row) (+ index 1)\
    \ index (first row))]\n              [else (max-row-index-helper (rest row) (+\
    \ index 1) max-index max-sum)]))\n      (max-row-index-helper row 0 0 0))\n  \
    \  (define (fill-row row capacity)\n      (define (fill-row-helper row capacity)\n\
    \        (cond [(empty? row) empty]\n              [(> capacity (first row)) (cons\
    \ (first row) (fill-row-helper (rest row) (- capacity (first row))))]\n      \
    \        [else (cons capacity (fill-row-helper (rest row) 0))]))\n      (fill-row-helper\
    \ row capacity))\n    (define (fill-grid grid capacity)\n      (define (fill-grid-helper\
    \ grid capacity)\n        (cond [(empty? grid) empty]\n              [else (cons\
    \ (fill-row (first grid) capacity) (fill-grid-helper (rest grid) capacity))]))\n\
    \      (fill-grid-helper grid capacity))\n    (define (remove-row grid index)\n\
    \      (define (remove-row-helper grid index)\n        (cond [(empty? grid) empty]\n\
    \              [(= index 0) (rest grid)]\n              [else (cons (first grid)\
    \ (remove-row-helper (rest grid) (- index 1)))]))\n      (remove-row-helper grid\
    \ index))\n    (define (remove-col grid col-index)\n      (define (remove-col-helper\
    \ grid col-index)\n        (cond [(empty? grid) empty]\n              [else (cons\
    \ (remove-col-helper-row (first grid) col-index) (remove-col-helper (rest grid)\
    \ col-index))]))\n      (remove", "  (define (max_fill-helper grid capacity)\n\
    \    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n          \
    \     [max-row (apply max row)]\n               [max-grid (apply max (map (lambda\
    \ (x) (apply max x)) grid))])\n          (if (> max-row max-grid)\n          \
    \    (+ max-row (max_fill-helper (cdr grid) capacity))\n              (+ max-grid\
    \ (max_fill-helper (cdr grid) capacity))))))\n  (max_fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (if (null? grid)\n        0\n  \
    \      (let ((row (car grid))\n              (rest (cdr grid)))\n          (if\
    \ (null? row)\n              (max-fill-helper rest capacity)\n              (let\
    \ ((col (car row))\n                    (rest-row (cdr row)))\n              \
    \  (if (null? col)\n                    (max-fill-helper rest capacity)\n    \
    \                (if (= col 0)\n                        (max-fill-helper (cons\
    \ rest-row rest) capacity)\n                        (if (= capacity 0)\n     \
    \                       (max-fill-helper (cons rest-row rest) capacity)\n    \
    \                        (max-fill-helper (cons rest-row rest) (- capacity 1)))))))))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (car grid)) (max-fill-helper\
    \ (cdr grid) capacity)]\n      [else\n       (define (fill-row row capacity)\n\
    \         (cond\n           [(empty? row) capacity]\n           [(= (car row)\
    \ 1) (fill-row (cdr row) (- capacity 1))]\n           [else (fill-row (cdr row)\
    \ capacity)]))\n       (+ (fill-row (car grid) capacity)\n          (max-fill-helper\
    \ (cdr grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n\
    \      (cond\n        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper-helper\
    \ (rest grid) capacity)]\n        [(>= capacity (first grid)) (max-fill-helper-helper\
    \ (rest grid) capacity)]\n        [else (max-fill-helper-helper (rest grid) (-\
    \ capacity (first grid)))]))\n    (define (max-fill-helper-helper-helper grid\
    \ capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first grid))\
    \ (max-fill-helper-helper-helper (rest grid) capacity)]\n        [(>= capacity\
    \ (first grid)) (max-fill-helper-helper-helper (rest grid) capacity)]\n      \
    \  [else (max-fill-helper-helper-helper (rest grid) (- capacity (first grid)))]))\n\
    \    (define (max-fill-helper-helper-helper-helper grid capacity)\n      (cond\n\
    \        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n        [(>= capacity (first grid)) (max-fill-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n        [else (max-fill-helper-helper-helper-helper\
    \ (rest grid) (- capacity (first grid)))]))\n    (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n      (cond\n        [(empty? grid) 0]\n        [(empty? (first\
    \ grid)) (max-fill-helper-helper-helper-helper-helper (rest grid) capacity)]\n\
    \        [(>= capacity (first grid)) (max-fill-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n        [else (max-fill-helper-helper-helper-helper-helper\
    \ (rest grid) (- capacity (first grid))", "  (define (max_fill-helper grid capacity)\n\
    \    (if (empty? grid)\n        0\n        (let* ([row (first grid)]\n       \
    \        [row-sum (apply + row)]\n               [row-max (apply max row)]\n \
    \              [row-min (apply min row)]\n               [row-fill (min capacity\
    \ (- row-max row-min))])\n          (+ row-fill (max_fill-helper (rest grid) capacity)))))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max_fill_helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill_helper\
    \ (rest grid) capacity)]\n      [else\n       (let ([row (first grid)]\n     \
    \        [rest (rest grid)])\n         (cond\n           [(empty? row) (max_fill_helper\
    \ rest capacity)]\n           [(= (first row) 1)\n            (let ([rest-row\
    \ (rest row)])\n              (if (empty? rest-row)\n                  (max_fill_helper\
    \ rest capacity)\n                  (max_fill_helper (cons (cons 0 rest-row) rest)\
    \ capacity)))]\n           [else (max_fill_helper (cons (rest row) rest) capacity)]))]))\n\
    \  (max_fill_helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (max-fill-helper-2 grid capacity)\n      (cond\n        [(empty?\
    \ grid) 0]\n        [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n\
    \        [(= 0 (first (first grid))) (max-fill-helper (rest grid) capacity)]\n\
    \        [(> capacity (first (first grid))) (max-fill-helper (rest grid) (- capacity\
    \ (first (first grid))))]\n        [else (max-fill-helper (rest grid) capacity)]))\n\
    \    (max-fill-helper-2 grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (fill-row row)\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n\
    \        [(= i (length row)) count]\n        [(= j capacity) (loop (+ i 1) 0 count)]\n\
    \        [(= (list-ref row i) 1) (loop i (+ j 1) (+ count 1))]\n        [else\
    \ (loop i (+ j 1) count)])))\n  (let loop ([i 0] [count 0])\n    (cond\n     \
    \ [(= i (length grid)) count]\n      [else (loop (+ i 1) (+ count (fill-row (list-ref\
    \ grid i))))])))\n", "  (define (max_fill-helper grid capacity)\n    (cond\n \
    \     [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper (rest grid)\
    \ capacity)]\n      [else\n       (define row (first grid))\n       (define row-capacity\
    \ (min capacity (count 1 row)))\n       (define row-filled (map (lambda (x) (if\
    \ (= x 1) 0 1)) row))\n       (define row-filled-count (count 1 row-filled))\n\
    \       (+ row-capacity (max_fill-helper (rest grid) (- capacity row-capacity)))]))\n\
    \  (max_fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))])\n\
    \    )\n  (max-fill-helper grid capacity)\n  )\n", "  (define (fill-row row)\n\
    \    (define (fill-wells wells)\n      (cond [(empty? wells) 0]\n            [(=\
    \ (first wells) 0) (fill-wells (rest wells))]\n            [(= (first wells) 1)\
    \ (+ 1 (fill-wells (rest wells)))]))\n    (fill-wells row))\n  (define (fill-grid\
    \ grid)\n    (cond [(empty? grid) 0]\n          [else (+ (fill-row (first grid))\
    \ (fill-grid (rest grid)))]))\n  (fill-grid grid))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n      [else (max (max_fill-helper (rest\
    \ grid) capacity)\n                 (max_fill-helper (rest grid) (max 0 (- capacity\
    \ (first (first grid)))))\n                 (+ 1 (max_fill-helper (rest grid)\
    \ capacity)))]))\n  (max_fill-helper grid capacity))\n", "  (define (max-row-fill\
    \ row)\n    (define (max-fill-helper row acc)\n      (if (null? row)\n       \
    \   acc\n          (if (zero? (car row))\n              (max-fill-helper (cdr\
    \ row) acc)\n              (max-fill-helper (cdr row) (+ acc 1)))))\n    (max-fill-helper\
    \ row 0))\n  (define (max-fill-helper grid acc)\n    (if (null? grid)\n      \
    \  acc\n        (max-fill-helper (cdr grid) (+ acc (max-row-fill (car grid))))))\n\
    \  (max-fill-helper grid 0))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (define (fill-row row)\n      (define (fill-row-helper row capacity)\n  \
    \      (cond ((null? row) capacity)\n              ((= (car row) 1) (fill-row-helper\
    \ (cdr row) (- capacity 1)))\n              (else (fill-row-helper (cdr row) capacity))))\n\
    \      (fill-row-helper row capacity))\n    (cond ((null? grid) 0)\n         \
    \ ((= (fill-row (car grid)) 0) (max-fill-helper (cdr grid) capacity))\n      \
    \    (else (+ 1 (max-fill-helper (cdr grid) capacity)))))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max_fill-helper (rest\
    \ grid) capacity)]\n      [else\n       (define (max-fill-helper-helper grid capacity)\n\
    \         (cond\n           [(empty? grid) 0]\n           [(empty? (first grid))\
    \ (max-fill-helper-helper (rest grid) capacity)]\n           [else\n         \
    \   (define (max-fill-helper-helper-helper grid capacity)\n              (cond\n\
    \                [(empty? grid) 0]\n                [(empty? (first grid)) (max-fill-helper-helper-helper\
    \ (rest grid) capacity)]\n                [else\n                 (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n                   (cond\n                     [(empty? grid)\
    \ 0]\n                     [(empty? (first grid)) (max-fill-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                     [else\n                      (define\
    \ (max-fill-helper-helper-helper-helper-helper grid capacity)\n              \
    \          (cond\n                          [(empty? grid) 0]\n              \
    \            [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                          [else\n                  \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \                             (cond\n                               [(empty? grid)\
    \ 0]\n                               [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                               [else\n             \
    \                   (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                                  (cond\n                  \
    \                  [(empty? grid) 0]\n                                    [(empty?\
    \ (first grid)) (max-fill-helper-helper-helper-helper-helper-helper-helper (rest\
    \ grid) capacity)]\n                                    [else\n              \
    \  ", "  (define (max_fill_helper grid capacity)\n    (cond\n      [(empty? grid)\
    \ 0]\n      [(empty? (first grid)) (max_fill_helper (rest grid) capacity)]\n \
    \     [else\n       (define (max_fill_helper_helper grid capacity)\n         (cond\n\
    \           [(empty? grid) 0]\n           [(empty? (first grid)) (max_fill_helper_helper\
    \ (rest grid) capacity)]\n           [(= (first (first grid)) 1)\n           \
    \ (define (max_fill_helper_helper_helper grid capacity)\n              (cond\n\
    \                [(empty? grid) capacity]\n                [(empty? (first grid))\
    \ (max_fill_helper_helper_helper (rest grid) capacity)]\n                [(= (first\
    \ (first grid)) 1)\n                 (max_fill_helper_helper_helper (rest grid)\
    \ (- capacity 1))]\n                [else (max_fill_helper_helper_helper (rest\
    \ grid) capacity)]))\n            (max_fill_helper_helper_helper grid capacity)]\n\
    \           [else (max_fill_helper_helper (rest grid) capacity)]))\n       (+\
    \ (max_fill_helper_helper grid capacity)\n          (max_fill_helper (rest grid)\
    \ capacity))]))\n  (max_fill_helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (fill-row row)\n    (define (fill-wells wells)\n      (cond\n       \
    \ [(empty? wells) 0]\n        [(= (first wells) 1) capacity]\n        [else 0]))\n\
    \    (apply + (map fill-wells row)))\n  (apply + (map fill-row grid)))\n", " \
    \ (define (max_fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max_fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max_fill-helper (rest grid) capacity)\n                 (max_fill-helper\
    \ (rest grid) (min capacity (first grid))))]))\n  (max_fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [else (+\
    \ (first (first grid)) (max-fill-helper (rest grid) (- capacity 1)))]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (cond\n        [(empty? grid)\
    \ 0]\n        [(empty? (first grid)) (max-fill-helper-helper (rest grid) capacity)]\n\
    \        [(< capacity (count 1 (first grid))) (max-fill-helper-helper (rest grid)\
    \ capacity)]\n        [else (+ capacity (max-fill-helper-helper (rest grid) capacity))]))\n\
    \    (max-fill-helper-helper grid capacity))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\
    \ (max (max-fill-helper (rest grid) capacity)\n                 (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))\n      ]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max_fill-helper grid capacity)\n    (if (null?\
    \ grid)\n        0\n        (let ((row (car grid))\n              (rest (cdr grid)))\n\
    \          (let ((row-sum (apply + row)))\n            (if (> row-sum capacity)\n\
    \                (+ (max_fill-helper rest capacity) capacity)\n              \
    \  (+ (max_fill-helper rest capacity) row-sum))))))\n  (max_fill-helper grid capacity))\n",
  "  (let ([grid (map (lambda (row) (map (lambda (x) (if (= x 1) capacity 0)) row))\
    \ grid)])\n    (let loop ([grid grid] [count 0])\n      (if (every? zero? (map\
    \ sum grid))\n          count\n          (loop (map (lambda (row) (map (lambda\
    \ (x) (if (> x 0) (- x 1) 0)) row)) grid) (+ count 1))))))\n", "  (define (fill-row\
    \ row)\n    (define (fill-col col)\n      (if (not (equal? col (length row)))\n\
    \          (if (equal? (list-ref row col) 1)\n              (add1 (fill-col (add1\
    \ col)))\n              (fill-col (add1 col)))\n          0))\n    (fill-col 0))\n\
    \  (define (fill-grid grid)\n    (if (not (equal? grid '()))\n        (add (fill-row\
    \ (car grid)) (fill-grid (cdr grid)))\n        0))\n  (fill-grid grid))\n", " \
    \ (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (define (max-fill-helper-helper-helper grid capacity)\n\
    \        (define (max-fill-helper-helper-helper-helper grid capacity)\n      \
    \    (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n   \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n\
    \       (define (fill-row row capacity)\n         (cond\n           [(empty? row)\
    \ capacity]\n           [(= (first row) 1) (fill-row (rest row) (- capacity 1))]\n\
    \           [else (fill-row (rest row) capacity)]))\n       (+ 1 (max-fill-helper\
    \ (rest grid) (fill-row (first grid) capacity)))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(zero? (first (first grid))) (max-fill-helper (rest grid) capacity)]\n   \
    \       [else (add1 (max-fill-helper (rest grid) capacity))]))\n  (define (fill-helper\
    \ grid capacity)\n    (cond [(empty? grid) empty]\n          [(empty? (first grid))\
    \ (cons empty (fill-helper (rest grid) capacity))]\n          [(zero? (first (first\
    \ grid))) (cons (first grid) (fill-helper (rest grid) capacity))]\n          [else\
    \ (cons (cons 0 (rest (first grid))) (fill-helper (rest grid) capacity))]))\n\
    \  (define (fill grid capacity)\n    (cond [(zero? capacity) grid]\n         \
    \ [else (fill (fill-helper grid capacity) (sub1 capacity))]))\n  (max-fill-helper\
    \ (fill grid capacity) capacity))", "  (define (max_fill-iter grid capacity count)\n\
    \    (if (null? grid)\n        count\n        (max_fill-iter (cdr grid) capacity\
    \ (+ count (max-fill-row (car grid) capacity)))))\n  (max-fill-iter grid capacity\
    \ 0))\n", "  (define (max_fill-helper grid capacity)\n    (define (max-row-sum\
    \ grid)\n      (apply max (map (lambda (row) (apply + row)) grid)))\n    (define\
    \ (max-col-sum grid)\n      (apply max (map (lambda (col) (apply + col)) (transpose\
    \ grid))))\n    (define (transpose grid)\n      (apply map list grid))\n    (define\
    \ (fill-row grid capacity)\n      (map (lambda (row) (map (lambda (x) (if (> x\
    \ capacity) capacity x)) row)) grid))\n    (define (fill-col grid capacity)\n\
    \      (transpose (fill-row (transpose grid) capacity)))\n    (define (fill-row-col\
    \ grid capacity)\n      (fill-col (fill-row grid capacity) capacity))\n    (define\
    \ (fill-col-row grid capacity)\n      (fill-row (fill-col grid capacity) capacity))\n\
    \    (define (fill-row-col-row grid capacity)\n      (fill-row (fill-col-row grid\
    \ capacity) capacity))\n    (define (fill-col-row-col grid capacity)\n      (fill-col\
    \ (fill-row-col grid capacity) capacity))\n    (define (fill-row-col-row-col grid\
    \ capacity)\n      (fill-col (fill-row-col-row grid capacity) capacity))\n   \
    \ (define (fill-col-row-col-row grid capacity)\n      (fill-row (fill-col-row-col\
    \ grid capacity) capacity))\n    (define (fill-row-col-row-col-row grid capacity)\n\
    \      (fill-row (fill-col-row-col-row grid capacity) capacity))\n    (define\
    \ (fill-col-row-col-row-col grid capacity)\n      (fill-col (fill-row-col-row-col\
    \ grid capacity) capacity))\n    (define (fill-row-col-row-col-row-col grid capacity)\n\
    \      (fill-col (fill-row-col-row-col-row grid capacity) capacity))\n    (define\
    \ (fill-col-row-col-row-col-row grid capacity)\n      (fill-row (fill-col-row",
  "  (define (fill-row row)\n    (define (fill-wells wells)\n      (if (null? wells)\n\
    \          0\n          (if (car wells)\n              (if (cdr wells)\n     \
    \             (if (> (car wells) (cadr wells))\n                      (+ (car\
    \ wells) (fill-wells (cdr wells)))\n                      (+ (cadr wells) (fill-wells\
    \ (cdr wells))))\n                  (car wells))\n              (fill-wells (cdr\
    \ wells)))))\n    (fill-wells row))\n  (define (fill-grid grid)\n    (if (null?\
    \ grid)\n        0\n        (+ (fill-row (car grid)) (fill-grid (cdr grid)))))\n\
    \  (fill-grid grid))\n", "  (define (max-fill-helper grid capacity)\n    (if (empty?\
    \ grid)\n        0\n        (let* ([row (first grid)]\n               [filled-row\
    \ (fill-row row capacity)])\n          (+ (count-filled filled-row)\n        \
    \     (max-fill-helper (rest grid) capacity)))))\n  (max-fill-helper grid capacity))\n",
  "  (define (max_fill_helper grid capacity)\n    (define (max_fill_helper_helper\
    \ grid capacity)\n      (define (max_fill_helper_helper_helper grid capacity)\n\
    \        (cond\n          [(empty? grid) 0]\n          [(empty? (car grid)) (max_fill_helper_helper_helper\
    \ (cdr grid) capacity)]\n          [(= capacity 0) (max_fill_helper_helper_helper\
    \ (cdr grid) capacity)]\n          [(= (car (car grid)) 0) (max_fill_helper_helper_helper\
    \ (cdr grid) capacity)]\n          [else (+ 1 (max_fill_helper_helper_helper (cdr\
    \ grid) (- capacity 1)))]))\n      (max_fill_helper_helper_helper grid capacity))\n\
    \    (max_fill_helper_helper grid capacity))\n  (max_fill_helper grid capacity))\n",
  "  (letrec ([fill-row (lambda (row)\n                       (let ([filled (apply\
    \ max row)])\n                         (map (lambda (x) (- x filled)) row)))]\n\
    \          [fill-grid (lambda (grid)\n                       (if (null? grid)\n\
    \                           '()\n                           (cons (fill-row (car\
    \ grid))\n                                 (fill-grid (cdr grid)))))]\n      \
    \    [count-row (lambda (row)\n                       (let ([filled (apply max\
    \ row)])\n                         (apply + (map (lambda (x) (- x filled)) row))))]\n\
    \          [count-grid (lambda (grid)\n                        (if (null? grid)\n\
    \                            0\n                            (+ (count-row (car\
    \ grid))\n                               (count-grid (cdr grid))))])\n    (count-grid\
    \ (fill-grid grid))))\n", "  (define (max_fill-helper grid capacity)\n    (define\
    \ (max-row-sum row)\n      (apply + row))\n    (define (max-col-sum grid)\n  \
    \    (apply max (map (lambda (col) (apply + col)) (transpose grid))))\n    (define\
    \ (transpose grid)\n      (apply map list grid))\n    (define (fill-row row capacity)\n\
    \      (define (fill-row-helper row capacity)\n        (if (null? row)\n     \
    \       0\n            (if (zero? capacity)\n                0\n             \
    \   (if (zero? (car row))\n                    (fill-row-helper (cdr row) capacity)\n\
    \                    (add1 (fill-row-helper (cdr row) (sub1 capacity)))))))\n\
    \      (fill-row-helper row capacity))\n    (define (fill-col grid capacity)\n\
    \      (define (fill-col-helper grid capacity)\n        (if (null? grid)\n   \
    \         0\n            (if (zero? capacity)\n                0\n           \
    \     (if (zero? (car (car grid)))\n                    (fill-col-helper (cdr\
    \ grid) capacity)\n                    (add1 (fill-col-helper (cdr grid) (sub1\
    \ capacity)))))))\n      (fill-col-helper grid capacity))\n    (add1 (max (max-row-sum\
    \ (car grid)) (max-col-sum grid))))\n  (max-fill-helper grid capacity))\n", " \
    \ (define (max_fill_helper grid capacity count)\n    (cond [(empty? grid) count]\n\
    \          [(empty? (first grid)) (max_fill_helper (rest grid) capacity count)]\n\
    \          [(empty? (rest grid)) (max_fill_helper (rest grid) capacity count)]\n\
    \          [(>= capacity (first grid)) (max_fill_helper (rest grid) capacity count)]\n\
    \          [else (max_fill_helper (rest grid) capacity (+ count 1))]))\n  (max_fill_helper\
    \ grid capacity 0))\n", "  (define (max_fill-helper grid capacity)\n    (if (empty?\
    \ grid)\n        0\n        (let* ([row (first grid)]\n               [row-length\
    \ (length row)]\n               [row-sum (apply + row)]\n               [row-max\
    \ (apply max row)]\n               [row-max-index (index-of row-max row)]\n  \
    \             [row-max-left (sublist row 0 row-max-index)]\n               [row-max-right\
    \ (sublist row (+ row-max-index 1) row-length)])\n          (if (> row-sum capacity)\n\
    \              (+ (max_fill-helper (rest grid) capacity)\n                 (length\
    \ row)\n                 (max_fill-helper (list row-max-left row-max-right) capacity))\n\
    \              (+ (max_fill-helper (rest grid) capacity)\n                 (max_fill-helper\
    \ (list row-max-left row-max-right) capacity))))))\n  (max_fill-helper grid capacity))\n",
  "  (define (fill-row row)\n    (define (fill-wells wells)\n      (if (null? wells)\n\
    \          0\n          (let ([w (car wells)])\n            (if (null? w)\n  \
    \              (fill-wells (cdr wells))\n                (if (not (null? (cdr\
    \ wells)))\n                    (if (and (not (null? (car wells))) (not (null?\
    \ (cadr wells))))\n                        (if (> capacity (car wells))\n    \
    \                        (+ (car wells) (fill-wells (cdr wells)))\n          \
    \                  capacity)\n                        capacity)\n            \
    \        capacity)))))\n    (fill-wells row))\n  (define (fill-grid grid)\n  \
    \  (if (null? grid)\n        0\n        (+ (fill-row (car grid)) (fill-grid (cdr\
    \ grid)))))\n  (fill-grid grid))\n", "  (let ([max-height (apply max (map (lambda\
    \ (row) (apply + row)) grid))])\n    (let loop ([height max-height] [count 0])\n\
    \      (if (= height 0)\n          count\n          (let ([new-grid (map (lambda\
    \ (row) (map (lambda (x) (if (> x height) (- x height) 0)) row)) grid)])\n   \
    \         (loop (- height 1) (+ count (apply + (map (lambda (row) (apply + row))\
    \ new-grid)))))))))\n", "  (define (max-fill-helper grid capacity)\n    (define\
    \ (max-fill-helper-helper grid capacity)\n      (define (max-fill-helper-helper-helper\
    \ grid capacity)\n        (define (max-fill-helper-helper-helper-helper grid capacity)\n\
    \          (define (max-fill-helper-helper-helper-helper-helper grid capacity)\n\
    \            (define (max-fill-helper-helper-helper-helper-helper-helper grid\
    \ capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max_fill_helper grid capacity)\n    (let* ([max-row (apply max (map\
    \ (lambda (row) (apply + row)) grid))]\n           [max-col (apply max (map (lambda\
    \ (col) (apply + col)) (transpose grid)))]\n           [max-fill (max max-row\
    \ max-col)])\n      (if (zero? max-fill)\n          0\n          (let* ([max-fill-times\
    \ (quotient max-fill capacity)]\n                 [max-fill-remainder (remainder\
    \ max-fill capacity)])\n            (+ max-fill-times (if (zero? max-fill-remainder)\
    \ 0 1))))))\n  (max_fill_helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (define\
    \ (max-fill-helper-helper-helper grid capacity)\n        (define (max-fill-helper-helper-helper-helper\
    \ grid capacity)\n          (define (max-fill-helper-helper-helper-helper-helper\
    \ grid capacity)\n            (define (max-fill-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n              (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                  (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                    (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                      (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                        (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                          (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                            (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                              (define (max-fill-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-hel",
  "  (define (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n      \
    \    [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n        \
    \  [(= capacity 0) (max-fill-helper (rest grid) capacity)]\n          [else (max\
    \ (max-fill-helper (rest grid) capacity)\n                     (max-fill-helper\
    \ (rest grid) (- capacity (first (first grid)))))\n           ]))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (fill-row row)\n    (define (fill-cell cell)\n\
    \      (if (zero? cell)\n          0\n          capacity))\n    (apply + (map\
    \ fill-cell row)))\n  (apply + (map fill-row grid)))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [rest (cdr grid)]\n               [row-sum (apply + row)]\n  \
    \             [row-max (apply max row)]\n               [row-fill (min capacity\
    \ row-max)]\n               [rest-fill (max-fill-helper rest (- capacity row-fill))])\n\
    \          (+ row-fill rest-fill))))\n  (max-fill-helper grid capacity))\n", " \
    \ (define (max-fill-helper grid capacity)\n    (define (max-fill-helper-helper\
    \ grid capacity)\n      (cond ((null? grid) 0)\n            ((null? (car grid))\
    \ 0)\n            ((= capacity 0) 0)\n            ((= capacity (car (car grid)))\
    \ (max-fill-helper (cdr grid) capacity))\n            ((< capacity (car (car grid)))\
    \ (max-fill-helper (cdr grid) capacity))\n            (else (+ 1 (max-fill-helper\
    \ (cdr grid) (- capacity (car (car grid))))))))\n    (max-fill-helper-helper (reverse\
    \ grid) capacity))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (if (null? grid)\n        0\n        (let* ([row (car grid)]\n\
    \               [row-sum (apply + row)]\n               [row-max (apply max row)]\n\
    \               [row-min (apply min row)]\n               [row-fill (if (zero?\
    \ row-sum) 0 (- row-max row-min))]\n               [row-fill-count (if (zero?\
    \ row-fill) 0 (ceiling (/ row-fill capacity)))]\n               [row-fill-count-max\
    \ (if (zero? row-fill) 0 (ceiling (/ row-max capacity)))]\n               [row-fill-count-min\
    \ (if (zero? row-fill) 0 (ceiling (/ row-min capacity)))]\n               [row-fill-count-max-min\
    \ (- row-fill-count-max row-fill-count-min)])\n          (if (zero? row-fill)\n\
    \              (max-fill-helper (cdr grid) capacity)\n              (if (> row-fill-count-max-min\
    \ row-fill-count)\n                  (+ row-fill-count-max-min (max-fill-helper\
    \ (cdr grid) capacity))\n                  (+ row-fill-count (max-fill-helper\
    \ (cdr grid) capacity)))))))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond [(empty? grid) 0]\n          [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n          [(= capacity\
    \ 0) (max-fill-helper (rest grid) capacity)]\n          [else (+ 1 (max-fill-helper\
    \ (rest grid) capacity))]))\n  (max-fill-helper grid capacity))\n", "  (define\
    \ (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty?\
    \ (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n       (define\
    \ (fill-bucket row capacity)\n         (cond\n           [(empty? row) capacity]\n\
    \           [(= (first row) 1) (fill-bucket (rest row) (- capacity 1))]\n    \
    \       [else (fill-bucket (rest row) capacity)]))\n       (+ (max-fill-helper\
    \ (rest grid) (fill-bucket (first grid) capacity))\n          (if (= capacity\
    \ 0) 1 0))]))\n  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper\
    \ grid capacity)\n    (define (max-fill-helper-helper grid capacity)\n      (cond\n\
    \        [(empty? grid) 0]\n        [(empty? (first grid)) (max-fill-helper-helper\
    \ (rest grid) capacity)]\n        [(= capacity 0) (max-fill-helper-helper (rest\
    \ grid) capacity)]\n        [(= (first (first grid)) 0) (max-fill-helper-helper\
    \ (rest grid) capacity)]\n        [else (add1 (max-fill-helper-helper (rest grid)\
    \ (sub1 capacity)))]))\n    (max-fill-helper-helper grid capacity))\n  (max-fill-helper\
    \ grid capacity))\n", "  (define (max-fill-helper grid capacity)\n    (cond\n\
    \      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper (rest\
    \ grid) capacity)]\n      [else (max (max-fill-helper (rest grid) capacity)\n\
    \                 (max-fill-helper (rest grid) (- capacity (first (first grid)))))\n\
    \      ]))\n  (max-fill-helper grid capacity))\n", "  (define (max_fill-helper\
    \ grid capacity)\n    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid))\
    \ (max_fill-helper (rest grid) capacity)]\n      [else\n       (define (max-fill-helper-helper\
    \ grid capacity)\n         (cond\n           [(empty? grid) 0]\n           [(empty?\
    \ (first grid)) (max-fill-helper-helper (rest grid) capacity)]\n           [else\n\
    \            (define (max-fill-helper-helper-helper grid capacity)\n         \
    \     (cond\n                [(empty? grid) 0]\n                [(empty? (first\
    \ grid)) (max-fill-helper-helper-helper (rest grid) capacity)]\n             \
    \   [else\n                 (define (max-fill-helper-helper-helper-helper grid\
    \ capacity)\n                   (cond\n                     [(empty? grid) 0]\n\
    \                     [(empty? (first grid)) (max-fill-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                     [else\n                      (define\
    \ (max-fill-helper-helper-helper-helper-helper grid capacity)\n              \
    \          (cond\n                          [(empty? grid) 0]\n              \
    \            [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                          [else\n                  \
    \         (define (max-fill-helper-helper-helper-helper-helper-helper grid capacity)\n\
    \                             (cond\n                               [(empty? grid)\
    \ 0]\n                               [(empty? (first grid)) (max-fill-helper-helper-helper-helper-helper-helper\
    \ (rest grid) capacity)]\n                               [else\n             \
    \                   (define (max-fill-helper-helper-helper-helper-helper-helper-helper\
    \ grid capacity)\n                                  (cond\n                  \
    \                  [(empty? grid) 0]\n                                    [(empty?\
    \ (first grid)) (max-fill-helper-helper-helper-helper-helper-helper-helper (rest\
    \ grid) capacity)]\n                                    [else\n              \
    \  ", "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid)\
    \ 0]\n      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n \
    \     [else (max (max-fill-helper (rest grid) capacity)\n                 (max-fill-helper\
    \ (rest grid) (max 0 (- capacity (first (first grid)))))\n                 (+\
    \ 1 (max-fill-helper (rest grid) capacity)))]))\n  (max-fill-helper grid capacity))\n",
  "  (define (max-fill-helper grid capacity)\n    (cond\n      [(empty? grid) 0]\n\
    \      [(empty? (first grid)) (max-fill-helper (rest grid) capacity)]\n      [else\n\
    \       (let*\n           ([row (first grid)]\n            [col (first row)]\n\
    \            [rest-row (rest row)]\n            [rest-grid (rest grid)]\n    \
    \        [rest-fill (max-fill-helper rest-grid capacity)])\n         (cond\n \
    \          [(= col 1)\n            (+ 1\n               (max-fill-helper (cons\
    \ (cons 0 rest-row) rest-grid) capacity)\n               rest-fill)]\n       \
    \    [else\n            (max-fill-helper (cons (cons 0 rest-row) rest-grid) capacity)]))]))\n\
    \  (max-fill-helper grid capacity))\n", "  (define (max-fill-helper grid capacity)\n\
    \    (cond\n      [(empty? grid) 0]\n      [(empty? (first grid)) (max-fill-helper\
    \ (rest grid) capacity)]\n      [else\n       (define (fill-bucket row)\n    \
    \     (cond\n           [(empty? row) 0]\n           [(= (first row) 1) (+ 1 (fill-bucket\
    \ (rest row)))]\n           [else (fill-bucket (rest row))]))\n       (+ (fill-bucket\
    \ (first grid)) (max-fill-helper (rest grid) capacity))]))\n  (define (empty?\
    \ lst)\n    (cond\n      [(null? lst) #t]\n      [(null? (first lst)) #t]\n  \
    \    [else #f]))\n  (define (first lst)\n    (cond\n      [(null? lst) '()]\n\
    \      [else (car lst)]))\n  (define (rest lst)\n    (cond\n      [(null? lst)\
    \ '()]\n      [else (cdr lst)]))\n  (define (divide-by-capacity n)\n    (cond\n\
    \      [(< n capacity) n]\n      [else (+ 1 (divide-by-capacity (- n capacity)))]))\n\
    \  (divide-by-capacity (max-fill-helper grid capacity)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
