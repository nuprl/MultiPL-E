name: HumanEval_61_correct_bracketing
language: rkt
prompt: "#lang racket\n\n;; brackets is a string of \"(\" and \")\".\n;; return #t\
  \ if every opening bracket has a corresponding closing bracket.\n;; >>> (correct_bracketing\
  \ \"(\")\n;; #f\n;; >>> (correct_bracketing \"()\")\n;; #t\n;; >>> (correct_bracketing\
  \ \"(()())\")\n;; #t\n;; >>> (correct_bracketing \")(()\")\n;; #f\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"()\") #t)\n    (check-equal? (candidate \"(()())\"\
  ) #t)\n    (check-equal? (candidate \"()()(()())()\") #t)\n    (check-equal? (candidate\
  \ \"()()((()()())())(()()(()))\") #t)\n    (check-equal? (candidate \"((()())))\"\
  ) #f)\n    (check-equal? (candidate \")(()\") #f)\n    (check-equal? (candidate\
  \ \"(\") #f)\n    (check-equal? (candidate \"((((\") #f)\n    (check-equal? (candidate\
  \ \")\") #f)\n    (check-equal? (candidate \"(()\") #f)\n    (check-equal? (candidate\
  \ \"()()(()())())(()\") #f)\n    (check-equal? (candidate \"()()(()())()))()\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(char=? (first brackets) #\\()\n     (cond\n\
    \       [(empty? (rest brackets)) #f]\n       [(char=? (first (rest brackets))\
    \ #\\))\n        (correct_bracketing (rest (rest brackets)))]\n       [else #f])]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first\
    \ brackets) \")\") #f]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(eq? (first brackets) \")\") #f]\n  \
    \  [else (correct_bracketing (rest brackets))]))\n", "  (cond ((empty? brackets)\
    \ #t)\n        ((equal? (first brackets) \")\") #f)\n        ((equal? (last brackets)\
    \ \"(\") #f)\n        (else (correct_bracketing (rest (butlast brackets))))))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets) \"(\")\n \
    \    (if (string=? (last brackets) \")\")\n         (correct_bracketing (substring\
    \ brackets 1 (- (string-length brackets) 1)))\n         #f)]\n    [else #f]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets) \"(\")\n \
    \    (if (string=? (last brackets) \")\")\n         (correct_bracketing (substring\
    \ brackets 1 (- (string-length brackets) 1)))\n         #f)]\n    [else #f]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [else\
    \ (cond\n            [(equal? (first brackets) \"(\")\n             (cond\n  \
    \             [(equal? (first (rest brackets)) \")\")\n                (correct_bracketing\
    \ (rest (rest brackets)))]\n               [else #f])]\n            [else #f])]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets) \"(\")\n \
    \    (correct_bracketing (rest brackets))]\n    [(string=? (first brackets) \"\
    )\")\n     (correct_bracketing (rest brackets))]\n    [else #f]))\n", "  (define\
    \ (helper brackets count)\n    (cond ((empty? brackets) (zero? count))\n     \
    \     ((char=? (first brackets) #\\() (helper (rest brackets) (+ count 1)))\n\
    \          ((char=? (first brackets) #\\)) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1))))\n          (else (helper (rest brackets) count))))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(char=?\
    \ (first brackets) #\\()\n     (correct_bracketing (rest brackets))]\n    [(char=?\
    \ (first brackets) #\\))\n     (correct_bracketing (rest brackets))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(char=? (first brackets)\
    \ #\\()\n     (if (correct_bracketing (rest brackets))\n         (if (char=? (first\
    \ (rest brackets)) #\\))\n             (correct_bracketing (rest (rest brackets)))\n\
    \             #f)\n         #f)]\n    [else #f]))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(equal? (first brackets) \")\") #f]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest\
    \ brackets)) #f]\n    [else (and (equal? (first brackets) \"(\")\n           \
    \    (equal? (last brackets) \")\")\n               (correct_bracketing (rest\
    \ (butlast brackets))))]))\n", "  (let loop ([brackets brackets] [count 0])\n\
    \    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\()\n           (loop (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\))\n           (loop (rest brackets) (- count 1))]\n          [else\
    \ (loop (rest brackets) count)])))\n", "  (if (empty? brackets)\n      #t\n  \
    \    (if (string=? (first brackets) \"(\")\n          (if (string=? (last brackets)\
    \ \")\")\n              (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n              #f)\n          #f)))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\() (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\)) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(char=?\
    \ (first brackets) #\\()\n     (if (correct_bracketing (rest brackets))\n    \
    \     (if (char=? (first (rest brackets)) #\\))\n             (correct_bracketing\
    \ (rest (rest brackets)))\n             #f)\n         #f)]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\() (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\)) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"(\")\n     (if (string=? (last\
    \ brackets) \")\")\n         (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n         #f)]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
