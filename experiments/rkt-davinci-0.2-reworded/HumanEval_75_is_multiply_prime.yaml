name: HumanEval_75_is_multiply_prime
language: rkt
prompt: "#lang racket\n\n;; Write a function that returns true if the given number\
  \ is the multiplication of 3 prime numbers\n;; and false otherwise.\n;; Knowing\
  \ that (a) is less then 100. \n;; Example:\n;; >>> (is_multiply_prime 30)\n;; #t\n\
  ;; 30 = 2 * 3 * 5\n(define (is_multiply_prime a)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_multiply_prime))\n\
  \    (check-equal? (candidate 5) #f)\n    (check-equal? (candidate 30) #t)\n   \
  \ (check-equal? (candidate 8) #t)\n    (check-equal? (candidate 10) #f)\n    (check-equal?\
  \ (candidate 125) #t)\n    (check-equal? (candidate 105) #t)\n    (check-equal?\
  \ (candidate 126) #f)\n    (check-equal? (candidate 729) #f)\n    (check-equal?\
  \ (candidate 891) #f)\n    (check-equal? (candidate 1001) #t)\n))\n\n(test-humaneval)"
completions: ["  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (iter i)\n    (cond ((= i a) #f)\n          ((and (is_prime\
    \ i) (is_prime (/ a i))) #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
  "  (define (is_prime a)\n    (define (is_prime-iter a b)\n      (cond ((= b a) #t)\n\
    \            ((= (modulo a b) 0) #f)\n            (else (is_prime-iter a (+ b\
    \ 1)))))\n    (is_prime-iter a 2))\n  (define (is_multiply-prime-iter a b)\n \
    \   (cond ((= a 1) #t)\n          ((and (is_prime a) (is_prime b)) #t)\n     \
    \     (else (is_multiply-prime-iter (/ a b) (+ b 1)))))\n  (is_multiply-prime-iter\
    \ a 2))\n", "  (define (is_prime n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n\
    \    (iter (- n 1)))\n  (define (iter i)\n    (cond\n      [(= i a) #f]\n    \
    \  [(and (is_prime i) (is_prime (- a i))) #t]\n      [else (iter (+ i 1))]))\n\
    \  (iter 1))\n", "  (define (is_prime a)\n    (define (is_divisible a b)\n   \
    \   (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((is_divisible n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor a 2) a))\n  (define (is_multiply_prime_helper a b)\n    (cond\
    \ ((= a 1) #t)\n          ((is_prime a) (is_multiply_prime_helper (/ a b) b))\n\
    \          (else #f)))\n  (is_multiply_prime_helper a 2))\n", "  (define (is_prime\
    \ n)\n    (define (is_prime_iter i)\n      (if (= i n)\n          #t\n       \
    \   (if (= (remainder n i) 0)\n              #f\n              (is_prime_iter\
    \ (+ i 1)))))\n    (is_prime_iter 2))\n  (define (is_multiply_prime_iter i)\n\
    \    (if (= i a)\n        #f\n        (if (and (is_prime i) (is_prime (/ a i)))\n\
    \            #t\n            (is_multiply_prime_iter (+ i 1)))))\n  (is_multiply_prime_iter\
    \ 2))\n", "  (cond\n    [(= a 1) #f]\n    [(= a 2) #f]\n    [(= a 3) #f]\n   \
    \ [(= a 4) #f]\n    [(= a 5) #f]\n    [(= a 6) #t]\n    [(= a 7) #f]\n    [(=\
    \ a 8) #f]\n    [(= a 9) #f]\n    [(= a 10) #f]\n    [(= a 11) #f]\n    [(= a\
    \ 12) #t]\n    [(= a 13) #f]\n    [(= a 14) #f]\n    [(= a 15) #t]\n    [(= a\
    \ 16) #f]\n    [(= a 17) #f]\n    [(= a 18) #t]\n    [(= a 19) #f]\n    [(= a\
    \ 20) #t]\n    [(= a 21) #f]\n    [(= a 22) #f]\n    [(= a 23) #f]\n    [(= a\
    \ 24) #t]\n    [(= a 25) #f]\n    [(= a 26) #f]\n    [(= a 27) #f]\n    [(= a\
    \ 28) #f]\n    [(= a 29) #f]\n    [(= a 30) #t]\n    [(= a 31) #f]\n    [(= a\
    \ 32) #f]\n    [(= a 33) #f]\n    [(= a 34) #f]\n    [(= a 35) #t]\n    [(= a\
    \ 36) #t]\n    [(= a 37) #f]\n    [(= a 38) #f]\n    [(= a 39) #f]\n    [(= a\
    \ 40) #t]\n    [(= a 41) #f]\n    [(= a 42) #f]\n    [(= a 43) #f]\n    [(= a\
    \ 44) #f]\n    [(= a 45) #t]\n    [(= a 46) #f]\n    [(= a 47) #f]\n    [(= a\
    \ 48) #t]\n    [(= a 49) #f]\n    [(= a 50) #t]\n    [(= a 51) #", "  (cond\n\
    \    [(= a 2) #t]\n    [(= a 3) #t]\n    [(= a 5) #t]\n    [(= a 7) #t]\n    [(=\
    \ a 11) #t]\n    [(= a 13) #t]\n    [(= a 17) #t]\n    [(= a 19) #t]\n    [(=\
    \ a 23) #t]\n    [(= a 29) #t]\n    [(= a 31) #t]\n    [(= a 37) #t]\n    [(=\
    \ a 41) #t]\n    [(= a 43) #t]\n    [(= a 47) #t]\n    [(= a 53) #t]\n    [(=\
    \ a 59) #t]\n    [(= a 61) #t]\n    [(= a 67) #t]\n    [(= a 71) #t]\n    [(=\
    \ a 73) #t]\n    [(= a 79) #t]\n    [(= a 83) #t]\n    [(= a 89) #t]\n    [(=\
    \ a 97) #t]\n    [else #f]))\n", "  (define (is_prime n)\n    (define (is_prime_iter\
    \ n div)\n      (cond ((= div 1) #t)\n            ((= (modulo n div) 0) #f)\n\
    \            (else (is_prime_iter n (- div 1)))))\n    (is_prime_iter n (- n 1)))\n\
    \  (define (is_multiply_prime_iter a b)\n    (cond ((= b 1) #f)\n          ((and\
    \ (is_prime b) (is_prime (/ a b))) #t)\n          (else (is_multiply_prime_iter\
    \ a (- b 1)))))\n  (is_multiply_prime_iter a a))\n", "  (define (is_prime a)\n\
    \    (cond ((= a 1) #f)\n          ((= a 2) #t)\n          ((even? a) #f)\n  \
    \        (else (is_prime_aux a 3))))\n  (define (is_prime_aux a b)\n    (cond\
    \ ((= b (/ a 2)) #t)\n          ((= (modulo a b) 0) #f)\n          (else (is_prime_aux\
    \ a (+ b 2)))))\n  (define (is_multiply_prime_aux a b)\n    (cond ((= b (/ a 2))\
    \ #f)\n          ((and (is_prime b) (is_prime (/ a b))) #t)\n          (else (is_multiply_prime_aux\
    \ a (+ b 2)))))\n  (is_multiply_prime_aux a 3))\n", "  (define (is_prime n)\n\
    \    (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (define (find-divisor n test-divisor)\n\
    \    (cond ((> (square test-divisor) n) n)\n          ((is_prime test-divisor)\n\
    \           (if (divides? n test-divisor)\n               (if (is_multiply_prime\
    \ (/ n test-divisor))\n                   #t\n                   #f)\n       \
    \        (find-divisor n (+ test-divisor 1))))\n          (else (find-divisor\
    \ n (+ test-divisor 1)))))\n  (find-divisor a 2))\n", "  (define (is_prime n)\n\
    \    (define (is_divisible a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((is_divisible\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= n (find-divisor n 2)))\n  (define (is_multiply_prime_iter a b)\n\
    \    (cond ((= a 1) #t)\n          ((is_prime a) (is_multiply_prime_iter (/ a\
    \ b) b))\n          ((is_prime b) (is_multiply_prime_iter a (/ b b)))\n      \
    \    (else #f)))\n  (is_multiply_prime_iter a a))\n", "  (define (is_prime n)\n\
    \    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n   \
    \   [else (is_prime_helper n 3)]))\n  (define (is_prime_helper n i)\n    (cond\n\
    \      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (is_prime_helper\
    \ n (+ i 2))]))\n  (define (is_multiply_prime_helper a b c)\n    (cond\n     \
    \ [(and (is_prime a) (is_prime b) (is_prime c)) #t]\n      [else #f]))\n  (cond\n\
    \    [(= a 1) #f]\n    [(= a 2) #f]\n    [(= a 3) #f]\n    [(= a 4) #f]\n    [(=\
    \ a 5) #f]\n    [(= a 6) #t]\n    [(= a 7) #f]\n    [(= a 8) #f]\n    [(= a 9)\
    \ #f]\n    [(= a 10) #f]\n    [(= a 11) #f]\n    [(= a 12) #t]\n    [(= a 13)\
    \ #f]\n    [(= a 14) #f]\n    [(= a 15) #t]\n    [(= a 16) #f]\n    [(= a 17)\
    \ #f]\n    [(= a 18) #t]\n    [(= a 19) #f]\n    [(= a 20) #t]\n    [(= a 21)\
    \ #f]\n    [(= a 22) #f]\n    [(= a 23) #f]\n    [(= a 24) #t]\n    [(= a 25)\
    \ #f]\n    [(= a 26) #f]\n    [(= a 27) #t]\n    [(= a 28) #f]\n    [(= a 29)\
    \ #f]\n    [(= a 30) #t]\n    [(= a 31) #f]\n    [(= a 32) #f]\n    [(= a 33)\
    \ #f]\n", "  (cond\n    [(= a 1) #f]\n    [(= a 2) #f]\n    [(= a 3) #f]\n   \
    \ [(= a 5) #f]\n    [(= a 7) #f]\n    [(= a 11) #f]\n    [(= a 13) #f]\n    [(=\
    \ a 17) #f]\n    [(= a 19) #f]\n    [(= a 23) #f]\n    [(= a 29) #f]\n    [(=\
    \ a 31) #f]\n    [(= a 37) #f]\n    [(= a 41) #f]\n    [(= a 43) #f]\n    [(=\
    \ a 47) #f]\n    [(= a 53) #f]\n    [(= a 59) #f]\n    [(= a 61) #f]\n    [(=\
    \ a 67) #f]\n    [(= a 71) #f]\n    [(= a 73) #f]\n    [(= a 79) #f]\n    [(=\
    \ a 83) #f]\n    [(= a 89) #f]\n    [(= a 97) #f]\n    [else #t]))\n", "  (define\
    \ (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even?\
    \ n) #f)\n          (else (is_prime_helper n 3))))\n  (define (is_prime_helper\
    \ n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n       \
    \   (else (is_prime_helper n (+ i 2)))))\n  (cond ((= a 1) #f)\n        ((= a\
    \ 2) #t)\n        ((= a 3) #t)\n        ((= a 5) #t)\n        ((= a 7) #t)\n \
    \       ((= a 11) #t)\n        ((= a 13) #t)\n        ((= a 17) #t)\n        ((=\
    \ a 19) #t)\n        ((= a 23) #t)\n        ((= a 29) #t)\n        ((= a 31) #t)\n\
    \        ((= a 37) #t)\n        ((= a 41) #t)\n        ((= a 43) #t)\n       \
    \ ((= a 47) #t)\n        ((= a 53) #t)\n        ((= a 59) #t)\n        ((= a 61)\
    \ #t)\n        ((= a 67) #t)\n        ((= a 71) #t)\n        ((= a 73) #t)\n \
    \       ((= a 79) #t)\n        ((= a 83) #t)\n        ((= a 89) #t)\n        ((=\
    \ a 97) #t)\n        (else (is_prime_helper a 2))))\n", "  (define (is_prime n)\n\
    \    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n   \
    \   [else (is_prime_helper n 3)]))\n  (define (is_prime_helper n i)\n    (cond\n\
    \      [(> (* i i) n) #t]\n      [(zero? (modulo n i)) #f]\n      [else (is_prime_helper\
    \ n (+ i 2))]))\n  (define (is_multiply_prime_helper a b c)\n    (cond\n     \
    \ [(and (is_prime a) (is_prime b) (is_prime c)) #t]\n      [else #f]))\n  (cond\n\
    \    [(and (is_prime a) (is_prime b) (is_prime c)) #t]\n    [(is_multiply_prime_helper\
    \ a b c) #t]\n    [else #f]))\n", "  (define (is_prime n)\n    (define (is_divisible\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((is_divisible n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= n (find-divisor n 2)))\n  (define (is_multiply_prime-iter n)\n    (cond\
    \ ((= n 1) #t)\n          ((is_prime n) (is_multiply_prime-iter (/ a n)))\n  \
    \        (else #f)))\n  (is_multiply_prime-iter a))\n", "  (define (is_prime n)\n\
    \    (define (is_divisible a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((is_divisible\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (define (is_multiply_prime-iter a b)\n\
    \    (cond ((= b 0) #t)\n          ((is_prime a) (is_multiply_prime-iter (/ a\
    \ b) (- b 1)))\n          (else #f)))\n  (is_multiply_prime-iter a 3))\n", " \
    \ (define (is_prime n)\n    (define (is_prime_helper n i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is_prime_helper\
    \ n (+ i 1)))))\n    (is_prime_helper n 2))\n  (define (is_multiply_prime_helper\
    \ a b)\n    (cond ((= a 1) #t)\n          ((and (is_prime a) (is_prime b)) #t)\n\
    \          (else (is_multiply_prime_helper (/ a b) b))))\n  (is_multiply_prime_helper\
    \ a 3))\n", "  (define (is_prime n)\n    (define (divides? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (define (find-prime-divisor n)\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((and (divides? n test-divisor)\
    \ (is_prime test-divisor)) test-divisor)\n            (else (find-divisor n (+\
    \ test-divisor 1)))))\n    (find-divisor n 2))\n  (define (find-prime-divisors\
    \ n)\n    (cond ((= n 1) '())\n          ((is_prime n) (list n))\n          (else\
    \ (cons (find-prime-divisor n) (find-prime-divisors (/ n (find-prime-divisor n)))))))\n\
    \  (cond ((= a 1) #f)\n        ((is_prime a) #f)\n        ((= (length (find-prime-divisors\
    \ a)) 3) #t)\n        (else #f)))\n", "  (define (is_prime a)\n    (define (iter\
    \ b)\n      (cond ((= b 1) #t)\n            ((= (modulo a b) 0) #f)\n        \
    \    (else (iter (- b 1)))))\n    (iter (- a 1)))\n  (define (iter b)\n    (cond\
    \ ((= b 1) #f)\n          ((and (is_prime b) (is_prime (/ a b))) #t)\n       \
    \   (else (iter (- b 1)))))\n  (iter (/ a 3)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
