name: HumanEval_57_monotonic
language: rkt
prompt: "#lang racket\n\n;; Return #t is list elements are monotonically increasing\
  \ or decreasing.\n;; >>> (monotonic (list 1 2 4 20))\n;; #t\n;; >>> (monotonic (list\
  \ 1 20 4 10))\n;; #f\n;; >>> (monotonic (list 4 1 0 -10))\n;; #t\n(define (monotonic\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
  \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
  \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n   \
  \ (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list\
  \ 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9\
  \ 9)) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and\
    \ (positive? (sub1 (first l))) (negative? (sub1 (second l)))) #f]\n    [(and (negative?\
    \ (sub1 (first l))) (positive? (sub1 (second l)))) #f]\n    [else (monotonic (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(<\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (not (member\
    \ (first l) (rest l)) #:test <))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (not (member (first l) (rest l)) #:test >))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and\
    \ (positive? (sub1 (first l))) (positive? (sub1 (second l))))\n     (and (monotonic\
    \ (rest l)) (positive? (sub1 (first l) (second l))))]\n    [(and (negative? (sub1\
    \ (first l))) (negative? (sub1 (second l))))\n     (and (monotonic (rest l)) (negative?\
    \ (sub1 (first l) (second l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (monotonic (rest (rest l)) #f))]\n    [(< (first l) (second l)) (and\
    \ (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [(< (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (< (second l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (= (first l)\
    \ (second l))\n         (and (< (first l) (second l))\n              (monotonic\
    \ (rest l))))\n     #t]\n    [(and (> (first l) (second l))\n          (monotonic\
    \ (rest l)))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n  \
    \  [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first\
    \ l))) (positive? (sub1 (second l))))\n     (and (monotonic (rest l)) (positive?\
    \ (sub1 (first l) (second l))))]\n    [(and (negative? (sub1 (first l))) (negative?\
    \ (sub1 (second l))))\n     (and (monotonic (rest l)) (negative? (sub1 (first\
    \ l) (second l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first\
    \ l))) (positive? (sub1 (second l))))\n     (and (monotonic (rest l)) (positive?\
    \ (sub1 (first l) (second l))))]\n    [(and (negative? (sub1 (first l))) (negative?\
    \ (sub1 (second l))))\n     (and (monotonic (rest l)) (negative? (sub1 (first\
    \ l) (second l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (and (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n\
    \    [(< (first l) (second l)) (and (monotonic (rest l)) (monotonic (rest (rest\
    \ l)) #f))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n   \
    \       (every < (rest l)))]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (every > (rest l)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (positive? (first l)\
    \ (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (negative?\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l)) #t)]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\
    \ #t)]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n  \
    \  [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (positive? (first l)) (positive? (second l)))\n     (and (positive?\
    \ (first l)) (monotonic (rest l)))]\n    [(and (negative? (first l)) (negative?\
    \ (second l)))\n     (and (negative? (first l)) (monotonic (rest l)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(<\
    \ (first l) (second l))\n     (and (monotonic (rest l)) #t)]\n    [(> (first l)\
    \ (second l))\n     (and (monotonic (rest l)) #t)]\n    [else #f]))\n", "  (cond\
    \ [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car l) (cadr l))\
    \ (monotonic (cdr l))]\n        [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \       [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l))\
    \ #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>= (first l)\
    \ (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (= (first l) (second l))\n    \
    \          (> (first l) (second l))))]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (= (first l) (second l))\n             \
    \ (< (first l) (second l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest\
    \ l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(null?\
    \ l) #t]\n    [(null? (cdr l)) #t]\n    [(and (positive? (diff (car l) (cadr l)))\n\
    \          (monotonic (cdr l))) #t]\n    [(and (negative? (diff (car l) (cadr\
    \ l)))\n          (monotonic (cdr l))) #t]\n    [else #f]))\n", "  (cond\n   \
    \ [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr l)) (monotonic-decreasing\
    \ l)]\n    [(< (car l) (cadr l)) (monotonic-increasing l)]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (define (monotonic-helper l inc)\n    (cond\n      [(empty?\
    \ l) #t]\n      [(and (not inc) (empty? (rest l))) #t]\n      [(and inc (empty?\
    \ (rest l))) #t]\n      [(and (not inc) (< (first l) (first (rest l)))) (monotonic-helper\
    \ (rest l) #t)]\n      [(and inc (> (first l) (first (rest l)))) (monotonic-helper\
    \ (rest l) #f)]\n      [else #f]))\n  (monotonic-helper l #f))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (positive? (sub1 (first l))) (positive? (sub1 (second\
    \ l))))\n     (and (positive? (sub1 (second l))) (monotonic (rest l)))]\n    [(and\
    \ (negative? (sub1 (first l))) (negative? (sub1 (second l))))\n     (and (negative?\
    \ (sub1 (second l))) (monotonic (rest l)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (monotonic (rest (rest\
    \ l)) #f))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (monotonic\
    \ (rest (rest l)) #f))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n \
    \   [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest\
    \ l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first l))) (positive?\
    \ (sub1 (second l))))\n     (and (monotonic (rest l)) (positive? (sub1 (first\
    \ l) (second l))))]\n    [(and (negative? (sub1 (first l))) (negative? (sub1 (second\
    \ l))))\n     (and (monotonic (rest l)) (negative? (sub1 (first l) (second l))))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (monotonic (rest (rest\
    \ l)) #f))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (monotonic\
    \ (rest (rest l)) #f))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n \
    \   [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [(< (first\
    \ l) (second l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond ((null? l) #t)\n   \
    \     ((null? (cdr l)) #t)\n        ((and (or (= (car l) (car (cdr l)))\n    \
    \              (< (car l) (car (cdr l))))\n              (monotonic (cdr l)))\n\
    \         #t)\n        (else #f)))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest\
    \ l)) (monotonic (rest (rest l))))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (monotonic (rest (rest l))))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (monotonic (cons (first l) (rest (rest l))))) ]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (monotonic (cons (first l) (rest (rest\
    \ l))))) ]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (define\
    \ (monotonic-helper l)\n    (cond\n      [(null? l) #t]\n      [(null? (cdr l))\
    \ #t]\n      [(> (car l) (cadr l)) (monotonic-helper (cdr l))]\n      [(< (car\
    \ l) (cadr l)) (monotonic-helper (cdr l))]\n      [else #f]))\n  (monotonic-helper\
    \ l))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (positive?\
    \ (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest\
    \ l)) (negative? (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (>= (second l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (<= (second\
    \ l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (< (second\
    \ l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (or (empty? (rest (rest l)))\n              (> (second l) (third\
    \ l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [(> (first l) (second l)) (monotonic (rest l))]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n         (and (>\
    \ (first l) (second l)) (monotonic (rest l))))\n     #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) #t)]\n    [(< (first\
    \ l) (second l)) (and (monotonic (rest l)) #t)]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest\
    \ l)) (monotonic (rest (rest l)) #f))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (monotonic (rest (rest l)) #f))]\n    [else #f]))\n", "  (cond\n \
    \   [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest\
    \ l)) (positive? (sub1 (first l) (second l))))]\n    [(< (first l) (second l))\
    \ (and (monotonic (rest l)) (negative? (sub1 (first l) (second l))))]\n    [else\
    \ #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n       \
    \ [(> (first l) (second l)) (monotonic-dec (rest l))]\n        [(< (first l) (second\
    \ l)) (monotonic-inc (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (difference (first\
    \ l) (second l)))\n          (monotonic (rest l))) #t]\n    [(and (negative? (difference\
    \ (first l) (second l)))\n          (monotonic (rest l))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n    [(< (first\
    \ l) (second l)) (and (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n         (and (>\
    \ (first l) (second l)) (monotonic (rest l))))\n     #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (positive? (first l) (second l)))]\n    [(< (first\
    \ l) (second l)) (and (monotonic (rest l)) (negative? (first l) (second l)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (positive? (first l)\
    \ (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (negative?\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest\
    \ l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n  \
    \  [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest\
    \ l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (first l)) (positive?\
    \ (second l)))\n     (and (positive? (first l)) (positive? (second l)) (monotonic\
    \ (rest l)))]\n    [(and (negative? (first l)) (negative? (second l)))\n     (and\
    \ (negative? (first l)) (negative? (second l)) (monotonic (rest l)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or\
    \ (and (< (first l) (second l)) (monotonic (rest l)))\n         (and (> (first\
    \ l) (second l)) (monotonic (rest l)))) #t]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l) (second l)) (and\
    \ (monotonic (rest l)) (monotonic (rest (rest l))))]\n        [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (monotonic (rest (rest l))))]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (sub1 (first l))) (positive? (sub1 (second l))))\n     (and (monotonic (rest\
    \ l)) (positive? (sub1 (first l) (second l))))]\n    [(and (negative? (sub1 (first\
    \ l))) (negative? (sub1 (second l))))\n     (and (monotonic (rest l)) (negative?\
    \ (sub1 (first l) (second l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first l))) (positive?\
    \ (sub1 (second l))))\n     (and (positive? (sub1 (first l))) (monotonic (rest\
    \ l)))]\n    [(and (negative? (sub1 (first l))) (negative? (sub1 (second l))))\n\
    \     (and (negative? (sub1 (first l))) (monotonic (rest l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (positive? (first l) (second l)))]\n    [(< (first\
    \ l) (second l)) (and (monotonic (rest l)) (negative? (first l) (second l)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or\n      (and\n\
    \        (positive? (sub1 (first l)))\n        (and\n          (positive? (sub1\
    \ (first (rest l))))\n          (monotonic (rest l))))\n      (and\n        (negative?\
    \ (sub1 (first l)))\n        (and\n          (negative? (sub1 (first (rest l))))\n\
    \          (monotonic (rest l)))))\n      #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n    [(< (first\
    \ l) (second l)) (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>= (first l)\
    \ (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(or (= (first l) (second l))\n         (and (< (first l)\
    \ (second l))\n              (monotonic (rest l)))) #t]\n    [(or (= (first l)\
    \ (second l))\n         (and (> (first l) (second l))\n              (monotonic\
    \ (rest l)))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (positive? (sub1 (first l))) (positive? (sub1 (second l))))\n     (and\
    \ (monotonic (rest l)) (positive? (sub1 (first l) (second l))))]\n    [(and (negative?\
    \ (sub1 (first l))) (negative? (sub1 (second l))))\n     (and (monotonic (rest\
    \ l)) (negative? (sub1 (first l) (second l))))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (first\
    \ l)) (positive? (second l)))\n     (and (positive? (first l)) (monotonic (rest\
    \ l)))]\n    [(and (negative? (first l)) (negative? (second l)))\n     (and (negative?\
    \ (first l)) (monotonic (rest l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first l))) (positive?\
    \ (sub1 (second l))))\n     (and (monotonic (rest l)) (positive? (sub1 (first\
    \ l) (second l))))]\n    [(and (negative? (sub1 (first l))) (negative? (sub1 (second\
    \ l))))\n     (and (monotonic (rest l)) (negative? (sub1 (first l) (second l))))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (positive? (first l)) (positive? (second\
    \ l)))\n     (and (positive? (first l)) (monotonic (rest l)))]\n    [(and (negative?\
    \ (first l)) (negative? (second l)))\n     (and (negative? (first l)) (monotonic\
    \ (rest l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (positive? (first l)) (negative? (first (rest l))))\
    \ #f]\n    [(and (negative? (first l)) (positive? (first (rest l)))) #f]\n   \
    \ [else (monotonic (rest l))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(null? l) #t]\n\
    \    [(null? (cdr l)) #t]\n    [(and (or (< (car l) (cadr l)) (> (car l) (cadr\
    \ l)))\n          (monotonic (cdr l)))\n     #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (< (first l) (second l))\n\
    \              (monotonic (rest l)))\n         (and (> (first l) (second l))\n\
    \              (monotonic (rest l)))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (positive? (first l)) (negative? (second l))) #f]\n    [(and (negative?\
    \ (first l)) (positive? (second l))) #f]\n    [else (monotonic (rest l))]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>= (first l)\
    \ (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (positive? (first l)) (positive? (sub1 (first l))))\n         (and\
    \ (negative? (first l)) (negative? (sub1 (first l)))))\n     (monotonic (rest\
    \ l))]\n    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l))\
    \ #t]\n    [(and (not (null? (cdr l)))\n          (or (and (< (car l) (cadr l))\n\
    \                   (monotonic (cdr l)))\n              (and (> (car l) (cadr\
    \ l))\n                   (monotonic (cdr l)))))\n     #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (= (first l)\
    \ (second l))\n         (and (> (first l) (second l))\n              (monotonic\
    \ (rest l))))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n \
    \   [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest\
    \ l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (if (null? l)\n      #t\n\
    \      (let ([first (car l)]\n            [rest (cdr l)])\n        (if (null?\
    \ rest)\n            #t\n            (let ([second (car rest)]\n             \
    \     [rest (cdr rest)])\n              (if (and (<= first second) (monotonic\
    \ rest))\n                  #t\n                  (if (and (>= first second) (monotonic\
    \ rest))\n                      #t\n                      #f)))))))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (positive? (sub1 (first l)) (second l)))]\n  \
    \  [(< (first l) (second l)) (and (monotonic (rest l)) (negative? (sub1 (first\
    \ l)) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n    \
    \          (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (> (second l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(or (and (> (first l) (second l)) (monotonic\
    \ (rest l)))\n         (and (< (first l) (second l)) (monotonic (rest l))))\n\
    \     #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n    \
    \     (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (positive? (first l) (second l)))]\n    [(< (first\
    \ l) (second l)) (and (monotonic (rest l)) (negative? (first l) (second l)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (= (first l) (second l))\n         (and (> (first l) (second l))\n \
    \             (monotonic (rest l)))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n\
    \    [(and (positive? (diff (car l) (cadr l)))\n          (monotonic (cdr l)))\
    \ #t]\n    [(and (negative? (diff (car l) (cadr l)))\n          (monotonic (cdr\
    \ l))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(< (first l) (second l)) (and (monotonic (rest l)) #t)]\n    [(>\
    \ (first l) (second l)) (and (monotonic (rest l)) #t)]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (sub1 (first l))) (positive? (sub1 (second l))))\n     (and (monotonic (rest\
    \ l)) (positive? (sub1 (first l) (second l))))]\n    [(and (negative? (sub1 (first\
    \ l))) (negative? (sub1 (second l))))\n     (and (monotonic (rest l)) (negative?\
    \ (sub1 (first l) (second l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first l))) (positive?\
    \ (sub1 (second l))))\n     (and (monotonic (rest l)) (positive? (sub1 (first\
    \ l) (second l))))]\n    [(and (negative? (sub1 (first l))) (negative? (sub1 (second\
    \ l))))\n     (and (monotonic (rest l)) (negative? (sub1 (first l) (second l))))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(and (positive? (first l))\n          (negative? (first (rest l)))) #f]\n\
    \    [(and (negative? (first l))\n          (positive? (first (rest l)))) #f]\n\
    \    [else (monotonic (rest l))]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (positive? (sub1 (first l))) (positive? (sub1 (second\
    \ l))))\n     (and (positive? (sub1 (second l))) (monotonic (rest l)))]\n    [(and\
    \ (negative? (sub1 (first l))) (negative? (sub1 (second l))))\n     (and (negative?\
    \ (sub1 (second l))) (monotonic (rest l)))]\n    [else #f]))\n", "  (cond\n  \
    \  [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (monotonic (rest (rest l))))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (monotonic (rest (rest l))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first\
    \ l))) (positive? (sub1 (second l))))\n     (and (monotonic (rest l)) (positive?\
    \ (sub1 (first l) (second l))))]\n    [(and (negative? (sub1 (first l))) (negative?\
    \ (sub1 (second l))))\n     (and (monotonic (rest l)) (negative? (sub1 (first\
    \ l) (second l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>= (first l)\
    \ (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (positive? (sub1 (first l) (second l))))]\n    [(<\
    \ (first l) (second l)) (and (monotonic (rest l)) (negative? (sub1 (first l) (second\
    \ l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (positive? (sub1 (first l)))\n        \
    \  (positive? (sub1 (second l))))\n     (and (monotonic (rest l))\n          (positive?\
    \ (sub1 (first l)))\n          (positive? (sub1 (second l))))]\n    [(and (negative?\
    \ (sub1 (first l)))\n          (negative? (sub1 (second l))))\n     (and (monotonic\
    \ (rest l))\n          (negative? (sub1 (first l)))\n          (negative? (sub1\
    \ (second l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (positive? (first l)) (positive? (second l)))\n   \
    \  (and (positive? (first l)) (positive? (second l)) (monotonic (rest l)))]\n\
    \    [(and (negative? (first l)) (negative? (second l)))\n     (and (negative?\
    \ (first l)) (negative? (second l)) (monotonic (rest l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive?\
    \ (sub1 (first l))) (positive? (sub1 (second l))))\n     (and (positive? (sub1\
    \ (first l))) (monotonic (rest l)))]\n    [(and (negative? (sub1 (first l))) (negative?\
    \ (sub1 (second l))))\n     (and (negative? (sub1 (first l))) (monotonic (rest\
    \ l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first\
    \ l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest\
    \ l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n\
    \    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n  \
    \  [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (> (first\
    \ l) (second l)) (monotonic (rest l)))\n         (and (< (first l) (second l))\
    \ (monotonic (rest l))))\n     #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>= (first l)\
    \ (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (or (< (first l) (second l)) (> (first l) (second l)))\n\
    \          (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(or (= (first l) (second l))\n    \
    \     (< (first l) (second l))\n         (> (first l) (second l)))\n     (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic (rest l)) (monotonic\
    \ (rest (rest l))))]\n    [(< (first l) (second l)) (and (monotonic (rest l))\
    \ (monotonic (rest (rest l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (monotonic (rest (rest\
    \ l)) #f))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (monotonic\
    \ (rest (rest l)) #f))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n \
    \   [(empty? (rest l)) #t]\n    [(or (and (> (first l) (second l))\n         \
    \     (monotonic (rest l)))\n         (and (< (first l) (second l))\n        \
    \      (monotonic (rest l))))\n     #t]\n    [else #f]))\n", "  (cond ((null?\
    \ l) #t)\n        ((null? (cdr l)) #t)\n        ((and (< (car l) (cadr l)) (monotonic\
    \ (cdr l))) #t)\n        ((and (> (car l) (cadr l)) (monotonic (cdr l))) #t)\n\
    \        (else #f)))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l))\
    \ #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l)\
    \ (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(>\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (apply > (rest\
    \ l)))]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n     \
    \     (apply < (rest l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (positive? (first\
    \ l)) (negative? (second l))) #f]\n    [(and (negative? (first l)) (positive?\
    \ (second l))) #f]\n    [else (monotonic (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l)\
    \ (second l)) (monotonic-decreasing (rest l))]\n        [(< (first l) (second\
    \ l)) (monotonic-increasing (rest l))]\n        [else #f]))\n", "  (cond\n   \
    \ [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [(<\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (or (empty?\
    \ (rest (rest l)))\n              (< (second l) (third l))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n\
    \    [(or (and (< (car l) (cadr l)) (monotonic (cdr l)))\n         (and (> (car\
    \ l) (cadr l)) (monotonic (cdr l)))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (monotonic (rest (rest l))))]\n    [(< (first l) (second l)) (and\
    \ (monotonic (rest l)) (monotonic (rest (rest l))))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second\
    \ l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (= (first l) (second l))\n\
    \              (< (first l) (second l))))]\n    [(< (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (= (first l) (second l))\n      \
    \        (> (first l) (second l))))]\n    [else #t]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (<= (first l) (second l)))]\n    [(< (first l) (second l)) (and (monotonic\
    \ (rest l)) (>= (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (and (monotonic\
    \ (rest l)) (positive? (first l) (second l)))]\n    [(< (first l) (second l))\
    \ (and (monotonic (rest l)) (negative? (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (and (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n    [(< (first l)\
    \ (second l)) (and (monotonic (rest l)) (monotonic (rest (rest l)) #f))]\n   \
    \ [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
