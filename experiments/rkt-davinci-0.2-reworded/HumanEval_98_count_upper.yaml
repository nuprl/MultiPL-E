name: HumanEval_98_count_upper
language: rkt
prompt: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
  \ in even indices.\n;; For example:\n;; >>> (count_upper \"aBCdEf\")\n;; 1\n;; >>>\
  \ (count_upper \"abcdefg\")\n;; 0\n;; >>> (count_upper \"dBBE\")\n;; 0\n(define\
  \ (count_upper s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
  \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\"\
  ) 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"\
  B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\
  \") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([i 0] [count\
    \ 0])\n    (cond [(= i (string-length s)) count]\n          [(and (char-upper-case?\
    \ (string-ref s i))\n                (char-vowel? (string-ref s i)))\n       \
    \    (loop (+ i 2) (+ count 1))]\n          [else (loop (+ i 2) count)])))\n",
  "  (define (is_upper? c)\n    (char-upcase c))\n  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder n\
    \ 2) 0))\n  (define (count_upper_helper s n)\n    (cond\n      [(empty? s) n]\n\
    \      [(and (is_even? n) (is_upper? (first s)) (is_vowel? (first s)))\n     \
    \  (count_upper_helper (rest s) (+ n 1))]\n      [else (count_upper_helper (rest\
    \ s) n)]))\n  (count_upper_helper s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n\
    \            (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (define (count_upper-helper s i)\n\
    \    (cond\n      [(= i (string-length s)) 0]\n      [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else\
    \ (count_upper-helper s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (remainder (string-length\
    \ s) 2)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (cond [(empty? s) 0]\n        [(and (char-upper-case? (first s))\n          \
    \    (vowel? (first s)))\n         (+ 1 (count_upper (rest s)))]\n        [else\
    \ (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-upper-case?\
    \ c)\n         (member c '#(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_upper? (first s))\n       (+\
    \ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels (rest s))]))\n\
    \  (count-upper-vowels (even-indexes s)))\n", "  (define (count-upper-helper s\
    \ i)\n    (cond\n      [(empty? s) 0]\n      [(and (char-upper-case? (first s))\n\
    \            (even? i))\n       (+ 1 (count-upper-helper (rest s) (+ i 1)))]\n\
    \      [else (count-upper-helper (rest s) (+ i 1))]))\n  (count-upper-helper s\
    \ 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i\
    \ 0] [count 0])\n    (if (empty? s)\n        count\n        (if (and (even? i)\
    \ (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n            (loop (rest s)\
    \ (+ i 1) (+ count 1))\n            (loop (rest s) (+ i 1) count)))))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i)\n            (member (string-ref s i) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1)\
    \ (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (even? (length s)) (vowel? (string-ref s 0))) (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([i 0] [n 0])\n    (cond\n      [(= i (string-length s)) n]\n      [(and\
    \ (= (modulo i 2) 0)\n            (member (string-ref s i) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n       (loop (+ i 1) (+ n 1))]\n      [else (loop (+ i 1) n)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count_upper_helper s i count)\n    (cond\n  \
    \    [(empty? s) count]\n      [(even? i)\n       (if (is_upper? (first s))\n\
    \           (count_upper_helper (rest s) (add1 i) (add1 count))\n           (count_upper_helper\
    \ (rest s) (add1 i) count))]\n      [else (count_upper_helper (rest s) (add1 i)\
    \ count)]))\n  (count_upper_helper s 0 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", " \
    \ (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is_even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels s)\n\
    \    (cond [(empty? s) 0]\n          [(and (is_upper? (first s)) (is_vowel? (first\
    \ s)))\n           (+ 1 (count-upper-vowels (rest s)))]\n          [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (filter is_even? (string->list s))))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (char-upper-case? (first s))\n            (even? i))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(empty?\
    \ s) i]\n      [(and (char-upper-case? (first s))\n            (even? (add1 (length\
    \ s))))\n       (count_upper_helper (rest s) (add1 i))]\n      [else (count_upper_helper\
    \ (rest s) i)]))\n  (count_upper_helper s 0))\n", "  (define (count_upper_helper\
    \ s i acc)\n    (cond\n      [(empty? s) acc]\n      [(= (remainder i 2) 0)\n\
    \       (cond\n         [(char-upper-case? (first s))\n          (count_upper_helper\
    \ (rest s) (+ i 1) (+ acc 1))]\n         [else\n          (count_upper_helper\
    \ (rest s) (+ i 1) acc)])]\n      [else\n       (count_upper_helper (rest s) (+\
    \ i 1) acc)]))\n  (count_upper_helper s 0 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (= (modulo i 2)\
    \ 0) (char-upper-case? (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n\
    \      [else (loop (+ i 1) count)])))\n", "  (define (is_upper? c)\n    (and (char-upper-case?\
    \ c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_upper? (first s))\n       (+\
    \ 1 (count-upper-even-indices (rest s)))]\n      [else (count-upper-even-indices\
    \ (rest s))]))\n  (count-upper-even-indices (rest s)))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(even? (string-length s))\n     (cond\n    \
    \   [(char-upcase? (string-ref s 0)) (+ 1 (count_upper (substring s 1)))]\n  \
    \     [else (count_upper (substring s 1))])]\n    [else (count_upper (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even?\
    \ (index s))) (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (even? i) (char-upper-case? (first s)))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s))) (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (member (first s) '#\\A #\\\
    E #\\I #\\O #\\U))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (vowel? (first s))\
    \ (even? (length s))) (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (let ([evens (filter even? (range (string-length\
    \ s)))])\n    (length (filter (lambda (i) (char-upper-case? (string-ref s i)))\
    \ evens))))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (define (count-upper-helper s i)\n  \
    \  (cond\n      [(empty? s) 0]\n      [(and (char-upper-case? (first s))\n   \
    \         (even? i))\n       (+ 1 (count-upper-helper (rest s) (+ i 1)))]\n  \
    \    [else (count-upper-helper (rest s) (+ i 1))]))\n  (count-upper-helper s 0))\n",
  "  (let ([s (string-upcase s)])\n    (for/sum ([i (in-range (string-length s))]\n\
    \              #:when (and (even? i)\n                          (member (string-ref\
    \ s i) \"AEIOU\")))\n      1)))\n", "  (let loop ([s s] [i 0] [count 0])\n   \
    \ (cond [(empty? s) count]\n          [(and (char-upper-case? (first s))\n   \
    \             (even? i))\n           (loop (rest s) (+ i 1) (+ count 1))]\n  \
    \        [else (loop (rest s) (+ i 1) count)])))\n", "  (let loop ([i 0] [count\
    \ 0])\n    (cond [(= i (string-length s)) count]\n          [(and (char-upper-case?\
    \ (string-ref s i))\n                (vowel? (string-ref s i)))\n           (loop\
    \ (+ i 2) (+ count 1))]\n          [else (loop (+ i 2) count)])))\n", "  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s)\n    (cond ((null? s) 0)\n\
    \          ((is_upper? (car s))\n           (+ 1 (count-upper-vowels (cdr s))))\n\
    \          (else (count-upper-vowels (cdr s)))))\n  (define (even-indices s)\n\
    \    (cond ((null? s) '())\n          (else (cons (car s) (odd-indices (cdr s))))))\n\
    \  (define (odd-indices s)\n    (cond ((null? s) '())\n          (else (even-indices\
    \ (cdr s)))))\n  (count-upper-vowels (even-indices s)))\n", "  (define (is_upper?\
    \ c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O\
    \ #\\U))))\n  (define (count-upper-vowels s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(is_upper? (first s)) (+ 1 (count-upper-vowels (rest s)))]\n      [else\
    \ (count-upper-vowels (rest s))]))\n  (count-upper-vowels (even-indexes s)))\n",
  "  (define (count_upper-helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n\
    \      [(and (char-upper-case? (string-ref s i))\n            (vowel? (string-ref\
    \ s i)))\n       (+ 1 (count_upper-helper s (+ i 2)))]\n      [else (count_upper-helper\
    \ s (+ i 2))]))\n  (count_upper-helper s 0))\n", "  (let loop ([s s] [i 0] [count\
    \ 0])\n    (cond [(empty? s) count]\n          [(and (even? i) (char-upper-case?\
    \ (first s)))\n           (loop (rest s) (+ i 1) (+ count 1))]\n          [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond\n\
    \      [(= i (string-length s)) count]\n      [(and (even? i) (vowel? (string-ref\
    \ s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (define (count_upper-helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n\
    \      [(and (even? i) (vowel? (string-ref s i)))\n       (+ 1 (count_upper-helper\
    \ s (+ i 1)))]\n      [else (count_upper-helper s (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (member (first s) '#\\A #\\E #\\I #\\O #\\U))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (count-upper-helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? i))\n       (+ 1 (count-upper-helper (rest s) (+ i 1)))]\n\
    \      [else (count-upper-helper (rest s) (+ i 1))]))\n  (count-upper-helper s\
    \ 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n\
    \      [(and (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+\
    \ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s)\n    (cond ((null? s) 0)\n\
    \          ((is_upper? (car s))\n           (+ 1 (count-upper-vowels (cdr s))))\n\
    \          (else (count-upper-vowels (cdr s)))))\n  (count-upper-vowels (cddr\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (count_upper-helper\
    \ s i)\n    (if (or (= i (string-length s))\n            (odd? i))\n        0\n\
    \        (if (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U))\n         \
    \   (+ 1 (count_upper-helper s (+ i 1)))\n            (count_upper-helper s (+\
    \ i 1)))))\n  (count_upper-helper s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n\
    \            (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (char-upper-case? (first s)))\n           (loop (rest s) (+ i 1) (+\
    \ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (even? (string-length s)) (vowel? (string-ref s\
    \ 0)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(= (remainder (string-length\
    \ s) 2) 0)\n     (cond\n       [(char-upper-case? (string-ref s 0)) (+ 1 (count_upper\
    \ (substring s 1)))]\n       [else (count_upper (substring s 1))])]\n    [else\
    \ (count_upper (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1)\
    \ (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (eq? (modulo (string-length s) 2) 0)\n        \
    \  (member (string-ref s 0) '(\"A\" \"E\" \"I\" \"O\" \"U\")))\n     (+ 1 (count_upper\
    \ (substring s 1)))]\n    [else (count_upper (substring s 1))]))\n", "  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (eq?\
    \ (modulo (add1 i) 2) 0)\n            (member (first s) '(#\\A #\\E #\\I #\\O\
    \ #\\U)))\n       (count_upper-helper (rest s) (add1 i))]\n      [else (count_upper-helper\
    \ (rest s) i)]))\n  (count_upper-helper s 0))\n", "  (define (is_upper? c)\n \
    \   (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n\
    \  (define (count-upper-vowels s)\n    (cond ((null? s) 0)\n          ((is_upper?\
    \ (car s))\n           (+ 1 (count-upper-vowels (cdr s))))\n          (else (count-upper-vowels\
    \ (cdr s)))))\n  (count-upper-vowels (cddr s)))\n", "  (let loop ([i 0] [count\
    \ 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i)\
    \ (char-upper-case? (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n \
    \     [else (loop (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (vowel? (first s)) (even? (index s))) (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-upper-case?\
    \ c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_upper? (first s))\n       (+\
    \ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels (rest s))]))\n\
    \  (count-upper-vowels (even-index-chars s)))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (char-vowel? (first s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n   \
    \   [(and (char-upper-case? (first s))\n            (even? i))\n       (loop (rest\
    \ s) (add1 i) (add1 count))]\n      [else (loop (rest s) (add1 i) count)])))\n",
  "  (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\\
    i) (char=? c #\\o) (char=? c #\\u)))\n  (define (is-even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (cond\n    \
    \  [(empty? s) 0]\n      [(is-even? (string-length s))\n       (if (and (is-upper?\
    \ (string-ref s 0)) (is-vowel? (string-ref s 0)))\n           (+ 1 (count-upper-vowels-in-even-indices\
    \ (substring s 1)))\n           (count-upper-vowels-in-even-indices (substring\
    \ s 1)))]\n      [else (count-upper-vowels-in-even-indices (substring s 1))]))\n\
    \  (count-upper-vowels-in-even-indices s))\n", "  (let ([s (string-upcase s)])\n\
    \    (let loop ([i 0] [count 0])\n      (cond\n        [(= i (string-length s))\
    \ count]\n        [(and (char-vowel? (string-ref s i))\n              (even? i))\n\
    \         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1)\
    \ (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (let loop\
    \ ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n\
    \      [else (loop (rest s) (+ i 1) count)])))\n", "  (define (is_upper? c)\n\
    \    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n\
    \  (define (count-upper-even-index s)\n    (cond ((null? s) 0)\n          ((is_upper?\
    \ (car s))\n           (+ 1 (count-upper-even-index (cddr s))))\n          (else\
    \ (count-upper-even-index (cddr s)))))\n  (count-upper-even-index s))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n \
    \   (cond\n      [(empty? s) count]\n      [(and (even? i) (member (first s) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i\
    \ 0] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (even? i))\n           (loop (rest s) (+ i 1) (+\
    \ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", " \
    \ (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n\
    \  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-upper-vowels-in-even-indices s)\n    (cond\n      [(empty? s) 0]\n  \
    \    [(is_upper? (first s))\n       (if (is_vowel? (first s))\n           (+ 1\
    \ (count-upper-vowels-in-even-indices (rest s)))\n           (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices (string->list s)))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? (add1 (remainder i 2))))\n       (count_upper-helper\
    \ (rest s) (add1 i))]\n      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper\
    \ s 0))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length\
    \ s)) count]\n      [(and (even? i) (char-upper-case? (string-ref s i)))\n   \
    \    (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n        \
    \  (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? i))\n       (+ 1 (count_upper-helper (rest s) (+ i 1)))]\n\
    \      [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper s\
    \ 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even? (length s)) (vowel? (first\
    \ s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (define (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\\
    A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s)\n    (cond ((null?\
    \ s) 0)\n          ((is_upper? (car s))\n           (+ 1 (count-upper-vowels (cdr\
    \ s))))\n          (else (count-upper-vowels (cdr s)))))\n  (count-upper-vowels\
    \ (cddr s)))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n\
    \          [(and (vowel? (first s))\n                (even? i)\n             \
    \   (upper? (first s)))\n           (loop (rest s) (+ i 1) (+ count 1))]\n   \
    \       [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n\
    \     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", " \
    \ (define (count_upper-helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and\
    \ (even? i) (char-upper-case? (first s)))\n       (+ 1 (count_upper-helper (rest\
    \ s) (+ i 1)))]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (let loop ([i 0] [count 0])\n    (cond\n  \
    \    [(= i (string-length s)) count]\n      [(and (even? i) (vowel? (string-ref\
    \ s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (member (first s) '#\\A #\\E #\\I #\\O #\\U))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s i)\n    (cond\n      [(empty?\
    \ s) i]\n      [(and (is_upper? (first s))\n            (even? (add1 i)))\n  \
    \     (count-upper-vowels (rest s) (add1 i))]\n      [else (count-upper-vowels\
    \ (rest s) i)]))\n  (count-upper-vowels s 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(= (remainder (string-length\
    \ s) 2) 0)\n     (cond\n       [(char-upper-case? (string-ref s 0)) (+ 1 (count_upper\
    \ (substring s 1)))]\n       [else (count_upper (substring s 1))])]\n    [else\
    \ (count_upper (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(= (remainder\
    \ (string-length s) 2) 0)\n     (cond\n       [(char-upper-case? (string-ref s\
    \ 0)) (+ 1 (count_upper (substring s 1)))]\n       [else (count_upper (substring\
    \ s 1))])]\n    [else (count_upper (substring s 1))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-upper-case? c)\n \
    \        (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count_upper_helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(is_upper? (first s))\n      \
    \ (+ (if (even? i) 1 0)\n          (count_upper_helper (rest s) (+ i 1)))]\n \
    \     [else (count_upper_helper (rest s) (+ i 1))]))\n  (count_upper_helper s\
    \ 0))\n", "  (let ([s (string-upcase s)])\n    (for/sum ([i (in-range (string-length\
    \ s))]\n              #:when (even? i)\n              #:when (member (string-ref\
    \ s i) \"AEIOU\"))\n      1)))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n\
    \      [(empty? s) count]\n      [(and (even? i) (char-upper-case? (first s)))\n\
    \       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i\
    \ 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s)\
    \ count]\n          [(and (char-upper-case? (first s))\n                (even?\
    \ i))\n           (loop (rest s) (+ i 1) (+ count 1))]\n          [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (even? i) (char-upper-case?\
    \ (first s)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (cond [(empty? s) 0]\n        [(and (char-upper-case?\
    \ (first s))\n              (char-vowel? (first s))\n              (even? (remainder\
    \ (string-length s) 2)))\n         (+ 1 (count_upper (rest s)))]\n        [else\
    \ (count_upper (rest s))]))\n", "  (define (count_upper-helper s i)\n    (cond\n\
    \      [(= i (string-length s)) 0]\n      [(and (= (modulo i 2) 0) (char-upper-case?\
    \ (string-ref s i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else\
    \ (count_upper-helper s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n   \
    \   [(and (even? i) (char-upper-case? (string-ref s i)))\n       (+ 1 (count_upper-helper\
    \ s (+ i 1)))]\n      [else (count_upper-helper s (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (define (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-even? (string-length s))\n \
    \      (+ (if (and (is-upper? (string-ref s 0))\n                   (is-vowel?\
    \ (string-ref s 0)))\n              1\n              0)\n          (count-upper-vowels-in-even-indices\
    \ (substring s 1)))]\n      [else (count-upper-vowels-in-even-indices (substring\
    \ s 1))]))\n  (count-upper-vowels-in-even-indices s))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (even? (string-length s)) (char-upper-case? (string-ref s 0)))\n\
    \     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([i 0] [count\
    \ 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(and (char-vowel?\
    \ (string-ref s i))\n            (char-upper-case? (string-ref s i)))\n      \
    \ (loop (+ i 2) (+ count 1))]\n      [else (loop (+ i 2) count)])))\n", "  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n           (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n",
  "  (define (count_upper-helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n\
    \      [(and (= (modulo i 2) 0) (string-contains \"AEIOU\" (string-ref s i)))\n\
    \       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else (count_upper-helper\
    \ s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case? (first\
    \ s))\n            (even? (add1 (remainder i 2))))\n       (count_upper-helper\
    \ (rest s) (add1 i))]\n      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper\
    \ s 0))\n", "  (define (count_upper-helper s i)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(and (char-upper-case? (first s))\n            (even? i))\n     \
    \  (+ 1 (count_upper-helper (rest s) (+ i 1)))]\n      [else (count_upper-helper\
    \ (rest s) (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (let loop ([s s] [i\
    \ 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n\
    \      [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (count_upper-helper s i)\n    (cond\n      [(= i\
    \ (string-length s)) 0]\n      [(and (even? i) (char-upper-case? (string-ref s\
    \ i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else (count_upper-helper\
    \ s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (or (char=? c #\\A)\n\
    \             (char=? c #\\E)\n             (char=? c #\\I)\n             (char=?\
    \ c #\\O)\n             (char=? c #\\U))))\n  (define (count_upper_helper s i)\n\
    \    (if (or (null? s)\n            (odd? i))\n        0\n        (+ (if (is_upper?\
    \ (car s)) 1 0)\n           (count_upper_helper (cdr s) (+ i 1)))))\n  (count_upper_helper\
    \ s 0))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=?\
    \ c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices (rest s)))]\n \
    \     [else (count-upper-vowels-in-even-indices (rest s))]))\n  (count-upper-vowels-in-even-indices\
    \ (rest s)))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(empty?\
    \ s) i]\n      [(and (char-upper-case? (first s))\n            (even? (remainder\
    \ i 2)))\n       (count_upper_helper (rest s) (+ i 1))]\n      [else (count_upper_helper\
    \ (rest s) (+ i 1))]))\n  (count_upper_helper s 0))\n", "  (let loop ([s s] [i\
    \ 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? i) (member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (define (count_upper_helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(and (even? i) (vowel? (first\
    \ s))) (+ 1 (count_upper_helper (rest s) (+ i 1)))]\n      [else (count_upper_helper\
    \ (rest s) (+ i 1))]))\n  (count_upper_helper s 0))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(vowel? (string-ref s 0))\n     (if (odd? (string-length s))\n \
    \        (count_upper (substring s 1))\n         (+ 1 (count_upper (substring\
    \ s 1))))]\n    [else (count_upper (substring s 1))]))\n", "  (define (is_upper?\
    \ c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O\
    \ #\\U))))\n  (define (count-even-upper s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(is_upper? (first s))\n       (+ 1 (count-even-upper (rest s)))]\n   \
    \   [else\n       (count-even-upper (rest s))]))\n  (count-even-upper (rest s)))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (even? (string-length s)) (char-upper-case?\
    \ (string-ref s 0)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper\
    \ (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (vowel? (first s)) (even? (index s))) (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (even?\
    \ (length s)) (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (char-upcase c))\n\
    \  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is_even? n)\n    (= (remainder n 2) 0))\n  (define (count_upper-helper s n)\n\
    \    (cond\n      [(empty? s) n]\n      [(and (is_even? n) (is_upper? (first s))\
    \ (is_vowel? (first s)))\n       (count_upper-helper (rest s) (+ n 1))]\n    \
    \  [else (count_upper-helper (rest s) n)]))\n  (count_upper-helper s 0))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(even? (string-length s))\n     (cond\n    \
    \   [(string-contains-ci? \"aeiou\" (string-ref s 0))\n        (+ 1 (count_upper\
    \ (string-drop s 1)))]\n       [else (count_upper (string-drop s 1))])]\n    [else\
    \ (count_upper (string-drop s 1))]))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n\
    \            (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond [(empty? s) count]\n          [(and (even? i) (member (first s) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n           (loop (rest s) (+ i 1) (+ count 1))]\n  \
    \        [else (loop (rest s) (+ i 1) count)])))\n", "  (let loop ([i 0] [count\
    \ 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i)\
    \ (char-upper-case? (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n \
    \     [else (loop (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (vowel? (first s)) (even? (index s))) (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (vowel? (first s)) (even? (index s))) (+ 1 (count_upper (rest s)))]\n    [else\
    \ (count_upper (rest s))]))\n", "  (define (is_upper c)\n    (and (char-upper-case?\
    \ c)\n         (member c '#(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count_upper_helper\
    \ s i)\n    (if (or (empty? s)\n            (odd? i))\n        0\n        (+ (if\
    \ (is_upper (first s)) 1 0)\n           (count_upper_helper (rest s) (+ i 1)))))\n\
    \  (count_upper_helper s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (member (first s) '#\\A #\\E #\\I #\\O #\\U))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (define (count_upper_iter s i acc)\n\
    \    (cond\n      [(empty? s) acc]\n      [(= i 0) (count_upper_iter (rest s)\
    \ 1 (+ acc (if (char-upper-case? (first s)) 1 0)))]\n      [else (count_upper_iter\
    \ (rest s) 0 acc)]))\n  (count_upper_iter s 0 0))\n", "  (define (is_upper? c)\n\
    \    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is_vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (count_upper-helper s n)\n    (cond\n      [(empty? s) n]\n\
    \      [(and (is_even? n) (is_upper? (first s)) (is_vowel? (first s)))\n     \
    \  (count_upper-helper (rest s) (+ n 1))]\n      [else (count_upper-helper (rest\
    \ s) n)]))\n  (count_upper-helper s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (even? i) (char-upper-case?\
    \ (first s)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop\
    \ (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else\
    \ (count_upper-helper s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond [(empty? s) count]\n          [(and (even? i) (member (first s) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n           (loop (rest s) (+ i 1) (+ count 1))]\n  \
    \        [else (loop (rest s) (+ i 1) count)])))\n", "  (define (is_upper? c)\n\
    \    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O #\\U))))\n\
    \  (define (count-upper-even-indices s)\n    (cond\n      [(empty? s) 0]\n   \
    \   [(is_upper? (first s))\n       (+ 1 (count-upper-even-indices (rest s)))]\n\
    \      [else\n       (count-upper-even-indices (rest s))]))\n  (count-upper-even-indices\
    \ (rest s)))\n", "  (define (is_upper? c)\n    (and (char-upper-case? c)\n   \
    \      (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count_upper_helper\
    \ s i)\n    (cond\n      [(empty? s) 0]\n      [(is_upper? (first s))\n      \
    \ (+ (if (even? i) 1 0)\n          (count_upper_helper (rest s) (+ i 1)))]\n \
    \     [else (count_upper_helper (rest s) (+ i 1))]))\n  (count_upper_helper s\
    \ 0))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n\
    \          [(and (even? i) (char-upper-case? (first s)))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n",
  "  (let ((count 0))\n    (for ([i (in-range (string-length s))])\n      (when (and\
    \ (even? i)\n                 (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\\
    U)))\n        (set! count (+ count 1))))\n    count))\n", "  (define (is_upper\
    \ c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O\
    \ #\\U))))\n  (define (count_upper_helper s i)\n    (if (or (equal? i (string-length\
    \ s))\n            (not (is_upper (string-ref s i))))\n        0\n        (+ 1\
    \ (count_upper_helper s (+ i 2)))))\n  (count_upper_helper s 0))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (let ([s (string-upcase s)])\n    (for/sum\
    \ ([i (in-range (string-length s))]\n              #:when (even? i)\n        \
    \      #:when (member (string-ref s i) \"AEIOU\"))\n      1)))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n", "  (let ([s (string-upcase s)])\n    (cond\n      [(empty? s) 0]\n\
    \      [(member (first s) '(\"A\" \"E\" \"I\" \"O\" \"U\"))\n       (+ 1 (count_upper\
    \ (rest s)))]\n      [else (count_upper (rest s))])))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(and (char-upper-case? (first s))\n          (member (first s) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case?\
    \ c)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=?\
    \ c #\\i) (char=? c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices (rest s)))]\n \
    \     [else (count-upper-vowels-in-even-indices (rest s))]))\n  (count-upper-vowels-in-even-indices\
    \ (rest s)))\n", "  (define (count_upper_helper s i)\n    (if (= i (string-length\
    \ s))\n        0\n        (if (and (= (modulo i 2) 0)\n                 (member\
    \ (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n            (+ 1 (count_upper_helper\
    \ s (+ i 1)))\n            (count_upper_helper s (+ i 1)))))\n  (count_upper_helper\
    \ s 0))\n", "  (define (is_upper? c)\n    (and (char-upper-case? c)\n        \
    \ (member c '(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count_upper-helper s i)\n\
    \    (cond\n      [(empty? s) 0]\n      [(is_upper? (first s))\n       (+ (if\
    \ (even? i) 1 0)\n          (count_upper-helper (rest s) (+ i 1)))]\n      [else\
    \ (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper s 0))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(and (even? (length s)) (char-upper-case? (first\
    \ s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count\
    \ 0])\n    (cond\n      [(empty? s) count]\n      [(and (even? i) (member (first\
    \ s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n\
    \      [else (loop (rest s) (+ i 1) count)])))\n", "  (let loop ([s s] [count\
    \ 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case? (first\
    \ s))\n                (vowel? (first s)))\n           (loop (rest s) (+ count\
    \ 1))]\n          [else (loop (rest s) count)])))\n", "  (let loop ([i 0] [count\
    \ 0])\n    (cond\n      [(= i (string-length s)) count]\n      [(and (even? i)\
    \ (vowel? (string-ref s i)))\n       (loop (+ i 1) (+ count 1))]\n      [else\
    \ (loop (+ i 1) count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case?\
    \ (first s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper\
    \ (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\\
    U)))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s)\
    \ (+ i 1) count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond [(= i (string-length\
    \ s)) count]\n          [(and (even? i) (char-upper-case? (string-ref s i)))\n\
    \           (loop (+ i 1) (+ count 1))]\n          [else (loop (+ i 1) count)])))\n",
  "  (define (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\\
    A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-even-indexes s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is_upper? (first s)) (+ 1 (count-upper-even-indexes\
    \ (rest s)))]\n      [else (count-upper-even-indexes (rest s))]))\n  (count-upper-even-indexes\
    \ (rest s)))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define (is-upper? c)\n\
    \    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-upper-vowels s)\n\
    \    (cond ((null? s) 0)\n          ((and (is-upper? (car s)) (is-vowel? (car\
    \ s)))\n           (+ 1 (count-upper-vowels (cdr s))))\n          (else (count-upper-vowels\
    \ (cdr s)))))\n  (count-upper-vowels (string-&gt;list s)))\n</code>\n", "  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count_upper_helper s i)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_upper? (first s))\n       (+ (if (even? i) 1 0)\n        \
    \  (count_upper_helper (rest s) (+ i 1)))]\n      [else (count_upper_helper (rest\
    \ s) (+ i 1))]))\n  (count_upper_helper s 0))\n", "  (define (count_upper_helper\
    \ s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(and (char-upper-case?\
    \ (string-ref s i))\n            (vowel? (string-ref s i)))\n       (+ 1 (count_upper_helper\
    \ s (+ i 2)))]\n      [else (count_upper_helper s (+ i 2))]))\n  (count_upper_helper\
    \ s 0))\n", "  (define (count_upper_helper s i)\n    (cond\n      [(= i (string-length\
    \ s)) 0]\n      [(and (char-upper-case? (string-ref s i))\n            (vowel?\
    \ (string-ref s i)))\n       (+ 1 (count_upper_helper s (+ i 2)))]\n      [else\
    \ (count_upper_helper s (+ i 2))]))\n  (count_upper_helper s 0))\n", "  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? i))\n       (+ 1 (count_upper-helper (rest s)\
    \ (+ i 1)))]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (define (count_upper_iter s i count)\n    (cond\n      [(empty?\
    \ s) count]\n      [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\\
    U)))\n       (count_upper_iter (rest s) (+ i 1) (+ count 1))]\n      [else (count_upper_iter\
    \ (rest s) (+ i 1) count)]))\n  (count_upper_iter s 0 0))\n", "  (define (is_upper?\
    \ c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E #\\I #\\O\
    \ #\\U))))\n  (define (count-even-upper s)\n    (if (empty? s)\n        0\n  \
    \      (if (is_upper? (first s))\n            (+ 1 (count-even-upper (rest s)))\n\
    \            (count-even-upper (rest s)))))\n  (count-even-upper (rest s)))\n",
  "  (let ([s (string-upcase s)])\n    (let loop ([i 0] [count 0])\n      (cond\n\
    \        [(= i (string-length s)) count]\n        [(and (char-vowel? (string-ref\
    \ s i))\n              (even? i))\n         (loop (+ i 1) (+ count 1))]\n    \
    \    [else (loop (+ i 1) count)]))))\n", "  (cond\n    [(empty? s) 0]\n    [(and\
    \ (char-upper-case? (first s))\n          (member (first s) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (define (count_upper-helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n\
    \      [(and (even? i) (string-upper-case? (string-ref s i)))\n       (+ 1 (count_upper-helper\
    \ s (+ i 1)))]\n      [else (count_upper-helper s (+ i 1))]))\n  (count_upper-helper\
    \ s 0))\n", "  (define (count_upper-helper s i)\n    (cond\n      [(empty? s)\
    \ i]\n      [(and (char-upper-case? (first s))\n            (even? (add1 (remainder\
    \ i 2))))\n       (count_upper-helper (rest s) (add1 i))]\n      [else (count_upper-helper\
    \ (rest s) i)]))\n  (count_upper-helper s 0))\n", "  (define (count_upper-helper\
    \ s i)\n    (cond\n      [(empty? s) i]\n      [(char-upper-case? (first s))\n\
    \       (if (even? (add1 i))\n           (count_upper-helper (rest s) (add1 i))\n\
    \           (count_upper-helper (rest s) i))]\n      [else (count_upper-helper\
    \ (rest s) i)]))\n  (count_upper-helper s 0))\n", "  (let ([count 0])\n    (for\
    \ ([i (in-range (string-length s))])\n      (when (and (even? i)\n           \
    \      (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n        (set! count\
    \ (+ count 1))))\n    count))\n", "  (cond [(empty? s) 0]\n        [(and (vowel?\
    \ (first s)) (even? (length s))) (+ 1 (count_upper (rest s)))]\n        [else\
    \ (count_upper (rest s))]))\n", "  (let loop ([i 0] [count 0])\n    (cond [(=\
    \ i (string-length s)) count]\n          [(and (even? i) (vowel? (string-ref s\
    \ i)))\n           (loop (+ i 1) (+ count 1))]\n          [else (loop (+ i 1)\
    \ count)])))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first\
    \ s))\n          (vowel? (first s)))\n     (+ 1 (count_upper (rest s)))]\n   \
    \ [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i 0] [count 0])\n \
    \   (cond [(empty? s) count]\n          [(and (even? i) (member (first s) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n           (loop (rest s) (+ i 1) (+ count 1))]\n  \
    \        [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(and (vowel? (string-ref s 0)) (even? (string-length s)))\n     (+\
    \ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring s 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
