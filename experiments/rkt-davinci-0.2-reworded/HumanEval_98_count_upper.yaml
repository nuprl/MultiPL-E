name: HumanEval_98_count_upper
language: rkt
prompt: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
  \ in even indices.\n;; For example:\n;; >>> (count_upper \"aBCdEf\")\n;; 1\n;; >>>\
  \ (count_upper \"abcdefg\")\n;; 0\n;; >>> (count_upper \"dBBE\")\n;; 0\n(define\
  \ (count_upper s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
  \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\"\
  ) 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"\
  B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\
  \") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([i 0] [count\
    \ 0])\n    (cond [(= i (string-length s)) count]\n          [(and (char-upper-case?\
    \ (string-ref s i))\n                (char-vowel? (string-ref s i)))\n       \
    \    (loop (+ i 2) (+ count 1))]\n          [else (loop (+ i 2) count)])))\n",
  "  (define (is_upper? c)\n    (char-upcase c))\n  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder n\
    \ 2) 0))\n  (define (count_upper_helper s n)\n    (cond\n      [(empty? s) n]\n\
    \      [(and (is_even? n) (is_upper? (first s)) (is_vowel? (first s)))\n     \
    \  (count_upper_helper (rest s) (+ n 1))]\n      [else (count_upper_helper (rest\
    \ s) n)]))\n  (count_upper_helper s 0))\n", "  (let loop ([s s] [i 0] [count 0])\n\
    \    (cond\n      [(empty? s) count]\n      [(and (char-upper-case? (first s))\n\
    \            (even? i))\n       (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n", "  (define (count_upper-helper s i)\n\
    \    (cond\n      [(= i (string-length s)) 0]\n      [(and (even? i) (char-upper-case?\
    \ (string-ref s i)))\n       (+ 1 (count_upper-helper s (+ i 1)))]\n      [else\
    \ (count_upper-helper s (+ i 1))]))\n  (count_upper-helper s 0))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (remainder (string-length\
    \ s) 2)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n",
  "  (cond [(empty? s) 0]\n        [(and (char-upper-case? (first s))\n          \
    \    (vowel? (first s)))\n         (+ 1 (count_upper (rest s)))]\n        [else\
    \ (count_upper (rest s))]))\n", "  (define (is_upper? c)\n    (and (char-upper-case?\
    \ c)\n         (member c '#(#\\A #\\E #\\I #\\O #\\U))))\n  (define (count-upper-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_upper? (first s))\n       (+\
    \ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels (rest s))]))\n\
    \  (count-upper-vowels (even-indexes s)))\n", "  (define (count-upper-helper s\
    \ i)\n    (cond\n      [(empty? s) 0]\n      [(and (char-upper-case? (first s))\n\
    \            (even? i))\n       (+ 1 (count-upper-helper (rest s) (+ i 1)))]\n\
    \      [else (count-upper-helper (rest s) (+ i 1))]))\n  (count-upper-helper s\
    \ 0))\n", "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n\
    \          (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let loop ([s s] [i\
    \ 0] [count 0])\n    (if (empty? s)\n        count\n        (if (and (even? i)\
    \ (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n            (loop (rest s)\
    \ (+ i 1) (+ count 1))\n            (loop (rest s) (+ i 1) count)))))\n", "  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i)\n            (member (string-ref s i) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1)\
    \ (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(and (even? (length s)) (vowel? (string-ref s 0))) (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (let\
    \ loop ([i 0] [n 0])\n    (cond\n      [(= i (string-length s)) n]\n      [(and\
    \ (= (modulo i 2) 0)\n            (member (string-ref s i) '(#\\A #\\E #\\I #\\\
    O #\\U)))\n       (loop (+ i 1) (+ n 1))]\n      [else (loop (+ i 1) n)])))\n",
  "  (let loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n    \
    \  [(and (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n",
  "  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n         \
    \ (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest\
    \ s)))]\n    [else (count_upper (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n", "  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count_upper_helper s i count)\n    (cond\n  \
    \    [(empty? s) count]\n      [(even? i)\n       (if (is_upper? (first s))\n\
    \           (count_upper_helper (rest s) (add1 i) (add1 count))\n           (count_upper_helper\
    \ (rest s) (add1 i) count))]\n      [else (count_upper_helper (rest s) (add1 i)\
    \ count)]))\n  (count_upper_helper s 0 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(and (char-upper-case? (first s))\n          (vowel? (first s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
