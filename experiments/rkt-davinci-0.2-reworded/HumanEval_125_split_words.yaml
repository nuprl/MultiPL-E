name: HumanEval_125_split_words
language: rkt
prompt: "#lang racket\n\n;; Given a string of words, return a list of words split\
  \ on whitespace, if no whitespaces exists in the text you\n;; should split on commas\
  \ ',' if no commas exists you should return the number of lower-case letters with\
  \ odd order in the\n;; alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
  ;; Examples\n;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\"\
  )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
  \ (split_words \"abcdef\")\n;; 3\n(define (split_words txt)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n\
  \    (check-equal? (candidate \"Hello world!\") (list \"Hello\" \"world!\"))\n \
  \   (check-equal? (candidate \"Hello,world!\") (list \"Hello\" \"world!\"))\n  \
  \  (check-equal? (candidate \"Hello world,!\") (list \"Hello\" \"world,!\"))\n \
  \   (check-equal? (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\"\
  \ \"!\"))\n    (check-equal? (candidate \"abcdef\") 3)\n    (check-equal? (candidate\
  \ \"aaabb\") 2)\n    (check-equal? (candidate \"aaaBb\") 1)\n    (check-equal? (candidate\
  \ \"\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(string-contains txt #\\space) (string-split txt #\\\
    space)]\n    [(string-contains txt #\\,) (string-split txt #\\,)]\n    [else (count-odd-letters\
    \ txt)]))\n", "  (cond\n    [(string-contains txt #\\space) (string-split txt\
    \ #\\space)]\n    [(string-contains txt #\\,) (string-split txt #\\,)]\n    [else\
    \ (count-odd-letters txt)]))\n", "  (if (string-contains txt #\\space)\n     \
    \ (string-split txt #\\space)\n      (if (string-contains txt #\\,)\n        \
    \  (string-split txt #\\,)\n          (count-odd-letters txt))))\n", "  (if (regexp-match\
    \ #rx\"\\s\" txt)\n      (regexp-split #rx\"\\s\" txt)\n      (if (regexp-match\
    \ #rx\",\" txt)\n          (regexp-split #rx\",\" txt)\n          (length (filter\
    \ odd? (map char->integer (string->list txt)))))))\n", "  (if (string-contains\
    \ txt #\\space)\n      (string-split txt #\\space)\n      (if (string-contains\
    \ txt #\\,)\n          (string-split txt #\\,)\n          (count-odd-letters txt))))\n",
  "  (if (string-contains txt #\\space)\n      (string-split txt #\\space)\n     \
    \ (if (string-contains txt #\\,)\n          (string-split txt #\\,)\n        \
    \  (count-odd-letters txt))))\n", "  (cond\n    [(string-contains txt #\\space)\
    \ (string-split txt #\\space)]\n    [(string-contains txt #\\,) (string-split\
    \ txt #\\,)]\n    [else (count-odd-letters txt)]))\n", "  (if (string-contains\
    \ txt #\\space)\n      (string-split txt #\\space)\n      (if (string-contains\
    \ txt #\\,)\n          (string-split txt #\\,)\n          (count-odd-letters txt))))\n",
  "  (cond\n    [(string-contains txt #\\space) (string-split txt #\\space)]\n   \
    \ [(string-contains txt #\\,) (string-split txt #\\,)]\n    [else (count-odd-letters\
    \ txt)]))\n", "  (cond\n    [(string-contains txt #\\space) (string-split txt\
    \ #\\space)]\n    [(string-contains txt #\\,) (string-split txt #\\,)]\n    [else\
    \ (count-odd-letters txt)]))\n", "  (cond\n    [(empty? (regexp-match #rx\" \"\
    \ txt))\n     (cond\n       [(empty? (regexp-match #rx\",\" txt))\n        (count-odd-letters\
    \ txt)]\n       [else\n        (split-on-commas txt)])]\n    [else\n     (split-on-whitespace\
    \ txt)]))\n", "  (if (string-contains txt #\\space)\n      (string-split txt #\\\
    space)\n      (if (string-contains txt #\\,)\n          (string-split txt #\\\
    ,)\n          (count-odd-letters txt))))\n", "  (cond\n    [(string-contains txt\
    \ #\\space) (string-split txt #\\space)]\n    [(string-contains txt #\\,) (string-split\
    \ txt #\\,)]\n    [else (count-odd-letters txt)]))\n", "  (cond\n    [(string-contains\
    \ txt #\\space)\n     (string-split txt #\\space)]\n    [(string-contains txt\
    \ #\\,)\n     (string-split txt #\\,)]\n    [else\n     (count-odd-letters txt)]))\n",
  "  (cond\n    [(string-contains txt #\\space) (string-split txt #\\space)]\n   \
    \ [(string-contains txt #\\,) (string-split txt #\\,)]\n    [else (count-odd-letters\
    \ txt)]))\n", "  (if (string-contains txt #\\space)\n      (string-split txt #\\\
    space)\n      (if (string-contains txt #\\,)\n          (string-split txt #\\\
    ,)\n          (count-odd-letters txt))))\n", "  (cond\n    [(string-contains txt\
    \ #\\space) (string-split txt #\\space)]\n    [(string-contains txt #\\,) (string-split\
    \ txt #\\,)]\n    [else (count-odd-letters txt)]))\n", "  (if (string-contains\
    \ txt #\\space)\n      (string-split txt #\\space)\n      (if (string-contains\
    \ txt #\\,)\n          (string-split txt #\\,)\n          (count-odd-lower-case-letters\
    \ txt))))\n", "  (cond\n    [(empty? (regexp-match #rx\"\\s\" txt))\n     (cond\n\
    \       [(empty? (regexp-match #rx\",\" txt))\n        (count-odd-letters txt)]\n\
    \       [else\n        (split-on-commas txt)])]\n    [else\n     (split-on-whitespace\
    \ txt)]))\n", "  (cond\n    [(string-contains txt #\\space) (string-split txt\
    \ #\\space)]\n    [(string-contains txt #\\,) (string-split txt #\\,)]\n    [else\
    \ (count-odd-letters txt)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
