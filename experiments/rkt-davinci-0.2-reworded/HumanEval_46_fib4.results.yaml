name: HumanEval_46_fib4
language: rkt
results:
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(=\
    \ n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper\
    \ (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3)\
    \ 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n\
    \    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n   \
    \ (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-iter i a b c d)\n    (if (= i n)\n        (+ a b c d)\n\
    \        (fib4-iter (+ i 1) b c d (+ a b c d))))\n  (fib4-iter 0 0 0 2 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n\
    \    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n   \
    \ (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu03_rmyy.rkt:28:4\n\
    actual:     54\nexpected:   4\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu03_rmyy.rkt:29:4\nactual:     386\n\
    expected:   28\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpu03_rmyy.rkt:30:4\nactual:     1434\nexpected:\
    \   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpu03_rmyy.rkt:31:4\nactual:     5328\nexpected:   386\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3)\
    \ 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n\
    \    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n   \
    \ (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n\
    \      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (-\
    \ n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal?\
    \ (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal?\
    \ (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3)\
    \ 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n\
    \    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n   \
    \ (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(=\
    \ n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d\
    \ (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-iter a b c d n)\n    (cond\n      [(= n 0) a]\n      [(=\
    \ n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter b c d\
    \ (+ a b c d) (- n 1))]))\n  (fib4-iter 0 0 2 0 n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-helper n-1 n-2 n-3 n-4)\n    (cond\n      [(= n 0) n-1]\n\
    \      [(= n 1) n-2]\n      [(= n 2) n-3]\n      [(= n 3) n-4]\n      [else (fib4-helper\
    \ (+ n-1 n-2 n-3 n-4) n-1 n-2 n-3)]))\n  (fib4-helper 0 0 2 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-iter n a b c d)\n    (cond [(= n 0) a]\n          [(= n\
    \ 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-iter\
    \ (- n 1) b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond\n      [(= n 0) a]\n\
    \      [(= n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (loop (-\
    \ n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal?\
    \ (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal?\
    \ (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(=\
    \ n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1)\
    \ b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n   \
    \       [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else\
    \ (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal?\
    \ (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal?\
    \ (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(=\
    \ n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper\
    \ (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3)\
    \ 0]\n    [else (+ (fib4 (- n 1)) (fib4 (- n 2)) (fib4 (- n 3)) (fib4 (- n 4)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n\
    \    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n   \
    \ (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(=\
    \ n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper\
    \ (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-iter a b c d i)\n    (if (= i n)\n        (+ a b c d)\n\
    \        (fib4-iter b c d (+ a b c d) (+ i 1))))\n  (fib4-iter 0 0 2 0 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fib4))\n\
    \    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 28)\n   \
    \ (check-equal? (candidate 10) 104)\n    (check-equal? (candidate 12) 386)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpilul2xbm.rkt:28:4\n\
    actual:     54\nexpected:   4\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpilul2xbm.rkt:29:4\nactual:     386\n\
    expected:   28\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpilul2xbm.rkt:30:4\nactual:     1434\nexpected:\
    \   104\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpilul2xbm.rkt:31:4\nactual:     5328\nexpected:   386\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (let loop ([n n] [a 0] [b 0] [c 2] [d 0])\n    (cond [(= n 0) a]\n   \
    \       [(= n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else\
    \ (loop (- n 1) b c d (+ a b c d))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fib4))\n    (check-equal? (candidate 5) 4)\n    (check-equal?\
    \ (candidate 8) 28)\n    (check-equal? (candidate 10) 104)\n    (check-equal?\
    \ (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-helper n a b c d)\n    (cond [(= n 0) a]\n          [(=\
    \ n 1) b]\n          [(= n 2) c]\n          [(= n 3) d]\n          [else (fib4-helper\
    \ (- n 1) b c d (+ a b c d))]))\n  (fib4-helper n 0 0 2 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The Fib4 number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n;; fib4(0) -> 0\n;; fib4(1)\
    \ -> 0\n;; fib4(2) -> 2\n;; fib4(3) -> 0\n;; fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n;; Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n;; >>>\
    \ (fib4 5)\n;; 4\n;; >>> (fib4 6)\n;; 8\n;; >>> (fib4 7)\n;; 14\n(define (fib4\
    \ n)\n  (define (fib4-iter n a b c d)\n    (cond\n      [(= n 0) a]\n      [(=\
    \ n 1) b]\n      [(= n 2) c]\n      [(= n 3) d]\n      [else (fib4-iter (- n 1)\
    \ b c d (+ a b c d))]))\n  (fib4-iter n 0 0 2 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fib4))\n    (check-equal? (candidate\
    \ 5) 4)\n    (check-equal? (candidate 8) 28)\n    (check-equal? (candidate 10)\
    \ 104)\n    (check-equal? (candidate 12) 386)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
