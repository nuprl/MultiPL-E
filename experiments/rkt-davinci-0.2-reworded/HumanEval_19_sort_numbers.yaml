name: HumanEval_19_sort_numbers
language: rkt
prompt: "#lang racket\n\n;; Input is a space-delimited string of numberals from 'zero'\
  \ to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',\
  \ 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers sorted\
  \ from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n;; \"one three\
  \ five\"\n(define (sort_numbers numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
  ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
  )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
  \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three two\
  \ one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
completions: ["  (string-join (sort (string-split numbers #\\space) <) #\\space))\n",
  "  (string-join (sort (string-split numbers #\\space)\n                     (lambda\
    \ (a b)\n                       (< (string->number a)\n                      \
    \    (string->number b))))\n               #\\space))\n", "  (string-join\n  \
    \ (sort\n    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   #\\space))\n", "  (string-join\n   (sort\n    (string-split\
    \ numbers #\\space)\n    (lambda (a b)\n      (< (string->number a) (string->number\
    \ b))))\n   #\\space))\n", "  (string-join (sort (string-split numbers #\\space)\
    \ string<?)))\n", "  (string-join (sort (string-split numbers #\\space) (lambda\
    \ (a b) (< (string->number a) (string->number b)))) \" \"))\n", "  (string-join\
    \ (sort (string-split numbers #\\space) <) #\\space))\n", "  (string-join (sort\
    \ (string-split numbers #\\space)\n                     (lambda (a b)\n      \
    \                 (< (string->number a)\n                          (string->number\
    \ b))))\n               #\\space))\n", "  (string-join (sort (string-split numbers)\
    \ string<?)))\n", "  (string-join (sort (string-split numbers) string<?)))\n",
  "  (string-join (sort (string-split numbers #\\space)\n                     (lambda\
    \ (a b)\n                       (< (string->number a)\n                      \
    \    (string->number b))))\n               #\\space))\n", "  (string-join (sort\
    \ (string-split numbers) (\u03BB (a b) (< (string->number a) (string->number b))))\
    \ \" \"))\n", "  (string-join (sort (string-split numbers #\\space)\n        \
    \             (lambda (a b)\n                       (< (string->number a)\n  \
    \                        (string->number b))))\n               #\\space))\n",
  "  (string-join (sort (string-split numbers #\\space) string<?)))\n", "  (string-join\
    \ (sort (string-split numbers #\\space) <) #\\space))\n", "  (string-join (sort\
    \ (string-split numbers #\\space)\n                     (lambda (a b)\n      \
    \                 (string<? a b)))\n               #\\space))\n", "  (string-join\
    \ (sort (string-split numbers) string<?)))\n", "  (string-join\n   (sort\n   \
    \ (string-split numbers #\\space)\n    (lambda (a b)\n      (< (number-from-string\
    \ a) (number-from-string b))))\n   \" \"))\n", "  (define (numeral->number numeral)\n\
    \    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=? numeral \"\
    one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=? numeral \"three\"\
    ) 3]\n      [(string=? numeral \"four\") 4]\n      [(string=? numeral \"five\"\
    ) 5]\n      [(string=? numeral \"six\") 6]\n      [(string=? numeral \"seven\"\
    ) 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=? numeral \"nine\"\
    ) 9]))\n  (define (number->numeral number)\n    (cond\n      [(= number 0) \"\
    zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2) \"two\"]\n      [(=\
    \ number 3) \"three\"]\n      [(= number 4) \"four\"]\n      [(= number 5) \"\
    five\"]\n      [(= number 6) \"six\"]\n      [(= number 7) \"seven\"]\n      [(=\
    \ number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n  (define (sort-numbers-helper\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [else\n       (define\
    \ (insert-number number sorted-numbers)\n         (cond\n           [(empty? sorted-numbers)\
    \ (cons number empty)]\n           [(< number (first sorted-numbers)) (cons number\
    \ sorted-numbers)]\n           [else (cons (first sorted-numbers) (insert-number\
    \ number (rest sorted-numbers)))]))\n       (insert-number (numeral->number (first\
    \ numbers)) (sort-numbers-helper (rest numbers)))]))\n  (define (numbers->string\
    \ numbers)\n    (cond\n      [(empty? numbers) \"\"]\n      [else (string-append\
    \ (number->numeral (first numbers)) \" \" (numbers->string (rest numbers)))]))\n\
    \  (numbers->string (sort-numbers-helper (string-split numbers))))\n", "  (string-join\
    \ (sort (string-split numbers) string<? #:key (lambda (x) (string->number (string-replace\
    \ x #rx\"zero\" \"0\")))) \" \"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
