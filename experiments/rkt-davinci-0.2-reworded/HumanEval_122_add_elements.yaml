name: HumanEval_122_add_elements
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty list of integers arr and an integer\
  \ k, return\n;; the sum of the elements with at most two digits from the first k\
  \ elements of arr.\n;; Example:\n;; >>> (add_elements (list 111 21 3 4000 5 6 7\
  \ 8 9) 4)\n;; 24\n(define (add_elements arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n\
  \    (check-equal? (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4)\n    (check-equal?\
  \ (candidate (list 111 121 3 4000 5 6) 2) 0)\n    (check-equal? (candidate (list\
  \ 11 21 3 90 5 6 7 8 9) 4) 125)\n    (check-equal? (candidate (list 111 21 3 4000\
  \ 5 6 7 8 9) 4) 24)\n    (check-equal? (candidate (list 1) 1) 1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) 0]\n    [(< k 1) 0]\n    [else\n     (if\
    \ (< (length (number->string (first arr))) 3)\n         (+ (first arr) (add_elements\
    \ (rest arr) (- k 1)))\n         (add_elements (rest arr) (- k 1)))]))\n", " \
    \ (cond\n    [(= k 0) 0]\n    [(< (length arr) k) 0]\n    [else\n     (+ (if (<\
    \ (car arr) 100) (car arr) 0)\n        (add_elements (cdr arr) (- k 1)))]))\n",
  "  (cond\n    [(= k 0) 0]\n    [(<= (length arr) k) (sum arr)]\n    [else (sum (take\
    \ arr k))]))\n", "  (define (add_elements-iter arr k acc)\n    (cond\n      [(empty?\
    \ arr) acc]\n      [(<= k 0) acc]\n      [(<= (length (number->string (first arr)))\
    \ 2)\n       (add_elements-iter (rest arr) (- k 1) (+ acc (first arr)))]\n   \
    \   [else (add_elements-iter (rest arr) (- k 1) acc)]))\n  (add_elements-iter\
    \ arr k 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(<= k 0) 0]\n    [else\n\
    \     (cond\n       [(<= (length (number->string (first arr))) 2)\n        (+\
    \ (first arr) (add_elements (rest arr) (- k 1)))]\n       [else\n        (add_elements\
    \ (rest arr) (- k 1))])]))\n", "  (cond\n    [(empty? arr) 0]\n    [(< (length\
    \ arr) k) (add_elements arr (length arr))]\n    [else (+ (first arr) (add_elements\
    \ (rest arr) (- k 1)))]))\n", "  (define (helper arr k acc)\n    (cond\n     \
    \ [(empty? arr) acc]\n      [(<= k 0) acc]\n      [(<= (length (number->string\
    \ (first arr))) 2)\n       (helper (rest arr) (- k 1) (+ acc (first arr)))]\n\
    \      [else (helper (rest arr) (- k 1) acc)]))\n  (helper arr k 0))\n", "  (define\
    \ (add_elements_iter arr k acc)\n    (cond\n      [(empty? arr) acc]\n      [(<=\
    \ k 0) acc]\n      [(<= (length (number->string (first arr))) 2)\n       (add_elements_iter\
    \ (rest arr) (- k 1) (+ acc (first arr)))]\n      [else (add_elements_iter (rest\
    \ arr) (- k 1) acc)]))\n  (add_elements_iter arr k 0))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(<= k 0) 0]\n    [else (+ (if (< (length (number->string (first\
    \ arr))) 3) (first arr) 0)\n             (add_elements (rest arr) (- k 1)))]))\n",
  "  (cond [(empty? arr) 0]\n        [(< (length (number->string (first arr))) 3)\n\
    \         (+ (first arr) (add_elements (rest arr) (- k 1)))]\n        [else (add_elements\
    \ (rest arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(< (length arr)\
    \ k) (add_elements arr (length arr))]\n    [else (+ (first arr) (add_elements\
    \ (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(< (length\
    \ arr) k) (add_elements arr (length arr))]\n    [else (+ (first arr) (add_elements\
    \ (rest arr) (- k 1)))]))\n", "  (cond\n    [(= k 0) 0]\n    [(< (length arr)\
    \ k) (add_elements arr (length arr))]\n    [else\n     (cond\n       [(<= (car\
    \ arr) 99) (+ (car arr) (add_elements (cdr arr) (- k 1)))]\n       [else (add_elements\
    \ (cdr arr) (- k 1))])]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (length\
    \ arr) k) 0]\n    [(< (length (number->string (first arr))) 3) (+ (first arr)\
    \ (add_elements (rest arr) (- k 1)))]\n    [else (add_elements (rest arr) (- k\
    \ 1))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (length arr) k) 0]\n    [(<\
    \ (length (number->string (first arr))) 3) (+ (first arr) (add_elements (rest\
    \ arr) k))]\n    [else (add_elements (rest arr) k)]))\n", "  (cond\n    [(= k\
    \ 0) 0]\n    [(< (length arr) k) (error \"k is too large\")]\n    [else (+ (car\
    \ arr) (add_elements (cdr arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) 0]\n\
    \    [(< (length arr) k) (add_elements arr (length arr))]\n    [else (+ (first\
    \ arr) (add_elements (rest arr) (- k 1)))]))\n", "  (cond\n    [(empty? arr) 0]\n\
    \    [(<= (length arr) k) (apply + arr)]\n    [else\n     (cond\n       [(< (length\
    \ (number->string (first arr))) 3)\n        (+ (first arr) (add_elements (rest\
    \ arr) (- k 1)))]\n       [else (add_elements (rest arr) (- k 1))])]))\n", " \
    \ (define (add_elements_helper arr k sum)\n    (cond\n      [(empty? arr) sum]\n\
    \      [(<= k 0) sum]\n      [(< (length (number->string (first arr))) 3)\n  \
    \     (add_elements_helper (rest arr) (- k 1) (+ sum (first arr)))]\n      [else\
    \ (add_elements_helper (rest arr) (- k 1) sum)]))\n  (add_elements_helper arr\
    \ k 0))\n", "  (define (add_elements-iter arr k sum)\n    (cond\n      [(empty?\
    \ arr) sum]\n      [(<= k 0) sum]\n      [(<= (length (number->string (first arr)))\
    \ 2)\n       (add_elements-iter (rest arr) (- k 1) (+ sum (first arr)))]\n   \
    \   [else (add_elements-iter (rest arr) (- k 1) sum)]))\n  (add_elements-iter\
    \ arr k 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
