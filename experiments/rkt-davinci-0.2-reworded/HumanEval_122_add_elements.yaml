name: HumanEval_122_add_elements
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty list of integers arr and an integer\
  \ k, return\n;; the sum of the elements with at most two digits from the first k\
  \ elements of arr.\n;; Example:\n;; >>> (add_elements (list 111 21 3 4000 5 6 7\
  \ 8 9) 4)\n;; 24\n;; Constraints:\n;; 1. 1 <= len(arr) <= 100\n;; 2. 1 <= k <= len(arr)\n\
  (define (add_elements arr k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_elements))\n\
  \    (check-equal? (candidate (list 1 -2 -3 41 57 76 87 88 99) 3) -4)\n    (check-equal?\
  \ (candidate (list 111 121 3 4000 5 6) 2) 0)\n    (check-equal? (candidate (list\
  \ 11 21 3 90 5 6 7 8 9) 4) 125)\n    (check-equal? (candidate (list 111 21 3 4000\
  \ 5 6 7 8 9) 4) 24)\n    (check-equal? (candidate (list 1) 1) 1)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? arr) 0]\n        [(<= (length (number->string (first\
    \ arr))) 2)\n         (+ (first arr) (add_elements (rest arr) (- k 1)))]\n   \
    \     [else (add_elements (rest arr) (- k 1))]))\n", "  (define (helper arr k\
    \ sum)\n    (cond\n      [(empty? arr) sum]\n      [(> (length (number->string\
    \ (first arr))) 2) (helper (rest arr) k sum)]\n      [else (helper (rest arr)\
    \ (- k 1) (+ sum (first arr)))]))\n  (helper arr k 0))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(<= (length arr) k) (apply + arr)]\n    [else (apply + (take arr\
    \ k))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(<= (length arr) k) (apply +\
    \ arr)]\n    [else (apply + (take k arr))]))\n", "  (define (add_elements_iter\
    \ arr k sum)\n    (cond\n      [(empty? arr) sum]\n      [(> k 0)\n       (add_elements_iter\
    \ (rest arr) (- k 1)\n                          (+ sum (if (< (count-digits (first\
    \ arr)) 3)\n                                     (first arr)\n               \
    \                      0)))]\n      [else sum]))\n  (add_elements_iter arr k 0))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(<= (length arr) k) (apply + arr)]\n    [else\
    \ (apply + (take arr k))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(<= (length\
    \ arr) k) (apply + arr)]\n    [else\n     (define (helper lst)\n       (cond\n\
    \         [(empty? lst) 0]\n         [(<= (length (number->string (car lst)))\
    \ 2)\n          (+ (car lst) (helper (cdr lst)))]\n         [else (helper (cdr\
    \ lst))]))\n     (helper (take arr k))]))\n", "  (define (add_elements-iter arr\
    \ k sum)\n    (cond\n      [(empty? arr) sum]\n      [(<= k 0) sum]\n      [(<=\
    \ (length (number->string (first arr))) 2)\n       (add_elements-iter (rest arr)\
    \ (- k 1) (+ sum (first arr)))]\n      [else (add_elements-iter (rest arr) (-\
    \ k 1) sum)]))\n  (add_elements-iter arr k 0))\n", "  (define (add_elements-iter\
    \ arr k sum)\n    (cond\n      [(empty? arr) sum]\n      [(< (length (number->string\
    \ (first arr))) 3)\n       (add_elements-iter (rest arr) (- k 1) (+ sum (first\
    \ arr)))]\n      [else (add_elements-iter (rest arr) (- k 1) sum)]))\n  (add_elements-iter\
    \ arr k 0))\n", "  (define (add_elements-iter arr k sum)\n    (cond\n      [(=\
    \ k 0) sum]\n      [(< (length (number->string (car arr))) 3)\n       (add_elements-iter\
    \ (cdr arr) (- k 1) (+ sum (car arr)))]\n      [else (add_elements-iter (cdr arr)\
    \ (- k 1) sum)]))\n  (add_elements-iter arr k 0))\n", "  (define (helper arr k\
    \ sum)\n    (cond\n      [(empty? arr) sum]\n      [(> (length (number->string\
    \ (first arr))) 2) (helper (rest arr) k sum)]\n      [else (helper (rest arr)\
    \ (- k 1) (+ sum (first arr)))]))\n  (helper arr k 0))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(<= (length arr) k) (apply + arr)]\n    [else\n     (cond\n  \
    \     [(< (length (number->string (first arr))) 3)\n        (+ (first arr) (add_elements\
    \ (rest arr) (- k 1)))]\n       [else (add_elements (rest arr) (- k 1))])]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(<= (length arr) k) (apply + arr)]\n    [else\
    \ (apply + (take arr k))]))\n", "  (cond\n    [(= k 0) 0]\n    [(<= (length (number->string\
    \ (car arr))) 2)\n     (+ (car arr) (add_elements (cdr arr) (- k 1)))]\n    [else\
    \ (add_elements (cdr arr) (- k 1))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(<= (length arr) k)\n     (apply + (filter (lambda (x) (<= x 99)) arr))]\n\
    \    [else\n     (apply + (filter (lambda (x) (<= x 99)) (take arr k)))]))\n",
  "  (if (empty? arr)\n      0\n      (if (<= (length (number->string (first arr)))\
    \ 2)\n          (+ (first arr) (add_elements (rest arr) (- k 1)))\n          (add_elements\
    \ (rest arr) (- k 1)))))\n```\n\n## Problem 2\n\n```racket\n#lang racket\n", " \
    \ (define (add_elements-iter arr k sum)\n    (cond\n      [(empty? arr) sum]\n\
    \      [(<= k 0) sum]\n      [(<= (length (number->string (first arr))) 2)\n \
    \      (add_elements-iter (rest arr) (- k 1) (+ sum (first arr)))]\n      [else\
    \ (add_elements-iter (rest arr) (- k 1) sum)]))\n  (add_elements-iter arr k 0))\n",
  "  (define (add_elements_iter arr k sum)\n    (cond\n      [(empty? arr) sum]\n\
    \      [(<= k 0) sum]\n      [(<= (length (number->string (first arr))) 2)\n \
    \      (add_elements_iter (rest arr) (- k 1) (+ sum (first arr)))]\n      [else\
    \ (add_elements_iter (rest arr) (- k 1) sum)]))\n  (add_elements_iter arr k 0))\n",
  "  (define (sum-of-digits n)\n    (cond\n      [(< n 10) n]\n      [else (+ (modulo\
    \ n 10) (sum-of-digits (quotient n 10)))]))\n  (define (sum-of-elements lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [else (+ (sum-of-digits (car lst)) (sum-of-elements\
    \ (cdr lst)))]))\n  (sum-of-elements (take arr k)))\n", "  (define (add_elements-iter\
    \ arr k acc)\n    (cond\n      [(empty? arr) acc]\n      [(<= k 0) acc]\n    \
    \  [(<= (length (number->string (first arr))) 2)\n       (add_elements-iter (rest\
    \ arr) (- k 1) (+ acc (first arr)))]\n      [else (add_elements-iter (rest arr)\
    \ (- k 1) acc)]))\n  (add_elements-iter arr k 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
