name: HumanEval_20_find_closest_elements
language: rkt
prompt: "#lang racket\n\n;; From a supplied list of numbers (of length at least two)\
  \ select and return two that are the closest to each\n;; other and return them in\
  \ order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0\
  \ 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list\
  \ 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)\n(define (find_closest_elements numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n\
  \    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0))\n\
  \    (check-equal? (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2))\n    (check-equal?\
  \ (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0))\n    (check-equal?\
  \ (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1))\n))\n\n(test-humaneval)"
completions: ["  (let ([min-diff (apply min (map (lambda (x y) (abs (- x y))) numbers\
    \ (cdr numbers)))])\n    (list (apply min (filter (lambda (x) (= (abs (- x (apply\
    \ min numbers))) min-diff)) numbers))\n          (apply max (filter (lambda (x)\
    \ (= (abs (- x (apply min numbers))) min-diff)) numbers)))))\n", "  (cond\n  \
    \  [(empty? numbers) empty]\n    [(empty? (rest numbers)) empty]\n    [else\n\
    \     (let* ([closest-pair (list (first numbers) (first (rest numbers)))]\n  \
    \          [closest-distance (abs (- (first numbers) (first (rest numbers))))])\n\
    \       (for ([n (in-list (rest (rest numbers)))])\n         (let* ([distance\
    \ (abs (- (first numbers) n))])\n           (if (< distance closest-distance)\n\
    \               (begin\n                 (set! closest-pair (list (first numbers)\
    \ n))\n                 (set! closest-distance distance))))\n         (set! numbers\
    \ (rest numbers))))\n     (sort closest-pair <)]))\n", "  (let loop ((numbers\
    \ numbers) (closest-pair (list (car numbers) (cadr numbers))))\n    (if (null?\
    \ (cddr numbers))\n        closest-pair\n        (let ((current-pair (list (car\
    \ numbers) (cadr numbers))))\n          (if (< (abs (- (car current-pair) (cadr\
    \ current-pair)))\n                 (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \              (loop (cdr numbers) current-pair)\n              (loop (cdr numbers)\
    \ closest-pair))))))\n", "  (let ((closest-pair (list (car numbers) (cadr numbers))))\n\
    \    (for ((i (in-range (length numbers)))\n          (j (in-range (add1 i) (length\
    \ numbers))))\n      (let ((pair (list (list-ref numbers i) (list-ref numbers\
    \ j))))\n        (when (< (abs (- (car pair) (cadr pair)))\n                 (abs\
    \ (- (car closest-pair) (cadr closest-pair))))\n          (set! closest-pair pair))))\n\
    \    closest-pair))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< diff closest-diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let ([diff (abs (- (car numbers) (cadr numbers)))])\n          (if (<\
    \ diff (abs (- (car closest-pair) (cadr closest-pair))))\n              (find_closest_elements_helper\
    \ (cdr numbers) (list (car numbers) (cadr numbers)))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (cond\n      [(empty? numbers) closest_pair]\n  \
    \    [(empty? (rest numbers)) closest_pair]\n      [else\n       (let* ([current_pair\
    \ (list (first numbers) (second numbers))]\n              [current_diff (abs (-\
    \ (first current_pair) (second current_pair)))]\n              [closest_diff (abs\
    \ (- (first closest_pair) (second closest_pair)))]\n              [new_closest_pair\
    \ (if (< current_diff closest_diff) current_pair closest_pair)])\n         (find_closest_elements_helper\
    \ (rest (rest numbers)) new_closest_pair))]))\n  (find_closest_elements_helper\
    \ numbers (list (first numbers) (second numbers))))\n", "  (let* ([min-diff (apply\
    \ min (map (lambda (x y) (abs (- x y))) numbers (rest numbers)))]\n         [min-index\
    \ (list-index min-diff (map (lambda (x y) (abs (- x y))) numbers (rest numbers)))])\n\
    \    (list (list-ref numbers min-index) (list-ref numbers (add1 min-index)))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([current-pair (list (car numbers)\
    \ (cadr numbers))]\n               [current-diff (abs (- (car current-pair) (cadr\
    \ current-pair)))]\n               [closest-diff (abs (- (car closest-pair) (cadr\
    \ closest-pair)))])\n          (if (< current-diff closest-diff)\n           \
    \   (find_closest_elements_helper (cdr numbers) current-pair)\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n\
    \        (let* ([current-pair (list (car numbers) (cadr numbers))]\n         \
    \      [current-diff (abs (- (car current-pair) (cadr current-pair)))]\n     \
    \          [closest-diff (abs (- (car closest-so-far) (cadr closest-so-far)))])\n\
    \          (if (< current-diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-so-far)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n      [(empty?\
    \ (rest numbers)) closest-pair]\n      [else\n       (let* ([first (first numbers)]\n\
    \              [second (first (rest numbers))]\n              [diff (abs (- first\
    \ second))]\n              [closest-diff (abs (- (first closest-pair) (second\
    \ closest-pair)))])\n         (if (< diff closest-diff)\n             (find_closest_elements_iter\
    \ (rest numbers) (list first second))\n             (find_closest_elements_iter\
    \ (rest numbers) closest-pair)))]))\n  (find_closest_elements_iter numbers (list\
    \ (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([next-pair (list (car numbers) (cadr numbers))]\n            \
    \   [next-diff (abs (- (car next-pair) (cadr next-pair)))]\n               [current-diff\
    \ (abs (- (car closest-pair) (cadr closest-pair)))]\n               [new-closest-pair\
    \ (if (< next-diff current-diff) next-pair closest-pair)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new-closest-pair))))\n  (if (< (length numbers) 2)\n      (error\
    \ \"find_closest_elements: list must have at least two elements\")\n      (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers)))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (closest-pair lst)\n    (define (closest-pair-helper lst min-pair)\n\
    \      (if (null? lst)\n          min-pair\n          (let* ([x (car lst)]\n \
    \                [y (cadr lst)]\n                 [diff (abs (- x y))]\n     \
    \            [min-diff (abs (- (car min-pair) (cadr min-pair)))])\n          \
    \  (if (< diff min-diff)\n                (closest-pair-helper (cdr lst) (list\
    \ x y))\n                (closest-pair-helper (cdr lst) min-pair)))))\n    (closest-pair-helper\
    \ (sort lst <) (list (car lst) (cadr lst))))\n  (closest-pair numbers))\n", " \
    \ (define (find_closest_elements-helper numbers closest-pair)\n    (if (null?\
    \ (cdr numbers))\n        closest-pair\n        (let ((current-pair (list (car\
    \ numbers) (cadr numbers))))\n          (if (< (abs (- (car current-pair) (cadr\
    \ current-pair)))\n                 (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \              (find_closest_elements-helper (cdr numbers) current-pair)\n   \
    \           (find_closest_elements-helper (cdr numbers) closest-pair)))))\n  (find_closest_elements-helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let* ([numbers (sort numbers\
    \ <)]\n         [min-diff (apply min (map (lambda (x y) (abs (- x y))) numbers\
    \ (rest numbers)))]\n         [closest-pair (filter (lambda (x y) (= (abs (- x\
    \ y)) min-diff)) numbers (rest numbers))])\n    closest-pair))\n", "  (define\
    \ (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr numbers))\n\
    \        closest-pair\n        (let* ([first (car numbers)]\n               [second\
    \ (cadr numbers)]\n               [diff (abs (- first second))]\n            \
    \   [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n       \
    \   (if (< diff closest-diff)\n              (find_closest_elements_helper (cdr\
    \ numbers) (list first second))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([current-pair (list (car numbers) (cadr numbers))]\n               [current-distance\
    \ (abs (- (car current-pair) (cadr current-pair)))]\n               [closest-distance\
    \ (abs (- (car closest-pair) (cadr closest-pair)))])\n          (if (< current-distance\
    \ closest-distance)\n              (find_closest_elements_iter (cdr numbers) current-pair)\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers)) empty]\n  \
    \  [else\n     (let* ([numbers (sort numbers <)]\n            [min-diff (apply\
    \ min (map (lambda (x y) (- y x)) numbers (rest numbers)))]\n            [min-index\
    \ (apply min (map (lambda (x y) (if (= (- y x) min-diff) x empty)) numbers (rest\
    \ numbers)))])\n       (list (list-ref numbers min-index) (list-ref numbers (+\
    \ min-index 1))))]))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (if (null? (cdr numbers))\n        closest_pair\n        (let* ([first_number\
    \ (car numbers)]\n               [second_number (cadr numbers)]\n            \
    \   [difference (abs (- first_number second_number))]\n               [closest_difference\
    \ (abs (- (car closest_pair) (cadr closest_pair)))]\n               [new_closest_pair\
    \ (if (< difference closest_difference)\n                                    \
    \ (list first_number second_number)\n                                     closest_pair)])\n\
    \          (find_closest_elements_helper (cdr numbers) new_closest_pair))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_elements)\n    (if (null?\
    \ (cdr numbers))\n        closest_elements\n        (let* ([current_number (car\
    \ numbers)]\n               [next_number (cadr numbers)]\n               [current_diff\
    \ (abs (- current_number next_number))]\n               [closest_diff (abs (-\
    \ (car closest_elements) (cadr closest_elements)))])\n          (if (< current_diff\
    \ closest_diff)\n              (find_closest_elements_helper (cdr numbers) (list\
    \ current_number next_number))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_elements)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements-helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([n1 (car numbers)]\n               [n2 (cadr numbers)]\n     \
    \          [diff (abs (- n1 n2))]\n               [closest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< diff closest-diff)\n             \
    \ (find_closest_elements-helper (cdr numbers) (list n1 n2))\n              (find_closest_elements-helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements-helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers smallest_difference smallest_difference_pair)\n    (cond\n      [(empty?\
    \ numbers) smallest_difference_pair]\n      [(empty? (rest numbers)) smallest_difference_pair]\n\
    \      [else\n       (let* ([first (first numbers)]\n              [second (first\
    \ (rest numbers))]\n              [difference (abs (- first second))])\n     \
    \    (if (< difference smallest_difference)\n             (find_closest_elements_helper\
    \ (rest numbers) difference (list first second))\n             (find_closest_elements_helper\
    \ (rest numbers) smallest_difference smallest_difference_pair)))]))\n  (find_closest_elements_helper\
    \ numbers (abs (- (first numbers) (first (rest numbers)))) (list (first numbers)\
    \ (first (rest numbers)))))\n", "  (let loop ((numbers (sort numbers <))\n   \
    \          (closest-pair (list (car numbers) (cadr numbers)))\n             (closest-distance\
    \ (abs (- (car numbers) (cadr numbers)))))\n    (if (null? (cddr numbers))\n \
    \       closest-pair\n        (let ((distance (abs (- (cadr numbers) (caddr numbers)))))\n\
    \          (if (< distance closest-distance)\n              (loop (cdr numbers)\
    \ (list (cadr numbers) (caddr numbers)) distance)\n              (loop (cdr numbers)\
    \ closest-pair closest-distance))))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (empty? numbers)\n        closest-pair\n    \
    \    (let* ([first-number (first numbers)]\n               [rest-numbers (rest\
    \ numbers)]\n               [closest-pair-so-far (if (empty? closest-pair)\n \
    \                                       (list first-number (first rest-numbers))\n\
    \                                        closest-pair)]\n               [closest-pair-so-far-difference\
    \ (abs (- (first closest-pair-so-far) (second closest-pair-so-far)))]\n      \
    \         [current-pair (list first-number (first rest-numbers))]\n          \
    \     [current-pair-difference (abs (- (first current-pair) (second current-pair)))])\n\
    \          (if (< current-pair-difference closest-pair-so-far-difference)\n  \
    \            (find_closest_elements_helper rest-numbers current-pair)\n      \
    \        (find_closest_elements_helper rest-numbers closest-pair-so-far))))))\n\
    \  (find_closest_elements_helper numbers '()))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (let* ([first\
    \ (first numbers)]\n              [second (first (rest numbers))]\n          \
    \    [diff (abs (- first second))]\n              [closest-diff (abs (- (first\
    \ closest-pair) (second closest-pair)))]\n              [new-closest-pair (if\
    \ (< diff closest-diff) (list first second) closest-pair)])\n         (find_closest_elements_helper\
    \ (rest numbers) new-closest-pair))]))\n  (find_closest_elements_helper numbers\
    \ (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let ([pair (list (car numbers) (cadr\
    \ numbers))])\n          (if (< (abs (- (car pair) (cadr pair))) (abs (- (car\
    \ closest-pair) (cadr closest-pair))))\n              (find_closest_elements_iter\
    \ (cdr numbers) pair)\n              (find_closest_elements_iter (cdr numbers)\
    \ closest-pair)))))\n  (find_closest_elements_iter numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (define (closest-pair lst)\n    (cond\n      [(empty?\
    \ lst) (error \"empty list\")]\n      [(empty? (rest lst)) (error \"list too short\"\
    )]\n      [else (let* ([first (first lst)]\n                   [second (first\
    \ (rest lst))]\n                   [diff (abs (- first second))]\n           \
    \        [rest-diff (closest-pair (rest lst))])\n               (if (< diff (first\
    \ rest-diff))\n                   (list diff first second)\n                 \
    \  rest-diff))]))\n  (let* ([result (closest-pair numbers)]\n         [diff (first\
    \ result)]\n         [first (second result)]\n         [second (third result)])\n\
    \    (if (= diff 0)\n        (list first second)\n        (if (< first second)\n\
    \            (list first second)\n            (list second first)))))\n", "  (define\
    \ (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr numbers))\n\
    \        closest_pair\n        (let* ([first (car numbers)]\n               [second\
    \ (cadr numbers)]\n               [diff (abs (- first second))]\n            \
    \   [closest_diff (abs (- (car closest_pair) (cadr closest_pair)))])\n       \
    \   (if (< diff closest_diff)\n              (find_closest_elements_helper (cdr\
    \ numbers) (list first second))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([current-pair (list (car numbers) (cadr numbers))]\n               [current-diff\
    \ (abs (- (car current-pair) (cadr current-pair)))]\n               [closest-diff\
    \ (abs (- (car closest-pair) (cadr closest-pair)))])\n          (if (< current-diff\
    \ closest-diff)\n              (find_closest_elements_helper (cdr numbers) current-pair)\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (if (null? numbers)\n      '()\n      (find_closest_elements_helper (cdr numbers)\
    \ (list (car numbers) (cadr numbers)))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (let ([closest-pair (list (first numbers) (second numbers))])\n    (for ([i (in-range\
    \ (add1 (length numbers)))]\n          [j (in-range (add1 (length numbers)))]\n\
    \          #:when (and (not (= i j))\n                      (not (equal? (first\
    \ closest-pair) (second closest-pair)))\n                      (< (abs (- (list-ref\
    \ numbers i) (list-ref numbers j)))\n                         (abs (- (first closest-pair)\
    \ (second closest-pair))))))\n      (set! closest-pair (list (list-ref numbers\
    \ i) (list-ref numbers j))))\n    closest-pair))\n", "  (let ([smallest-diff (apply\
    \ min (map (lambda (x y) (abs (- x y))) numbers (rest numbers)))]\n        [smallest-pair\
    \ (for/first ([x numbers] [y (rest numbers)] #:when (equal? (abs (- x y)) smallest-diff))\n\
    \                          (list x y))])\n    (if (equal? (first smallest-pair)\
    \ (second smallest-pair))\n        (list (first smallest-pair) (second smallest-pair))\n\
    \        (list (min (first smallest-pair) (second smallest-pair)) (max (first\
    \ smallest-pair) (second smallest-pair))))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ((next-pair (list (car numbers) (cadr numbers)))\n            \
    \   (next-distance (abs (- (car next-pair) (cadr next-pair))))\n             \
    \  (current-distance (abs (- (car closest-pair) (cadr closest-pair)))))\n    \
    \      (if (< next-distance current-distance)\n              (find_closest_elements_iter\
    \ (cdr numbers) next-pair)\n              (find_closest_elements_iter (cdr numbers)\
    \ closest-pair)))))\n  (find_closest_elements_iter (sort numbers <) (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements-helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [difference (abs (- first second))]\n               [closest-difference\
    \ (abs (- (car closest-pair) (cadr closest-pair)))]\n               [new-closest-pair\
    \ (if (< difference closest-difference)\n                                    \
    \ (list first second)\n                                     closest-pair)])\n\
    \          (find_closest_elements-helper (cdr numbers) new-closest-pair))))\n\
    \  (find_closest_elements-helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (let ([min-diff (min-diff numbers)])\n    (list (min-diff-element numbers min-diff)\
    \ (max-diff-element numbers min-diff))))\n", "  (let ([min-diff (apply min (map\
    \ (lambda (x y) (abs (- x y))) numbers (cdr numbers)))])\n    (list (apply min\
    \ (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n\
    \          (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (let ([closest-diff (apply min (map (lambda (x y) (abs (-\
    \ x y))) numbers (cdr numbers)))])\n    (list (apply min (filter (lambda (x) (=\
    \ (abs (- x (apply min numbers))) closest-diff)) numbers))\n          (apply max\
    \ (filter (lambda (x) (= (abs (- x (apply min numbers))) closest-diff)) numbers)))))\n",
  "  (let ([min-diff (apply min (map (\u03BB (x y) (abs (- x y))) numbers (rest numbers)))])\n\
    \    (list (apply min (filter (\u03BB (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers))\n          (apply max (filter (\u03BB (x) (= (abs (- x (apply min\
    \ numbers))) min-diff)) numbers)))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ((first (car numbers))\n               (second (cadr numbers))\n\
    \               (diff (abs (- first second)))\n               (closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair))))\n               (new-closest-pair\
    \ (if (< diff closest-diff)\n                                     (list first\
    \ second)\n                                     closest-pair)))\n          (find_closest_elements_iter\
    \ (cdr numbers) new-closest-pair))))\n  (find_closest_elements_iter numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n\
    \        (let* ([current-pair (list (car numbers) (cadr numbers))]\n         \
    \      [current-diff (abs (- (car current-pair) (cadr current-pair)))]\n     \
    \          [closest-diff (abs (- (car closest-so-far) (cadr closest-so-far)))])\n\
    \          (if (< current-diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-so-far)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([next-number (car (cdr numbers))]\n               [current-pair\
    \ (car closest-pair)]\n               [current-distance (abs (- (car current-pair)\
    \ (cadr current-pair)))]\n               [new-distance (abs (- (car numbers) next-number))])\n\
    \          (if (< new-distance current-distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list (list (car numbers) next-number)))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (list (car numbers) (cadr numbers)))))\n", "  (let* ([sorted-numbers (sort numbers\
    \ <)]\n         [min-diff (apply min (map (lambda (x y) (- y x)) (cdr sorted-numbers)\
    \ sorted-numbers))]\n         [closest-elements (filter (lambda (x y) (= (- y\
    \ x) min-diff)) (cdr sorted-numbers) sorted-numbers)])\n    closest-elements))\n",
  "  (define (find_closest_elements_helper numbers closest)\n    (if (null? (cdr numbers))\n\
    \        closest\n        (let* ([current (car numbers)]\n               [next\
    \ (cadr numbers)]\n               [diff (abs (- current next))]\n            \
    \   [closest-diff (abs (- (car closest) (cadr closest)))]\n               [new-closest\
    \ (if (< diff closest-diff) (list current next) closest)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new-closest))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([min-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (cdr numbers)))])\n    (list (apply min (filter\
    \ (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n      \
    \    (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (if (null? (cdr numbers))\n        closest_pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest_diff (abs (- (car closest_pair)\
    \ (cadr closest_pair)))])\n          (if (< diff closest_diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (letrec ([closest-pair\
    \ (lambda (numbers)\n                           (if (null? (cdr numbers))\n  \
    \                             (list (car numbers) (car numbers))\n           \
    \                    (let* ([numbers-sorted (sort numbers <)]\n              \
    \                        [numbers-sorted-pairs (map (lambda (n) (list n (cadr\
    \ n))) (partition numbers-sorted 2))]\n                                      [numbers-sorted-pairs-diffs\
    \ (map (lambda (n) (abs (- (car n) (cadr n)))) numbers-sorted-pairs)]\n      \
    \                                [min-diff (apply min numbers-sorted-pairs-diffs)]\n\
    \                                      [min-diff-pair (find (lambda (n) (= (abs\
    \ (- (car n) (cadr n))) min-diff)) numbers-sorted-pairs)])\n                 \
    \                (if (= (abs (- (car min-diff-pair) (cadr min-diff-pair))) 0)\n\
    \                                     (list (car min-diff-pair) (car min-diff-pair))\n\
    \                                     (list (car min-diff-pair) (cadr min-diff-pair))))))])\n\
    \    (closest-pair numbers)))\n", "  (define (find_closest_elements_helper numbers\
    \ closest)\n    (if (null? (cdr numbers))\n        closest\n        (let* ([first\
    \ (car numbers)]\n               [second (cadr numbers)]\n               [diff\
    \ (abs (- first second))]\n               [current-diff (abs (- (car closest)\
    \ (cadr closest)))]\n               [new-closest (if (< diff current-diff) (list\
    \ first second) closest)])\n          (find_closest_elements_helper (cdr numbers)\
    \ new-closest))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (let* ([min-distance (apply min (map (lambda (x y)\
    \ (abs (- x y))) numbers (rest numbers)))]\n         [min-index (find-index (lambda\
    \ (x) (= x min-distance)) (map (lambda (x y) (abs (- x y))) numbers (rest numbers)))]\n\
    \         [min-number (list-ref numbers min-index)])\n    (list min-number (list-ref\
    \ numbers (+ min-index 1)))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n   \
    \     (let* ([first (car numbers)]\n               [second (cadr numbers)]\n \
    \              [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-so-far) (cadr closest-so-far)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-so-far)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (empty?\
    \ numbers)\n        closest-pair\n        (let* ([first (first numbers)]\n   \
    \            [rest (rest numbers)]\n               [new-closest-pair (find-closest-pair\
    \ first rest closest-pair)])\n          (find_closest_elements_helper rest new-closest-pair))))\n\
    \  (define (find-closest-pair first rest closest-pair)\n    (if (empty? rest)\n\
    \        closest-pair\n        (let* ([second (first rest)]\n               [rest-rest\
    \ (rest rest)]\n               [distance (abs (- first second))]\n           \
    \    [closest-distance (abs (- (first closest-pair) (second closest-pair)))])\n\
    \          (if (< distance closest-distance)\n              (find-closest-pair\
    \ first rest-rest (list first second))\n              (find-closest-pair first\
    \ rest-rest closest-pair)))))\n  (find_closest_elements_helper numbers (list (first\
    \ numbers) (second numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [old-diff (abs (- (car\
    \ closest-pair) (cadr closest-pair)))])\n          (if (< diff old-diff)\n   \
    \           (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest_difference (abs (- (car closest_pair) (cadr\
    \ closest_pair)))])\n          (if (< difference closest_difference)\n       \
    \       (find_closest_elements_helper (cdr numbers) (list first second))\n   \
    \           (find_closest_elements_helper (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (cond\n    \
    \  [(empty? numbers) closest_pair]\n      [(empty? (rest numbers)) closest_pair]\n\
    \      [else\n       (let* ([first (first numbers)]\n              [second (first\
    \ (rest numbers))]\n              [diff (abs (- first second))]\n            \
    \  [closest_diff (abs (- (first closest_pair) (second closest_pair)))])\n    \
    \     (if (< diff closest_diff)\n             (find_closest_elements_helper (rest\
    \ numbers) (list first second))\n             (find_closest_elements_helper (rest\
    \ numbers) closest_pair)))]))\n  (find_closest_elements_helper numbers (list (first\
    \ numbers) (second numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([current-pair (list (car numbers) (cadr numbers))]\n               [current-diff\
    \ (abs (- (car current-pair) (cadr current-pair)))]\n               [closest-diff\
    \ (abs (- (car closest-pair) (cadr closest-pair)))])\n          (if (< current-diff\
    \ closest-diff)\n              (find_closest_elements_helper (cdr numbers) current-pair)\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (cond\n    \
    \  [(empty? numbers) closest_pair]\n      [(empty? (rest numbers)) closest_pair]\n\
    \      [else\n       (let ([first (first numbers)]\n             [second (second\
    \ numbers)]\n             [diff (abs (- first second))])\n         (if (< diff\
    \ (abs (- (first closest_pair) (second closest_pair))))\n             (find_closest_elements_helper\
    \ (rest numbers) (list first second))\n             (find_closest_elements_helper\
    \ (rest numbers) closest_pair)))]))\n  (find_closest_elements_helper numbers (list\
    \ (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (letrec ([find-closest (lambda (numbers)\n                           (if (null?\
    \ (cdr numbers))\n                               (list (car numbers) (car numbers))\n\
    \                               (let* ([n1 (car numbers)]\n                  \
    \                    [n2 (cadr numbers)]\n                                   \
    \   [rest (cddr numbers)]\n                                      [closest (find-closest\
    \ rest)]\n                                      [c1 (car closest)]\n         \
    \                             [c2 (cadr closest)]\n                          \
    \            [d1 (abs (- n1 n2))]\n                                      [d2 (abs\
    \ (- c1 c2))])\n                                 (if (< d1 d2)\n             \
    \                        (list n1 n2)\n                                     closest))))])\n\
    \    (find-closest numbers)))\n", "  (define (find_closest_elements_helper numbers\
    \ closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest_diff (abs (-\
    \ (car closest_pair) (cadr closest_pair)))])\n          (if (< diff closest_diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest_pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [current-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff current-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [difference (abs (- first\
    \ second))]\n               [closest-pair-difference (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< difference closest-pair-difference)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper (sort numbers <) (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [distance (abs (- first second))]\n\
    \               [closest-distance (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< distance closest-distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (closest-pair numbers)\n    (if\
    \ (null? (cdr numbers))\n        (list (car numbers) (car numbers))\n        (let*\
    \ ((first (car numbers))\n               (second (cadr numbers))\n           \
    \    (first-second-diff (abs (- first second)))\n               (rest-closest-pair\
    \ (closest-pair (cdr numbers)))\n               (rest-closest-pair-diff (abs (-\
    \ (car rest-closest-pair) (cadr rest-closest-pair)))))\n          (if (< first-second-diff\
    \ rest-closest-pair-diff)\n              (list first second)\n              rest-closest-pair))))\n\
    \  (closest-pair (sort numbers <)))\n", "  (cond\n    [(empty? numbers) empty]\n\
    \    [(empty? (rest numbers)) empty]\n    [else\n     (let ([closest-pair (list\
    \ (first numbers) (second numbers))]\n           [closest-distance (abs (- (first\
    \ numbers) (second numbers)))])\n       (for ([n (in-list (rest (rest numbers)))]\n\
    \             #:when (< (abs (- (first closest-pair) n)) closest-distance))\n\
    \         (set! closest-pair (list (first closest-pair) n))\n         (set! closest-distance\
    \ (abs (- (first closest-pair) n))))\n       closest-pair)]))\n", "  (define (find_closest_elements_iter\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest_diff (abs\
    \ (- (car closest_pair) (cadr closest_pair)))])\n          (if (< diff closest_diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest_pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest_diff (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< diff closest_diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n\
    \        (let ((difference (abs (- (car numbers) (cadr numbers)))))\n        \
    \  (if (< difference (abs (- (car closest-so-far) (cadr closest-so-far))))\n \
    \             (find_closest_elements_helper (cdr numbers) (list (car numbers)\
    \ (cadr numbers)))\n              (find_closest_elements_helper (cdr numbers)\
    \ closest-so-far)))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (let ([closest-pair (list (first numbers) (second numbers))])\n\
    \    (for ([i (in-range (add1 (length numbers)))]\n          [j (in-range (add1\
    \ (length numbers)))]\n          #:when (and (not (= i j))\n                 \
    \     (not (equal? (first closest-pair) (second closest-pair)))\n            \
    \          (< (abs (- (list-ref numbers i) (list-ref numbers j)))\n          \
    \               (abs (- (first closest-pair) (second closest-pair))))))\n    \
    \  (set! closest-pair (list (list-ref numbers i) (list-ref numbers j))))\n   \
    \ closest-pair))\n", "  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) empty]\n    [else\n     (let* ([smallest-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (rest numbers)))]\n            [closest-pair (filter\
    \ (lambda (x y) (= (abs (- x y)) smallest-diff)) numbers (rest numbers))])\n \
    \      closest-pair)]))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (if (empty? numbers)\n        closest_pair\n        (let* ([first (first\
    \ numbers)]\n               [rest (rest numbers)]\n               [closest_pair_so_far\
    \ (if (empty? closest_pair)\n                                        (list first\
    \ (first rest))\n                                        closest_pair)]\n    \
    \           [closest_pair_so_far_diff (abs (- (first closest_pair_so_far) (second\
    \ closest_pair_so_far)))]\n               [new_pair (list first (first rest))]\n\
    \               [new_pair_diff (abs (- (first new_pair) (second new_pair)))])\n\
    \          (if (< new_pair_diff closest_pair_so_far_diff)\n              (find_closest_elements_helper\
    \ rest new_pair)\n              (find_closest_elements_helper rest closest_pair_so_far)))))\n\
    \  (find_closest_elements_helper numbers '()))\n", "  (define (abs x)\n    (if\
    \ (< x 0)\n        (- x)\n        x))\n  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([current-pair (list (car numbers) (cadr numbers))]\n         \
    \      [current-distance (abs (- (car current-pair) (cadr current-pair)))]\n \
    \              [closest-distance (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< current-distance closest-distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n      [(empty?\
    \ (rest numbers)) closest-pair]\n      [else\n       (let* ([n1 (first numbers)]\n\
    \              [n2 (first (rest numbers))]\n              [diff (abs (- n1 n2))]\n\
    \              [closest-diff (abs (- (first closest-pair) (second closest-pair)))])\n\
    \         (if (< diff closest-diff)\n             (find_closest_elements_helper\
    \ (rest numbers) (list n1 n2))\n             (find_closest_elements_helper (rest\
    \ numbers) closest-pair)))]))\n  (find_closest_elements_helper numbers (list (first\
    \ numbers) (second numbers))))\n", "  (let ([closest-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (cdr numbers)))])\n    (list (apply min (filter\
    \ (lambda (x) (= (abs (- x (apply min numbers))) closest-diff)) numbers))\n  \
    \        (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) closest-diff))\
    \ numbers)))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< diff closest-diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond ((null?\
    \ numbers) closest-pair)\n          ((= (length numbers) 1) closest-pair)\n  \
    \        ((= (length numbers) 2) (if (< (abs (- (car numbers) (cadr numbers)))\
    \ (abs (- (car closest-pair) (cadr closest-pair))))\n                        \
    \               numbers\n                                       closest-pair))\n\
    \          (else (let* ((first (car numbers))\n                       (second\
    \ (cadr numbers))\n                       (rest (cddr numbers))\n            \
    \           (current-pair (list first second))\n                       (closest-pair\
    \ (if (< (abs (- first second)) (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \                                         current-pair\n                     \
    \                    closest-pair)))\n                   (find_closest_elements_helper\
    \ rest closest-pair)))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (cond\n      [(empty? numbers) closest-pair]\n      [(empty? (rest numbers))\
    \ closest-pair]\n      [else\n       (let* ([first (first numbers)]\n        \
    \      [second (first (rest numbers))]\n              [diff (abs (- first second))]\n\
    \              [closest-diff (abs (- (first closest-pair) (second closest-pair)))]\n\
    \              [new-closest-pair (if (< diff closest-diff) (list first second)\
    \ closest-pair)])\n         (find_closest_elements_helper (rest numbers) new-closest-pair))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest_diff (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< diff closest_diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let* ([sorted (sort numbers <)]\n  \
    \       [closest-pair (for/fold ([closest-pair (list (car sorted) (cadr sorted))]\n\
    \                                  [prev (car sorted)])\n                    \
    \             ([n (in-list (cdr sorted))])\n                                 (let*\
    \ ([diff (abs (- n prev))]\n                                        [closest-diff\
    \ (abs (- (cadr closest-pair) (car closest-pair)))])\n                       \
    \            (if (< diff closest-diff)\n                                     \
    \  (list n prev)\n                                       closest-pair)))])\n \
    \   closest-pair))\n", "  (let ([min-diff (apply min (map (lambda (x y) (abs (-\
    \ x y))) numbers (rest numbers)))])\n    (list (apply min (filter (lambda (x)\
    \ (= (abs (- x (apply min numbers))) min-diff)) numbers))\n          (apply max\
    \ (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers)))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest_diff (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< diff closest_diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-elements)\n    (if (null?\
    \ (cdr numbers))\n        closest-elements\n        (let* ([current-number (car\
    \ numbers)]\n               [next-number (cadr numbers)]\n               [current-diff\
    \ (abs (- current-number next-number))]\n               [closest-diff (abs (-\
    \ (car closest-elements) (cadr closest-elements)))])\n          (if (< current-diff\
    \ closest-diff)\n              (find_closest_elements_helper (cdr numbers) (list\
    \ current-number next-number))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-elements)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([closest-pair (list (first numbers)\
    \ (second numbers))])\n    (for ([i (in-range (add1 (length numbers)))]\n    \
    \      [j (in-range i)])\n      (let ([diff (abs (- (list-ref numbers i) (list-ref\
    \ numbers j)))])\n        (when (< diff (abs (- (first closest-pair) (second closest-pair))))\n\
    \          (set! closest-pair (list (list-ref numbers j) (list-ref numbers i))))))\n\
    \    closest-pair))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (cond\n      [(empty? numbers) closest-pair]\n      [(empty? (rest numbers))\
    \ closest-pair]\n      [else\n       (let* ([n1 (first numbers)]\n           \
    \   [n2 (first (rest numbers))]\n              [diff (abs (- n1 n2))]\n      \
    \        [closest-diff (abs (- (first closest-pair) (second closest-pair)))]\n\
    \              [new-closest-pair (if (< diff closest-diff) (list n1 n2) closest-pair)])\n\
    \         (find_closest_elements_helper (rest numbers) new-closest-pair))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (let* ([numbers (sort numbers <)]\n         [closest-pair (list (car numbers)\
    \ (cadr numbers))]\n         [closest-distance (abs (- (car closest-pair) (cadr\
    \ closest-pair)))]\n         [numbers (cdr numbers)])\n    (for ([n numbers])\n\
    \      (let* ([distance (abs (- (car closest-pair) n))])\n        (when (< distance\
    \ closest-distance)\n          (set! closest-pair (list (car closest-pair) n))\n\
    \          (set! closest-distance distance))))\n    closest-pair))\n", "  (define\
    \ (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr numbers))\n\
    \        closest_pair\n        (let* ([first (car numbers)]\n               [second\
    \ (cadr numbers)]\n               [diff (abs (- first second))]\n            \
    \   [closest_diff (abs (- (car closest_pair) (cadr closest_pair)))])\n       \
    \   (if (< diff closest_diff)\n              (find_closest_elements_helper (cdr\
    \ numbers) (list first second))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (let ((closest-pair (list (first numbers)\
    \ (second numbers))))\n    (for ([n (in-list (rest (rest numbers)))]\n       \
    \   #:when (< (abs (- (first closest-pair) n))\n                    (abs (- (second\
    \ closest-pair) (first closest-pair)))))\n      (set! closest-pair (list (first\
    \ closest-pair) n)))\n    closest-pair))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([current_pair (list (car numbers) (cadr numbers))]\n         \
    \      [current_diff (abs (- (car current_pair) (cadr current_pair)))]\n     \
    \          [closest_diff (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< current_diff closest_diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) current_pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest)\n    (if (null? (cdr numbers))\n\
    \        closest\n        (let* ([a (car numbers)]\n               [b (cadr numbers)]\n\
    \               [diff (abs (- a b))]\n               [closest-diff (abs (- (car\
    \ closest) (cadr closest)))]\n               [new-closest (if (< diff closest-diff)\
    \ (list a b) closest)])\n          (find_closest_elements_helper (cdr numbers)\
    \ new-closest))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (if (null? (cdr numbers))\n        closest_pair\n        (let* ([current_pair\
    \ (list (car numbers) (cadr numbers))]\n               [current_diff (abs (- (car\
    \ current_pair) (cadr current_pair)))]\n               [closest_diff (abs (- (car\
    \ closest_pair) (cadr closest_pair)))])\n          (if (< current_diff closest_diff)\n\
    \              (find_closest_elements_helper (cdr numbers) current_pair)\n   \
    \           (find_closest_elements_helper (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest_difference\
    \ (abs (- (car closest_pair) (cadr closest_pair)))])\n          (if (< difference\
    \ closest_difference)\n              (find_closest_elements_helper (cdr numbers)\
    \ (list first second))\n              (find_closest_elements_helper (cdr numbers)\
    \ closest_pair)))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (cond\n      [(empty? numbers) closest_pair]\n      [(empty? (rest numbers))\
    \ closest_pair]\n      [else\n       (let* ([n1 (first numbers)]\n           \
    \   [n2 (first (rest numbers))]\n              [diff (abs (- n1 n2))]\n      \
    \        [closest_diff (abs (- (first closest_pair) (second closest_pair)))]\n\
    \              [new_closest_pair (if (< diff closest_diff) (list n1 n2) closest_pair)])\n\
    \         (find_closest_elements_helper (rest numbers) new_closest_pair))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([min-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (cdr numbers)))])\n    (list (apply min (filter\
    \ (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n      \
    \    (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (let* ([min-diff (apply min (map (lambda (x y) (abs (- x\
    \ y))) numbers (cdr numbers)))]\n         [closest-pair (filter (lambda (x y)\
    \ (= (abs (- x y)) min-diff)) numbers (cdr numbers))])\n    (if (= (length closest-pair)\
    \ 2)\n        closest-pair\n        (list (car closest-pair) (car closest-pair)))))\n",
  "  (let* ([sorted-numbers (sort numbers <)]\n         [smallest-diff (apply min\
    \ (map (lambda (x y) (- y x)) sorted-numbers (rest sorted-numbers)))]\n      \
    \   [closest-pair (find (lambda (x y) (= (- y x) smallest-diff)) sorted-numbers\
    \ (rest sorted-numbers))])\n    (list (car closest-pair) (cadr closest-pair))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [distance (abs (- first second))]\n\
    \               [closest_distance (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< distance closest_distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let loop ([numbers numbers]\n      \
    \       [closest-pair (list (first numbers) (second numbers))])\n    (if (null?\
    \ (cddr numbers))\n        closest-pair\n        (let ([new-pair (list (first\
    \ numbers) (second numbers))])\n          (if (< (abs (- (first new-pair) (second\
    \ new-pair)))\n                 (abs (- (first closest-pair) (second closest-pair))))\n\
    \              (loop (cdr numbers) new-pair)\n              (loop (cdr numbers)\
    \ closest-pair))))))\n", "  (let* ([sorted (sort numbers <)]\n         [min-diff\
    \ (apply min (map (lambda (x y) (abs (- x y))) sorted (cdr sorted)))]\n      \
    \   [closest-pair (filter (lambda (x y) (= (abs (- x y)) min-diff)) sorted (cdr\
    \ sorted))])\n    closest-pair))\n", "  (let ([closest-pair (list (car numbers)\
    \ (cadr numbers))]\n        [closest-distance (abs (- (car numbers) (cadr numbers)))])\n\
    \    (for ([i (in-range (add1 (length numbers)))]\n          [j (in-range i)])\n\
    \      (let ([distance (abs (- (list-ref numbers i) (list-ref numbers j)))])\n\
    \        (when (< distance closest-distance)\n          (set! closest-pair (list\
    \ (list-ref numbers j) (list-ref numbers i)))\n          (set! closest-distance\
    \ distance))))\n    closest-pair))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([n1 (car numbers)]\n               [n2 (cadr numbers)]\n     \
    \          [diff (abs (- n1 n2))]\n               [closest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< diff closest-diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list n1 n2))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ((closest-pair (list (first numbers)\
    \ (second numbers))))\n    (for ([i (in-range (add1 (length numbers)))]\n    \
    \      [j (in-range (add1 (length numbers)))]\n          #:when (and (not (= i\
    \ j))\n                      (< (abs (- (list-ref numbers i) (list-ref numbers\
    \ j)))\n                         (abs (- (first closest-pair) (second closest-pair))))))\n\
    \      (set! closest-pair (list (list-ref numbers i) (list-ref numbers j))))\n\
    \    (sort closest-pair <)))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n   \
    \     (let* ([first (car numbers)]\n               [second (cadr numbers)]\n \
    \              [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-so-far) (cadr closest-so-far)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-so-far)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [current-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff current-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (let ([closest-pair (list (car numbers) (cadr numbers))]\n        [closest-distance\
    \ (abs (- (car numbers) (cadr numbers)))])\n    (for ([n (in-list (cddr numbers))])\n\
    \      (let ([distance (abs (- (car closest-pair) n))])\n        (when (< distance\
    \ closest-distance)\n          (set! closest-pair (list (car closest-pair) n))\n\
    \          (set! closest-distance distance))))\n    (list (apply min closest-pair)\
    \ (apply max closest-pair))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let* ([min-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (rest numbers)))]\n         [min-pair (for/first\
    \ ([x numbers] [y (rest numbers)])\n                     (when (= (abs (- x y))\
    \ min-diff)\n                       (list x y)))])\n    (sort min-pair <)))\n",
  "  (define (find_closest_elements-iter numbers closest)\n    (if (null? (cdr numbers))\n\
    \        closest\n        (let* ([first (car numbers)]\n               [second\
    \ (cadr numbers)]\n               [diff (abs (- first second))]\n            \
    \   [closest-diff (abs (- (car closest) (cadr closest)))]\n               [new-closest\
    \ (if (< diff closest-diff) (list first second) closest)])\n          (find_closest_elements-iter\
    \ (cdr numbers) new-closest))))\n  (find_closest_elements-iter numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([num1 (car numbers)]\n               [num2 (cadr numbers)]\n        \
    \       [diff (abs (- num1 num2))]\n               [closest-diff (abs (- (car\
    \ closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list num1 num2))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-so-far)\n    (if (null?\
    \ (cdr numbers))\n        closest-so-far\n        (let* ([current-number (car\
    \ numbers)]\n               [next-number (cadr numbers)]\n               [current-diff\
    \ (abs (- current-number next-number))]\n               [closest-diff (abs (-\
    \ (car closest-so-far) (cadr closest-so-far)))])\n          (if (< current-diff\
    \ closest-diff)\n              (find_closest_elements_helper (cdr numbers) (list\
    \ current-number next-number))\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-so-far)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ((current-pair (list (car numbers) (cadr numbers)))\n               (current-diff\
    \ (abs (- (car current-pair) (cadr current-pair))))\n               (closest-diff\
    \ (abs (- (car closest-pair) (cadr closest-pair)))))\n          (if (< current-diff\
    \ closest-diff)\n              (find_closest_elements_iter (cdr numbers) current-pair)\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([current_pair (list (car numbers)\
    \ (cadr numbers))]\n               [current_diff (abs (- (car current_pair) (cadr\
    \ current_pair)))]\n               [closest_diff (abs (- (car closest_pair) (cadr\
    \ closest_pair)))])\n          (if (< current_diff closest_diff)\n           \
    \   (find_closest_elements_helper (cdr numbers) current_pair)\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([current-pair (list (car numbers) (cadr numbers))]\n         \
    \      [current-distance (abs (- (car current-pair) (cadr current-pair)))]\n \
    \              [closest-distance (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< current-distance closest-distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest_so_far)\n    (if (null? (cdr numbers))\n        closest_so_far\n   \
    \     (let* ([next_number (car (cdr numbers))]\n               [difference (abs\
    \ (- (car numbers) next_number))]\n               [closest_so_far (if (< difference\
    \ (abs (- (car closest_so_far) (cadr closest_so_far))))\n                    \
    \               (list (car numbers) next_number)\n                           \
    \        closest_so_far)])\n          (find_closest_elements_helper (cdr numbers)\
    \ closest_so_far))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n", "  (let ([closest-diff (apply min (map (lambda (x y) (abs\
    \ (- x y))) numbers (rest numbers)))])\n    (list (apply min (filter (lambda (x)\
    \ (= (abs (- x (apply min numbers))) closest-diff)) numbers))\n          (apply\
    \ max (filter (lambda (x) (= (abs (- x (apply min numbers))) closest-diff)) numbers)))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (null? (cdr\
    \ numbers))\n        closest_pair\n        (let* ([current_pair (list (car numbers)\
    \ (cadr numbers))]\n               [current_diff (abs (- (car current_pair) (cadr\
    \ current_pair)))]\n               [closest_diff (abs (- (car closest_pair) (cadr\
    \ closest_pair)))])\n          (if (< current_diff closest_diff)\n           \
    \   (find_closest_elements_helper (cdr numbers) current_pair)\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (if (null? numbers)\n      (error \"find_closest_elements:\
    \ empty list\")\n      (if (null? (cdr numbers))\n          (error \"find_closest_elements:\
    \ list must contain at least two elements\")\n          (find_closest_elements_helper\
    \ (cdr numbers) (list (car numbers) (cadr numbers))))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([current_pair (list (car numbers) (cadr numbers))]\n         \
    \      [current_diff (abs (- (car current_pair) (cadr current_pair)))]\n     \
    \          [closest_diff (abs (- (car closest_pair) (cadr closest_pair)))])\n\
    \          (if (< current_diff closest_diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) current_pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest_pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n       \
    \ (let* ([current_pair (list (car numbers) (cadr numbers))]\n               [current_distance\
    \ (abs (- (car current_pair) (cadr current_pair)))]\n               [closest_distance\
    \ (abs (- (car closest_pair) (cadr closest_pair)))])\n          (if (< current_distance\
    \ closest_distance)\n              (find_closest_elements_helper (cdr numbers)\
    \ current_pair)\n              (find_closest_elements_helper (cdr numbers) closest_pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_iter numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([current-pair (list (car numbers)\
    \ (cadr numbers))]\n               [current-diff (abs (- (car current-pair) (cadr\
    \ current-pair)))]\n               [closest-diff (abs (- (car closest-pair) (cadr\
    \ closest-pair)))])\n          (if (< current-diff closest-diff)\n           \
    \   (find_closest_elements_helper (cdr numbers) current-pair)\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([min-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (rest numbers)))])\n    (list (apply min (filter\
    \ (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n      \
    \    (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< diff closest-diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let loop ([numbers numbers]\n\
    \             [min-diff (abs (- (car numbers) (cadr numbers)))]\n            \
    \ [min-pair (list (car numbers) (cadr numbers))])\n    (if (null? (cddr numbers))\n\
    \        min-pair\n        (let* ([diff (abs (- (cadr numbers) (caddr numbers)))]\n\
    \               [new-min-pair (if (< diff min-diff)\n                        \
    \         (list (cadr numbers) (caddr numbers))\n                            \
    \     min-pair)])\n          (loop (cdr numbers)\n                (if (< diff\
    \ min-diff) diff min-diff)\n                new-min-pair)))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest_pair)\n    (if (empty?\
    \ numbers)\n        closest_pair\n        (let* ([next_number (first numbers)]\n\
    \               [next_pair (list (first closest_pair) next_number)]\n        \
    \       [new_closest_pair (if (< (abs (- (first closest_pair) (second closest_pair)))\n\
    \                                       (abs (- (first next_pair) (second next_pair))))\n\
    \                                    closest_pair\n                          \
    \          next_pair)])\n          (find_closest_elements_helper (rest numbers)\
    \ new_closest_pair))))\n  (find_closest_elements_helper (rest numbers) (list (first\
    \ numbers) (first numbers))))\n", "  (let ([closest-pair (list (car numbers) (cadr\
    \ numbers))]\n        [closest-distance (abs (- (car numbers) (cadr numbers)))])\n\
    \    (for ([i (in-range (add1 (length numbers)))]\n          [j (in-range i)])\n\
    \      (let ([distance (abs (- (list-ref numbers i) (list-ref numbers j)))])\n\
    \        (when (< distance closest-distance)\n          (set! closest-pair (list\
    \ (list-ref numbers j) (list-ref numbers i)))\n          (set! closest-distance\
    \ distance))))\n    closest-pair))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (cond\n      [(empty? numbers) closest_pair]\n  \
    \    [(empty? (rest numbers)) closest_pair]\n      [else\n       (let ([first\
    \ (first numbers)]\n             [second (second numbers)]\n             [difference\
    \ (abs (- first second))])\n         (if (< difference (abs (- (first closest_pair)\
    \ (second closest_pair))))\n             (find_closest_elements_helper (rest numbers)\
    \ (list first second))\n             (find_closest_elements_helper (rest numbers)\
    \ closest_pair)))]))\n  (find_closest_elements_helper numbers (list (first numbers)\
    \ (second numbers))))\n", "  (let ([closest-pair (list (first numbers) (second\
    \ numbers))])\n    (for ([i (in-range (add1 (length numbers)))]\n          [j\
    \ (in-range (sub1 i))])\n      (let ([diff (abs (- (list-ref numbers i) (list-ref\
    \ numbers j)))])\n        (when (< diff (abs (- (first closest-pair) (second closest-pair))))\n\
    \          (set! closest-pair (list (list-ref numbers j) (list-ref numbers i))))))\n\
    \    closest-pair))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (cond\n      [(empty? numbers) closest-pair]\n      [(empty? (rest numbers))\
    \ closest-pair]\n      [else\n       (define current-pair (list (first numbers)\
    \ (second numbers)))\n       (define current-distance (abs (- (first current-pair)\
    \ (second current-pair))))\n       (define closest-distance (abs (- (first closest-pair)\
    \ (second closest-pair))))\n       (if (< current-distance closest-distance)\n\
    \           (find_closest_elements_helper (rest numbers) current-pair)\n     \
    \      (find_closest_elements_helper (rest numbers) closest-pair))]))\n  (find_closest_elements_helper\
    \ (rest numbers) (list (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest-difference\
    \ (abs (- (car closest-pair) (cadr closest-pair)))]\n               [new-closest-pair\
    \ (if (< difference closest-difference)\n                                    \
    \ (list first second)\n                                     closest-pair)])\n\
    \          (find_closest_elements_helper (cdr numbers) new-closest-pair))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ([min-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (rest numbers)))])\n    (list (apply min (filter\
    \ (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n      \
    \    (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (define (find_closest_elements_helper numbers closest_elements)\n\
    \    (cond\n      [(empty? numbers) closest_elements]\n      [(empty? (rest numbers))\
    \ closest_elements]\n      [else\n       (define current_closest_elements (list\
    \ (first numbers) (second numbers)))\n       (define current_closest_distance\
    \ (abs (- (first numbers) (second numbers))))\n       (define (find_closest_elements_helper_inner\
    \ numbers current_closest_elements current_closest_distance)\n         (cond\n\
    \           [(empty? numbers) current_closest_elements]\n           [(empty? (rest\
    \ numbers)) current_closest_elements]\n           [else\n            (define current_distance\
    \ (abs (- (first numbers) (second numbers))))\n            (if (< current_distance\
    \ current_closest_distance)\n                (find_closest_elements_helper_inner\
    \ (rest numbers) (list (first numbers) (second numbers)) current_distance)\n \
    \               (find_closest_elements_helper_inner (rest numbers) current_closest_elements\
    \ current_closest_distance))]))\n       (find_closest_elements_helper (rest numbers)\
    \ (find_closest_elements_helper_inner (rest numbers) current_closest_elements\
    \ current_closest_distance))]))\n  (find_closest_elements_helper numbers (list\
    \ (first numbers) (second numbers))))\n", "  (define (find_closest_elements-helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first-number (car numbers)]\n               [second-number (cadr\
    \ numbers)]\n               [first-diff (abs (- first-number (car closest-pair)))]\n\
    \               [second-diff (abs (- second-number (cadr closest-pair)))]\n  \
    \             [new-closest-pair (if (< first-diff second-diff)\n             \
    \                        (list first-number second-number)\n                 \
    \                    closest-pair)])\n          (find_closest_elements-helper\
    \ (cdr numbers) new-closest-pair))))\n  (find_closest_elements-helper numbers\
    \ (list (car numbers) (cadr numbers))))\n", "  (let* ([sorted-numbers (sort numbers\
    \ <)]\n         [closest-pair (list (first sorted-numbers) (second sorted-numbers))]\n\
    \         [closest-distance (abs (- (first closest-pair) (second closest-pair)))]\n\
    \         [current-pair (list (first sorted-numbers) (second sorted-numbers))]\n\
    \         [current-distance (abs (- (first current-pair) (second current-pair)))]\n\
    \         [remaining-numbers (rest (rest sorted-numbers))])\n    (for ([number\
    \ remaining-numbers])\n      (set! current-pair (list (second current-pair) number))\n\
    \      (set! current-distance (abs (- (first current-pair) (second current-pair))))\n\
    \      (when (< current-distance closest-distance)\n        (set! closest-pair\
    \ current-pair)\n        (set! closest-distance current-distance)))\n    closest-pair))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond\n    \
    \  [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (let* ([current-pair (list (first numbers) (second numbers))]\n\
    \              [current-distance (abs (- (first current-pair) (second current-pair)))]\n\
    \              [closest-distance (abs (- (first closest-pair) (second closest-pair)))]\n\
    \              [new-closest-pair (if (< current-distance closest-distance) current-pair\
    \ closest-pair)])\n         (find_closest_elements_helper (rest (rest numbers))\
    \ new-closest-pair))]))\n  (find_closest_elements_helper numbers (list (first\
    \ numbers) (second numbers))))\n", "  (let loop ([numbers numbers]\n         \
    \    [closest-pair (list (car numbers) (cadr numbers))])\n    (cond [(null? (cddr\
    \ numbers)) closest-pair]\n          [(< (abs (- (car numbers) (cadr numbers)))\n\
    \              (abs (- (car closest-pair) (cadr closest-pair))))\n           (loop\
    \ (cdr numbers) (list (car numbers) (cadr numbers)))]\n          [else (loop (cdr\
    \ numbers) closest-pair)])))\n", "  (let ((closest-pair (list (car numbers) (cadr\
    \ numbers))))\n    (for ([i (in-range (length numbers))])\n      (for ([j (in-range\
    \ (add1 i))])\n        (let* ([a (list-ref numbers i)]\n               [b (list-ref\
    \ numbers j)]\n               [distance (abs (- a b))])\n          (if (< distance\
    \ (abs (- (car closest-pair) (cadr closest-pair))))\n              (set! closest-pair\
    \ (list a b))))))\n    closest-pair))\n", "  (let ([min-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (rest numbers)))])\n    (list (first (filter (lambda\
    \ (x) (= (abs (- x (second numbers))) min-diff)) numbers))\n          (second\
    \ (filter (lambda (x) (= (abs (- x (first numbers))) min-diff)) numbers)))))\n",
  "  (define (find_closest_elements_iter numbers closest-pair)\n    (cond\n      [(empty?\
    \ numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n     \
    \ [else\n       (let* ([first (first numbers)]\n              [second (first (rest\
    \ numbers))]\n              [diff (abs (- first second))]\n              [closest-diff\
    \ (abs (- (first closest-pair) (second closest-pair)))]\n              [new-closest-pair\
    \ (if (< diff closest-diff) (list first second) closest-pair)])\n         (find_closest_elements_iter\
    \ (rest numbers) new-closest-pair))]))\n  (find_closest_elements_iter numbers\
    \ (list (first numbers) (second numbers))))\n", "  (let ([min-diff (apply min\
    \ (map (lambda (x y) (abs (- x y))) numbers (rest numbers)))])\n    (list (apply\
    \ min (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n\
    \          (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (let ([closest-pair (list (car numbers) (cadr numbers))]\n\
    \        [closest-distance (abs (- (car numbers) (cadr numbers)))])\n    (for\
    \ ([n (in-list (cddr numbers))])\n      (let ([distance (abs (- (car closest-pair)\
    \ n))])\n        (when (< distance closest-distance)\n          (set! closest-pair\
    \ (list (car closest-pair) n))\n          (set! closest-distance distance))))\n\
    \    (if (= (car closest-pair) (cadr closest-pair))\n        closest-pair\n  \
    \      (list (min (car closest-pair) (cadr closest-pair))\n              (max\
    \ (car closest-pair) (cadr closest-pair))))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) (list first second))\n\
    \              (find_closest_elements_iter (cdr numbers) closest-pair)))))\n \
    \ (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers smallest_difference smallest_difference_pair)\n\
    \    (if (null? (cdr numbers))\n        smallest_difference_pair\n        (let*\
    \ ((current_difference (abs (- (car numbers) (cadr numbers))))\n             \
    \  (new_smallest_difference (if (< current_difference smallest_difference)\n \
    \                                           current_difference\n             \
    \                               smallest_difference))\n               (new_smallest_difference_pair\
    \ (if (= new_smallest_difference current_difference)\n                       \
    \                          (list (car numbers) (cadr numbers))\n             \
    \                                    smallest_difference_pair)))\n          (find_closest_elements_helper\
    \ (cdr numbers) new_smallest_difference new_smallest_difference_pair))))\n  (find_closest_elements_helper\
    \ numbers (abs (- (car numbers) (cadr numbers))) (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest_diff (abs\
    \ (- (car closest_pair) (cadr closest_pair)))])\n          (if (< diff closest_diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest_pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (cond\n    [(empty? numbers) (error \"empty list\")]\n    [(empty? (rest numbers))\
    \ (error \"list too short\")]\n    [else\n     (let* ([first (first numbers)]\n\
    \            [second (second numbers)]\n            [closest-pair (list first\
    \ second)]\n            [closest-distance (abs (- first second))])\n       (for\
    \ ([n (in-list (rest (rest numbers)))])\n         (let* ([distance (abs (- first\
    \ n))])\n           (when (< distance closest-distance)\n             (set! closest-pair\
    \ (list first n))\n             (set! closest-distance distance))))\n       closest-pair]))\n\
    \  )\n", "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond\n\
    \      [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (define current-pair (list (first numbers) (second numbers)))\n\
    \       (define current-distance (abs (- (first current-pair) (second current-pair))))\n\
    \       (define closest-distance (abs (- (first closest-pair) (second closest-pair))))\n\
    \       (if (< current-distance closest-distance)\n           (find_closest_elements_helper\
    \ (rest numbers) current-pair)\n           (find_closest_elements_helper (rest\
    \ numbers) closest-pair))]))\n  (find_closest_elements_helper (rest numbers) (list\
    \ (first numbers) (second numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_elements)\n    (cond\n      [(empty? numbers) closest_elements]\n\
    \      [(empty? (rest numbers)) closest_elements]\n      [else\n       (let* ([first\
    \ (first numbers)]\n              [second (first (rest numbers))]\n          \
    \    [diff (abs (- first second))]\n              [closest_diff (abs (- (first\
    \ closest_elements) (second closest_elements)))])\n         (if (< diff closest_diff)\n\
    \             (find_closest_elements_helper (rest numbers) (list first second))\n\
    \             (find_closest_elements_helper (rest numbers) closest_elements)))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (first (rest numbers)))))\n",
  "  (define (find_closest_elements_helper numbers smallest_difference smallest_difference_pair)\n\
    \    (if (null? (cdr numbers))\n        smallest_difference_pair\n        (let*\
    \ ((difference (abs (- (car numbers) (cadr numbers))))\n               (new_smallest_difference_pair\
    \ (if (< difference smallest_difference)\n                                   \
    \             (list (car numbers) (cadr numbers))\n                          \
    \                      smallest_difference_pair)))\n          (find_closest_elements_helper\
    \ (cdr numbers) (min difference smallest_difference) new_smallest_difference_pair))))\n\
    \  (find_closest_elements_helper numbers (abs (- (car numbers) (cadr numbers)))\
    \ (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond\n      [(empty? numbers) closest-pair]\n  \
    \    [(empty? (rest numbers)) closest-pair]\n      [else\n       (let* ([first\
    \ (first numbers)]\n              [second (first (rest numbers))]\n          \
    \    [first-second-diff (abs (- first second))]\n              [closest-pair-diff\
    \ (abs (- (first closest-pair) (second closest-pair)))])\n         (if (< first-second-diff\
    \ closest-pair-diff)\n             (find_closest_elements_helper (rest numbers)\
    \ (list first second))\n             (find_closest_elements_helper (rest numbers)\
    \ closest-pair)))]))\n  (find_closest_elements_helper numbers (list (first numbers)\
    \ (second numbers))))\n", "  (define (find_closest_elements_helper numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest-diff (abs (- (car closest-pair)\
    \ (cadr closest-pair)))])\n          (if (< diff closest-diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements-iter\
    \ numbers closest)\n    (if (null? (cdr numbers))\n        closest\n        (let*\
    \ ([current-closest (if (or (null? closest)\n                                \
    \        (< (abs (- (car numbers) (cadr numbers)))\n                         \
    \                  (abs (- (car closest) (cadr closest)))))\n                \
    \                    (list (car numbers) (cadr numbers))\n                   \
    \                 closest)])\n          (find_closest_elements-iter (cdr numbers)\
    \ current-closest))))\n  (find_closest_elements-iter numbers (list)))\n", "  (letrec\
    \ ([closest-pair (lambda (numbers)\n                           (if (null? (cdr\
    \ numbers))\n                               (list (car numbers) (car numbers))\n\
    \                               (let* ([numbers-sorted (sort numbers <)]\n   \
    \                                   [first-pair (list (car numbers-sorted) (cadr\
    \ numbers-sorted))]\n                                      [second-pair (closest-pair\
    \ (cdr numbers-sorted))])\n                                 (if (< (abs (- (car\
    \ first-pair) (cadr first-pair)))\n                                        (abs\
    \ (- (car second-pair) (cadr second-pair))))\n                               \
    \      first-pair\n                                     second-pair))))])\n  \
    \  (closest-pair numbers)))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let ([first (car numbers)]\n              [second (cadr numbers)])\n      \
    \    (if (< (abs (- first second)) (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_iter numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ((first (car numbers))\n    \
    \           (second (cadr numbers))\n               (diff (abs (- first second)))\n\
    \               (closest-diff (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \               (new-closest-pair (if (< diff closest-diff)\n                \
    \                     (list first second)\n                                  \
    \   closest-pair)))\n          (find_closest_elements_iter (cdr numbers) new-closest-pair))))\n\
    \  (find_closest_elements_iter numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-so-far)\n    (if (null?\
    \ (cdr numbers))\n        closest-so-far\n        (let* ([current-closest-pair\
    \ (find_closest_elements_helper (cdr numbers) closest-so-far)]\n             \
    \  [current-closest-pair-difference (abs (- (car current-closest-pair) (cadr current-closest-pair)))]\n\
    \               [new-closest-pair (list (car numbers) (cadr numbers))]\n     \
    \          [new-closest-pair-difference (abs (- (car new-closest-pair) (cadr new-closest-pair)))])\n\
    \          (if (< current-closest-pair-difference new-closest-pair-difference)\n\
    \              current-closest-pair\n              new-closest-pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let ([numbers (sort numbers\
    \ <)])\n    (let loop ([numbers numbers] [closest (list (car numbers) (cadr numbers))])\n\
    \      (if (null? (cddr numbers))\n          closest\n          (let ([new-closest\
    \ (if (< (abs (- (car numbers) (cadr numbers))) (abs (- (car closest) (cadr closest))))\n\
    \                                 (list (car numbers) (cadr numbers))\n      \
    \                           closest)])\n            (loop (cdr numbers) new-closest))))))\n",
  "  (define (find_closest_elements_helper lst min-diff min-pair)\n    (if (null?\
    \ lst)\n        min-pair\n        (let* ([curr-num (car lst)]\n              \
    \ [curr-pair (list curr-num (cadr lst))]\n               [curr-diff (abs (- (car\
    \ curr-pair) (cadr curr-pair)))]\n               [new-min-pair (if (< curr-diff\
    \ min-diff) curr-pair min-pair)]\n               [new-min-diff (if (< curr-diff\
    \ min-diff) curr-diff min-diff)])\n          (find_closest_elements_helper (cdr\
    \ lst) new-min-diff new-min-pair))))\n  (find_closest_elements_helper numbers\
    \ (abs (- (car numbers) (cadr numbers))) (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [distance (abs (- first second))]\n\
    \               [closest-distance (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< distance closest-distance)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [diff (abs (- first second))]\n               [closest-diff (abs\
    \ (- (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (let ([numbers (sort numbers <)])\n    (let ([min-diff (apply min (map (lambda\
    \ (x y) (abs (- x y))) numbers (cdr numbers)))])\n      (let ([closest-pair (find\
    \ (lambda (x y) (= (abs (- x y)) min-diff)) numbers (cdr numbers))])\n       \
    \ (list (car closest-pair) (cadr closest-pair))))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest)\n    (if (null? (cdr numbers))\n        closest\n        (let*\
    \ ([first (car numbers)]\n               [second (cadr numbers)]\n           \
    \    [difference (abs (- first second))]\n               [closest-difference (abs\
    \ (- (car closest) (cadr closest)))]\n               [new-closest (if (< difference\
    \ closest-difference)\n                                (list first second)\n \
    \                               closest)])\n          (find_closest_elements_helper\
    \ (cdr numbers) new-closest))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([a (car numbers)]\n               [b (cadr numbers)]\n       \
    \        [diff (abs (- a b))]\n               [closest_diff (abs (- (car closest_pair)\
    \ (cadr closest_pair)))])\n          (if (< diff closest_diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list a b))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_pair)))))\n  (if (null? numbers)\n      '()\n      (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers)))))\n", "  (let* ([min-diff (apply\
    \ min (map (lambda (x y) (abs (- x y))) numbers (cdr numbers)))]\n         [min-diff-index\
    \ (index-of min-diff (map (lambda (x y) (abs (- x y))) numbers (cdr numbers)))])\n\
    \    (list (list-ref numbers min-diff-index) (list-ref numbers (+ min-diff-index\
    \ 1)))))\n", "  (let ([min-diff (apply min (map (lambda (x y) (abs (- x y))) numbers\
    \ (cdr numbers)))])\n    (list (apply min (filter (lambda (x) (= (abs (- x (apply\
    \ min numbers))) min-diff)) numbers))\n          (apply max (filter (lambda (x)\
    \ (= (abs (- x (apply min numbers))) min-diff)) numbers)))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ([current-pair (list (car numbers) (cadr numbers))]\n         \
    \      [current-diff (abs (- (car current-pair) (cadr current-pair)))]\n     \
    \          [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< current-diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n       \
    \ (let* ([first (car numbers)]\n               [second (cadr numbers)]\n     \
    \          [diff (abs (- first second))]\n               [closest-diff (abs (-\
    \ (car closest-pair) (cadr closest-pair)))])\n          (if (< diff closest-diff)\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (cond\n    \
    \  [(empty? numbers) closest-pair]\n      [(empty? (rest numbers)) closest-pair]\n\
    \      [else\n       (let* ([first (first numbers)]\n              [second (first\
    \ (rest numbers))]\n              [diff (abs (- first second))]\n            \
    \  [closest-diff (abs (- (first closest-pair) (second closest-pair)))]\n     \
    \         [new-closest-pair (if (< diff closest-diff) (list first second) closest-pair)])\n\
    \         (find_closest_elements_helper (rest numbers) new-closest-pair))]))\n\
    \  (find_closest_elements_helper numbers (list (first numbers) (second numbers))))\n",
  "  (let ((min-diff (abs (- (car numbers) (cadr numbers))))\n        (min-pair (list\
    \ (car numbers) (cadr numbers))))\n    (for ((n (cddr numbers))\n          (i\
    \ (cadr numbers)))\n      (let ((diff (abs (- i n))))\n        (when (< diff min-diff)\n\
    \          (set! min-diff diff)\n          (set! min-pair (list i n)))))\n   \
    \ min-pair))\n", "  (define (find_closest_elements_iter numbers closest-pair)\n\
    \    (if (null? (cdr numbers))\n        closest-pair\n        (let* ([current-pair\
    \ (list (car numbers) (cadr numbers))]\n               [current-diff (abs (- (car\
    \ current-pair) (cadr current-pair)))]\n               [closest-diff (abs (- (car\
    \ closest-pair) (cadr closest-pair)))])\n          (if (< current-diff closest-diff)\n\
    \              (find_closest_elements_iter (cdr numbers) current-pair)\n     \
    \         (find_closest_elements_iter (cdr numbers) closest-pair)))))\n  (find_closest_elements_iter\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let* ((sorted-numbers\
    \ (sort numbers <))\n         (pairs (map (lambda (x) (list x (cadr x))) (partition\
    \ 2 1 sorted-numbers)))\n         (diffs (map (lambda (x) (abs (- (car x) (cadr\
    \ x)))) pairs))\n         (min-diff (apply min diffs))\n         (min-pair (list-ref\
    \ pairs (position min-diff diffs))))\n    (list (car min-pair) (cadr min-pair))))\n",
  "  (let ((closest-elements (list (car numbers) (cadr numbers))))\n    (for ((i 1)\
    \ (numbers (cdr numbers)))\n      (for ((j 0) (numbers (cdr numbers)))\n     \
    \   (let ((distance (abs (- (car numbers) (car (cdr numbers))))))\n          (if\
    \ (< distance (abs (- (car closest-elements) (cadr closest-elements))))\n    \
    \          (set! closest-elements (list (car numbers) (car (cdr numbers))))))))\n\
    \    closest-elements))\n", "  (let ([min-diff (apply min (map (lambda (x) (abs\
    \ (- (car x) (cadr x)))) (partition numbers 2)))])\n    (list (car (filter (lambda\
    \ (x) (= (abs (- (car x) (cadr x))) min-diff)) (partition numbers 2)))\n     \
    \     (cadr (filter (lambda (x) (= (abs (- (car x) (cadr x))) min-diff)) (partition\
    \ numbers 2))))))\n", "  (let* ([min-diff (apply min (map (lambda (x y) (abs (-\
    \ x y))) numbers (cdr numbers)))]\n         [min-pair (filter (lambda (x y) (=\
    \ (abs (- x y)) min-diff)) numbers (cdr numbers))])\n    (list (apply min min-pair)\
    \ (apply max min-pair))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n       \
    \ (let* ([head (car numbers)]\n               [tail (cdr numbers)]\n         \
    \      [head_tail_diff (abs (- head (car tail)))]\n               [closest_pair_diff\
    \ (abs (- (car closest_pair) (cadr closest_pair)))]\n               [new_closest_pair\
    \ (if (< head_tail_diff closest_pair_diff)\n                                 \
    \   (list head (car tail))\n                                    closest_pair)])\n\
    \          (find_closest_elements_helper tail new_closest_pair))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let ([first (car numbers)]\n              [second (cadr numbers)])\n\
    \          (if (< (abs (- first second)) (abs (- (car closest-pair) (cadr closest-pair))))\n\
    \              (find_closest_elements_helper (cdr numbers) (list first second))\n\
    \              (find_closest_elements_helper (cdr numbers) closest-pair)))))\n\
    \  (find_closest_elements_helper numbers (list (car numbers) (cadr numbers))))\n",
  "  (define (find_closest_elements_helper numbers closest-pair)\n    (if (null? (cdr\
    \ numbers))\n        closest-pair\n        (let* ([first (car numbers)]\n    \
    \           [second (cadr numbers)]\n               [diff (abs (- first second))]\n\
    \               [closest-diff (abs (- (car closest-pair) (cadr closest-pair)))])\n\
    \          (if (< diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list first second))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest-pair)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest-pair)\n    (cond ((null? numbers) closest-pair)\n          ((=\
    \ (length numbers) 1) closest-pair)\n          ((< (abs (- (car numbers) (cadr\
    \ numbers))) (abs (- (car closest-pair) (cadr closest-pair))))\n           (find_closest_elements_helper\
    \ (cdr numbers) (list (car numbers) (cadr numbers))))\n          (else (find_closest_elements_helper\
    \ (cdr numbers) closest-pair))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (define (abs-diff x y)\n    (if (< x\
    \ y) (- y x) (- x y)))\n  (define (find-closest-elements-helper numbers min-diff\
    \ min-pair)\n    (if (null? (cdr numbers))\n        min-pair\n        (let* ((diff\
    \ (abs-diff (car numbers) (cadr numbers)))\n               (new-pair (if (< diff\
    \ min-diff) (list (car numbers) (cadr numbers)) min-pair)))\n          (find-closest-elements-helper\
    \ (cdr numbers) (if (< diff min-diff) diff min-diff) new-pair))))\n  (if (null?\
    \ numbers)\n      (error \"find_closest_elements: empty list\")\n      (find-closest-elements-helper\
    \ numbers (abs-diff (car numbers) (cadr numbers)) (list (car numbers) (cadr numbers)))))\n",
  "  (let ([min-diff (apply min (map (lambda (x y) (abs (- x y))) numbers (cdr numbers)))])\n\
    \    (list (apply min (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers))\n          (apply max (filter (lambda (x) (= (abs (- x (apply min\
    \ numbers))) min-diff)) numbers)))))\n", "  (define (find_closest_elements_iter\
    \ numbers closest-pair)\n    (if (null? (cdr numbers))\n        closest-pair\n\
    \        (let* ((current-pair (list (car numbers) (cadr numbers)))\n         \
    \      (current-diff (abs (- (car current-pair) (cadr current-pair))))\n     \
    \          (closest-diff (abs (- (car closest-pair) (cadr closest-pair)))))\n\
    \          (if (< current-diff closest-diff)\n              (find_closest_elements_iter\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_iter (cdr\
    \ numbers) closest-pair)))))\n  (find_closest_elements_iter numbers (list (car\
    \ numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper numbers\
    \ closest-so-far)\n    (if (null? (cdr numbers))\n        closest-so-far\n   \
    \     (let* ([current-pair (list (car numbers) (cadr numbers))]\n            \
    \   [current-diff (abs (- (car current-pair) (cadr current-pair)))]\n        \
    \       [closest-diff (abs (- (car closest-so-far) (cadr closest-so-far)))])\n\
    \          (if (< current-diff closest-diff)\n              (find_closest_elements_helper\
    \ (cdr numbers) current-pair)\n              (find_closest_elements_helper (cdr\
    \ numbers) closest-so-far)))))\n  (find_closest_elements_helper numbers (list\
    \ (car numbers) (cadr numbers))))\n", "  (let ((closest-pair (list (first numbers)\
    \ (second numbers))))\n    (for ((i (in-range (add1 (length numbers))))\n    \
    \      (j (in-range (add1 (length numbers)))))\n      (when (and (not (= i j))\n\
    \                 (< (abs (- (list-ref numbers i) (list-ref numbers j)))\n   \
    \                 (abs (- (first closest-pair) (second closest-pair)))))\n   \
    \     (set! closest-pair (list (list-ref numbers i) (list-ref numbers j)))))\n\
    \    closest-pair))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (if (null? (cdr numbers))\n        closest_pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest_diff (abs (- (car closest_pair)\
    \ (cadr closest_pair)))])\n          (if (< diff closest_diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (let ([min-diff (apply\
    \ min (map (lambda (x y) (abs (- x y))) numbers (cdr numbers)))])\n    (list (apply\
    \ min (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff)) numbers))\n\
    \          (apply max (filter (lambda (x) (= (abs (- x (apply min numbers))) min-diff))\
    \ numbers)))))\n", "  (define (find_closest_elements_helper numbers closest_elements)\n\
    \    (if (null? (cdr numbers))\n        closest_elements\n        (let* ([current_element\
    \ (car numbers)]\n               [next_element (cadr numbers)]\n             \
    \  [difference (abs (- current_element next_element))]\n               [closest_difference\
    \ (abs (- (car closest_elements) (cadr closest_elements)))])\n          (if (<\
    \ difference closest_difference)\n              (find_closest_elements_helper\
    \ (cdr numbers) (list current_element next_element))\n              (find_closest_elements_helper\
    \ (cdr numbers) closest_elements)))))\n  (find_closest_elements_helper numbers\
    \ (list (car numbers) (cadr numbers))))\n", "  (letrec ([closest-pair (lambda\
    \ (numbers)\n                           (if (null? (cdr numbers))\n          \
    \                     (list (car numbers) (car numbers))\n                   \
    \            (let* ([first (car numbers)]\n                                  \
    \    [second (cadr numbers)]\n                                      [rest (cddr\
    \ numbers)]\n                                      [closest-rest (closest-pair\
    \ rest)]\n                                      [closest-rest-first (car closest-rest)]\n\
    \                                      [closest-rest-second (cadr closest-rest)]\n\
    \                                      [closest-rest-distance (abs (- closest-rest-first\
    \ closest-rest-second))]\n                                      [first-second-distance\
    \ (abs (- first second))])\n                                 (if (< first-second-distance\
    \ closest-rest-distance)\n                                     (list first second)\n\
    \                                     closest-rest))))])\n    (closest-pair (sort\
    \ numbers <))))\n", "  (define (find_closest_elements_helper numbers closest_pair)\n\
    \    (if (null? (cdr numbers))\n        closest_pair\n        (let* ([first (car\
    \ numbers)]\n               [second (cadr numbers)]\n               [diff (abs\
    \ (- first second))]\n               [closest_diff (abs (- (car closest_pair)\
    \ (cadr closest_pair)))])\n          (if (< diff closest_diff)\n             \
    \ (find_closest_elements_helper (cdr numbers) (list first second))\n         \
    \     (find_closest_elements_helper (cdr numbers) closest_pair)))))\n  (find_closest_elements_helper\
    \ numbers (list (car numbers) (cadr numbers))))\n", "  (define (find_closest_elements_helper\
    \ numbers closest_pair)\n    (if (null? (cdr numbers))\n        closest_pair\n\
    \        (let* ([first (car numbers)]\n               [second (cadr numbers)]\n\
    \               [difference (abs (- first second))]\n               [closest_difference\
    \ (abs (- (car closest_pair) (cadr closest_pair)))])\n          (if (< difference\
    \ closest_difference)\n              (find_closest_elements_helper (cdr numbers)\
    \ (list first second))\n              (find_closest_elements_helper (cdr numbers)\
    \ closest_pair)))))\n  (find_closest_elements_helper numbers (list (car numbers)\
    \ (cadr numbers))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
