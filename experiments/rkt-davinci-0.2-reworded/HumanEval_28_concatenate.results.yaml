name: HumanEval_28_concatenate
language: rkt
results:
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (foldl (lambda (a b) (string-append\
    \ a b)) \"\" strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate concatenate))\n    (check-equal? (candidate (list )) \"\"\
    )\n    (check-equal? (candidate (list \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal?\
    \ (candidate (list \"x\" \"y\" \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_yldeffe.rkt:17:4\n\
    actual:     \"zyx\"\nexpected:   \"xyz\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_yldeffe.rkt:18:4\nactual:\
    \     \"kwzyx\"\nexpected:   \"xyzwk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (foldl (lambda (s1 s2) (string-append\
    \ s1 s2)) \"\" strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate concatenate))\n    (check-equal? (candidate (list )) \"\"\
    )\n    (check-equal? (candidate (list \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal?\
    \ (candidate (list \"x\" \"y\" \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptxr839_f.rkt:17:4\n\
    actual:     \"zyx\"\nexpected:   \"xyz\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptxr839_f.rkt:18:4\nactual:\
    \     \"kwzyx\"\nexpected:   \"xyzwk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (if (null? strings)\n    \
    \  \"\"\n      (string-append (car strings) (concatenate (cdr strings)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (if (null? strings)\n    \
    \  \"\"\n      (string-append (car strings) (concatenate (cdr strings)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (cond\n    [(empty? strings)\
    \ \"\" ]\n    [else (string-append (first strings) (concatenate (rest strings)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (if (null? strings)\n    \
    \  \"\"\n      (string-append (car strings) (concatenate (cdr strings)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (cond\n    [(empty? strings)\
    \ \"\"]\n    [else (string-append (first strings) (concatenate (rest strings)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (if (null? strings)\n    \
    \  \"\"\n      (string-append (car strings) (concatenate (cdr strings)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (foldl (lambda (s1 s2) (string-append\
    \ s1 s2)) \"\" strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate concatenate))\n    (check-equal? (candidate (list )) \"\"\
    )\n    (check-equal? (candidate (list \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal?\
    \ (candidate (list \"x\" \"y\" \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuu4b5afo.rkt:17:4\n\
    actual:     \"zyx\"\nexpected:   \"xyz\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuu4b5afo.rkt:18:4\nactual:\
    \     \"kwzyx\"\nexpected:   \"xyzwk\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Concatenate list of strings into a single string\n\
    ;; >>> (concatenate (list ))\n;; \"\"\n;; >>> (concatenate (list \"a\" \"b\" \"\
    c\"))\n;; \"abc\"\n(define (concatenate strings)\n  (apply string-append strings))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate concatenate))\n\
    \    (check-equal? (candidate (list )) \"\")\n    (check-equal? (candidate (list\
    \ \"x\" \"y\" \"z\")) \"xyz\")\n    (check-equal? (candidate (list \"x\" \"y\"\
    \ \"z\" \"w\" \"k\")) \"xyzwk\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
