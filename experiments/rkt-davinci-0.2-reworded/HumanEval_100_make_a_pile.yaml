name: HumanEval_100_make_a_pile
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, you have to make a pile of\
  \ n levels of stones.\n;; The first level has n stones.\n;; The number of stones\
  \ in the next level is:\n;; - the next odd number if n is odd.\n;; - the next even\
  \ number if n is even.\n;; Return the number of stones in each level in a list,\
  \ where element at index\n;; i represents the number of stones in the level (i+1).\n\
  ;; Examples:\n;; >>> (make_a_pile 3)\n;; (list 3 5 7)\n(define (make_a_pile n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate make_a_pile))\n\
  \    (check-equal? (candidate 3) (list 3 5 7))\n    (check-equal? (candidate 4)\
  \ (list 4 6 8 10))\n    (check-equal? (candidate 5) (list 5 7 9 11 13))\n    (check-equal?\
  \ (candidate 6) (list 6 8 10 12 14 16))\n    (check-equal? (candidate 8) (list 8\
  \ 10 12 14 16 18 20 22))\n))\n\n(test-humaneval)"
completions: ["  (define (make_a_pile-iter n acc)\n    (if (= n 0)\n        acc\n\
    \        (make_a_pile-iter (- n 1) (cons (if (odd? n) (+ n 2) (+ n 1)) acc))))\n\
    \  (make_a_pile-iter n '()))\n", "  (define (make_a_pile-iter n acc)\n    (if\
    \ (= n 0)\n        acc\n        (make_a_pile-iter (- n 1) (cons (if (odd? n) (+\
    \ n 2) (+ n 1)) acc))))\n  (make_a_pile-iter n '()))\n", "  (define (make_a_pile-iter\
    \ n acc)\n    (if (= n 0)\n        acc\n        (make_a_pile-iter (- n 1) (cons\
    \ (if (odd? n) (+ n 2) (+ n 1)) acc))))\n  (make_a_pile-iter n '()))\n", "  (for/list\
    \ ([i (in-range n)])\n    (if (odd? i)\n        (+ i 2)\n        (+ i 1))))\n",
  "  (cond\n    [(= n 1) (list 1)]\n    [(odd? n) (cons n (make_a_pile (+ n 2)))]\n\
    \    [(even? n) (cons n (make_a_pile (+ n 1)))]))\n", "  (for/list ([i (in-range\
    \ n)])\n    (cond\n      [(odd? i) (+ i 2)]\n      [(even? i) (+ i 1)])))\n",
  "  (define (make_a_pile-iter n acc)\n    (if (= n 0)\n        acc\n        (make_a_pile-iter\
    \ (- n 1) (cons (+ n 1) acc))))\n  (make_a_pile-iter n '()))\n", "  (if (= n 1)\n\
    \      (list 1)\n      (append (make_a_pile (- n 1))\n              (list (+ n\
    \ (if (odd? n) 2 1))))))\n", "  (if (= n 1)\n      (list 1)\n      (cons n (make_a_pile\
    \ (- n 1)))))\n", "  (cond\n    [(= n 1) (list 1)]\n    [(odd? n) (cons n (make_a_pile\
    \ (+ n 2)))]\n    [(even? n) (cons n (make_a_pile (+ n 1)))]))\n", "  (cond\n\
    \    [(zero? n) empty]\n    [(odd? n) (cons n (make_a_pile (+ n 2)))]\n    [(even?\
    \ n) (cons n (make_a_pile (+ n 1)))]))\n", "  (for/list ([i (in-range n)])\n \
    \   (if (odd? i)\n        (+ i 2)\n        (+ i 1))))\n", "  (define (make_a_pile-iter\
    \ n level)\n    (if (= n 0)\n        '()\n        (cons level (make_a_pile-iter\
    \ (- n 1) (+ level (if (odd? n) 2 1))))))\n  (make_a_pile-iter n n))\n", "  (define\
    \ (make_a_pile-iter n lst)\n    (if (= n 0)\n        lst\n        (make_a_pile-iter\
    \ (- n 1) (cons (if (odd? n) (+ n 2) (+ n 1)) lst))))\n  (make_a_pile-iter n '()))\n",
  "  (define (make_a_pile-iter n acc)\n    (if (= n 0)\n        acc\n        (make_a_pile-iter\
    \ (- n 1) (cons (+ n 1) acc))))\n  (make_a_pile-iter n '()))\n", "  (define (make_a_pile-iter\
    \ n acc)\n    (if (= n 0)\n        acc\n        (make_a_pile-iter (- n 1) (cons\
    \ n acc))))\n  (make_a_pile-iter n '()))\n", "  (define (make_a_pile-helper n\
    \ acc)\n    (if (= n 0)\n        acc\n        (make_a_pile-helper (- n 1) (cons\
    \ (if (odd? n) (+ 2 n) (+ 1 n)) acc))))\n  (make_a_pile-helper n '()))\n", " \
    \ (define (make_a_pile-iter n acc)\n    (if (= n 0)\n        acc\n        (make_a_pile-iter\
    \ (- n 1) (cons (if (odd? n) (+ n 2) (+ n 1)) acc))))\n  (make_a_pile-iter n '()))\n",
  "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1)\
    \ (cons (+ n 1) acc))))\n  (helper n (list n)))\n", "  (define (make_a_pile-iter\
    \ n acc)\n    (if (= n 0)\n        acc\n        (make_a_pile-iter (- n 1) (cons\
    \ (+ n 1) acc))))\n  (make_a_pile-iter n '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
