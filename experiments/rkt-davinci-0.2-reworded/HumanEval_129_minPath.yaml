name: HumanEval_129_minPath
language: rkt
prompt: "#lang racket\n\n;; Given a grid with N rows and N columns (N >= 2) and a\
  \ positive integer k, \n;; each cell of the grid contains a value. Every integer\
  \ in the range [1, N * N]\n;; inclusive appears exactly once on the cells of the\
  \ grid.\n;; You have to find the minimum path of length k in the grid. You can start\n\
  ;; from any cell, and in each step you can move to any of the neighbor cells,\n\
  ;; in other words, you can go to cells which share an edge with you current\n;;\
  \ cell.\n;; Please note that a path of length k means visiting exactly k cells (not\n\
  ;; necessarily distinct).\n;; You CANNOT go off the grid.\n;; A path A (of length\
  \ k) is considered less than a path B (of length k) if\n;; after making the ordered\
  \ lists of the values on the cells that A and B go\n;; through (let's call them\
  \ lst_A and lst_B), lst_A is lexicographically less\n;; than lst_B, in other words,\
  \ there exist an integer index i (1 <= i <= k)\n;; such that lst_A[i] < lst_B[i]\
  \ and for any j (1 <= j < i) we have\n;; lst_A[j] = lst_B[j].\n;; It is guaranteed\
  \ that the answer is unique.\n;; Return an ordered list of the values on the cells\
  \ that the minimum path go through.\n;; Examples:    \n;; >>> (minPath (list (list\
  \ 1 2 3) (list 4 5 6) (list 7 8 9)) 3)\n;; (list 1 2 1)\n;; >>> (minPath (list (list\
  \ 5 9 3) (list 4 1 6) (list 7 8 2)) 1)\n;; (list 1)\n(define (minPath grid k)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minPath))\n\
  \    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3) (list\
  \ 1 2 1))\n    (check-equal? (candidate (list (list 5 9 3) (list 4 1 6) (list 7\
  \ 8 2)) 1) (list 1))\n    (check-equal? (candidate (list (list 1 2 3 4) (list 5\
  \ 6 7 8) (list 9 10 11 12) (list 13 14 15 16)) 4) (list 1 2 1 2))\n    (check-equal?\
  \ (candidate (list (list 6 4 13 10) (list 5 7 12 1) (list 3 16 11 15) (list 8 14\
  \ 9 2)) 7) (list 1 10 1 10 1 10 1))\n    (check-equal? (candidate (list (list 8\
  \ 14 9 2) (list 6 4 13 15) (list 5 7 1 12) (list 3 10 11 16)) 5) (list 1 7 1 7 1))\n\
  \    (check-equal? (candidate (list (list 11 8 7 2) (list 5 16 14 4) (list 9 3 15\
  \ 6) (list 12 13 10 1)) 9) (list 1 6 1 6 1 6 1 6 1))\n    (check-equal? (candidate\
  \ (list (list 12 13 10 1) (list 9 3 15 6) (list 5 16 14 4) (list 11 8 7 2)) 12)\
  \ (list 1 6 1 6 1 6 1 6 1 6 1 6))\n    (check-equal? (candidate (list (list 2 7\
  \ 4) (list 3 1 5) (list 6 8 9)) 8) (list 1 3 1 3 1 3 1 3))\n    (check-equal? (candidate\
  \ (list (list 6 1 5) (list 3 8 9) (list 2 7 4)) 8) (list 1 5 1 5 1 5 1 5))\n   \
  \ (check-equal? (candidate (list (list 1 2) (list 3 4)) 10) (list 1 2 1 2 1 2 1\
  \ 2 1 2))\n    (check-equal? (candidate (list (list 1 3) (list 3 2)) 10) (list 1\
  \ 3 1 3 1 3 1 3 1 3))\n))\n\n(test-humaneval)"
completions: ["  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (let ([n (length grid)])\n    (define (minPath-helper grid k)\n\
    \      (cond [(= k 0) (list (list-ref (list-ref grid 0) 0))]\n            [(=\
    \ k 1) (list (list-ref (list-ref grid 0) 0))]\n            [else (let ([min-path\
    \ (minPath-helper grid (- k 1))])\n                    (for/list ([i (in-range\
    \ n)]\n                               [j (in-range n)])\n                    \
    \  (let ([path (cons (list-ref (list-ref grid i) j) min-path)])\n            \
    \            (if (and (not (member (list-ref (list-ref grid i) j) min-path))\n\
    \                                 (not (member (list-ref (list-ref grid i) j)\
    \ (list-ref grid i)))\n                                 (not (member (list-ref\
    \ (list-ref grid i) j) (map list-ref grid))))\n                            path\n\
    \                            (list (list-ref (list-ref grid 0) 0))))))]))\n  \
    \  (apply min (minPath-helper grid k))))\n", "  (define (minPath-helper grid k)\n\
    \    (cond\n      [(empty? grid) empty]\n      [(empty? (first grid)) (minPath-helper\
    \ (rest grid) k)]\n      [(= k 1) (list (first (first grid)))]\n      [else\n\
    \       (let*\n           ([first-row (first grid)]\n            [first-val (first\
    \ first-row)]\n            [rest-grid (rest grid)]\n            [rest-row (first\
    \ rest-grid)]\n            [rest-val (first rest-row)]\n            [rest-path\
    \ (minPath-helper rest-grid (- k 1))])\n         (cond\n           [(< first-val\
    \ rest-val) (cons first-val rest-path)]\n           [else (cons rest-val rest-path)]))]))\n\
    \  (minPath-helper grid k))\n", "  (define (minPath-helper grid k)\n    (define\
    \ (minPath-helper-helper grid k)\n      (cond\n        [(= k 0) (list (list (car\
    \ (car grid))))]\n        [(= k 1) (list (list (car (car grid))) (list (cadr (car\
    \ grid))) (list (caddr (car grid))) (list (car (cadr grid))) (list (cadr (cadr\
    \ grid))) (list (caddr (cadr grid))) (list (car (caddr grid))) (list (cadr (caddr\
    \ grid))) (list (caddr (caddr grid))))]\n        [else (append (minPath-helper-helper\
    \ grid (- k 1)) (minPath-helper-helper (cdr grid) (- k 1)) (minPath-helper-helper\
    \ (map cdr grid) (- k 1)))]))\n    (define (minPath-helper-helper-helper lst)\n\
    \      (cond\n        [(null? lst) '()]\n        [(= (length (car lst)) k) (cons\
    \ (car lst) (minPath-helper-helper-helper (cdr lst)))]\n        [else (minPath-helper-helper-helper\
    \ (cdr lst))]))\n    (define (minPath-helper-helper-helper-helper lst)\n     \
    \ (cond\n        [(null? lst) '()]\n        [(= (length (car lst)) k) (cons (car\
    \ lst) (minPath-helper-helper-helper-helper (cdr lst)))]\n        [else (minPath-helper-helper-helper-helper\
    \ (cdr lst))]))\n    (define (minPath-helper-helper-helper-helper-helper lst)\n\
    \      (cond\n        [(null? lst) '()]\n        [(= (length (car lst)) k) (cons\
    \ (car lst) (minPath-helper-helper-helper-helper-helper (cdr lst)))]\n       \
    \ [else (minPath-helper-helper-helper-helper-", "  (define (minPath-helper grid\
    \ k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n\
    \      [(= k 2) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (cdr (cdr (cdr (car grid))))))]\n      [(= k 4)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))))]\n \
    \     [(= k 5) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr (cdr (cdr (cdr (car grid))))))))]\n      [(= k 6) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr\
    \ (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))) (car (cdr (cdr\
    \ (cdr (cdr (cdr (car grid))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr (car grid)))))))))]\n\
    \      [(= k 7) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr", "  (define (minPath-helper grid k)\n    (if (= k 1)\n     \
    \   (list (car (car grid)))\n        (let* ([n (length grid)]\n              \
    \ [min-path (make-vector n (make-vector n (list (car (car grid)))))]\n       \
    \        [min-path-value (make-vector n (make-vector n (car (car grid))))])\n\
    \          (for ([i (in-range n)])\n            (for ([j (in-range n)])\n    \
    \          (let* ([neighbors (list (list (- i 1) j) (list (+ i 1) j) (list i (-\
    \ j 1)) (list i (+ j 1)))]\n                     [min-path-value-neighbors (list\
    \ (list (if (and (>= (- i 1) 0) (< (- i 1) n)) (vector-ref min-path-value (- i\
    \ 1) j) (vector-ref min-path-value i j))\n                                   \
    \                   (if (and (>= (+ i 1) 0) (< (+ i 1) n)) (vector-ref min-path-value\
    \ (+ i 1) j) (vector-ref min-path-value i j))\n                              \
    \                        (if (and (>= (- j 1) 0) (< (- j 1) n)) (vector-ref min-path-value\
    \ i (- j 1)) (vector-ref min-path-value i j))\n                              \
    \                        (if (and (>= (+ j 1) 0) (< (+ j 1) n)) (vector-ref min-path-value\
    \ i (+ j 1)) (vector-ref min-path-value i j)))]\n                            \
    \                         (list (list (if (and (>= (- i 1) 0) (< (- i 1) n)) (vector-ref\
    \ min-path (- i 1) j) (vector-ref min-path i j))\n                           \
    \                                      (if (and (>= (+ i 1) 0) (< (+ i 1) n))\
    \ (vector-ref min-path (+ i 1) j) (vector-ref min-path i j))\n               \
    \                                                  (if (and (>= (- j 1) 0) (<\
    \ (- j 1) n)) (vector-ref min-path i (- j 1)) (vector-ref min-path i", "  (define\
    \ (minPath-helper grid k)\n    (cond\n      [(empty? grid) empty]\n      [(empty?\
    \ (first grid)) (minPath-helper (rest grid) k)]\n      [(= k 1) (list (first (first\
    \ grid)))]\n      [else (minPath-helper (rest grid) (- k 1))]))\n  (minPath-helper\
    \ grid k))\n", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (cond\n        [(= k 0) (list (list (list (car (car grid)))))\n\
    \         (for/list ([i (in-range (length grid))])\n           (for/list ([j (in-range\
    \ (length (car grid)))])\n             (list (list (list (list-ref (car grid)\
    \ i) (list i j))\n                         (list (list-ref (car grid) i) (list\
    \ i j))))))]\n        [(= k 1) (for/list ([i (in-range (length grid))])\n    \
    \               (for/list ([j (in-range (length (car grid)))])\n             \
    \        (list (list (list (list-ref (car grid) i) (list i j))))))]\n        [else\n\
    \         (for/list ([i (in-range (length grid))])\n           (for/list ([j (in-range\
    \ (length (car grid)))])\n             (for/list ([path (in-list (minPath-helper-helper\
    \ grid (- k 1)))])\n               (cond\n                 [(and (not (equal?\
    \ (cadr (car path)) (list i j)))\n                       (or (equal? (cadr (car\
    \ path)) (list (- i 1) j))\n                           (equal? (cadr (car path))\
    \ (list i (- j 1)))))\n                  (list (cons (list (list-ref (car grid)\
    \ i) (list i j)) path))]\n                 [else '()]))))]))\n    (define (minPath-helper-helper-helper\
    \ lst)\n      (cond\n        [(empty? lst) '()]\n        [else (append (car lst)\
    \ (minPath-helper-helper-helper (cdr lst)))]))\n    (minPath-helper-helper-helper\
    \ (minPath-helper-helper grid k))))\n  (define (minPath-helper-helper lst)\n \
    \   (cond\n      [(empty? lst) '()]\n      [else (append (car lst) (minPath-helper-helper",
  "  (define (minPath-helper grid k)\n    (if (= k 1)\n        (list (car (car grid)))\n\
    \        (let* ([min-path (minPath-helper grid (- k 1))]\n               [min-path-value\
    \ (car min-path)]\n               [min-path-row (car (cdr min-path))]\n      \
    \         [min-path-col (cdr (cdr min-path))])\n          (let* ([neighbors (list\
    \ (list (- min-path-row 1) min-path-col)\n                                  (list\
    \ (+ min-path-row 1) min-path-col)\n                                  (list min-path-row\
    \ (- min-path-col 1))\n                                  (list min-path-row (+\
    \ min-path-col 1)))]\n                 [neighbors (filter (lambda (x) (and (>=\
    \ (car x) 0)\n                                                    (>= (cdr x)\
    \ 0)\n                                                    (< (car x) (length grid))\n\
    \                                                    (< (cdr x) (length (car grid)))))\n\
    \                                    neighbors)]\n                 [neighbors\
    \ (map (lambda (x) (list (list-ref (list-ref grid (car x)) (cdr x))\n        \
    \                                           (car x)\n                        \
    \                           (cdr x)))\n                                 neighbors)]\n\
    \                 [neighbors (filter (lambda (x) (< (car x) min-path-value))\n\
    \                                    neighbors)])\n            (if (null? neighbors)\n\
    \                (cons min-path-value (list min-path-row min-path-col))\n    \
    \            (let* ([neighbors (sort neighbors (lambda (x y) (< (car x) (car y))))]\n\
    \                       [neighbor (car neighbors)])\n                  (cons (car\
    \ neighbor) (cdr neighbor))))))))\n  (let* ([min-path (minPath-helper grid k)]\n\
    \         [min-path-value (car min-path)]\n         [min-path-row (car (cdr min-path))]\n\
    \         [min-path-col (cdr (cdr min-path))])\n    (cons min-path-value (minPath-helper\
    \ (list", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (if (zero? k)\n        (list\
    \ (car (car grid)))\n        (let* ([min-path (minPath-helper grid (- k 1))]\n\
    \               [min-path-value (car min-path)]\n               [min-path-row\
    \ (car (cdr min-path))]\n               [min-path-col (cdr (cdr min-path))])\n\
    \          (let* ([neighbors (list (list (- min-path-row 1) min-path-col)\n  \
    \                                (list (+ min-path-row 1) min-path-col)\n    \
    \                              (list min-path-row (- min-path-col 1))\n      \
    \                            (list min-path-row (+ min-path-col 1)))]\n      \
    \           [valid-neighbors (filter (lambda (n)\n                           \
    \                 (and (<= 0 (car n)) (< (car n) (length grid))\n            \
    \                                     (<= 0 (cdr n)) (< (cdr n) (length grid))))\n\
    \                                          neighbors)]\n                 [valid-neighbors-values\
    \ (map (lambda (n)\n                                                 (list-ref\
    \ (list-ref grid (car n)) (cdr n)))\n                                        \
    \       valid-neighbors)]\n                 [min-valid-neighbor (apply min valid-neighbors-values)]\n\
    \                 [min-valid-neighbor-index (index valid-neighbors-values min-valid-neighbor)])\n\
    \            (append min-path (list (list-ref valid-neighbors min-valid-neighbor-index)))))))\n\
    \  (minPath-helper grid k))\n", "  (letrec ([grid-size (length grid)]\n      \
    \     [grid-size-1 (- grid-size 1)]\n           [grid-size-2 (- grid-size 2)]\n\
    \           [grid-size-3 (- grid-size 3)]\n           [grid-size-4 (- grid-size\
    \ 4)]\n           [grid-size-5 (- grid-size 5)]\n           [grid-size-6 (- grid-size\
    \ 6)]\n           [grid-size-7 (- grid-size 7)]\n           [grid-size-8 (- grid-size\
    \ 8)]\n           [grid-size-9 (- grid-size 9)]\n           [grid-size-10 (- grid-size\
    \ 10)]\n           [grid-size-11 (- grid-size 11)]\n           [grid-size-12 (-\
    \ grid-size 12)]\n           [grid-size-13 (- grid-size 13)]\n           [grid-size-14\
    \ (- grid-size 14)]\n           [grid-size-15 (- grid-size 15)]\n           [grid-size-16\
    \ (- grid-size 16)]\n           [grid-size-17 (- grid-size 17)]\n           [grid-size-18\
    \ (- grid-size 18)]\n           [grid-size-19 (- grid-size 19)]\n           [grid-size-20\
    \ (- grid-size 20)]\n           [grid-size-21 (- grid-size 21)]\n           [grid-size-22\
    \ (- grid-size 22)]\n           [grid-size-23 (- grid-size 23)]\n           [grid-size-24\
    \ (- grid-size 24)]\n           [grid-size-25 (- grid-size 25)]\n           [grid-size-26\
    \ (- grid-size 26)]\n           [grid-size-27 (- grid-size 27)]\n           [grid-size-28\
    \ (- grid-size 28)]\n           [grid-size-29 (- grid-size 29)]\n           [grid-size-30\
    \ (- grid-size 30)]\n           [grid-size-31 (- grid-size 31)]\n           [grid-size-32\
    \ (- grid-size 32)]\n           [grid-size-33 (- grid-size 33)]\n           [grid-size-34\
    \ (- grid-size 34)]\n           [grid-size-35 (- grid-size 35)]\n           [grid-size-36\
    \ (-", "  (define (minPath-helper grid k)\n    (if (= k 1)\n        (list (car\
    \ (car grid)))\n        (let* ([min-path (minPath-helper grid (- k 1))]\n    \
    \           [min-path-value (car min-path)]\n               [min-path-rest (cdr\
    \ min-path)])\n          (let loop ([grid grid] [min-path-value min-path-value]\
    \ [min-path-rest min-path-rest])\n            (if (null? grid)\n             \
    \   (list min-path-value)\n                (let* ([row (car grid)] [row-rest (cdr\
    \ grid)]\n                       [col (car row)] [col-rest (cdr row)])\n     \
    \             (if (and (member col min-path-rest) (member col-rest min-path-rest))\n\
    \                      (loop row-rest min-path-value min-path-rest)\n        \
    \              (if (< col min-path-value)\n                          (loop row-rest\
    \ col (cons col min-path-rest))\n                          (if (< col-rest min-path-value)\n\
    \                              (loop row-rest col-rest (cons col-rest min-path-rest))\n\
    \                              (loop row-rest min-path-value min-path-rest))))))))))\n\
    \  (minPath-helper grid k))\n", "  (define (minPath-helper grid k)\n    (if (zero?\
    \ k)\n        (list (car (car grid)))\n        (let ([min-path (minPath-helper\
    \ grid (- k 1))])\n          (let ([min-value (apply min (map (lambda (row) (apply\
    \ min row)) grid))])\n            (let ([min-path-value (car min-path)])\n   \
    \           (let ([min-path-value-index (index-of min-path-value grid)])\n   \
    \             (let ([min-path-value-row (car min-path-value-index)]\n        \
    \              [min-path-value-col (cadr min-path-value-index)])\n           \
    \       (let ([min-path-value-neighbors (list (list (- min-path-value-row 1) min-path-value-col)\n\
    \                                                        (list (+ min-path-value-row\
    \ 1) min-path-value-col)\n                                                   \
    \     (list min-path-value-row (- min-path-value-col 1))\n                   \
    \                                     (list min-path-value-row (+ min-path-value-col\
    \ 1)))])\n                    (let ([min-path-value-neighbors-in-grid (filter\
    \ (lambda (neighbor) (and (<= 0 (car neighbor)) (< (car neighbor) (length grid))\
    \ (<= 0 (cadr neighbor)) (< (cadr neighbor) (length (car grid))))) min-path-value-neighbors)])\n\
    \                      (let ([min-path-value-neighbors-in-grid-values (map (lambda\
    \ (neighbor) (list-ref (list-ref grid (car neighbor)) (cadr neighbor))) min-path-value-neighbors-in-grid)])\n\
    \                        (let ([min-path-value-neighbors-in-grid-values-min (apply\
    \ min min-path-value-neighbors-in-grid-values)])\n                          (append\
    \ min-path (list min-path-value-neighbors-in-grid-values-min))))))))))))))\n \
    \ (minPath-helper grid k))\n", "  (define (minPath-helper grid k)\n    (cond ((=\
    \ k 0) (list (car (car grid))))\n          ((= k 1) (list (car (car grid))))\n\
    \          (else (list (car (car grid)) (minPath-helper (cdr grid) (- k 1))))))\n\
    \  (minPath-helper grid k))\n", "  (define (minPath-helper grid k)\n    (if (=\
    \ k 1)\n        (list (car (car grid)))\n        (let* ([min-path (minPath-helper\
    \ grid (- k 1))]\n               [min-path-last (last min-path)]\n           \
    \    [min-path-last-row (quotient (- min-path-last 1) (length grid))]\n      \
    \         [min-path-last-col (remainder (- min-path-last 1) (length grid))]\n\
    \               [min-path-last-row-up (if (and (> min-path-last-row 0)\n     \
    \                                         (not (member (list-ref (list-ref grid\
    \ (- min-path-last-row 1)) min-path-last-col) min-path)))\n                  \
    \                       (- min-path-last-row 1)\n                            \
    \             min-path-last-row)]\n               [min-path-last-row-down (if\
    \ (and (< min-path-last-row (- (length grid) 1))\n                           \
    \                     (not (member (list-ref (list-ref grid (+ min-path-last-row\
    \ 1)) min-path-last-col) min-path)))\n                                       \
    \    (+ min-path-last-row 1)\n                                           min-path-last-row)]\n\
    \               [min-path-last-col-left (if (and (> min-path-last-col 0)\n   \
    \                                             (not (member (list-ref (list-ref\
    \ grid min-path-last-row) (- min-path-last-col 1)) min-path)))\n             \
    \                              (- min-path-last-col 1)\n                     \
    \                      min-path-last-col)]\n               [min-path-last-col-right\
    \ (if (and (< min-path-last-col (- (length grid) 1))\n                       \
    \                          (not (member (list-ref (list-ref grid min-path-last-row)\
    \ (+ min-path-last-col 1)) min-path)))\n                                     \
    \       (+ min-path-last-col 1)\n                                            min-path-last-col)]\n\
    \               [min-path-last-row-up-val (list-ref (list", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-inner grid k)\n      (define (minPath-helper-inner-inner\
    \ grid k)\n        (define (minPath-helper-inner-inner-inner grid k)\n       \
    \   (define (minPath-helper-inner-inner-inner-inner grid k)\n            (define\
    \ (minPath-helper-inner-inner-inner-inner-inner grid k)\n              (define\
    \ (minPath-helper-inner-inner-inner-inner-inner-inner grid k)\n              \
    \  (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner grid k)\n\
    \                  (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid k)\n                    (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid k)\n                      (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid k)\n                        (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid k)\n                          (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid k)\n                            (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid k)\n                              (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid k)\n                                (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid k)\n                                  (define (minPath-helper-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner-inner\
    \ grid k)\n                                    (define (minPath-helper-inner-",
  "  (letrec ([grid-size (length grid)]\n           [grid-size-1 (- grid-size 1)]\n\
    \           [grid-size-2 (- grid-size 2)]\n           [grid-size-3 (- grid-size\
    \ 3)]\n           [grid-size-4 (- grid-size 4)]\n           [grid-size-5 (- grid-size\
    \ 5)]\n           [grid-size-6 (- grid-size 6)]\n           [grid-size-7 (- grid-size\
    \ 7)]\n           [grid-size-8 (- grid-size 8)]\n           [grid-size-9 (- grid-size\
    \ 9)]\n           [grid-size-10 (- grid-size 10)]\n           [grid-size-11 (-\
    \ grid-size 11)]\n           [grid-size-12 (- grid-size 12)]\n           [grid-size-13\
    \ (- grid-size 13)]\n           [grid-size-14 (- grid-size 14)]\n           [grid-size-15\
    \ (- grid-size 15)]\n           [grid-size-16 (- grid-size 16)]\n           [grid-size-17\
    \ (- grid-size 17)]\n           [grid-size-18 (- grid-size 18)]\n           [grid-size-19\
    \ (- grid-size 19)]\n           [grid-size-20 (- grid-size 20)]\n           [grid-size-21\
    \ (- grid-size 21)]\n           [grid-size-22 (- grid-size 22)]\n           [grid-size-23\
    \ (- grid-size 23)]\n           [grid-size-24 (- grid-size 24)]\n           [grid-size-25\
    \ (- grid-size 25)]\n           [grid-size-26 (- grid-size 26)]\n           [grid-size-27\
    \ (- grid-size 27)]\n           [grid-size-28 (- grid-size 28)]\n           [grid-size-29\
    \ (- grid-size 29)]\n           [grid-size-30 (- grid-size 30)]\n           [grid-size-31\
    \ (- grid-size 31)]\n           [grid-size-32 (- grid-size 32)]\n           [grid-size-33\
    \ (- grid-size 33)]\n           [grid-size-34 (- grid-size 34)]\n           [grid-size-35\
    \ (- grid-size 35)]\n           [grid-size-36 (-", "  (define (minPath-helper\
    \ grid k)\n    (cond\n      [(empty? grid) empty]\n      [(empty? (first grid))\
    \ (minPath-helper (rest grid) k)]\n      [(= k 1) (list (first (first grid)))]\n\
    \      [else (minPath-helper (rest grid) k)]))\n  (minPath-helper grid k))\n",
  "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n\
    \      (define (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (get-min-path grid k)\n    (cond\n      [(= k 1) (list (list\
    \ (list (car (car grid)))))]\n      [(= k 2) (list (list (list (car (car grid))\
    \ (car (car (cdr grid))))))]\n      [else (list (list (list (car (car grid)) (car\
    \ (car (cdr grid))))))]))\n  (car (car (get-min-path grid k))))\n", "  (define\
    \ (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n      (define\
    \ (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n\
    \      [(= k 2) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n      [(= k 4) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr\
    \ grid))) (car (cdr (car (cdr grid)))))]\n      [(= k 5) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n      [(= k 6)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid)))))\
    \ (car (car (cdr (cdr grid)))))]\n      [(= k 7) (list (car (car grid)) (car (cdr\
    \ (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car\
    \ (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr grid))))\
    \ (car (cdr (car (cdr (cdr grid))))))]\n      [(= k 8) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n\
    \      [(= k 2) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (cdr (cdr (cdr (car grid))))))]\n      [(= k 4)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))))]\n \
    \     [(= k 5) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr (cdr (cdr (cdr (car grid))))))))]\n      [(= k 6) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr\
    \ (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))) (car (cdr (cdr\
    \ (cdr (cdr (cdr (car grid))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr (car grid)))))))))]\n\
    \      [(= k 7) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-rec\
    \ grid k)\n      (if (= k 0)\n          (list (car (car grid)))\n          (let\
    \ ((min-path (minPath-helper-rec grid (- k 1))))\n            (let ((min-path-val\
    \ (car min-path)))\n              (let ((min-path-val-row (quotient min-path-val\
    \ (length grid)))\n                    (min-path-val-col (remainder min-path-val\
    \ (length grid))))\n                (let ((min-path-val-row-up (if (> min-path-val-row\
    \ 0)\n                                               (- min-path-val-row 1)\n\
    \                                               min-path-val-row))\n         \
    \             (min-path-val-row-down (if (< min-path-val-row (- (length grid)\
    \ 1))\n                                                 (+ min-path-val-row 1)\n\
    \                                                 min-path-val-row))\n       \
    \               (min-path-val-col-left (if (> min-path-val-col 0)\n          \
    \                                       (- min-path-val-col 1)\n             \
    \                                    min-path-val-col))\n                    \
    \  (min-path-val-col-right (if (< min-path-val-col (- (length grid) 1))\n    \
    \                                              (+ min-path-val-col 1)\n      \
    \                                            min-path-val-col)))\n           \
    \       (let ((min-path-val-row-up-val (+ (* min-path-val-row-up (length grid))\
    \ min-path-val-col))\n                        (min-path-val-row-down-val (+ (*\
    \ min-path-val-row-down (length grid)) min-path-val-col))\n                  \
    \      (min-path-val-col-left-val (+ (* min-path-val-row min-path-val-col-left))\n\
    \                        (min-path-val-col-right-val (+ (* min-path-val-row min-path-val-col-right))))\n\
    \                    (let ((min-path-val-row-up-val-lst (if (member min-path-",
  "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n\
    \      (define (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPathHelper grid k)\n    (define (minPathHelperHelper\
    \ grid k)\n      (define (minPathHelperHelperHelper grid k)\n        (define (minPathHelperHelperHelperHelper\
    \ grid k)\n          (define (minPathHelperHelperHelperHelperHelper grid k)\n\
    \            (define (minPathHelperHelperHelperHelperHelperHelper grid k)\n  \
    \            (define (minPathHelperHelperHelperHelperHelperHelperHelper grid k)\n\
    \                (define (minPathHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                  (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                    (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                      (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                        (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                          (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                            (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                              (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                  (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                    (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                      (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                        (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                          (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                            (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                              (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper",
  "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n\
    \      (define (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cadr grid)) (car (cdr (cadr grid))) (car (cdr (cdr (cadr grid)))) (car\
    \ (cdr (cdr (cdr (cadr grid))))) (car (cdr (cdr (cdr (cdr (cadr grid)))))) (car\
    \ (cdr (cdr (cdr (cdr (cdr (cadr grid))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cadr grid)))))))))]\n      [else (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cadr grid)) (car (cdr (cadr grid))) (car (cdr (cdr (cadr grid)))) (car\
    \ (cdr (cdr (cdr (cadr grid))))) (car (cdr (cdr (cdr (cdr (cadr grid)))))) (car\
    \ (cdr (cdr (cdr (cdr (cdr (cadr grid))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cadr grid)))))))))]))\n  (minPath-helper grid k))\n", "  (define (minPath'\
    \ grid k)\n    (define (minPath'' grid k)\n      (define (minPath''' grid k)\n\
    \        (define (minPath'''' grid k)\n          (define (minPath''''' grid k)\n\
    \            (define (minPath'''''' grid k)\n              (define (minPath'''''''\
    \ grid k)\n                (define (minPath'''''''' grid k)\n                \
    \  (define (minPath''''''''' grid k)\n                    (define (minPath''''''''''\
    \ grid k)\n                      (define (minPath''''''''''' grid k)\n       \
    \                 (define (minPath'''''''''''' grid k)\n                     \
    \     (define (minPath''''''''''''' grid k)\n                            (define\
    \ (minPath'''''''''''''' grid k)\n                              (define (minPath'''''''''''''''\
    \ grid k)\n                                (define (minPath'''''''''''''''' grid\
    \ k)\n                                  (define (minPath''''''''''''''''' grid\
    \ k)\n                                    (define (minPath'''''''''''''''''' grid\
    \ k)\n                                      (define (minPath'''''''''''''''''''\
    \ grid k)\n                                        (define (minPath''''''''''''''''''''\
    \ grid k)\n                                          (define (minPath'''''''''''''''''''''\
    \ grid k)\n                                            (define (minPath''''''''''''''''''''''\
    \ grid k)\n                                              (define (minPath'''''''''''''''''''''''\
    \ grid k)\n                                                (define (minPath''''''''''''''''''''''''\
    \ grid k)\n                                                  (define (minPath'''''''''''''''''''''''''\
    \ grid k)\n                                                    (define (minPath''''''''''''''''''''''''''\
    \ grid k)\n                                                      (define (minPath'''''''''''''''''''''''''''\
    \ grid k)\n                                                        (define (minPath''''''''''''''''''''''''''''\
    \ grid k)\n                                                          (define (minPath'''''''''''''''''''''''''''''\
    \ grid k)\n                                                            (define\
    \ (minPath'''''''''''''''''''''''''''''' grid k)\n                           \
    \                                   (define (minPath'''''''''''''''''''''''''''''''\
    \ grid k)\n                                                                (define\
    \ (minPath'''''''''''''''''''''''''''''''' grid k)\n                         \
    \                       ", "  (define (minPath-helper grid k)\n    (cond\n   \
    \   [(= k 0) (list (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car\
    \ (cdr (car grid))))]\n      [(= k 2) (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cdr (cdr (car grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr\
    \ (car grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr (cdr (car grid))))))]\n\
    \      [(= k 4) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))))]\n\
    \      [(= k 5) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr (cdr (cdr (cdr (car grid))))))))]\n      [(= k 6) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr\
    \ (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))) (car (cdr (cdr\
    \ (cdr (cdr (cdr (car grid))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr (car grid)))))))))]\n\
    \      [(= k 7) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr", "  (define (minPath-helper grid k curr-path curr-sum curr-min-path\
    \ curr-min-sum)\n    (if (= k 0)\n        (if (< curr-sum curr-min-sum)\n    \
    \        (values curr-path curr-sum)\n            (values curr-min-path curr-min-sum))\n\
    \        (let ([i (length grid)]\n              [j (length (car grid))])\n   \
    \       (for/fold ([curr-min-path curr-min-path]\n                     [curr-min-sum\
    \ curr-min-sum])\n                     ([i (in-range i)]\n                   \
    \   [j (in-range j)])\n            (let ([curr-path (append curr-path (list (list-ref\
    \ (list-ref grid i) j)))])\n              (let-values ([(new-min-path new-min-sum)\
    \ (minPath-helper grid (- k 1) curr-path (+ curr-sum (list-ref (list-ref grid\
    \ i) j)) curr-min-path curr-min-sum)])\n                (values new-min-path new-min-sum))))))))\n\
    \  (let-values ([(min-path min-sum) (minPath-helper grid k '() 0 '() (expt 2 31))])\n\
    \    min-path))\n", "  (define (minPath-helper grid k)\n    (cond ((= k 0) (list\
    \ (car (car grid))))\n          ((= k 1) (list (car (car grid))))\n          (else\
    \ (let* ((grid-size (length grid))\n                       (grid-size-minus-one\
    \ (- grid-size 1))\n                       (grid-size-minus-two (- grid-size 2))\n\
    \                       (grid-size-minus-three (- grid-size 3))\n            \
    \           (grid-size-minus-four (- grid-size 4))\n                       (grid-size-minus-five\
    \ (- grid-size 5))\n                       (grid-size-minus-six (- grid-size 6))\n\
    \                       (grid-size-minus-seven (- grid-size 7))\n            \
    \           (grid-size-minus-eight (- grid-size 8))\n                       (grid-size-minus-nine\
    \ (- grid-size 9))\n                       (grid-size-minus-ten (- grid-size 10))\n\
    \                       (grid-size-minus-eleven (- grid-size 11))\n          \
    \             (grid-size-minus-twelve (- grid-size 12))\n                    \
    \   (grid-size-minus-thirteen (- grid-size 13))\n                       (grid-size-minus-fourteen\
    \ (- grid-size 14))\n                       (grid-size-minus-fifteen (- grid-size\
    \ 15))\n                       (grid-size-minus-sixteen (- grid-size 16))\n  \
    \                     (grid-size-minus-seventeen (- grid-size 17))\n         \
    \              (grid-size-minus-eighteen (- grid-size 18))\n                 \
    \      (grid-size-minus-nineteen (- grid-size 19))\n                       (grid-size-minus-twenty\
    \ (- grid-size 20))\n                       (grid-size-minus-twenty-one (- grid-size\
    \ 21))\n                       (grid-size-minus-twenty-two (- grid-size 22))\n\
    \                       (grid-size-minus-twenty-three (- grid-size 23))\n    \
    \                   (grid-size-minus-twenty-four (- grid-size 24))\n         \
    \              (grid-size-minus-twenty-five (- grid-size 25))\n              \
    \         (grid-size-minus-twenty-six (- grid-size 26))\n                    \
    \   (grid-size-", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (letrec ([grid-size (length grid)]\n           [grid-size-1 (- grid-size\
    \ 1)]\n           [grid-size-2 (- grid-size 2)]\n           [grid-size-3 (- grid-size\
    \ 3)]\n           [grid-size-4 (- grid-size 4)]\n           [grid-size-5 (- grid-size\
    \ 5)]\n           [grid-size-6 (- grid-size 6)]\n           [grid-size-7 (- grid-size\
    \ 7)]\n           [grid-size-8 (- grid-size 8)]\n           [grid-size-9 (- grid-size\
    \ 9)]\n           [grid-size-10 (- grid-size 10)]\n           [grid-size-11 (-\
    \ grid-size 11)]\n           [grid-size-12 (- grid-size 12)]\n           [grid-size-13\
    \ (- grid-size 13)]\n           [grid-size-14 (- grid-size 14)]\n           [grid-size-15\
    \ (- grid-size 15)]\n           [grid-size-16 (- grid-size 16)]\n           [grid-size-17\
    \ (- grid-size 17)]\n           [grid-size-18 (- grid-size 18)]\n           [grid-size-19\
    \ (- grid-size 19)]\n           [grid-size-20 (- grid-size 20)]\n           [grid-size-21\
    \ (- grid-size 21)]\n           [grid-size-22 (- grid-size 22)]\n           [grid-size-23\
    \ (- grid-size 23)]\n           [grid-size-24 (- grid-size 24)]\n           [grid-size-25\
    \ (- grid-size 25)]\n           [grid-size-26 (- grid-size 26)]\n           [grid-size-27\
    \ (- grid-size 27)]\n           [grid-size-28 (- grid-size 28)]\n           [grid-size-29\
    \ (- grid-size 29)]\n           [grid-size-30 (- grid-size 30)]\n           [grid-size-31\
    \ (- grid-size 31)]\n           [grid-size-32 (- grid-size 32)]\n           [grid-size-33\
    \ (- grid-size 33)]\n           [grid-size-34 (- grid-size 34)]\n           [grid-size-35\
    \ (- grid-size 35)]\n           [grid-size-36 (-", "  (define (minPath-helper\
    \ grid k)\n    (cond\n      [(empty? grid) empty]\n      [(empty? (first grid))\
    \ (minPath-helper (rest grid) k)]\n      [(= k 1) (list (first (first grid)))]\n\
    \      [else\n       (let* ([first-row (first grid)]\n              [first-elem\
    \ (first first-row)]\n              [rest-grid (rest grid)]\n              [rest-grid-first-row\
    \ (first rest-grid)]\n              [rest-grid-rest-grid (rest rest-grid)]\n \
    \             [left-path (minPath-helper rest-grid-rest-grid k)]\n           \
    \   [right-path (minPath-helper rest-grid-rest-grid k)]\n              [up-path\
    \ (minPath-helper rest-grid k)]\n              [down-path (minPath-helper rest-grid\
    \ k)])\n         (cond\n           [(and (not (empty? left-path)) (not (empty?\
    \ right-path)))\n            (cond\n              [(< (first left-path) (first\
    \ right-path))\n               (cons first-elem left-path)]\n              [else\n\
    \               (cons first-elem right-path)])]\n           [(not (empty? left-path))\n\
    \            (cons first-elem left-path)]\n           [(not (empty? right-path))\n\
    \            (cons first-elem right-path)]\n           [(and (not (empty? up-path))\
    \ (not (empty? down-path)))\n            (cond\n              [(< (first up-path)\
    \ (first down-path))\n               (cons first-elem up-path)]\n            \
    \  [else\n               (cons first-elem down-path)])]\n           [(not (empty?\
    \ up-path))\n            (cons first-elem up-path)]\n           [(not (empty?\
    \ down-path))\n            (cons first-elem down-path)]\n           [else\n  \
    \          empty]))]))\n  (minPath-helper grid k))\n", "  (define (minPath-helper\
    \ grid k)\n    (cond\n      [(empty? grid) empty]\n      [(empty? (first grid))\
    \ (minPath-helper (rest grid) k)]\n      [(= k 1) (list (first (first grid)))]\n\
    \      [else\n       (let* ([row (first grid)]\n              [col (first row)]\n\
    \              [rest-grid (rest grid)]\n              [rest-row (rest row)]\n\
    \              [rest-col (map rest rest-grid)]\n              [up (minPath-helper\
    \ rest-grid (- k 1))]\n              [down (minPath-helper (cons (cons col rest-row)\
    \ rest-col) (- k 1))]\n              [left (minPath-helper (cons (cons (first\
    \ rest-row) (rest row)) rest-grid) (- k 1))]\n              [right (minPath-helper\
    \ (cons (cons (first rest-col) (rest row)) rest-col) (- k 1))])\n         (cond\n\
    \           [(and (empty? up) (empty? down) (empty? left) (empty? right)) empty]\n\
    \           [(and (empty? up) (empty? down) (empty? left)) (cons col right)]\n\
    \           [(and (empty? up) (empty? down) (empty? right)) (cons col left)]\n\
    \           [(and (empty? up) (empty? left) (empty? right)) (cons col down)]\n\
    \           [(and (empty? down) (empty? left) (empty? right)) (cons col up)]\n\
    \           [(and (empty? up) (empty? down)) (cons col (min left right))]\n  \
    \         [(and (empty? up) (empty? left)) (cons col (min down right))]\n    \
    \       [(and (empty? up) (empty? right)) (cons col (min down left))]\n      \
    \     [(and (empty? down) (empty? left)) (cons col (min up right))]\n        \
    \   [(and (empty? down) (empty? right)) (cons col (min up left))]\n          \
    \ [(and (empty? left) (empty? right)) (cons col (min up down))]\n           [(empty?\
    \ up) (cons col (min down (min left right", "  (define (minPath-helper grid k)\n\
    \    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n\
    \      [(= k 2) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n      [(= k 4) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr\
    \ grid))) (car (cdr (car (cdr grid)))))]\n      [(= k 5) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n      [(= k 6)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid)))))\
    \ (car (car (cdr (cdr grid)))))]\n      [(= k 7) (list (car (car grid)) (car (cdr\
    \ (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car\
    \ (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr grid))))\
    \ (car (cdr (car (cdr (cdr grid))))))]\n      [(= k 8) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n\
    \      [(= k 2) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (cdr (cdr (cdr (car grid))))))]\n      [(= k 4)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))))]\n \
    \     [(= k 5) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr (cdr (cdr (cdr (car grid))))))))]\n      [(= k 6) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr\
    \ (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))) (car (cdr (cdr\
    \ (cdr (cdr (cdr (car grid))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr (car grid)))))))))]\n\
    \      [(= k 7) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(empty? grid)\
    \ empty]\n      [(empty? (first grid)) (minPath-helper (rest grid) k)]\n     \
    \ [(= k 1) (list (first (first grid)))]\n      [else (minPath-helper (rest grid)\
    \ k)]))\n  (minPath-helper grid k))\n", "  (define (minPath-helper grid k)\n \
    \   (if (= k 1)\n        (list (list (car (car grid))))\n        (let* ([grid-size\
    \ (length grid)]\n               [grid-size-1 (- grid-size 1)]\n             \
    \  [grid-size-2 (- grid-size 2)]\n               [grid-size-3 (- grid-size 3)]\n\
    \               [grid-size-4 (- grid-size 4)]\n               [grid-size-5 (-\
    \ grid-size 5)]\n               [grid-size-6 (- grid-size 6)]\n              \
    \ [grid-size-7 (- grid-size 7)]\n               [grid-size-8 (- grid-size 8)]\n\
    \               [grid-size-9 (- grid-size 9)]\n               [grid-size-10 (-\
    \ grid-size 10)]\n               [grid-size-11 (- grid-size 11)]\n           \
    \    [grid-size-12 (- grid-size 12)]\n               [grid-size-13 (- grid-size\
    \ 13)]\n               [grid-size-14 (- grid-size 14)]\n               [grid-size-15\
    \ (- grid-size 15)]\n               [grid-size-16 (- grid-size 16)]\n        \
    \       [grid-size-17 (- grid-size 17)]\n               [grid-size-18 (- grid-size\
    \ 18)]\n               [grid-size-19 (- grid-size 19)]\n               [grid-size-20\
    \ (- grid-size 20)]\n               [grid-size-21 (- grid-size 21)]\n        \
    \       [grid-size-22 (- grid-size 22)]\n               [grid-size-23 (- grid-size\
    \ 23)]\n               [grid-size-24 (- grid-size 24)]\n               [grid-size-25\
    \ (- grid-size 25)]\n               [grid-size-26 (- grid-size 26)]\n        \
    \       [grid-size-27 (- grid-size 27)]\n               [grid-size-28 (- grid-size\
    \ 28)]\n               [grid-size-29 (- grid-size 29)]\n               [grid-size-30\
    \ (- grid-size 30)]\n               [grid-size-31 (- grid-size 31)]\n        \
    \       [grid-size-32 (- grid-size 32)]\n               [grid-size-33 (- grid-size\
    \ 33)]\n               [grid", "  (define (minPath-helper grid k)\n    (if (=\
    \ k 1)\n        (list (car (car grid)))\n        (let* ([grid-rows (length grid)]\n\
    \               [grid-cols (length (car grid))]\n               [grid-size (*\
    \ grid-rows grid-cols)]\n               [grid-values (list->vector (flatten grid))]\n\
    \               [grid-indexes (list->vector (range grid-size))]\n            \
    \   [grid-index-to-value (vector-map (lambda (i) (vector-ref grid-values i)) grid-indexes)]\n\
    \               [grid-value-to-index (vector-map (lambda (v) (vector-ref grid-indexes\
    \ v)) grid-values)]\n               [grid-neighbors (vector-map (lambda (i) (list\
    \ (modulo (+ i 1) grid-size) (modulo (- i 1) grid-size) (modulo (+ i grid-cols)\
    \ grid-size) (modulo (- i grid-cols) grid-size))) grid-indexes)])\n          (define\
    \ (minPath-helper-helper grid-indexes k)\n            (if (= k 1)\n          \
    \      (list (vector-ref grid-index-to-value (car grid-indexes)))\n          \
    \      (let* ([grid-indexes-neighbors (vector-map (lambda (i) (list-filter (lambda\
    \ (n) (member n grid-indexes)) (vector-ref grid-neighbors i))) grid-indexes)]\n\
    \                       [grid-indexes-neighbors-values (vector-map (lambda (ns)\
    \ (map (lambda (n) (vector-ref grid-index-to-value n)) ns)) grid-indexes-neighbors)]\n\
    \                       [grid-indexes-neighbors-values-sorted (vector-map (lambda\
    \ (ns) (sort ns <)) grid-indexes-neighbors-values)]\n                       [grid-indexes-neighbors-values-sorted-min\
    \ (vector-map (lambda (ns) (car ns)) grid-indexes-neighbors-values-sorted)]\n\
    \                       [grid-indexes-neighbors-values-sorted-min-index", "  (letrec\n\
    \    ([minPathHelper (lambda (grid k)\n                      (let ([n (length\
    \ grid)])\n                        (if (= k 1)\n                            (list\
    \ (list (list-ref (list-ref grid 0) 0)))\n                            (let ([minPaths\
    \ (list)])\n                              (for ([i (in-range n)])\n          \
    \                      (for ([j (in-range n)])\n                             \
    \     (let ([paths (list)])\n                                    (if (and (> i\
    \ 0) (< j (sub1 n)))\n                                        (set! paths (append\
    \ paths (list (list (list-ref (list-ref grid i) j) (list-ref (list-ref grid (sub1\
    \ i)) j) (list-ref (list-ref grid i (sub1 j)))))))\n                         \
    \               (if (> i 0)\n                                            (set!\
    \ paths (append paths (list (list (list-ref (list-ref grid i) j) (list-ref (list-ref\
    \ grid (sub1 i)) j)))))\n                                            (if (< j\
    \ (sub1 n))\n                                                (set! paths (append\
    \ paths (list (list (list-ref (list-ref grid i) j) (list-ref (list-ref grid i\
    \ (sub1 j))))))))\n                                            (if (and (> i 0)\
    \ (> j (sub1 n)))\n                                                (set! paths\
    \ (append paths (list (list (list-ref (list-ref grid i) j) (list-ref (list-ref\
    \ grid (sub1 i)) (add1 j)))))))\n                                            (if\
    \ (and (< i (sub1 n)) (< j (sub1 n)))\n                                      \
    \          (set! paths (append paths (list (list (list-ref (list-ref grid i) j)\
    \ (list-ref (list-ref grid (add1 i)) j) (list-ref (list-ref grid i (sub1 j)))))))\n\
    \                                                (if (< i (sub1 n))\n        \
    \                                            (set! paths (append paths (list (list\
    \ (list-ref (list-ref grid i) j) (list-ref (list-ref grid (add1 i)) j)))))\n \
    \                                                   (if (< j", "  (define (minPath-helper\
    \ grid k)\n    (cond\n      [(= k 0) (list (car (car grid)))]\n      [(= k 1)\
    \ (list (car (car grid)) (car (car (cdr grid))))]\n      [(= k 2) (list (car (car\
    \ grid)) (car (car (cdr grid))) (car (car (cdr (cdr grid)))))]\n      [(= k 3)\
    \ (list (car (car grid)) (car (car (cdr grid))) (car (car (cdr (cdr grid)))) (car\
    \ (car (cdr (cdr (cdr grid))))))]\n      [(= k 4) (list (car (car grid)) (car\
    \ (car (cdr grid))) (car (car (cdr (cdr grid)))) (car (car (cdr (cdr (cdr grid)))))\
    \ (car (car (cdr (cdr (cdr (cdr grid)))))))]\n      [(= k 5) (list (car (car grid))\
    \ (car (car (cdr grid))) (car (car (cdr (cdr grid)))) (car (car (cdr (cdr (cdr\
    \ grid))))) (car (car (cdr (cdr (cdr (cdr grid))))) (car (car (cdr (cdr (cdr (cdr\
    \ (cdr grid)))))))))]\n      [(= k 6) (list (car (car grid)) (car (car (cdr grid)))\
    \ (car (car (cdr (cdr grid)))) (car (car (cdr (cdr (cdr grid))))) (car (car (cdr\
    \ (cdr (cdr (cdr grid))))) (car (car (cdr (cdr (cdr (cdr (cdr grid))))))) (car\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr grid))))))))))]\n      [(= k 7) (list (car\
    \ (car grid)) (car (car (cdr grid))) (car (car (cdr (cdr grid)))) (car (car (cdr\
    \ (cdr (cdr grid))))) (car (car (cdr (cdr (cdr (cdr grid))))) (car (car (cdr",
  "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n\
    \      (define (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(empty? grid)\
    \ empty]\n      [(empty? (first grid)) (minPath-helper (rest grid) k)]\n     \
    \ [(empty? (rest grid)) (minPath-helper (map rest grid) k)]\n      [(= k 1) (list\
    \ (first (first grid)))]\n      [else\n       (let*\n           ([first-row (first\
    \ grid)]\n            [first-col (map first grid)]\n            [rest-grid (map\
    \ rest grid)]\n            [first-row-min (minPath-helper (list first-row) (sub1\
    \ k))]\n            [first-col-min (minPath-helper (list first-col) (sub1 k))]\n\
    \            [rest-grid-min (minPath-helper rest-grid (sub1 k))])\n         (cond\n\
    \           [(< (first first-row-min) (first first-col-min))\n            (cons\
    \ (first first-row) first-row-min)]\n           [(> (first first-row-min) (first\
    \ first-col-min))\n            (cons (first first-col) first-col-min)]\n     \
    \      [(< (first first-row-min) (first rest-grid-min))\n            (cons (first\
    \ first-row) first-row-min)]\n           [(> (first first-row-min) (first rest-grid-min))\n\
    \            (cons (first first-col) first-col-min)]\n           [else\n     \
    \       (cons (first first-row) first-row-min)]))]))\n  (minPath-helper grid k))\n",
  "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list (car (car grid)))]\n\
    \      [(< k 0) (error \"k must be positive\")]\n      [else\n       (let* ([n\
    \ (length grid)]\n              [m (length (car grid))]\n              [min-path\
    \ (list (car (car grid)))]\n              [min-path-sum (car (car grid))])\n \
    \        (for ([i (in-range n)])\n           (for ([j (in-range m)])\n       \
    \      (let* ([cur-val (list-ref (list-ref grid i) j)]\n                    [cur-path\
    \ (append (minPath-helper grid (- k 1)) (list cur-val))]\n                   \
    \ [cur-path-sum (apply + cur-path)])\n               (cond\n                 [(and\
    \ (< cur-path-sum min-path-sum)\n                       (or (and (= i 0) (= j\
    \ 0))\n                           (and (= i 0) (= j (- m 1)))\n              \
    \             (and (= i (- n 1)) (= j 0))\n                           (and (=\
    \ i (- n 1)) (= j (- m 1)))\n                           (and (not (= i 0)) (not\
    \ (= j 0)) (not (= i (- n 1))) (not (= j (- m 1)))))]\n                  (set!\
    \ min-path cur-path)\n                  (set! min-path-sum cur-path-sum))\n  \
    \               [(and (= cur-path-sum min-path-sum)\n                       (or\
    \ (and (= i 0) (= j 0))\n                           (and (= i 0) (= j (- m 1)))\n\
    \                           (and (= i (- n 1)) (= j 0))\n                    \
    \       (and (= i (- n 1)) (= j (- m 1)))\n                           (and (not\
    \ (= i 0)) (not (= j 0)) (not (= i (- n 1))) (not (= j (- m 1)))))]\n        \
    \          (cond\n                    [(< (apply < cur-path min-path) 0)\n   \
    \                  (set! min-path cur-path)]\n                    [else\n    \
    \                 #f]))\n                 [else\n                  #f])))\n  \
    \         (set! grid (list-ref grid", "  (define (minPath-helper grid k)\n   \
    \ (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (if (= k 1)\n        (list\
    \ (apply min (apply append grid)))\n        (let* ([min-path (minPath-helper grid\
    \ (- k 1))]\n               [min-path-last (last min-path)]\n               [min-path-last-row\
    \ (floor (/ min-path-last (length grid)))])\n          (let ([min-path-last-col\
    \ (- min-path-last (* min-path-last-row (length grid)) 1)])\n            (let\
    \ ([neighbors (list (list min-path-last-row (- min-path-last-col 1))\n       \
    \                            (list min-path-last-row (+ min-path-last-col 1))\n\
    \                                   (list (- min-path-last-row 1) min-path-last-col)\n\
    \                                   (list (+ min-path-last-row 1) min-path-last-col))])\n\
    \              (let ([neighbors-valid (filter (lambda (x) (and (>= (car x) 0)\n\
    \                                                             (< (car x) (length\
    \ grid))\n                                                             (>= (cadr\
    \ x) 0)\n                                                             (< (cadr\
    \ x) (length grid))))\n                                              neighbors)])\n\
    \                (let ([neighbors-values (map (lambda (x) (list-ref (list-ref\
    \ grid (car x)) (cadr x)))\n                                             neighbors-valid)])\n\
    \                  (append min-path (list (apply min neighbors-values))))))))))\n\
    \  (minPath-helper grid k))\n", "  (define (minPath-helper grid k)\n    (define\
    \ (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k path)\n    (if (= k 0)\n        path\n\
    \        (let* ([min-path (minPath-helper grid (- k 1) (cons (car (car grid))\
    \ path))]\n               [min-path-value (apply min (reverse min-path))])\n \
    \         (for/or ([row (in-list grid)]\n                   [cell (in-list row)])\n\
    \            (when (= cell min-path-value)\n              (return (minPath-helper\
    \ (remove row grid) (- k 1) (cons cell path))))))))\n  (minPath-helper grid k\
    \ (list)))\n", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)))]\n      [else\n \
    \      (let*\n           ([n (length grid)]\n            [m (length (car grid))]\n\
    \            [min-path (list (car (car grid)))]\n            [min-sum (car (car\
    \ grid))])\n         (for ([i (in-range n)])\n           (for ([j (in-range m)])\n\
    \             (let*\n                 ([path (list (list-ref (list-ref grid i)\
    \ j))]\n                  [sum (list-ref (list-ref grid i) j)])\n            \
    \   (for ([k (in-range (- k 1))])\n                 (let*\n                  \
    \   ([neighbors (list (list (- i 1) j) (list (+ i 1) j) (list i (- j 1)) (list\
    \ i (+ j 1)))]\n                      [min-neighbor (list (list-ref (list-ref\
    \ grid (list-ref (list-ref neighbors 0) 0)) (list-ref (list-ref neighbors 0) 1)))]\n\
    \                      [min-sum-neighbor (list-ref (list-ref grid (list-ref (list-ref\
    \ neighbors 0) 0)) (list-ref (list-ref neighbors 0) 1))])\n                  \
    \ (for ([l (in-range 4)])\n                     (let*\n                      \
    \   ([neighbor (list-ref neighbors l)]\n                          [sum-neighbor\
    \ (+ sum (list-ref (list-ref grid (list-ref neighbor 0)) (list-ref neighbor 1)))])\n\
    \                       (if (and (< (list-ref neighbor 0) n) (>= (list-ref neighbor\
    \ 0) 0) (< (list-ref neighbor 1) m) (>= (list-ref neighbor 1) 0))\n          \
    \                 (if (< sum-neighbor min-sum-neighbor)\n                    \
    \           (begin\n                                 (set! min-neighbor (list\
    \ (list-ref (list-ref grid (list-ref neighbor 0)) (list-ref neighbor 1))))\n \
    \                                (set! min-sum-neighbor", "  (define (minPath-helper\
    \ grid k)\n    (cond\n      [(= k 0) (list (car (car grid)))]\n      [(= k 1)\
    \ (list (car (car grid)) (car (cdr (car grid))))]\n      [(= k 2) (list (car (car\
    \ grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))))]\n      [(= k 3)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))))]\n      [(= k 4) (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))))]\n\
    \      [(= k 5) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr\
    \ (car (cdr grid))))))]\n      [(= k 6) (list (car (car grid)) (car (cdr (car\
    \ grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car (cdr\
    \ grid)))) (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr grid)))))]\n\
    \      [(= k 7) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr\
    \ (car (cdr grid))))) (car (car (cdr (cdr grid)))) (car (cdr (car (cdr (cdr grid))))))]\n\
    \      [(= k 8) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (", "  (define (minPath-helper grid\
    \ k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k path)\n    (if (= k 0)\n        path\n\
    \        (let ([min-path (list)])\n          (for ([row (in-list grid)]\n    \
    \            [col (in-range (length (car grid)))])\n            (let ([new-path\
    \ (minPath-helper grid (- k 1) (cons (list-ref (list-ref grid row) col) path))])\n\
    \              (if (or (empty? min-path)\n                      (lexicographic-compare\
    \ new-path min-path))\n                  (set! min-path new-path))))\n       \
    \   min-path)))\n  (minPath-helper grid k (list)))\n", "  (cond\n    [(= k 1)\
    \ (list (car (car grid)))]\n    [else\n     (let ([min-path (list (car (car grid)))]\n\
    \           [min-path-value (car (car grid))])\n       (for ([i (in-range (length\
    \ grid))])\n         (for ([j (in-range (length (car grid)))])\n           (let\
    \ ([path (minPath-aux grid i j k)])\n             (when (and path (< (car path)\
    \ min-path-value))\n               (set! min-path (cdr path))\n              \
    \ (set! min-path-value (car path))))))\n       min-path)]))\n", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond [(= k 0) (list (car (car\
    \ grid)))]\n          [(= k 1) (list (car (car grid)))]\n          [(= k 2) (list\
    \ (car (car grid)) (car (cdr (car grid))) (car (car grid)))]\n          [(= k\
    \ 3) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid))))\
    \ (car (car grid)))]\n          [(= k 4) (list (car (car grid)) (car (cdr (car\
    \ grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (car grid)))]\n\
    \          [(= k 5) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr\
    \ (car grid)))) (car (car (cdr grid))) (car (cdr (cdr (cdr (car grid))))) (car\
    \ (car grid)))]\n          [(= k 6) (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (cdr (cdr (car\
    \ grid))))) (car (car (cdr (cdr grid)))) (car (car grid)))]\n          [(= k 7)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (cdr (cdr (car grid))))) (car (car (cdr (cdr grid))))\
    \ (car (cdr (cdr (cdr (cdr grid))))) (car (car grid)))]\n          [(= k 8) (list\
    \ (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car\
    \ (cdr grid))) (car (cdr (cdr (cdr (car grid))))) (car (car (cdr (cdr grid))))\
    \ (car (cdr (cdr (cdr (cdr grid))))) (car (car", "  (letrec ([grid-size (length\
    \ grid)]\n           [grid-size-1 (- grid-size 1)]\n           [grid-size-2 (-\
    \ grid-size 2)]\n           [grid-size-3 (- grid-size 3)]\n           [grid-size-4\
    \ (- grid-size 4)]\n           [grid-size-5 (- grid-size 5)]\n           [grid-size-6\
    \ (- grid-size 6)]\n           [grid-size-7 (- grid-size 7)]\n           [grid-size-8\
    \ (- grid-size 8)]\n           [grid-size-9 (- grid-size 9)]\n           [grid-size-10\
    \ (- grid-size 10)]\n           [grid-size-11 (- grid-size 11)]\n           [grid-size-12\
    \ (- grid-size 12)]\n           [grid-size-13 (- grid-size 13)]\n           [grid-size-14\
    \ (- grid-size 14)]\n           [grid-size-15 (- grid-size 15)]\n           [grid-size-16\
    \ (- grid-size 16)]\n           [grid-size-17 (- grid-size 17)]\n           [grid-size-18\
    \ (- grid-size 18)]\n           [grid-size-19 (- grid-size 19)]\n           [grid-size-20\
    \ (- grid-size 20)]\n           [grid-size-21 (- grid-size 21)]\n           [grid-size-22\
    \ (- grid-size 22)]\n           [grid-size-23 (- grid-size 23)]\n           [grid-size-24\
    \ (- grid-size 24)]\n           [grid-size-25 (- grid-size 25)]\n           [grid-size-26\
    \ (- grid-size 26)]\n           [grid-size-27 (- grid-size 27)]\n           [grid-size-28\
    \ (- grid-size 28)]\n           [grid-size-29 (- grid-size 29)]\n           [grid-size-30\
    \ (- grid-size 30)]\n           [grid-size-31 (- grid-size 31)]\n           [grid-size-32\
    \ (- grid-size 32)]\n           [grid-size-33 (- grid-size 33)]\n           [grid-size-34\
    \ (- grid-size 34)]\n           [grid-size-35 (- grid-size 35)]\n           [grid-size-36\
    \ (-", "  (define (minPath-helper grid k)\n    (cond\n      [(empty? grid) empty]\n\
    \      [(empty? (first grid)) (minPath-helper (rest grid) k)]\n      [(= k 1)\
    \ (list (first (first grid)))]\n      [else\n       (let*\n           ([row (first\
    \ grid)]\n            [col (first row)]\n            [rest-grid (rest grid)]\n\
    \            [rest-row (rest row)]\n            [rest-col (map rest rest-grid)]\n\
    \            [up (minPath-helper rest-grid (- k 1))]\n            [right (minPath-helper\
    \ (cons rest-row rest-col) (- k 1))]\n            [down (minPath-helper (cons\
    \ (cons col (first rest-col)) (rest rest-col)) (- k 1))]\n            [left (minPath-helper\
    \ (cons (cons (first rest-row) col) (rest rest-row)) (- k 1))])\n         (cond\n\
    \           [(or (empty? up) (empty? right) (empty? down) (empty? left)) empty]\n\
    \           [else\n            (let*\n                ([min-path (min (min (min\
    \ up right) down) left)])\n              (cons col min-path))]))]))\n  (minPath-helper\
    \ grid k))\n", "  (define (minPath-helper grid k)\n    (if (= k 1)\n        (list\
    \ (list (car (car grid))))\n        (let* ([min-path (minPath-helper grid (- k\
    \ 1))]\n               [min-path-value (car (car min-path))]\n               [min-path-value-row\
    \ (car (car (member min-path-value grid)))]\n               [min-path-value-col\
    \ (car (cdr (member min-path-value grid))))]\n               [neighbors (list\
    \ (list (- min-path-value-row 1) min-path-value-col)\n                       \
    \         (list (+ min-path-value-row 1) min-path-value-col)\n               \
    \                 (list min-path-value-row (- min-path-value-col 1))\n       \
    \                         (list min-path-value-row (+ min-path-value-col 1)))]\n\
    \               [neighbors (filter (lambda (x) (and (>= (car x) 0) (>= (cdr x)\
    \ 0) (< (car x) (length grid)) (< (cdr x) (length grid)))) neighbors)]\n     \
    \          [neighbors (map (lambda (x) (list (list-ref (list-ref grid (car x))\
    \ (cdr x)))) neighbors)]\n               [neighbors (filter (lambda (x) (not (member\
    \ (car (car x)) min-path))) neighbors)]\n               [neighbors (sort neighbors\
    \ (lambda (x y) (string<? (list->string (car x)) (list->string (car y)))))]\n\
    \               [neighbors (map (lambda (x) (cons (car (car x)) min-path)) neighbors)])\n\
    \          (car neighbors))))\n  (car (car (minPath-helper grid k))))\n", "  (letrec\
    \ ([paths (list)]\n           [min-path (list)]\n           [min-path-val (list)]\n\
    \           [min-path-val-sum 0])\n    (define (add-path-to-paths path)\n    \
    \  (set! paths (append paths (list path))))\n    (define (add-path-to-min-path\
    \ path)\n      (set! min-path (append min-path (list path))))\n    (define (add-path-to-min-path-val\
    \ path)\n      (set! min-path-val (append min-path-val (list path))))\n    (define\
    \ (add-path-to-min-path-val-sum path)\n      (set! min-path-val-sum (+ min-path-val-sum\
    \ path)))\n    (define (get-paths)\n      paths)\n    (define (get-min-path)\n\
    \      min-path)\n    (define (get-min-path-val)\n      min-path-val)\n    (define\
    \ (get-min-path-val-sum)\n      min-path-val-sum)\n    (define (get-grid)\n  \
    \    grid)\n    (define (get-k)\n      k)\n    (define (get-grid-size)\n     \
    \ (length (get-grid)))\n    (define (get-grid-row row)\n      (list-ref (get-grid)\
    \ row))\n    (define (get-grid-col col)\n      (map (lambda (row) (list-ref row\
    \ col)) (get-grid)))\n    (define (get-grid-cell row col)\n      (list-ref (get-grid-row\
    \ row) col))\n    (define (get-grid-cell-val row col)\n      (get-grid-cell row\
    \ col))\n    (define (get-grid-cell-val-sum row col)\n      (+ (get-grid-cell-val\
    \ row col) (get-min-path-val-sum)))\n    (define (get-grid-cell-val-sum-path row\
    \ col)\n      (append (get-min-path-val) (list (get-grid-cell-val row col))))\n\
    \    (define", "  (define (minPath-helper grid k path)\n    (cond\n      [(= k\
    \ 0) (list (list-ref (list-ref grid (car path)) (cadr path)))]\n      [(= k 1)\
    \ (list (list-ref (list-ref grid (car path)) (cadr path)))]\n      [else\n   \
    \    (let*\n           ([neighbors (get-neighbors grid path)]\n            [min-path\
    \ (minPath-helper grid (- k 1) (car neighbors))]\n            [min-path-value\
    \ (list-ref min-path 0)])\n         (for/fold ([min-path-value min-path-value]\n\
    \                    [min-path min-path])\n             ([neighbor (in-list (cdr\
    \ neighbors))])\n           (let*\n               ([next-path (minPath-helper\
    \ grid (- k 1) neighbor)]\n                [next-path-value (list-ref next-path\
    \ 0)])\n             (if (< next-path-value min-path-value)\n                \
    \ (values next-path-value next-path)\n                 (values min-path-value\
    \ min-path))))))]))\n  (minPath-helper grid k (list 0 0)))\n", "  (define (minPath-helper\
    \ grid k i j)\n    (if (= k 0)\n        (list (list-ref (list-ref grid i) j))\n\
    \        (let ([min-path (minPath-helper grid (- k 1) i j)])\n          (for/list\
    \ ([i (in-range (length grid))]\n                     [j (in-range (length (list-ref\
    \ grid i)))])\n            (let ([path (minPath-helper grid (- k 1) i j)])\n \
    \             (if (and (not (null? path))\n                       (or (null? min-path)\n\
    \                           (lexicographic-compare (append min-path (list (list-ref\
    \ (list-ref grid i) j)))\n                                                  (append\
    \ path (list (list-ref (list-ref grid i) j))))))\n                  path\n   \
    \               min-path))))))\n  (minPath-helper grid k 0 0))\n", "  (define\
    \ (minPath-helper grid k i j)\n    (if (= k 0)\n        (list (list-ref (list-ref\
    \ grid i) j))\n        (let* ([paths (for/list ([i (in-range (length grid))]\n\
    \                                [j (in-range (length (list-ref grid i)))])\n\
    \                       (minPath-helper grid (- k 1) i j))]\n               [min-path\
    \ (apply min paths)])\n          (cons (list-ref (list-ref grid i) j) min-path))))\n\
    \  (apply min (for/list ([i (in-range (length grid))]\n                      \
    \  [j (in-range (length (list-ref grid i)))])\n                    (minPath-helper\
    \ grid k i j))))\n", "  (define (minPath-helper grid k)\n    (cond\n      [(=\
    \ k 0) (list (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr\
    \ (car grid))))]\n      [(= k 2) (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cdr (cdr (car grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr\
    \ (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n      [(=\
    \ k 4) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid))))\
    \ (car (car (cdr grid))) (car (cdr (car (cdr grid)))))]\n      [(= k 5) (list\
    \ (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car\
    \ (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n\
    \      [(= k 6) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr\
    \ (car (cdr grid))))) (car (car (cdr (cdr grid)))))]\n      [(= k 7) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr\
    \ grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car\
    \ (car (cdr (cdr grid)))) (car (cdr (car (cdr (cdr grid))))))]\n      [(= k 8)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (", "  (define (minPath-helper grid k)\n    (cond\n\
    \      [(= k 0) (list (car (car grid)))]\n      [(= k 1) (list (car (car grid))\
    \ (car (cdr (car grid))))]\n      [(= k 2) (list (car (car grid)) (car (cdr (car\
    \ grid))) (car (cdr (cdr (car grid)))))]\n      [(= k 3) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n\
    \      [(= k 4) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))))]\n      [(= k\
    \ 5) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid))))\
    \ (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr\
    \ grid))))))]\n      [(= k 6) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid))))\
    \ (car (cdr (cdr (car (cdr grid))))))]\n      [(= k 7) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n      [(= k 8)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n\
    \      [(= k 9) (list (car (car grid)) (car", "  (define (minPath-helper grid\
    \ k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)))]\n      [else\n \
    \      (let* ([n (length grid)]\n              [m (length (car grid))]\n     \
    \         [grid-helper (make-vector n (make-vector m #f))]\n              [path-helper\
    \ (make-vector n (make-vector m #f))]\n              [min-path (make-vector k\
    \ #f)]\n              [min-path-value (make-vector k #f)])\n         (for ([i\
    \ (in-range n)])\n           (for ([j (in-range m)])\n             (vector-set!\
    \ grid-helper i j (list (list (list i j)) (list (list (list (list i j)) (list\
    \ (list i j))))))))\n         (for ([i (in-range n)])\n           (for ([j (in-range\
    \ m)])\n             (vector-set! path-helper i j (list (list (list i j)) (list\
    \ (list (list (list i j)) (list (list i j))))))))\n         (for ([i (in-range\
    \ n)])\n           (for ([j (in-range m)])\n             (let* ([neighbors (list\
    \ (list (- i 1) j) (list (+ i 1) j) (list i (- j 1)) (list i (+ j 1)))]\n    \
    \                [neighbors-value (list (list (list (- i 1) j) (list (list i j)))\
    \ (list (list (+ i 1) j) (list (list i j))) (list (list i (- j 1)) (list (list\
    \ i j))) (list (list i (+ j 1)) (list (list i j)))]\n                    [neighbors-value-helper\
    \ (list #f #f #f #f)]\n                    [neighbors-value-helper-helper (list\
    \ #f #f #f #f)]\n                    [neighbors-value-helper-helper-helper (list\
    \ #f #f #f #f)]\n                    [neighbors-value-hel", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(empty? grid)\
    \ empty]\n      [(empty? (first grid)) (minPath-helper (rest grid) k)]\n     \
    \ [(= k 1) (list (first (first grid)))]\n      [else\n       (let*\n         \
    \  ([row (first grid)]\n            [col (first row)]\n            [rest-row (rest\
    \ row)]\n            [rest-grid (rest grid)]\n            [min-paths (map (lambda\
    \ (x) (minPath-helper x (- k 1)))\n                            (list rest-row\
    \ rest-grid))]\n            [min-path (apply min min-paths)])\n         (cons\
    \ col min-path))]))\n  (minPath-helper grid k))\n", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n\
    \      [(= k 2) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n      [(= k 4) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr\
    \ grid))) (car (cdr (car (cdr grid)))))]\n      [(= k 5) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n      [(= k 6)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid)))))\
    \ (car (car (cdr (cdr grid)))))]\n      [(= k 7) (list (car (car grid)) (car (cdr\
    \ (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car\
    \ (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr grid))))\
    \ (car (cdr (car (cdr (cdr grid))))))]\n      [(= k 8) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n\
    \      [(= k 2) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n      [(= k 4) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr\
    \ grid))) (car (cdr (car (cdr grid)))))]\n      [(= k 5) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n      [(= k 6)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid)))))\
    \ (car (car (cdr (cdr grid)))))]\n      [(= k 7) (list (car (car grid)) (car (cdr\
    \ (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car\
    \ (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr grid))))\
    \ (car (cdr (car (cdr (cdr grid))))))]\n      [(= k 8) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (", "  (define (minPath-helper grid k path)\n    (if (= k 0)\n        path\n\
    \        (let ([min-path (list (list (list (list 1)) (list (list 1)) (list (list\
    \ 1)) (list (list 1))))])\n          (for ([i (in-range (length grid))])\n   \
    \         (for ([j (in-range (length (grid i)))])\n              (for ([p (in-range\
    \ (length (min-path i j)))])\n                (for ([q (in-range (length (min-path\
    \ i j p)))])\n                  (let ([new-path (append (min-path i j p q) (list\
    \ (grid i j)))])\n                    (if (and (not (equal? (min-path i j p q)\
    \ (list (list 1))))\n                             (or (equal? (min-path i j p\
    \ q) (list (list 1)))\n                                 (and (not (equal? (min-path\
    \ i j p q) (list (list 1))))\n                                      (not (equal?\
    \ (min-path i j p q) (list (list 1))))\n                                     \
    \ (not (equal? (min-path i j p q) (list (list 1))))\n                        \
    \              (not (equal? (min-path i j p q) (list (list 1))))\n           \
    \                           (not (equal? (min-path i j p q) (list (list 1))))\n\
    \                                      (not (equal? (min-path i j p q) (list (list\
    \ 1))))\n                                      (not (equal? (min-path i j p q)\
    \ (list (list 1))))\n                                      (not (equal? (min-path\
    \ i j p q) (list (list 1))))\n                                      (not (equal?\
    \ (min-path i j p q) (list (list 1))))\n                                     \
    \ (not (equal? (min-path i j p q) (list (list 1))))\n                        \
    \              (not (equal? (min-path i j p q) (list (list 1))))\n           \
    \                           (not (equal? (min-path i j p q) (list (list 1))))\n\
    \                                      (not (equal? (min-path i j p q) (list (list\
    \ 1))))", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k i j)\n    (cond\n      [(and (= k\
    \ 0) (not (equal? (list-ref (list-ref grid i) j) (list-ref (list-ref grid 0) 0))))\n\
    \       (list (list-ref (list-ref grid i) j))]\n      [(and (= k 0) (equal? (list-ref\
    \ (list-ref grid i) j) (list-ref (list-ref grid 0) 0)))\n       (list)]\n    \
    \  [(and (= i 0) (= j 0))\n       (minPath-helper grid (- k 1) i j)]\n      [(and\
    \ (= i 0) (> j 0))\n       (minPath-helper grid (- k 1) i (- j 1))]\n      [(and\
    \ (> i 0) (= j 0))\n       (minPath-helper grid (- k 1) (- i 1) j)]\n      [(and\
    \ (> i 0) (> j 0))\n       (minPath-helper grid (- k 1) (- i 1) j)]))\n  (minPath-helper\
    \ grid k 0 0))\n", "  (cond\n    [(= k 1) (list (car (car grid)))]\n    [else\
    \ (minPath-helper grid k)]))\n", "  (define (minPath-helper grid k)\n    (define\
    \ (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k path)\n    (if (= k 0)\n        path\n\
    \        (let* ([min-path (minPath-helper grid (- k 1) path)]\n              \
    \ [min-path-value (car min-path)]\n               [min-path-row (cadr min-path)]\n\
    \               [min-path-col (caddr min-path)])\n          (let ([neighbors (list\
    \ (list (- min-path-row 1) min-path-col)\n                                 (list\
    \ (+ min-path-row 1) min-path-col)\n                                 (list min-path-row\
    \ (- min-path-col 1))\n                                 (list min-path-row (+\
    \ min-path-col 1)))]\n                [valid-neighbors (filter (lambda (n)\n \
    \                                          (and (<= 0 (car n)) (< (car n) (length\
    \ grid))\n                                                (<= 0 (cadr n)) (< (cadr\
    \ n) (length grid))))\n                                         neighbors)])\n\
    \            (if (null? valid-neighbors)\n                min-path\n         \
    \       (let ([new-paths (map (lambda (n)\n                                  \
    \      (list (list-ref (list-ref grid (car n)) (cadr n))\n                   \
    \                           (car n)\n                                        \
    \      (cadr n)))\n                                      valid-neighbors)])\n\
    \                  (let ([min-path (apply min new-paths)])\n                 \
    \   (if (or (< (car min-path) min-path-value)\n                            (and\
    \ (= (car min-path) min-path-value)\n                                 (or (< (cadr\
    \ min-path) min-path-row)\n                                     (and (= (cadr\
    \ min-path) min-path-row)\n                                          (< (caddr\
    \ min-path) min-path-col)))))\n                        (minPath-helper grid (-\
    \ k 1) min-path)\n                        (minPath-helper grid (- k 1) min-path-value\
    \ min-path-row min-path-col))))))))))\n  (let ([min-path (minPath-helper grid\
    \ k (list (list-ref (list-ref grid 0) 0", "  (define (minPath-helper grid k)\n\
    \    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (get-neighbors grid x y)\n    (define (get-neighbor-value\
    \ grid x y)\n      (if (and (>= x 0) (>= y 0) (< x (length grid)) (< y (length\
    \ (car grid))))\n          (list-ref (list-ref grid x) y)\n          #f))\n  \
    \  (define (get-neighbor-value-if-exists grid x y)\n      (let ((value (get-neighbor-value\
    \ grid x y)))\n        (if value\n            (list value)\n            '())))\n\
    \    (append (get-neighbor-value-if-exists grid (- x 1) y)\n            (get-neighbor-value-if-exists\
    \ grid (+ x 1) y)\n            (get-neighbor-value-if-exists grid x (- y 1))\n\
    \            (get-neighbor-value-if-exists grid x (+ y 1))))\n  (define (get-paths\
    \ grid x y k)\n    (if (= k 0)\n        (list '())\n        (for/list ([neighbor\
    \ (in-list (get-neighbors grid x y))])\n          (for/list ([path (in-list (get-paths\
    \ grid (quotient neighbor (length grid)) (remainder neighbor (length grid)) (-\
    \ k 1)))])\n            (cons neighbor path)))))\n  (define (get-min-path grid\
    \ k)\n    (for/fold ([min-path (list (list-ref (car grid) 0))])\n            \
    \   ([path (in-list (for/list ([x (in-range (length grid))])\n               \
    \                          (for/list ([y (in-range (length (car grid)))])\n  \
    \                                         (get-paths grid x y k))))])\n      (if\
    \ (lexicographic-<? path min-path)\n          path\n          min-path)))\n  (get-min-path\
    \ grid k))\n", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n\
    \      [(= k 2) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n      [(= k 4) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr\
    \ grid))) (car (cdr (car (cdr grid)))))]\n      [(= k 5) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n      [(= k 6)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid)))))\
    \ (car (car (cdr (cdr grid)))))]\n      [(= k 7) (list (car (car grid)) (car (cdr\
    \ (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car\
    \ (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr grid))))\
    \ (car (cdr (car (cdr (cdr grid))))))]\n      [(= k 8) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (", "  (define (minPath-helper grid k)\n    (cond\n      [(empty? grid)\
    \ empty]\n      [(empty? (first grid)) (minPath-helper (rest grid) k)]\n     \
    \ [(= k 1) (list (first (first grid)))]\n      [else\n       (let*\n         \
    \  ([row (first grid)]\n            [col (first row)]\n            [rest-of-row\
    \ (rest row)]\n            [rest-of-grid (rest grid)]\n            [rest-of-grid-row\
    \ (first rest-of-grid)]\n            [rest-of-grid-rest (rest rest-of-grid)]\n\
    \            [left-path (minPath-helper (cons (cons col rest-of-row) rest-of-grid)\
    \ (- k 1))]\n            [right-path (minPath-helper (cons (cons (first rest-of-row)\
    \ rest-of-row) rest-of-grid) (- k 1))]\n            [up-path (minPath-helper (cons\
    \ (cons col row) rest-of-grid-rest) (- k 1))]\n            [down-path (minPath-helper\
    \ (cons (cons (first rest-of-grid-row) row) rest-of-grid-rest) (- k 1))])\n  \
    \       (cond\n           [(empty? left-path)\n            (cond\n           \
    \   [(empty? right-path)\n               (cond\n                 [(empty? up-path)\
    \ down-path]\n                 [(empty? down-path) up-path]\n                \
    \ [else\n                  (if (< (first up-path) (first down-path))\n       \
    \               up-path\n                      down-path)])]\n              [else\n\
    \               (cond\n                 [(empty? up-path)\n                  (if\
    \ (< (first right-path) (first down-path))\n                      right-path\n\
    \                      down-path)]\n                 [(empty? down-path)\n   \
    \               (if (< (first right-path) (first up-path))\n                 \
    \     right-path\n                      up-path)]\n                 [else\n  \
    \                (if (< (first right-path) (first up-path))\n                \
    \      (if (< (first right-path) (first down-path))\n                        \
    \  right-path", "  (define (minPath-helper grid k)\n    (define (get-neighbors\
    \ grid i j)\n      (define (get-neighbors-helper grid i j neighbors)\n       \
    \ (cond\n          [(< i 0) neighbors]\n          [(< j 0) (get-neighbors-helper\
    \ grid (sub1 i) (sub1 (length (car grid))) neighbors)]\n          [(>= i (length\
    \ grid)) neighbors]\n          [(>= j (length (car grid))) (get-neighbors-helper\
    \ grid (add1 i) 0 neighbors)]\n          [else (get-neighbors-helper grid i (add1\
    \ j) (cons (list (list i j) (list-ref (list-ref grid i) j)) neighbors))]))\n \
    \     (get-neighbors-helper grid i j '()))\n    (define (get-paths grid i j k)\n\
    \      (define (get-paths-helper grid i j k paths)\n        (cond\n          [(<\
    \ k 0) paths]\n          [(< i 0) (get-paths-helper grid (sub1 i) (sub1 (length\
    \ (car grid))) k paths)]\n          [(< j 0) (get-paths-helper grid (add1 i) 0\
    \ k paths)]\n          [(>= i (length grid)) paths]\n          [(>= j (length\
    \ (car grid))) (get-paths-helper grid 0 (add1 j) k paths)]\n          [else (get-paths-helper\
    \ grid i (add1 j) k (cons (list (list i j) (list-ref (list-ref grid i) j)) paths))]))\n\
    \      (get-paths-helper grid i j k '()))\n    (define (get-path-values paths)\n\
    \      (map (lambda (path) (cadr path)) paths))\n    (define (get-path-values-sorted\
    \ paths)\n      (sort (get-path-values paths) <))\n    (define (get-path-values-sorted-unique\
    \ paths)\n      (remove-duplicates (get-path-values-sorted paths)))\n    (define\
    \ (get-path-values-sorted-unique", "  (define (minPath-helper grid k)\n    (cond\n\
    \      [(= k 0) (list (car (car grid)))]\n      [(= k 1) (list (car (car grid))\
    \ (car (cdr (car grid))))]\n      [(= k 2) (list (car (car grid)) (car (cdr (car\
    \ grid))) (car (cdr (cdr (car grid)))))]\n      [(= k 3) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr (cdr (car\
    \ grid))))))]\n      [(= k 4) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr\
    \ (cdr (car grid)))))))]\n      [(= k 5) (list (car (car grid)) (car (cdr (car\
    \ grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr (cdr (car grid))))) (car\
    \ (cdr (cdr (cdr (cdr (car grid)))))) (car (cdr (cdr (cdr (cdr (cdr (car grid))))))))]\n\
    \      [(= k 6) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr (cdr (cdr (cdr (car grid))))))) (car (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (car grid)))))))))]\n      [(= k 7) (list (car (car grid)) (car (cdr (car\
    \ grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr (cdr (car grid))))) (car\
    \ (cdr (cdr (cdr (cdr (car grid)))))) (car (cdr (cdr", "  (define (get-cell x\
    \ y)\n    (list-ref (list-ref grid y) x))\n  (define (get-neighbors x y)\n   \
    \ (define (get-neighbor x y)\n      (cond\n        [(= x 0) (list (get-cell (+\
    \ x 1) y))]\n        [(= x (- (length grid) 1)) (list (get-cell (- x 1) y))]\n\
    \        [(= y 0) (list (get-cell x (+ y 1)))]\n        [(= y (- (length grid)\
    \ 1)) (list (get-cell x (- y 1)))]\n        [else (list (get-cell x (+ y 1)) (get-cell\
    \ x (- y 1)) (get-cell (+ x 1) y) (get-cell (- x 1) y))]))\n    (get-neighbor\
    \ x y))\n  (define (get-min-path x y k)\n    (cond\n      [(= k 0) (list (get-cell\
    \ x y))]\n      [else (let ([min-path (list (get-cell x y))])\n              (for\
    \ ([neighbor (get-neighbors x y)])\n                (let ([path (get-min-path\
    \ (car neighbor) (cadr neighbor) (- k 1))])\n                  (if (or (empty?\
    \ min-path) (lexicographic-less? path min-path))\n                      (set!\
    \ min-path path))))\n              min-path)]))\n  (get-min-path 0 0 k))\n", " \
    \ (define (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n\
    \      (define (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k path)\n    (cond\n      [(= k 0)\
    \ (list (car path))]\n      [(empty? grid) (list)]\n      [(empty? (car grid))\
    \ (list)]\n      [else\n       (let*\n           ([path-1 (minPath-helper (cdr\
    \ grid) k (cons (car (car grid)) path)))\n            [path-2 (minPath-helper\
    \ (map cdr grid) k (cons (car (car grid)) path))])\n         (if (or (empty? path-1)\
    \ (empty? path-2))\n             (if (empty? path-1) path-2 path-1)\n        \
    \     (if (lexicographic-less? path-1 path-2) path-1 path-2)))]))\n  (minPath-helper\
    \ grid k (list)))\n", "  (letrec ([grid-size (length grid)]\n           [grid-size-1\
    \ (- grid-size 1)]\n           [grid-size-2 (- grid-size 2)]\n           [grid-size-3\
    \ (- grid-size 3)]\n           [grid-size-4 (- grid-size 4)]\n           [grid-size-5\
    \ (- grid-size 5)]\n           [grid-size-6 (- grid-size 6)]\n           [grid-size-7\
    \ (- grid-size 7)]\n           [grid-size-8 (- grid-size 8)]\n           [grid-size-9\
    \ (- grid-size 9)]\n           [grid-size-10 (- grid-size 10)]\n           [grid-size-11\
    \ (- grid-size 11)]\n           [grid-size-12 (- grid-size 12)]\n           [grid-size-13\
    \ (- grid-size 13)]\n           [grid-size-14 (- grid-size 14)]\n           [grid-size-15\
    \ (- grid-size 15)]\n           [grid-size-16 (- grid-size 16)]\n           [grid-size-17\
    \ (- grid-size 17)]\n           [grid-size-18 (- grid-size 18)]\n           [grid-size-19\
    \ (- grid-size 19)]\n           [grid-size-20 (- grid-size 20)]\n           [grid-size-21\
    \ (- grid-size 21)]\n           [grid-size-22 (- grid-size 22)]\n           [grid-size-23\
    \ (- grid-size 23)]\n           [grid-size-24 (- grid-size 24)]\n           [grid-size-25\
    \ (- grid-size 25)]\n           [grid-size-26 (- grid-size 26)]\n           [grid-size-27\
    \ (- grid-size 27)]\n           [grid-size-28 (- grid-size 28)]\n           [grid-size-29\
    \ (- grid-size 29)]\n           [grid-size-30 (- grid-size 30)]\n           [grid-size-31\
    \ (- grid-size 31)]\n           [grid-size-32 (- grid-size 32)]\n           [grid-size-33\
    \ (- grid-size 33)]\n           [grid-size-34 (- grid-size 34)]\n           [grid-size-35\
    \ (- grid-size 35)]\n           [grid-size-36 (-", "  (let* ([n (length grid)]\n\
    \         [m (length (car grid))]\n         [grid (map (lambda (row) (map (lambda\
    \ (x) (list x)) row)) grid)])\n    (define (get-neighbors x y)\n      (let ([neighbors\
    \ (list)])\n        (when (> x 0) (set! neighbors (cons (list (- x 1) y) neighbors)))\n\
    \        (when (< x (- n 1)) (set! neighbors (cons (list (+ x 1) y) neighbors)))\n\
    \        (when (> y 0) (set! neighbors (cons (list x (- y 1)) neighbors)))\n \
    \       (when (< y (- m 1)) (set! neighbors (cons (list x (+ y 1)) neighbors)))\n\
    \        neighbors))\n    (define (get-paths x y k)\n      (if (= k 0)\n     \
    \     (list (list (car (car (car (ref grid x y))))))\n          (let ([neighbors\
    \ (get-neighbors x y)])\n            (for/list ([neighbor neighbors])\n      \
    \        (let ([x (car neighbor)]\n                    [y (cadr neighbor)])\n\
    \                (for/list ([path (get-paths x y (- k 1))])\n                \
    \  (cons (car (car (car (ref grid x y)))) path)))))))\n    (for/fold ([min-path\
    \ (list)]\n               [min-path-values (list)])\n        ([x (in-range n)]\n\
    \         [y (in-range m)])\n      (let ([paths (get-paths x y k)])\n        (for\
    \ ([path paths])\n          (let ([path-values (map (lambda (x) (car x)) path)])\n\
    \            (if (or (null? min-path)\n                    (and (not (null? min-path))\n\
    \                         (or (< (length path-values) (length min-path-values))\n\
    \                             (and (= (length path-values) (length min-path-values))\n\
    \                                  (for/or ([i (in-range (length path-values))])\n\
    \                                    (< (list-ref path-values i) (list-ref min-path-values\
    \ i)))))))\n                (begin", "  (define (minPath-helper grid k)\n    (cond\n\
    \      [(= k 0) (list (car (car grid)))]\n      [(= k 1) (list (car (car grid))\
    \ (car (cdr (car grid))))]\n      [(= k 2) (list (car (car grid)) (car (cdr (car\
    \ grid))) (car (cdr (cdr (car grid)))))]\n      [(= k 3) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n\
    \      [(= k 4) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))))]\n      [(= k\
    \ 5) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid))))\
    \ (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr\
    \ grid))))))]\n      [(= k 6) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid))))\
    \ (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr grid)))))]\n      [(=\
    \ k 7) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid))))\
    \ (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr\
    \ grid))))) (car (car (cdr (cdr grid)))) (car (cdr (car (cdr (cdr grid))))))]\n\
    \      [(= k 8) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (", "  (define (minPath-helper grid\
    \ k)\n    (cond\n      [(= k 0) (list (car (car grid)))]\n      [(= k 1) (list\
    \ (car (car grid)) (car (car (cdr grid))))]\n      [else (let* ([first (car (car\
    \ grid))]\n                   [second (car (car (cdr grid)))]\n              \
    \     [third (car (car (cdr (cdr grid))))])\n              (cond\n           \
    \     [(< first second) (cons first (minPath-helper (cdr grid) (- k 1)))]\n  \
    \              [(> first second) (cons second (minPath-helper (cdr grid) (- k\
    \ 1)))]\n                [else (cond\n                        [(< first third)\
    \ (cons first (minPath-helper (cdr grid) (- k 1)))]\n                        [(>\
    \ first third) (cons third (minPath-helper (cdr grid) (- k 1)))]\n           \
    \             [else (minPath-helper (cdr grid) (- k 1))]\n                   \
    \     )]\n                )]\n              )]\n      ))\n  (minPath-helper grid\
    \ k))\n", "  (define (minPath-helper grid k)\n    (if (equal? k 0)\n        (list\
    \ (list (car (car grid))))\n        (let ((min-path (list (list (car (car grid)))))\n\
    \              (min-path-value (car (car grid))))\n          (for ((i (in-range\
    \ (length grid)))\n                (j (in-range (length (car grid)))))\n     \
    \       (let ((current-value (list-ref (list-ref grid i) j)))\n              (if\
    \ (and (< current-value min-path-value)\n                       (not (equal? current-value\
    \ (car (car min-path)))))\n                  (begin\n                    (set!\
    \ min-path (minPath-helper (list-ref grid i) (- k 1)))\n                    (set!\
    \ min-path-value (car (car min-path)))))))\n          (cons (list min-path-value)\
    \ min-path))))\n  (car (minPath-helper grid k)))\n", "  (define (minPath' grid\
    \ k)\n    (cond [(empty? grid) empty]\n          [(empty? (first grid)) empty]\n\
    \          [(= k 1) (list (first (first grid)))]\n          [(= k 2) (list (first\
    \ (first grid)) (first (first (rest grid))))]\n          [else (minPath' (rest\
    \ grid) (- k 1))]))\n  (minPath' grid k))\n", "  (define (minPath-helper grid\
    \ k path)\n    (if (= k 0)\n        path\n        (let ((min-path (list)))\n \
    \         (for ((row (in-range (length grid)))\n                (col (in-range\
    \ (length (grid 0)))))\n            (let ((new-path (append path (list (grid row\
    \ col)))))\n              (if (and (not (empty? min-path))\n                 \
    \      (not (lexicographic-less? new-path min-path)))\n                  #f\n\
    \                  (let ((new-grid (remove-row-col grid row col)))\n         \
    \           (let ((new-min-path (minPath-helper new-grid (- k 1) new-path)))\n\
    \                      (if (and (not (empty? new-min-path))\n                \
    \               (not (lexicographic-less? new-min-path min-path)))\n         \
    \                 #f\n                          (set! min-path new-min-path)))))))\n\
    \          min-path)))\n  (minPath-helper grid k (list)))\n", "  (define (minPath-helper\
    \ grid k)\n    (cond\n      [(= k 0) (list (car (car grid)))]\n      [(= k 1)\
    \ (list (car (car grid)) (car (cdr (car grid))))]\n      [(= k 2) (list (car (car\
    \ grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))))]\n      [(= k 3)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))))]\n      [(= k 4) (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))))]\n\
    \      [(= k 5) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr\
    \ (car (cdr grid))))))]\n      [(= k 6) (list (car (car grid)) (car (cdr (car\
    \ grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car (cdr\
    \ grid)))) (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr grid)))))]\n\
    \      [(= k 7) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr\
    \ (car (cdr grid))))) (car (car (cdr (cdr grid)))) (car (cdr (car (cdr (cdr grid))))))]\n\
    \      [(= k 8) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (", "  (define (minPath-helper grid\
    \ k i j)\n    (cond\n      [(= k 0) (list (list-ref (list-ref grid i) j))]\n \
    \     [(= i 0) (minPath-helper grid (- k 1) i (+ j 1))]\n      [(= j 0) (minPath-helper\
    \ grid (- k 1) (+ i 1) j)]\n      [else (min (minPath-helper grid (- k 1) i (+\
    \ j 1))\n                 (minPath-helper grid (- k 1) (+ i 1) j))]))\n  (minPath-helper\
    \ grid k 0 0))\n", "  (define (minPath-helper grid k)\n    (cond\n      [(= k\
    \ 0) (list (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (cdr\
    \ (car grid))))]\n      [(= k 2) (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cdr (cdr (car grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr\
    \ (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n      [(=\
    \ k 4) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid))))\
    \ (car (car (cdr grid))) (car (cdr (car (cdr grid)))))]\n      [(= k 5) (list\
    \ (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car\
    \ (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n\
    \      [(= k 6) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr\
    \ (car (cdr grid))))) (car (car (cdr (cdr grid)))))]\n      [(= k 7) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr\
    \ grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car\
    \ (car (cdr (cdr grid)))) (car (cdr (car (cdr (cdr grid))))))]\n      [(= k 8)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (", "  (define (minPath' grid k)\n    (define (minPath''\
    \ grid k)\n      (define (minPath''' grid k)\n        (define (minPath'''' grid\
    \ k)\n          (define (minPath''''' grid k)\n            (define (minPath''''''\
    \ grid k)\n              (define (minPath''''''' grid k)\n                (define\
    \ (minPath'''''''' grid k)\n                  (define (minPath''''''''' grid k)\n\
    \                    (define (minPath'''''''''' grid k)\n                    \
    \  (define (minPath''''''''''' grid k)\n                        (define (minPath''''''''''''\
    \ grid k)\n                          (define (minPath''''''''''''' grid k)\n \
    \                           (define (minPath'''''''''''''' grid k)\n         \
    \                     (define (minPath''''''''''''''' grid k)\n              \
    \                  (define (minPath'''''''''''''''' grid k)\n                \
    \                  (define (minPath''''''''''''''''' grid k)\n               \
    \                     (define (minPath'''''''''''''''''' grid k)\n           \
    \                           (define (minPath''''''''''''''''''' grid k)\n    \
    \                                    (define (minPath'''''''''''''''''''' grid\
    \ k)\n                                          (define (minPath'''''''''''''''''''''\
    \ grid k)\n                                            (define (minPath''''''''''''''''''''''\
    \ grid k)\n                                              (define (minPath'''''''''''''''''''''''\
    \ grid k)\n                                                (define (minPath''''''''''''''''''''''''\
    \ grid k)\n                                                  (define (minPath'''''''''''''''''''''''''\
    \ grid k)\n                                                    (define (minPath''''''''''''''''''''''''''\
    \ grid k)\n                                                      (define (minPath'''''''''''''''''''''''''''\
    \ grid k)\n                                                        (define (minPath''''''''''''''''''''''''''''\
    \ grid k)\n                                                          (define (minPath'''''''''''''''''''''''''''''\
    \ grid k)\n                                                            (define\
    \ (minPath'''''''''''''''''''''''''''''' grid k)\n                           \
    \                                   (define (minPath'''''''''''''''''''''''''''''''\
    \ grid k)\n                                                                (define\
    \ (minPath'''''''''''''''''''''''''''''''' grid k)\n                         \
    \                       ", "  (define (minPathHelper grid k)\n    (cond\n    \
    \  [(= k 0) (list (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car\
    \ (cdr (car grid))))]\n      [(= k 2) (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cdr (cdr (car grid)))))]\n      [(= k 3) (list (car (car grid)) (car (cdr\
    \ (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))))]\n      [(=\
    \ k 4) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid))))\
    \ (car (car (cdr grid))) (car (cdr (car (cdr grid)))))]\n      [(= k 5) (list\
    \ (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car\
    \ (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))))]\n\
    \      [(= k 6) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr\
    \ (car (cdr grid))))) (car (car (cdr (cdr grid)))))]\n      [(= k 7) (list (car\
    \ (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr\
    \ grid))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car\
    \ (car (cdr (cdr grid)))) (car (cdr (car (cdr (cdr grid))))))]\n      [(= k 8)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car\
    \ (car (cdr grid))) (car (cdr (car (", "  (define (get-neighbors grid x y)\n \
    \   (define (get-neighbor-coords x y)\n      (define (get-neighbor-coords-helper\
    \ x y)\n        (cond\n          [(and (> x 0) (> y 0)) (list (list (- x 1) y)\
    \ (list x (- y 1)))]\n          [(and (= x 0) (> y 0)) (list (list x (- y 1)))]\n\
    \          [(and (> x 0) (= y 0)) (list (list (- x 1) y))]\n          [else '()]))\n\
    \      (filter (lambda (coord)\n                (let ([x (car coord)]\n      \
    \                [y (cadr coord)])\n                  (and (>= x 0) (>= y 0) (<\
    \ x (length grid)) (< y (length (car grid))))))\n              (get-neighbor-coords-helper\
    \ x y)))\n    (map (lambda (coord)\n           (let ([x (car coord)]\n       \
    \          [y (cadr coord)])\n             (list x y (list-ref (list-ref grid\
    \ x) y))))\n         (get-neighbor-coords x y)))\n  (define (get-min-path grid\
    \ x y k)\n    (define (get-min-path-helper grid x y k)\n      (cond\n        [(=\
    \ k 0) (list (list x y (list-ref (list-ref grid x) y)))]\n        [(= k 1) (get-neighbors\
    \ grid x y)]\n        [else (let ([neighbors (get-neighbors grid x y)])\n    \
    \            (cond\n                  [(null? neighbors) '()]\n              \
    \    [else (let ([min-paths (map (lambda (neighbor)\n                        \
    \                        (get-min-path-helper grid (car neighbor) (cadr neighbor)\
    \ (- k 1)))\n                                              neighbors)])\n    \
    \                     (let ([min-path (apply min min-paths)])\n              \
    \             (cons (list x y (list-ref (list-ref grid x) y)) min-path))))]))]))\n\
    \    (let ([min-path (get-min-path-helper grid x y k)", "  (letrec ([minPathHelper\
    \ (lambda (grid k)\n                            (if (zero? k)\n              \
    \                  (list (car (car grid)))\n                                (let*\
    \ ([minPaths (map (lambda (row)\n                                            \
    \            (map (lambda (cell)\n                                           \
    \                    (minPathHelper (map (lambda (row)\n                     \
    \                                                                (remove cell\
    \ row))\n                                                                    \
    \               grid)\n                                                      \
    \                           (- k 1)))\n                                      \
    \                       row))\n                                              \
    \        grid))]\n                                       [minPath (apply min (map\
    \ (lambda (row)\n                                                            \
    \      (apply min row))\n                                                    \
    \            minPaths))])\n                                  (cons (car (car (filter\
    \ (lambda (row)\n                                                            (member\
    \ minPath row))\n                                                          minPaths)))\n\
    \                                        minPath))))])\n    (minPathHelper grid\
    \ k)))\n", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list\
    \ (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car (car (cdr grid))))]\n\
    \      [else (let* ([n (length grid)]\n                   [m (length (car grid))]\n\
    \                   [min-path (make-vector n (make-vector m (list)))]\n      \
    \             [min-path-value (make-vector n (make-vector m (list)))]\n      \
    \             [min-path-value-k (make-vector n (make-vector m (list)))]\n    \
    \               [min-path-value-k-1 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-2 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-3 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-4 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-5 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-6 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-7 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-8 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-9 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-10 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-11 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-12 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-13 (make-vector n (make-vector m (list)))]\n\
    \                   [min-path-value-k-14 (make-vector n (make-vector m (list)))]",
  "  (define (minPath-helper grid k path)\n    (cond\n      [(empty? grid) (error\
    \ \"Grid is empty\")]\n      [(empty? (first grid)) (error \"Grid is empty\")]\n\
    \      [(= k 0) path]\n      [(= k 1) (append path (list (first (first grid))))]\n\
    \      [else\n       (let*\n           ([n (length grid)]\n            [m (length\
    \ (first grid))]\n            [min-path (list (first (first grid)))]\n       \
    \     [min-path-value (first (first grid))])\n         (for* ([i (in-range n)]\n\
    \                [j (in-range m)])\n           (let*\n               ([path-value\
    \ (first (first grid))]\n                [path (append path (list path-value))])\n\
    \             (cond\n               [(and (not (empty? (first grid)))\n      \
    \               (not (empty? (rest grid)))\n                     (not (empty?\
    \ (rest (first grid)))))\n                (let*\n                    ([path-value\
    \ (first (first grid))]\n                     [path (append path (list path-value))]\n\
    \                     [path-value (first (first grid))]\n                    \
    \ [path (append path (list path-value))]\n                     [path-value (first\
    \ (first grid))]\n                     [path (append path (list path-value))]\n\
    \                     [path-value (first (first grid))]\n                    \
    \ [path (append path (list path-value))]\n                     [path-value (first\
    \ (first grid))]\n                     [path (append path (list path-value))]\n\
    \                     [path-value (first (first grid))]\n                    \
    \ [path (append path (list path-value))]\n                     [path-value (first\
    \ (first grid))]\n                     [path (append path (list path-value))]\n\
    \                     [path-value (first (first grid))]\n                    \
    \ [path (append path (list path-value))]\n                     [path-value (first\
    \ (first grid))]\n                     [path (append path (list path-value))]\n\
    \                     [path-value (first (first grid))]\n                    \
    \ [path (append path (list path-value))]\n                     [", "  (define\
    \ (minPath-helper grid k)\n    (define (get-neighbors grid i j)\n      (define\
    \ (get-neighbors-helper grid i j neighbors)\n        (cond ((= i 0) (get-neighbors-helper\
    \ grid i (+ j 1) (cons (list (list i j) (list (list i (+ j 1)) (list (+ i 1) j)))\
    \ neighbors)))\n              ((= j 0) (get-neighbors-helper grid (+ i 1) j (cons\
    \ (list (list i j) (list (list i (+ j 1)) (list (+ i 1) j))) neighbors)))\n  \
    \            ((= i (- (length grid) 1)) (get-neighbors-helper grid i (+ j 1) (cons\
    \ (list (list i j) (list (list i (- j 1)) (list (- i 1) j))) neighbors)))\n  \
    \            ((= j (- (length (car grid)) 1)) (get-neighbors-helper grid (+ i\
    \ 1) j (cons (list (list i j) (list (list i (- j 1)) (list (- i 1) j))) neighbors)))\n\
    \              ((= j (- (length (car grid)) 1)) (get-neighbors-helper grid (+\
    \ i 1) j (cons (list (list i j) (list (list i (- j 1)) (list (- i 1) j))) neighbors)))\n\
    \              (else (get-neighbors-helper grid i (+ j 1) (cons (list (list i\
    \ j) (list (list i (- j 1)) (list (- i 1) j) (list (list i (+ j 1)) (list (+ i\
    \ 1) j))) neighbors)))))\n      (get-neighbors-helper grid 0 0 '()))\n    (define\
    \ (get-paths grid k)\n      (define (get-paths-helper grid k paths)\n        (cond\
    \ ((= k 0) (cons (list (list (list 0 0))) paths))\n              (else (get-paths-helper\
    \ grid (- k 1) (foldl (lambda (path paths)\n                                 \
    \                           (foldl (lambda (neighbor paths)\n                \
    \                                                      (define (is-neighbor? neighbor)\n\
    \                                                                        (", " \
    \ (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list (car (car grid)))]\n\
    \      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n      [(= k 2)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))))]\n\
    \      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))))]\n      [(= k 4) (list (car (car\
    \ grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr (cdr\
    \ (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))))]\n      [(= k 5) (list\
    \ (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (cdr\
    \ (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))) (car (cdr\
    \ (cdr (cdr (cdr (cdr (car grid))))))))]\n      [(= k 6) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (cdr (cdr (cdr (car\
    \ grid))))) (car (cdr (cdr (cdr (cdr (car grid)))))) (car (cdr (cdr (cdr (cdr\
    \ (cdr (car grid))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr (car grid)))))))))]\n\
    \      [(= k 7) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (cdr (cdr (cdr (car grid))))) (car (cdr (cdr (cdr (cdr (car grid))))))\
    \ (car (cdr (cdr", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (letrec ([grid-size (length grid)]\n           [grid-size-1 (- grid-size\
    \ 1)]\n           [grid-size-2 (- grid-size 2)]\n           [grid-size-3 (- grid-size\
    \ 3)]\n           [grid-size-4 (- grid-size 4)]\n           [grid-size-5 (- grid-size\
    \ 5)]\n           [grid-size-6 (- grid-size 6)]\n           [grid-size-7 (- grid-size\
    \ 7)]\n           [grid-size-8 (- grid-size 8)]\n           [grid-size-9 (- grid-size\
    \ 9)]\n           [grid-size-10 (- grid-size 10)]\n           [grid-size-11 (-\
    \ grid-size 11)]\n           [grid-size-12 (- grid-size 12)]\n           [grid-size-13\
    \ (- grid-size 13)]\n           [grid-size-14 (- grid-size 14)]\n           [grid-size-15\
    \ (- grid-size 15)]\n           [grid-size-16 (- grid-size 16)]\n           [grid-size-17\
    \ (- grid-size 17)]\n           [grid-size-18 (- grid-size 18)]\n           [grid-size-19\
    \ (- grid-size 19)]\n           [grid-size-20 (- grid-size 20)]\n           [grid-size-21\
    \ (- grid-size 21)]\n           [grid-size-22 (- grid-size 22)]\n           [grid-size-23\
    \ (- grid-size 23)]\n           [grid-size-24 (- grid-size 24)]\n           [grid-size-25\
    \ (- grid-size 25)]\n           [grid-size-26 (- grid-size 26)]\n           [grid-size-27\
    \ (- grid-size 27)]\n           [grid-size-28 (- grid-size 28)]\n           [grid-size-29\
    \ (- grid-size 29)]\n           [grid-size-30 (- grid-size 30)]\n           [grid-size-31\
    \ (- grid-size 31)]\n           [grid-size-32 (- grid-size 32)]\n           [grid-size-33\
    \ (- grid-size 33)]\n           [grid-size-34 (- grid-size 34)]\n           [grid-size-35\
    \ (- grid-size 35)]\n           [grid-size-36 (-", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (if (equal? k 0)\n        (list\
    \ (list-ref (list-ref grid 0) 0))\n        (let* ([min-path (minPath-helper grid\
    \ (- k 1))]\n               [min-path-last-value (list-ref (last min-path) 0)])\n\
    \          (for/list ([row (in-list grid)]\n                     [col (in-list\
    \ row)])\n            (if (and (equal? (list-ref row col) min-path-last-value)\n\
    \                     (not (equal? (list-ref row col) (list-ref (list-ref grid\
    \ 0) 0))))\n                (list-ref row col))))))\n  (minPath-helper grid k))",
  "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n\
    \      (define (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(empty? grid)\
    \ empty]\n      [(empty? (first grid)) (minPath-helper (rest grid) k)]\n     \
    \ [(empty? (rest grid)) empty]\n      [else\n       (let* ([row (first grid)]\n\
    \              [col (first (rest grid))]\n              [min-path (minPath-helper\
    \ (rest grid) k)])\n         (cond\n           [(= k 1) (cons (first row) min-path)]\n\
    \           [(= k 2) (cons (first row) (cons (first col) min-path))]\n       \
    \    [else\n            (let* ([min-path-up (minPath-helper (rest grid) (- k 1))]\n\
    \                   [min-path-left (minPath-helper (map rest grid) (- k 1))]\n\
    \                   [min-path-up-left (minPath-helper (map rest (rest grid)) (-\
    \ k 1))])\n              (cond\n                [(empty? min-path-up)\n      \
    \           (cons (first row) min-path-left)]\n                [(empty? min-path-left)\n\
    \                 (cons (first row) min-path-up)]\n                [(empty? min-path-up-left)\n\
    \                 (cons (first row) (cons (first col) min-path-up))]\n       \
    \         [else\n                 (cond\n                   [(< (first min-path-up)\
    \ (first min-path-left))\n                    (cond\n                      [(<\
    \ (first min-path-up) (first min-path-up-left))\n                       (cons\
    \ (first row) min-path-up)]\n                      [else\n                   \
    \    (cons (first row) (cons (first col) min-path-up-left))])]\n             \
    \      [else\n                    (cond\n                      [(< (first min-path-left)\
    \ (first min-path-up-left))\n                       (cons (first row) min-path-left)]\n\
    \                      [else\n                       (cons (first row) (cons (first\
    \ col) min-path-up-left))])])]))]))]))\n  (minPath-helper grid k))\n", "  (define\
    \ (minPath-helper grid k)\n    (cond\n      [(= k 0) (list (car (car grid)))]\n\
    \      [(= k 1) (list (car (car grid)) (car (cdr (car grid))))]\n      [(= k 2)\
    \ (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid)))))]\n\
    \      [(= k 3) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))))]\n      [(= k 4) (list (car (car grid)) (car\
    \ (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr\
    \ (car (cdr grid)))))]\n      [(= k 5) (list (car (car grid)) (car (cdr (car grid)))\
    \ (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid))))\
    \ (car (cdr (cdr (car (cdr grid))))))]\n      [(= k 6) (list (car (car grid))\
    \ (car (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car\
    \ (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr\
    \ grid)))))]\n      [(= k 7) (list (car (car grid)) (car (cdr (car grid))) (car\
    \ (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (car (cdr grid))))\
    \ (car (cdr (cdr (car (cdr grid))))) (car (car (cdr (cdr grid)))) (car (cdr (car\
    \ (cdr (cdr grid))))))]\n      [(= k 8) (list (car (car grid)) (car (cdr (car\
    \ grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr (", " \
    \ (define (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n\
    \      (define (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond ((= k 0) (list))\n  \
    \        ((= k 1) (list (car (car grid))))\n          (else (let ((min-path (list)))\n\
    \                  (for ((row (in-list grid)))\n                    (for ((col\
    \ (in-list row)))\n                      (let ((path (minPath-helper grid (- k\
    \ 1))))\n                        (if (and (not (empty? path))\n              \
    \                   (or (empty? min-path)\n                                  \
    \   (lexicographic-less? (cons col path) min-path)))\n                       \
    \     (set! min-path (cons col path))))))\n                  min-path))))\n  (minPath-helper\
    \ grid k))\n", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k path)\n    (if (zero? k)\n      \
    \  path\n        (let* ([min-path (minPath-helper grid (- k 1) (cons (car (car\
    \ grid)) path))]\n               [min-path-value (car min-path)]\n           \
    \    [min-path-rest (cdr min-path)])\n          (for/or ([row (in-list grid)]\n\
    \                   [col (in-list row)])\n            (if (and (not (equal? col\
    \ min-path-value))\n                     (not (member col min-path-rest)))\n \
    \               (let ([new-path (cons col min-path-rest)])\n                 \
    \ (if (and (not (equal? new-path min-path))\n                           (not (equal?\
    \ new-path (reverse min-path))))\n                      (if (lexicographic-less?\
    \ new-path min-path)\n                          new-path\n                   \
    \       min-path)\n                      min-path)))))))\n  (minPath-helper grid\
    \ k (list (car (car grid)))))\n", "  (define (minPath-helper grid k)\n    (define\
    \ (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (if (= k 1)\n        (list\
    \ (car (car grid)))\n        (let* ([n (length grid)]\n               [m (length\
    \ (car grid))]\n               [min-path (list (car (car grid)))]\n          \
    \     [min-value (car (car grid))])\n          (for ([i (in-range n)])\n     \
    \       (for ([j (in-range m)])\n              (let* ([value (list-ref (list-ref\
    \ grid i) j)]\n                     [path (cons value (minPath-helper (remove-row\
    \ grid i) (- k 1)))])\n                (if (and (< value min-value)\n        \
    \                 (or (null? min-path)\n                             (lexicographic-less?\
    \ path min-path)))\n                    (begin\n                      (set! min-path\
    \ path)\n                      (set! min-value value)))))))\n          min-path)))\n\
    \  (minPath-helper grid k))\n", "  (define (minPath-helper grid k)\n    (define\
    \ (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k start)\n    (cond\n      [(= k 0)\
    \ (list)]\n      [(= k 1) (list (list-ref (list-ref grid (car start)) (cadr start)))]\n\
    \      [else\n       (let*\n           ([neighbors (get-neighbors grid start)]\n\
    \            [paths (map (lambda (n) (cons (list-ref (list-ref grid (car n)) (cadr\
    \ n)) (minPath-helper grid (- k 1) n))) neighbors)]\n            [min-path (apply\
    \ min paths)])\n         (cons (car min-path) (cdr min-path)))]))\n  (minPath-helper\
    \ grid k (get-start grid)))\n", "  (define (minPath-helper grid k)\n    (define\
    \ (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPathHelper grid k)\n    (define (minPathHelperHelper\
    \ grid k)\n      (define (minPathHelperHelperHelper grid k)\n        (define (minPathHelperHelperHelperHelper\
    \ grid k)\n          (define (minPathHelperHelperHelperHelperHelper grid k)\n\
    \            (define (minPathHelperHelperHelperHelperHelperHelper grid k)\n  \
    \            (define (minPathHelperHelperHelperHelperHelperHelperHelper grid k)\n\
    \                (define (minPathHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                  (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                    (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                      (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                        (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                          (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                            (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                              (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                  (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                    (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                      (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                        (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                          (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                            (define (minPathHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelperHelper\
    \ grid k)\n                                              (define (minPathHelperHelperHelperHelperHelperHelperHelperHelper",
  "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n\
    \      (define (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k path)\n    (if (= k 0)\n        path\n\
    \        (let ([min-path (list (list (list)))]\n              [min-val (list (list\
    \ (list)))]\n              [min-val-index 0])\n          (for ([i (in-range (length\
    \ grid))])\n            (for ([j (in-range (length (grid i)))])\n            \
    \  (let ([new-path (append path (list (grid i j)))])\n                (if (and\
    \ (or (empty? (min-path))\n                             (and (equal? (length (min-path))\
    \ 1)\n                                  (equal? (length (min-val)) 1)\n      \
    \                            (equal? (length (min-val 0)) 1)\n               \
    \                   (equal? (length (min-path 0)) 1))\n                      \
    \       (and (equal? (length (min-path)) 1)\n                                \
    \  (equal? (length (min-val)) 1)\n                                  (equal? (length\
    \ (min-val 0)) 1)\n                                  (equal? (length (min-path\
    \ 0)) 1)\n                                  (equal? (length (min-path 0 0)) 1)\n\
    \                                  (equal? (length (min-val 0 0)) 1)\n       \
    \                           (equal? (length (min-path 0 0 0)) 1)\n           \
    \                       (equal? (length (min-val 0 0 0)) 1)\n                \
    \                  (equal? (length (min-path 0 0 0 0)) 1)\n                  \
    \                (equal? (length (min-val 0 0 0 0)) 1)\n                     \
    \             (equal? (length (min-path 0 0 0 0 0)) 1)\n                     \
    \             (equal? (length (min-val 0 0 0 0 0)) 1)\n                      \
    \            (equal? (length (min-path 0 0 0 0 0 0)) 1)\n                    \
    \              (equal? (length (min-val 0 0 0 0 0 0)) 1)\n                   \
    \               (equal? (length (min-path 0 0 0 0 0 0 0)) 1)\n               \
    \                   (equal? (length (min-val 0 0 0 0 0 0 0)) 1)\n            \
    \                      (equal? (length (min-path 0 0 0 0 0 0", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (if (= k 1)\n        (list\
    \ (car (car grid)))\n        (let* ([min-path (minPath-helper grid (- k 1))]\n\
    \               [min-path-last (car (reverse min-path))]\n               [min-path-last-row\
    \ (quotient min-path-last (length grid))]\n               [min-path-last-col (remainder\
    \ min-path-last (length grid))]\n               [min-path-last-row-up (- min-path-last-row\
    \ 1)]\n               [min-path-last-row-down (+ min-path-last-row 1)]\n     \
    \          [min-path-last-col-left (- min-path-last-col 1)]\n               [min-path-last-col-right\
    \ (+ min-path-last-col 1)]\n               [min-path-last-row-up-col-left (list\
    \ min-path-last-row-up min-path-last-col-left)]\n               [min-path-last-row-up-col-right\
    \ (list min-path-last-row-up min-path-last-col-right)]\n               [min-path-last-row-down-col-left\
    \ (list min-path-last-row-down min-path-last-col-left)]\n               [min-path-last-row-down-col-right\
    \ (list min-path-last-row-down min-path-last-col-right)]\n               [min-path-last-row-up-col\
    \ (list min-path-last-row-up min-path-last-col)]\n               [min-path-last-row-down-col\
    \ (list min-path-last-row-down min-path-last-col)]\n               [min-path-last-row-col-left\
    \ (list min-path-last-row min-path-last-col-left)]\n               [min-path-last-row-col-right\
    \ (list min-path-last-row min-path-last-col-right)]\n               [min-path-last-row-col\
    \ (list min-path-last-row min-path-last-", "  (define (minPath-helper grid k)\n\
    \    (if (zero? k)\n        (list (list-ref (list-ref grid 0) 0))\n        (let*\
    \ ([grid-size (length grid)]\n               [grid-size-minus-one (- grid-size\
    \ 1)]\n               [grid-size-minus-two (- grid-size 2)]\n               [grid-size-minus-three\
    \ (- grid-size 3)]\n               [grid-size-minus-four (- grid-size 4)]\n  \
    \             [grid-size-minus-five (- grid-size 5)]\n               [grid-size-minus-six\
    \ (- grid-size 6)]\n               [grid-size-minus-seven (- grid-size 7)]\n \
    \              [grid-size-minus-eight (- grid-size 8)]\n               [grid-size-minus-nine\
    \ (- grid-size 9)]\n               [grid-size-minus-ten (- grid-size 10)]\n  \
    \             [grid-size-minus-eleven (- grid-size 11)]\n               [grid-size-minus-twelve\
    \ (- grid-size 12)]\n               [grid-size-minus-thirteen (- grid-size 13)]\n\
    \               [grid-size-minus-fourteen (- grid-size 14)]\n               [grid-size-minus-fifteen\
    \ (- grid-size 15)]\n               [grid-size-minus-sixteen (- grid-size 16)]\n\
    \               [grid-size-minus-seventeen (- grid-size 17)]\n               [grid-size-minus-eighteen\
    \ (- grid-size 18)]\n               [grid-size-minus-nineteen (- grid-size 19)]\n\
    \               [grid-size-minus-twenty (- grid-size 20)]\n               [grid-size-minus-twenty-one\
    \ (- grid-size 21)]\n               [grid-size-minus-twenty-two (- grid-size 22)]\n\
    \               [grid-size-minus-twenty-three (- grid-size 23)]\n            \
    \   [grid-size-minus-twenty-four (- grid-size 24)]\n               [grid-size-minus-twenty-five\
    \ (- grid-size 25)]\n               [grid-size-minus-twenty-six (- grid-size 26)]\n\
    \               [grid-size-minus-twenty-seven (- grid", "  (define (minPath-helper\
    \ grid k)\n    (if (or (= k 0) (empty? grid))\n        (list)\n        (let* ([min-path\
    \ (minPath-helper (cdr grid) (- k 1))]\n               [min-path-value (apply\
    \ min (map (lambda (row) (apply min row)) grid))])\n          (cons min-path-value\
    \ min-path))))\n  (minPath-helper grid k))\n", "  (define (minPath-helper grid\
    \ k)\n    (if (= k 1)\n        (list (car (car grid)))\n        (let* ([min-path\
    \ (minPath-helper grid (- k 1))]\n               [min-path-value (car min-path)]\n\
    \               [min-path-row (car (find-row grid min-path-value))]\n        \
    \       [min-path-col (car (find-col grid min-path-value))])\n          (let ([min-path-neighbors\
    \ (list (list-ref grid (- min-path-row 1) min-path-col)\n                    \
    \                      (list-ref grid (+ min-path-row 1) min-path-col)\n     \
    \                                     (list-ref grid min-path-row (- min-path-col\
    \ 1))\n                                          (list-ref grid min-path-row (+\
    \ min-path-col 1)))])\n            (let ([min-path-neighbors-filtered (filter\
    \ (lambda (x) (not (equal? x #f))) min-path-neighbors)])\n              (if (=\
    \ (length min-path-neighbors-filtered) 1)\n                  (cons (car min-path-neighbors-filtered)\
    \ min-path)\n                  (let ([min-path-neighbors-filtered-sorted (sort\
    \ min-path-neighbors-filtered <)])\n                    (cons (car min-path-neighbors-filtered-sorted)\
    \ min-path)))))))))\n  (minPath-helper grid k))\n", "  (define (minPath-helper\
    \ grid k)\n    (if (= k 1)\n        (list (list (list (list-ref (list-ref grid\
    \ 0) 0))))\n        (let* ([grid-size (length grid)]\n               [grid-size-minus-1\
    \ (- grid-size 1)]\n               [grid-size-minus-2 (- grid-size 2)]\n     \
    \          [grid-size-minus-3 (- grid-size 3)]\n               [grid-size-minus-4\
    \ (- grid-size 4)]\n               [grid-size-minus-5 (- grid-size 5)]\n     \
    \          [grid-size-minus-6 (- grid-size 6)]\n               [grid-size-minus-7\
    \ (- grid-size 7)]\n               [grid-size-minus-8 (- grid-size 8)]\n     \
    \          [grid-size-minus-9 (- grid-size 9)]\n               [grid-size-minus-10\
    \ (- grid-size 10)]\n               [grid-size-minus-11 (- grid-size 11)]\n  \
    \             [grid-size-minus-12 (- grid-size 12)]\n               [grid-size-minus-13\
    \ (- grid-size 13)]\n               [grid-size-minus-14 (- grid-size 14)]\n  \
    \             [grid-size-minus-15 (- grid-size 15)]\n               [grid-size-minus-16\
    \ (- grid-size 16)]\n               [grid-size-minus-17 (- grid-size 17)]\n  \
    \             [grid-size-minus-18 (- grid-size 18)]\n               [grid-size-minus-19\
    \ (- grid-size 19)]\n               [grid-size-minus-20 (- grid-size 20)]\n  \
    \             [grid-size-minus-21 (- grid-size 21)]\n               [grid-size-minus-22\
    \ (- grid-size 22)]\n               [grid-size-minus-23 (- grid-size 23)]\n  \
    \             [grid-size-minus-24 (- grid-size 24)]\n               [grid-size-minus-25\
    \ (- grid-size 25)]\n               [grid-size-minus-26 (- grid-size 26)]\n  \
    \             [grid-size-minus-27 (- grid-size 27)]\n               [grid-size-minus-28\
    \ (- grid-size 28)]\n               [grid-size-minus-", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list)]\n\
    \      [(= k 1) (list (vector-ref (vector-ref grid 0) 0))]\n      [else\n    \
    \   (let*\n           ([n (vector-length grid)]\n            [m (vector-length\
    \ (vector-ref grid 0))]\n            [min-path (make-vector n (make-vector m (list)))]\n\
    \            [min-path-val (make-vector n (make-vector m (list)))]\n         \
    \   [min-path-val-k (make-vector n (make-vector m (list)))]\n            [min-path-val-k-1\
    \ (make-vector n (make-vector m (list)))]\n            [min-path-val-k-1-min (make-vector\
    \ n (make-vector m (list)))]\n            [min-path-val-k-1-min-index (make-vector\
    \ n (make-vector m (list)))]\n            [min-path-val-k-1-min-index-row (make-vector\
    \ n (make-vector m (list)))]\n            [min-path-val-k-1-min-index-col (make-vector\
    \ n (make-vector m (list)))]\n            [min-path-val-k-1-min-index-row-col\
    \ (make-vector n (make-vector m (list)))]\n            [min-path-val-k-1-min-index-row-col-row\
    \ (make-vector n (make-vector m (list)))]\n            [min-path-val-k-1-min-index-row-col-col\
    \ (make-vector n (make-vector m (list)))]\n            [min-path-val-k-1-min-index-row-col-row-col\
    \ (make-vector n (make-vector m (list)))]\n            [min-path-val-k-1-min-index-row-col-row-col-row\
    \ (make-vector n (make-vector m (list)))]\n            [min-path-val-k-1-min-index-row-col-row-col-col\
    \ (make-", "  (define (get-cell-value row col)\n    (list-ref (list-ref grid row)\
    \ col))\n  (define (get-neighbors row col)\n    (cond\n      [(= row 0)\n    \
    \   (cond\n         [(= col 0) (list (list 1 0) (list 0 1))]\n         [(= col\
    \ (- (length (list-ref grid 0)) 1)) (list (list (- row 1) col) (list row (- col\
    \ 1)))]\n         [else (list (list (- row 1) col) (list row (- col 1)) (list\
    \ row (+ col 1)))])]\n      [(= row (- (length grid) 1))\n       (cond\n     \
    \    [(= col 0) (list (list (- row 1) col) (list row (+ col 1)))]\n         [(=\
    \ col (- (length (list-ref grid 0)) 1)) (list (list (- row 1) col) (list row (-\
    \ col 1)))]\n         [else (list (list (- row 1) col) (list row (- col 1)) (list\
    \ row (+ col 1)))])]\n      [(= col 0) (list (list (- row 1) col) (list (+ row\
    \ 1) col) (list row (+ col 1)))]\n      [(= col (- (length (list-ref grid 0))\
    \ 1)) (list (list (- row 1) col) (list (+ row 1) col) (list row (- col 1)))]\n\
    \      [else (list (list (- row 1) col) (list (+ row 1) col) (list row (- col\
    \ 1)) (list row (+ col 1)))])\n    )\n  (define (get-min-path row col k)\n   \
    \ (cond\n      [(= k 1) (list (get-cell-value row col))]\n      [else\n      \
    \ (let ([neighbors (get-neighbors row col)])\n         (let ([min-path (apply\
    \ min (map (lambda (neighbor) (get-min-path (list-ref neighbor 0) (list-ref neighbor\
    \ 1) (- k 1))) neighbors))])\n           (cons (get-cell-value row col) min-path)))]))\n\
    \  (get-min-path 0 0 k))\n", "  (define (minPath-helper grid k)\n    (cond\n \
    \     [(empty? grid) (error \"empty grid\")]\n      [(empty? (first grid)) (error\
    \ \"empty grid\")]\n      [(= k 0) (list (first (first grid)))]\n      [(= k 1)\
    \ (list (first (first grid)))]\n      [else\n       (let* ([n (length grid)]\n\
    \              [m (length (first grid))]\n              [min-path (list (first\
    \ (first grid)))]\n              [min-value (first (first grid))])\n         (for\
    \ ([i (in-range n)])\n           (for ([j (in-range m)])\n             (let* ([path\
    \ (minPath-helper (remove-row i grid) (- k 1))]\n                    [value (first\
    \ path)])\n               (if (and (< i n) (< j m))\n                   (let*\
    \ ([path-right (minPath-helper (remove-row i (remove-column j grid)) (- k 1))]\n\
    \                          [value-right (first path-right)])\n               \
    \      (if (< value-right value)\n                         (begin\n          \
    \                 (set! min-path (cons (list-ref (list-ref grid i) j) path-right))\n\
    \                           (set! min-value value-right))))\n                \
    \   (if (< value min-value)\n                       (begin\n                 \
    \        (set! min-path (cons (list-ref (list-ref grid i) j) path))\n        \
    \                 (set! min-value value))))))))\n         min-path)]))\n  (minPath-helper\
    \ grid k))\n", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k i j)\n    (cond\n      [(= k 0) (list\
    \ (list-ref (list-ref grid i) j))]\n      [(= i 0) (minPath-helper grid (- k 1)\
    \ i (+ j 1))]\n      [(= j 0) (minPath-helper grid (- k 1) (+ i 1) j)]\n     \
    \ [else (min (minPath-helper grid (- k 1) i (+ j 1))\n                 (minPath-helper\
    \ grid (- k 1) (+ i 1) j))]))\n  (minPath-helper grid k 0 0))\n", "  (define (minPath-helper\
    \ grid k row col)\n    (cond\n      [(= k 0) (list (list-ref (list-ref grid row)\
    \ col))]\n      [(and (= row 0) (= col 0))\n       (min (minPath-helper grid (-\
    \ k 1) row (+ col 1))\n            (minPath-helper grid (- k 1) (+ row 1) col))]\n\
    \      [(and (= row 0) (= col (- (length grid) 1)))\n       (min (minPath-helper\
    \ grid (- k 1) row (- col 1))\n            (minPath-helper grid (- k 1) (+ row\
    \ 1) col))]\n      [(and (= row (- (length grid) 1)) (= col 0))\n       (min (minPath-helper\
    \ grid (- k 1) row (+ col 1))\n            (minPath-helper grid (- k 1) (- row\
    \ 1) col))]\n      [(and (= row (- (length grid) 1)) (= col (- (length grid) 1)))\n\
    \       (min (minPath-helper grid (- k 1) row (- col 1))\n            (minPath-helper\
    \ grid (- k 1) (- row 1) col))]\n      [(= row 0)\n       (min (minPath-helper\
    \ grid (- k 1) row (+ col 1))\n            (min (minPath-helper grid (- k 1) row\
    \ (- col 1))\n                 (minPath-helper grid (- k 1) (+ row 1) col)))]\n\
    \      [(= col 0)\n       (min (minPath-helper grid (- k 1) row (+ col 1))\n \
    \           (min (minPath-helper grid (- k 1) row (- col 1))\n               \
    \  (minPath-helper grid (- k 1) (- row 1) col)))]\n      [(= row (- (length grid)\
    \ 1))\n       (min (minPath-helper grid (- k 1) row (+ col 1))\n            (min\
    \ (minPath-helper grid (- k 1) row (- col 1))\n                 (minPath-helper\
    \ grid (- k 1) (- row 1) col)))]\n      [(= col (- (length grid) 1))\n       (min\
    \ (minPath-helper grid (- k 1) row (+ col 1))\n            (min", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath' grid k)\n    (define (minPath'' grid k)\n    \
    \  (define (minPath''' grid k)\n        (define (minPath'''' grid k)\n       \
    \   (define (minPath''''' grid k)\n            (define (minPath'''''' grid k)\n\
    \              (define (minPath''''''' grid k)\n                (define (minPath''''''''\
    \ grid k)\n                  (define (minPath''''''''' grid k)\n             \
    \       (define (minPath'''''''''' grid k)\n                      (define (minPath'''''''''''\
    \ grid k)\n                        (define (minPath'''''''''''' grid k)\n    \
    \                      (define (minPath''''''''''''' grid k)\n               \
    \             (define (minPath'''''''''''''' grid k)\n                       \
    \       (define (minPath''''''''''''''' grid k)\n                            \
    \    (define (minPath'''''''''''''''' grid k)\n                              \
    \    (define (minPath''''''''''''''''' grid k)\n                             \
    \       (define (minPath'''''''''''''''''' grid k)\n                         \
    \             (define (minPath''''''''''''''''''' grid k)\n                  \
    \                      (define (minPath'''''''''''''''''''' grid k)\n        \
    \                                  (define (minPath''''''''''''''''''''' grid\
    \ k)\n                                            (define (minPath''''''''''''''''''''''\
    \ grid k)\n                                              (define (minPath'''''''''''''''''''''''\
    \ grid k)\n                                                (define (minPath''''''''''''''''''''''''\
    \ grid k)\n                                                  (define (minPath'''''''''''''''''''''''''\
    \ grid k)\n                                                    (define (minPath''''''''''''''''''''''''''\
    \ grid k)\n                                                      (define (minPath'''''''''''''''''''''''''''\
    \ grid k)\n                                                        (define (minPath''''''''''''''''''''''''''''\
    \ grid k)\n                                                          (define (minPath'''''''''''''''''''''''''''''\
    \ grid k)\n                                                            (define\
    \ (minPath'''''''''''''''''''''''''''''' grid k)\n                           \
    \                                   (define (minPath'''''''''''''''''''''''''''''''\
    \ grid k)\n                                                                (define\
    \ (minPath'''''''''''''''''''''''''''''''' grid k)\n                         \
    \                       ", "  (define (minPath-helper grid k)\n    (cond\n   \
    \   [(= k 0) (list (car (car grid)))]\n      [(= k 1) (list (car (car grid)) (car\
    \ (cdr (car grid))) (car (cdr (cdr (car grid)))) (car (car (cdr grid))) (car (cdr\
    \ (cdr (cdr grid)))) (car (car (cdr (cdr grid)))) (car (cdr (car (cdr grid))))\
    \ (car (cdr (cdr (car (cdr grid))))) (car (cdr (cdr (cdr (cdr grid))))))]\n  \
    \    [else (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car grid))))\
    \ (car (car (cdr grid))) (car (cdr (cdr (cdr grid)))) (car (car (cdr (cdr grid))))\
    \ (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid))))) (car (cdr (cdr\
    \ (cdr (cdr grid))))))]))\n  (minPath-helper grid k))\n", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (get-neighbors grid x y)\n    (define (get-neighbor-value\
    \ grid x y)\n      (if (and (>= x 0) (>= y 0) (< x (length grid)) (< y (length\
    \ (car grid))))\n          (list-ref (list-ref grid x) y)\n          #f))\n  \
    \  (define (get-neighbor-values grid x y)\n      (filter (lambda (x) (not (eq?\
    \ x #f)))\n              (map (lambda (xy) (get-neighbor-value grid (car xy) (cdr\
    \ xy)))\n                   (list (cons x (add1 y))\n                        \
    \ (cons x (sub1 y))\n                         (cons (add1 x) y)\n            \
    \             (cons (sub1 x) y)))))\n    (get-neighbor-values grid x y))\n  (define\
    \ (get-min-path grid x y k)\n    (if (eq? k 0)\n        (list (list-ref (list-ref\
    \ grid x) y))\n        (let* ((neighbors (get-neighbors grid x y))\n         \
    \      (paths (map (lambda (n) (get-min-path grid (car n) (cdr n) (sub1 k)))\n\
    \                           (filter (lambda (n) (not (eq? n #f)))\n          \
    \                         (map (lambda (n) (list-index-of n grid))\n         \
    \                               neighbors)))))\n          (if (null? paths)\n\
    \              #f\n              (let ((min-path (car paths)))\n             \
    \   (for ((path (cdr paths)))\n                  (if (lexicographic-less? (car\
    \ path) (car min-path))\n                      (set! min-path path)))\n      \
    \          (cons (list-ref (list-ref grid x) y) min-path))))))\n  (get-min-path\
    \ grid 0 0 k))\n", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (get-neighbors i j)\n    (define (get-neighbor-if-valid\
    \ i j)\n      (if (and (<= 0 i (- (length grid) 1)) (<= 0 j (- (length (car grid))\
    \ 1)))\n          (list (list i j))\n          '()))\n    (append (get-neighbor-if-valid\
    \ (- i 1) j)\n            (get-neighbor-if-valid (+ i 1) j)\n            (get-neighbor-if-valid\
    \ i (- j 1))\n            (get-neighbor-if-valid i (+ j 1))))\n  (define (get-paths\
    \ i j k)\n    (if (= k 0)\n        (list (list (list-ref (list-ref grid i) j)))\n\
    \        (for/list ([neighbor (in-list (get-neighbors i j))])\n          (for/list\
    \ ([path (in-list (get-paths (car neighbor) (cadr neighbor) (- k 1)))])\n    \
    \        (cons (list-ref (list-ref grid i) j) path)))))\n  (define (get-min-path\
    \ paths)\n    (if (= (length paths) 1)\n        (car paths)\n        (let ([min-path\
    \ (car paths)])\n          (for ([path (in-list (cdr paths))])\n            (if\
    \ (for/and ([i (in-range (length min-path))])\n                         (and (<\
    \ (list-ref min-path i) (list-ref path i))\n                              (= (list-ref\
    \ min-path i) (list-ref path i))))\n                (set! min-path path)))\n \
    \         min-path)))\n  (get-min-path (apply append (for/list ([i (in-range (length\
    \ grid))])\n                                        (for/list ([j (in-range (length\
    \ (car grid)))])\n                                          (get-paths i j k))))))\n",
  "  (define (minPath-helper grid k)\n    (cond\n      [(= k 0) (list (car (car grid)))]\n\
    \      [(= k 1) (list (car (car grid)) (car (cdr (car grid))) (car (cdr (cdr (car\
    \ grid)))) (car (car (cdr grid))) (car (cdr (cdr (cdr grid)))) (car (car (cdr\
    \ (cdr grid)))) (car (cdr (car (cdr grid)))) (car (cdr (cdr (car (cdr grid)))))\
    \ (car (cdr (cdr (cdr (cdr grid))))))]\n      [else (min (minPath-helper grid\
    \ (- k 1)) (minPath-helper grid (- k 2)))]))\n  (minPath-helper grid k))\n", " \
    \ (define (minPath-helper grid k)\n    (define (minPath-helper-helper grid k)\n\
    \      (define (minPath-helper-helper-helper grid k)\n        (define (minPath-helper-helper-helper-helper\
    \ grid k)\n          (define (minPath-helper-helper-helper-helper-helper grid\
    \ k)\n            (define (minPath-helper-helper-helper-helper-helper-helper grid\
    \ k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (letrec ([grid-size (length grid)]\n           [grid-size-1 (- grid-size\
    \ 1)]\n           [grid-size-2 (- grid-size 2)]\n           [grid-size-3 (- grid-size\
    \ 3)]\n           [grid-size-4 (- grid-size 4)]\n           [grid-size-5 (- grid-size\
    \ 5)]\n           [grid-size-6 (- grid-size 6)]\n           [grid-size-7 (- grid-size\
    \ 7)]\n           [grid-size-8 (- grid-size 8)]\n           [grid-size-9 (- grid-size\
    \ 9)]\n           [grid-size-10 (- grid-size 10)]\n           [grid-size-11 (-\
    \ grid-size 11)]\n           [grid-size-12 (- grid-size 12)]\n           [grid-size-13\
    \ (- grid-size 13)]\n           [grid-size-14 (- grid-size 14)]\n           [grid-size-15\
    \ (- grid-size 15)]\n           [grid-size-16 (- grid-size 16)]\n           [grid-size-17\
    \ (- grid-size 17)]\n           [grid-size-18 (- grid-size 18)]\n           [grid-size-19\
    \ (- grid-size 19)]\n           [grid-size-20 (- grid-size 20)]\n           [grid-size-21\
    \ (- grid-size 21)]\n           [grid-size-22 (- grid-size 22)]\n           [grid-size-23\
    \ (- grid-size 23)]\n           [grid-size-24 (- grid-size 24)]\n           [grid-size-25\
    \ (- grid-size 25)]\n           [grid-size-26 (- grid-size 26)]\n           [grid-size-27\
    \ (- grid-size 27)]\n           [grid-size-28 (- grid-size 28)]\n           [grid-size-29\
    \ (- grid-size 29)]\n           [grid-size-30 (- grid-size 30)]\n           [grid-size-31\
    \ (- grid-size 31)]\n           [grid-size-32 (- grid-size 32)]\n           [grid-size-33\
    \ (- grid-size 33)]\n           [grid-size-34 (- grid-size 34)]\n           [grid-size-35\
    \ (- grid-size 35)]\n           [grid-size-36 (-", "  (define (minPath-helper\
    \ grid k)\n    (if (= k 1)\n        (list (car (car grid)))\n        (let* ([min-path\
    \ (minPath-helper grid (- k 1))]\n               [min-path-value (car min-path)]\n\
    \               [min-path-row (car (find-row grid min-path-value))]\n        \
    \       [min-path-col (car (find-col grid min-path-value))])\n          (let ([min-path-neighbors\
    \ (list (list-ref grid (- min-path-row 1) min-path-col)\n                    \
    \                      (list-ref grid (+ min-path-row 1) min-path-col)\n     \
    \                                     (list-ref grid min-path-row (- min-path-col\
    \ 1))\n                                          (list-ref grid min-path-row (+\
    \ min-path-col 1)))])\n            (let ([min-path-neighbors-filtered (filter\
    \ (lambda (x) (not (eq? x #f))) min-path-neighbors)])\n              (if (null?\
    \ min-path-neighbors-filtered)\n                  min-path\n                 \
    \ (let ([min-path-neighbors-filtered-sorted (sort min-path-neighbors-filtered\
    \ <)])\n                    (cons (car min-path-neighbors-filtered-sorted) min-path)))))))))\n\
    \  (minPath-helper grid k))\n", "  (define (minPath-helper grid k)\n    (define\
    \ (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (get-neighbors grid\
    \ i j)\n      (define (get-neighbors-helper grid i j neighbors)\n        (cond\n\
    \          [(and (>= i 0) (>= j 0) (< i (length grid) (< j (length (grid 0)))))\n\
    \           (get-neighbors-helper grid i j (cons (list i j) neighbors))]\n   \
    \       [else neighbors]))\n      (get-neighbors-helper grid i j (list)))\n  \
    \  (define (get-neighbors-values grid i j)\n      (map (lambda (coord) (list-ref\
    \ (list-ref grid (car coord)) (cadr coord)))\n           (get-neighbors grid i\
    \ j)))\n    (define (get-min-path grid i j k)\n      (cond\n        [(= k 0) (list\
    \ (list-ref (list-ref grid i) j))]\n        [else (let* ([neighbors (get-neighbors-values\
    \ grid i j)]\n                     [min-path (apply min neighbors)]\n        \
    \             [min-path-coord (list-ref (get-neighbors grid i j) (index min-path\
    \ neighbors))])\n                (cons (list-ref (list-ref grid i) j) (get-min-path\
    \ grid (car min-path-coord) (cadr min-path-coord) (- k 1))))]))\n    (let* ([min-path\
    \ (apply min (map (lambda (row) (apply min row)) grid))]\n           [min-path-coord\
    \ (list-ref (list-ref (map (lambda (row) (index min-path row)) grid) (index min-path\
    \ (map (lambda (row) (apply min row)) grid))) (index min-path (list-ref (map (lambda\
    \ (row) (index min-path row)) grid) (index min-path (map (lambda (row) (apply\
    \ min row)) grid)))))]\n           [min-path-values (get-min-path grid (car min-path-coord)\
    \ (cadr min-path-coord) k)])\n      min-path-values))\n  (minPath-helper grid\
    \ k))\n", "  (letrec ([grid-size (length grid)]\n           [grid-size-1 (- grid-size\
    \ 1)]\n           [grid-size-2 (- grid-size 2)]\n           [grid-size-3 (- grid-size\
    \ 3)]\n           [grid-size-4 (- grid-size 4)]\n           [grid-size-5 (- grid-size\
    \ 5)]\n           [grid-size-6 (- grid-size 6)]\n           [grid-size-7 (- grid-size\
    \ 7)]\n           [grid-size-8 (- grid-size 8)]\n           [grid-size-9 (- grid-size\
    \ 9)]\n           [grid-size-10 (- grid-size 10)]\n           [grid-size-11 (-\
    \ grid-size 11)]\n           [grid-size-12 (- grid-size 12)]\n           [grid-size-13\
    \ (- grid-size 13)]\n           [grid-size-14 (- grid-size 14)]\n           [grid-size-15\
    \ (- grid-size 15)]\n           [grid-size-16 (- grid-size 16)]\n           [grid-size-17\
    \ (- grid-size 17)]\n           [grid-size-18 (- grid-size 18)]\n           [grid-size-19\
    \ (- grid-size 19)]\n           [grid-size-20 (- grid-size 20)]\n           [grid-size-21\
    \ (- grid-size 21)]\n           [grid-size-22 (- grid-size 22)]\n           [grid-size-23\
    \ (- grid-size 23)]\n           [grid-size-24 (- grid-size 24)]\n           [grid-size-25\
    \ (- grid-size 25)]\n           [grid-size-26 (- grid-size 26)]\n           [grid-size-27\
    \ (- grid-size 27)]\n           [grid-size-28 (- grid-size 28)]\n           [grid-size-29\
    \ (- grid-size 29)]\n           [grid-size-30 (- grid-size 30)]\n           [grid-size-31\
    \ (- grid-size 31)]\n           [grid-size-32 (- grid-size 32)]\n           [grid-size-33\
    \ (- grid-size 33)]\n           [grid-size-34 (- grid-size 34)]\n           [grid-size-35\
    \ (- grid-size 35)]\n           [grid-size-36 (-", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k row col)\n      (cond\n \
    \       [(= k 0) (list (list-ref (list-ref grid row) col))]\n        [(= row 0)\
    \ (minPath-helper-helper grid (- k 1) row (+ col 1))]\n        [(= col 0) (minPath-helper-helper\
    \ grid (- k 1) (+ row 1) col)]\n        [else\n         (let*\n             ([left\
    \ (minPath-helper-helper grid (- k 1) row (+ col 1))]\n              [right (minPath-helper-helper\
    \ grid (- k 1) (+ row 1) col)]\n              [down (minPath-helper-helper grid\
    \ (- k 1) (+ row 1) (+ col 1))])\n           (cond\n             [(< (list-ref\
    \ (list-ref grid row) col) (list-ref (list-ref grid row) col)) left]\n       \
    \      [(< (list-ref (list-ref grid row) col) (list-ref (list-ref grid row) col))\
    \ right]\n             [else down]))]))\n    (minPath-helper-helper grid k 0 0))\n\
    \  (minPath-helper grid k))\n", "  (define (minPath-helper grid k)\n    (define\
    \ (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k path)\n    (cond\n      [(zero? k)\
    \ (reverse path)]\n      [(empty? grid) '()]\n      [else (let ([paths (for/list\
    \ ([row (in-list grid)])\n                          (for/list ([col (in-list row)])\n\
    \                            (minPath-helper (remove-row grid row) (- k 1) (cons\
    \ col path))))])\n               (apply min (for/list ([path (in-list paths)])\n\
    \                           (apply min (for/list ([path2 (in-list paths)])\n \
    \                                      (if (equal? path path2) '()\n         \
    \                                  (if (lexicographic-compare? path path2) path2\
    \ path)))))))]))\n  (minPath-helper grid k '()))\n", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (get-neighbors grid x y)\n    (define (get-neighbor-coords\
    \ x y)\n      (define (get-neighbor-coord x y)\n        (cond ((= x 0) (list x\
    \ (+ y 1)))\n              ((= x (- (length grid) 1)) (list x (- y 1)))\n    \
    \          ((= y 0) (list (+ x 1) y))\n              ((= y (- (length grid) 1))\
    \ (list (- x 1) y))\n              (else (list (+ x 1) y) (list (- x 1) y) (list\
    \ x (+ y 1)) (list x (- y 1)))))\n      (filter (lambda (coord)\n            \
    \    (and (<= 0 (car coord)) (<= (car coord) (- (length grid) 1))\n          \
    \           (<= 0 (cadr coord)) (<= (cadr coord) (- (length grid) 1))))\n    \
    \          (get-neighbor-coord x y)))\n    (map (lambda (coord) (list (car coord)\
    \ (cadr coord) (list-ref (list-ref grid (car coord)) (cadr coord))))\n       \
    \  (get-neighbor-coords x y)))\n  (define (get-min-path grid k)\n    (define (get-min-path-helper\
    \ grid k x y)\n      (cond ((= k 0) (list (list-ref (list-ref grid x) y)))\n \
    \           ((= k 1) (map (lambda (neighbor) (cons (list-ref (list-ref grid x)\
    \ y) (caddr neighbor)))\n                          (get-neighbors grid x y)))\n\
    \            (else (map (lambda (neighbor) (cons (list-ref (list-ref grid x) y)\
    \ (get-min-path-helper grid (- k 1) (car neighbor) (cadr neighbor))))\n      \
    \                 (get-neighbors grid x y)))))\n    (define (get-min-path-helper-2\
    \ paths)\n      (cond ((null? (cdr paths)) (car paths))\n            ((< (car\
    \ paths) (cadr paths)) (get-min-path-helper-2 (cons (car paths) (cddr paths))))\n\
    \            (", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath' grid k)\n    (cond\n      [(= k 1) (list (car\
    \ (car grid)))]\n      [(= k 2) (minPath2 grid)]\n      [else (minPath3 grid k)]))\n\
    \  (minPath' grid k))\n", "  (define (minPath-helper grid k)\n    (define (get-neighbors\
    \ grid x y)\n      (define (get-neighbors-helper grid x y neighbors)\n       \
    \ (cond\n          [(and (< x (length grid)) (< y (length (car grid))))\n    \
    \       (get-neighbors-helper grid (+ x 1) y (cons (list x y) neighbors))]\n \
    \         [(and (< x (length grid)) (> y 0))\n           (get-neighbors-helper\
    \ grid (+ x 1) (- y 1) (cons (list x y) neighbors))]\n          [(and (> x 0)\
    \ (< y (length (car grid))))\n           (get-neighbors-helper grid (- x 1) (+\
    \ y 1) (cons (list x y) neighbors))]\n          [(and (> x 0) (> y 0))\n     \
    \      (get-neighbors-helper grid (- x 1) (- y 1) (cons (list x y) neighbors))]\n\
    \          [else neighbors]))\n      (get-neighbors-helper grid 0 0 '()))\n  \
    \  (define (get-min-path grid k x y)\n      (cond\n        [(= k 0) '()]\n   \
    \     [(= k 1) (list (list-ref (list-ref grid x) y))]\n        [else\n       \
    \  (let* ([neighbors (get-neighbors grid x y)]\n                [min-path (apply\
    \ min (map (lambda (n) (get-min-path grid (- k 1) (car n) (cadr n))) neighbors))]\n\
    \                [min-path-value (list-ref (list-ref grid x) y)])\n          \
    \ (cons min-path-value min-path))]))\n    (get-min-path grid k 0 0))\n  (minPath-helper\
    \ grid k))\n", "  (define (minPath-helper grid k)\n    (if (zero? k)\n       \
    \ (list (car (car grid)))\n        (let* ([n (length grid)]\n               [m\
    \ (length (car grid))]\n               [min-path (make-vector n (make-vector m\
    \ (list +inf.0)))]\n               [min-path-value (make-vector n (make-vector\
    \ m +inf.0))])\n          (for ([i (in-range n)])\n            (for ([j (in-range\
    \ m)])\n              (let* ([value (list-ref (list-ref grid i) j)]\n        \
    \             [neighbors (list (list (- i 1) j) (list i (- j 1)) (list (+ i 1)\
    \ j) (list i (+ j 1))])])\n                (for ([neighbor neighbors])\n     \
    \             (let* ([i-neighbor (list-ref neighbor 0)]\n                    \
    \     [j-neighbor (list-ref neighbor 1)])\n                    (when (and (and\
    \ (<= 0 i-neighbor (- n 1)) (<= 0 j-neighbor (- m 1)))\n                     \
    \          (< (vector-ref (vector-ref min-path-value i-neighbor) j-neighbor)\n\
    \                                  (vector-ref (vector-ref min-path-value i) j)))\n\
    \                      (vector-set! (vector-ref min-path i) j\n              \
    \                     (append (vector-ref (vector-ref min-path i-neighbor) j-neighbor)\n\
    \                                           (list value)))\n                 \
    \     (vector-set! (vector-ref min-path-value i) j\n                         \
    \          (+ (vector-ref (vector-ref min-path-value i-neighbor) j-neighbor)\n\
    \                                      value)))))))\n          (let* ([min-path-value-min\
    \ +inf.0]\n                 [min-path-min (list +inf.0)])\n            (for ([i\
    \ (in-range n)])\n              (for ([j (in-range m)])\n                (when\
    \ (< (vector-ref (vector-ref min-path-value i) j) min-path-value-min)\n      \
    \           ", "  (define (minPath-helper grid k)\n    (define (get-neighbors\
    \ grid x y)\n      (define (get-neighbors-helper grid x y acc)\n        (cond\n\
    \          [(and (< x 0) (< y 0) (< (- x) (length grid)) (< (- y) (length (car\
    \ grid))))\n           (append acc (list (list x y)))]\n          [(and (< x 0)\
    \ (< y 0) (< (- x) (length grid)) (>= (- y) (length (car grid))))\n          \
    \ acc]\n          [(and (< x 0) (>= y 0) (< (- x) (length grid)) (< (- y) (length\
    \ (car grid))))\n           (append acc (list (list x y)))]\n          [(and (<\
    \ x 0) (>= y 0) (< (- x) (length grid)) (>= (- y) (length (car grid))))\n    \
    \       acc]\n          [(and (>= x 0) (< y 0) (< (- x) (length grid)) (< (- y)\
    \ (length (car grid))))\n           (append acc (list (list x y)))]\n        \
    \  [(and (>= x 0) (< y 0) (< (- x) (length grid)) (>= (- y) (length (car grid))))\n\
    \           acc]\n          [(and (>= x 0) (>= y 0) (< (- x) (length grid)) (<\
    \ (- y) (length (car grid))))\n           (append acc (list (list x y)))]\n  \
    \        [(and (>= x 0) (>= y 0) (< (- x) (length grid)) (>= (- y) (length (car\
    \ grid))))\n           acc]\n          [(and (< x 0) (< y 0) (>= (- x) (length\
    \ grid)) (< (- y) (length (car grid))))\n           acc]\n          [(and (< x\
    \ 0) (< y 0) (>= (- x) (length grid)) (>= (- y) (length (car grid))))\n      \
    \     acc]\n          [(and (< x 0) (>= y 0) (>= (- x) (length grid)) (< (- y)\
    \ (length (car grid))))\n           acc]\n          [(and (< x 0) (>= y 0) (>=\
    \ (- x) (length grid)) (>= (- y) (length (car grid))))\n           acc", "  (define\
    \ (minPath-helper grid k path)\n    (if (= k 0)\n        (reverse path)\n    \
    \    (let ([min-path (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list", "  (define (minPath-helper grid\
    \ k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (define (minPath-helper-helper\
    \ grid k)\n      (define (minPath-helper-helper-helper grid k)\n        (define\
    \ (minPath-helper-helper-helper-helper grid k)\n          (define (minPath-helper-helper-helper-helper-helper\
    \ grid k)\n            (define (minPath-helper-helper-helper-helper-helper-helper\
    \ grid k)\n              (define (minPath-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (get-neighbors grid x y)\n    (define (get-neighbor grid\
    \ x y dx dy)\n      (if (and (< 0 (+ x dx)) (< (+ x dx) (length grid))\n     \
    \          (< 0 (+ y dy)) (< (+ y dy) (length (car grid))))\n          (list (+\
    \ x dx) (+ y dy))\n          '()))\n    (append (get-neighbor grid x y -1 0)\n\
    \            (get-neighbor grid x y 1 0)\n            (get-neighbor grid x y 0\
    \ -1)\n            (get-neighbor grid x y 0 1)))\n  (define (get-path grid x y\
    \ k)\n    (if (zero? k)\n        (list (list-ref (list-ref grid y) x))\n     \
    \   (for/list ([(x1 y1) (in-list (get-neighbors grid x y))])\n          (get-path\
    \ grid x1 y1 (- k 1)))))\n  (define (get-paths grid k)\n    (for/list ([y (in-range\
    \ (length grid))])\n      (for/list ([x (in-range (length (car grid)))])\n   \
    \     (get-path grid x y k))))\n  (define (get-path-value path)\n    (for/list\
    \ ([(x y) (in-list path)])\n      (list-ref (list-ref grid y) x)))\n  (define\
    \ (get-paths-values paths)\n    (for/list ([path (in-list paths)])\n      (get-path-value\
    \ path)))\n  (define (get-min-path-value paths)\n    (apply min (get-paths-values\
    \ paths)))\n  (define (get-min-path paths)\n    (for/list ([path (in-list paths)]\n\
    \               #:when (equal? (get-min-path-value paths) (get-path-value path)))\n\
    \      path))\n  (get-min-path (get-paths grid k)))\n", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (if (equal? k 0)\n        (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (list (list (list (list (list\
    \ (list (list (list (list (list (list (list (list (", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k", "  (define (minPath-helper grid k)\n    (cond ((= k 0) (list (car (car\
    \ grid))))\n          ((= k 1) (list (car (car grid))))\n          (else (let\
    \ ((min-path (list (car (car grid)))))\n                  (for ((row (in-list\
    \ (cdr grid)))\n                        (col (in-list (car grid))))\n        \
    \            (let ((path (minPath-helper (cdr grid) (- k 1))))\n             \
    \         (if (and (not (null? path))\n                               (or (null?\
    \ min-path)\n                                   (lexicographic-less? path min-path)))\n\
    \                          (set! min-path path))))\n                  (cons (car\
    \ (car grid)) min-path)))))\n  (minPath-helper grid k))\n", "  (define (minPath-helper\
    \ grid k)\n    (define (minPath-helper-helper grid k)\n      (define (minPath-helper-helper-helper\
    \ grid k)\n        (define (minPath-helper-helper-helper-helper grid k)\n    \
    \      (define (minPath-helper-helper-helper-helper-helper grid k)\n         \
    \   (define (minPath-helper-helper-helper-helper-helper-helper grid k)\n     \
    \         (define (minPath-helper-helper-helper-helper-helper-helper-helper grid\
    \ k)\n                (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                  (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                    (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                      (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                        (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                          (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                            (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k)\n                              (define (minPath-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ grid k"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
