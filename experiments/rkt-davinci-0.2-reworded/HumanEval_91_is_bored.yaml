name: HumanEval_91_is_bored
language: rkt
prompt: "#lang racket\n\n;; You'll be given a string of words, and your task is to\
  \ count the number\n;; of boredoms. A boredom is a sentence that starts with the\
  \ word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
  ;; >>> (is_bored \"Hello world\")\n;; 0\n;; >>> (is_bored \"The sky is blue. The\
  \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(string=? S \"\") 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (count (lambda (x) (string=? (first (string-split x)) \"I\"))\n\
    \         (string-split S \"[.?!]\")))\n", "  (cond\n    [(string=? S \"\") 0]\n\
    \    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n   \
    \ [else (is_bored (substring S 1))]))\n", "  (count-if (lambda (x) (string=? (string-trim\
    \ x) \"I\"))\n            (regexp-split #rx\"\\.|\\?|!\" S)))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (count (lambda (x) (string=? x \"I\")) (string-split S #\\\
    .)))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (length (filter (lambda (x) (string=? (string-take\
    \ x 1) \"I\"))\n                  (regexp-split #rx\"\\.|\\?|!\" S))))\n", " \
    \ (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (split-string\
    \ S \"[.?!]\")))\n", "  (count-if (lambda (s) (string=? \"I\" (string-trim s)))\n\
    \            (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (string=?\
    \ (first (string-split x)) \"I\"))\n         (string-split S \"\\\\.|\\\\?|!\"\
    )))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \"\
    ) (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (define (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=?\
    \ (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper\
    \ (rest S))]))\n  (is_bored-helper (string-split S #\\.)))\n", "  (length (filter\
    \ (lambda (x) (string=? (string-take x 1) \"I\"))\n                  (regexp-split\
    \ #rx\"[.?!]\" S))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (length (regexp-match #rx\"I\" S)))\n", "  (define\
    \ (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n", "  (cond [(empty? S)\
    \ 0]\n        [else (if (string=? (first (string-split S)) \"I\")\n          \
    \       (+ 1 (is_bored (rest (string-split S))))\n                 (is_bored (rest\
    \ (string-split S))))]))\n", "  (cond [(empty? S) 0]\n        [else (if (string=?\
    \ (first S) \"I\")\n                 (+ 1 (is_bored (rest S)))\n             \
    \    (is_bored (rest S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n",
  "  (let ([words (string-split S #\\space)])\n    (cond\n      [(empty? words) 0]\n\
    \      [(string=? (first words) \"I\") (add1 (is_bored (string-join (rest words)\
    \ #\\space)))]\n      [else (is_bored (string-join (rest words) #\\space))])))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond [(empty? S) 0]\n        [else (cond\
    \ [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n                   \
    \ [else (is_bored (rest S))])]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (define (is_bored-helper S n)\n    (cond\n\
    \      [(empty? S) n]\n      [(string=? (first S) \"I\") (is_bored-helper (rest\
    \ S) (+ n 1))]\n      [else (is_bored-helper (rest S) n)]))\n  (is_bored-helper\
    \ (string-split S #\\.) 0))\n", "  (define (is-bored-helper S)\n    (cond\n  \
    \    [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1 (is-bored-helper (rest\
    \ S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split\
    \ S #\\.)))\n", "  (count (lambda (x) (string=? x \"I\")) (split-string S \"\\\
    \\.|\\\\?|!\")))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n\
    \         (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (define (is_bored-iter\
    \ S N)\n    (cond\n      [(empty? S) N]\n      [(string=? (first S) \"I\") (is_bored-iter\
    \ (rest S) (+ N 1))]\n      [else (is_bored-iter (rest S) N)]))\n  (is_bored-iter\
    \ (string-split S #\\.) 0))\n", "  (count (lambda (x) (string=? (substring x 0\
    \ 1) \"I\"))\n         (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\\.|\\?|!\" S)))\n",
  "  (let ([words (string-split S #\\space)])\n    (length (filter (lambda (w) (string=?\
    \ w \"I\")) words))))\n", "  (let ((words (string-split S #\\space)))\n    (length\
    \ (filter (lambda (x) (string=? x \"I\")) words))))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (count-if (lambda (x) (string=? (string-trim x)\
    \ \"I\"))\n            (string-split (string-trim S) #rx\"[.?!]\")))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n", "  (count-matches \"\
    I\" (split-string S \"[.?!]\")))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond [(empty? S) 0]\n        [else (if (string=?\
    \ (string-take S 1) \"I\")\n                 (+ 1 (is_bored (string-drop S 1)))\n\
    \                 (is_bored (string-drop S 1)))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (and\
    \ (equal? (first x) \"I\") (not (equal? (second x) \"am\"))))\n         (split-string\
    \ S \"[.?!]\")))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S\
    \ 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (length (filter\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n                  (regexp-split\
    \ #rx\"[.?!]\" S))))\n", "  (define (is_bored-iter S count)\n    (cond\n     \
    \ [(empty? S) count]\n      [(equal? (first S) \"I\") (is_bored-iter (rest S)\
    \ (+ count 1))]\n      [else (is_bored-iter (rest S) count)]))\n  (is_bored-iter\
    \ (string-split S) 0))\n", "  (count-if (lambda (x) (string=? (string-trim x)\
    \ \"I\"))\n            (regexp-split #rx\"\\.|\\?|!\" S)))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\\\\.|\\\
    \\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (length (filter\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n                  (regexp-split\
    \ #rx\"[.?!]\" S))))\n", "  (count-if (lambda (x) (equal? (string-upcase (substring\
    \ x 0 1)) \"I\"))\n            (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\\.|\\\
    ?|!\" S)))\n", "  (count (lambda (x) (string=? x \"I\")) (split-string S \"[.?!]\"\
    )))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \"\
    ) (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (define (is_bored-helper S)\n    (cond\n      [(string=? S \"\") 0]\n      [(string=?\
    \ (substring S 0 1) \"I\") (+ 1 (is_bored-helper (substring S 1)))]\n      [else\
    \ (is_bored-helper (substring S 1))]))\n  (is_bored-helper S))\n", "  (count-if\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n            (regexp-split #rx\"\
    \\\\.|\\\\?|!\" S)))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"\
    I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n  \
    \  [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (if (string=? S \"\")\n      0\n      (if (string-prefix?\
    \ \"I\" (string-trim S))\n          (+ 1 (is_bored (string-trim (string-drop S\
    \ 1))))\n          (is_bored (string-trim (string-drop S 1))))))\n", "  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (split-string S \"\
    [.?!]\")))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? \"I\" (first (string-split S #\\space)))\n  \
    \   (+ 1 (is_bored (string-trim (string-split S #\\.))))]\n    [else (is_bored\
    \ (string-trim (string-split S #\\.)))]))\n", "  (define (is_bored-helper S)\n\
    \    (cond\n      [(empty? S) 0]\n      [(equal? (first S) \"I\") (+ 1 (is_bored-helper\
    \ (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split\
    \ S #\\.)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\")\
    \ (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (count-boredoms\
    \ (string-split S #\\.)\n                  0))\n", "  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (define (is_bored_helper S)\n    (if (empty? S)\n        0\n\
    \        (if (string=? (first S) \"I\")\n            (+ 1 (is_bored_helper (rest\
    \ S)))\n            (is_bored_helper (rest S)))))\n  (is_bored_helper (string-split\
    \ S #\\.)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (count (lambda (x) (and (equal? (first x) \"I\") (not (equal?\
    \ (second x) \"am\"))))\n         (split-string S \"[.?!]\")))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (length (filter (lambda (x) (string=?\
    \ (string-take x 1) \"I\"))\n                  (split-string S \"[.?!]\"))))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (count (lambda (x) (string=? (string-trim x) \"I\"))\n         (regexp-split\
    \ #rx\"[.!?]\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (count-matches (regexp \"I\") (string-split S #rx\"[.?!]\")))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (define (is_bored-helper\
    \ S count)\n    (cond\n      [(empty? S) count]\n      [(equal? (first S) \"I\"\
    ) (is_bored-helper (rest S) (+ count 1))]\n      [else (is_bored-helper (rest\
    \ S) count)]))\n  (is_bored-helper (string-split S #\\.) 0))\n", "  (if (string=?\
    \ S \"\")\n      0\n      (if (string-prefix? \"I\" (string-trim S))\n       \
    \   (+ 1 (is_bored (string-trim (string-drop S 1))))\n          (is_bored (string-trim\
    \ (string-drop S 1))))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? \"I\" (first (string-split\
    \ S))) (+ 1 (is_bored (rest (string-split S))))]\n    [else (is_bored (rest (string-split\
    \ S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (count (lambda (x) (string=? (substring x 0 1)\
    \ \"I\"))\n         (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I\
    \ \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n \
    \   [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (count-if (lambda (x) (string=? (substring x 0 1) \"I\"\
    ))\n            (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (define (is_bored-helper\
    \ S)\n    (cond ((null? S) 0)\n          ((string=? (car S) \"I\") (+ 1 (is_bored-helper\
    \ (cdr S))))\n          (else (is_bored-helper (cdr S)))))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n", "  (count (lambda (x) (string=? (substring x 0 1)\
    \ \"I\"))\n         (regexp-split #rx\"\\.|\\?|!\" S)))\n", "  (cond [(empty?\
    \ S) 0]\n        [else (cond [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n                    [else (is_bored (rest S))])]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (let ([words (string-split S #\\space)])\n    (if\
    \ (string=? (first words) \"I\")\n        1\n        0)))\n", "  (cond\n    [(string=?\
    \ S \"\") 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count-if (lambda (s)\
    \ (string=? (string-upcase (substring s 0 1)) \"I\"))\n            (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2 (string-length S))))]\n    [else\
    \ (is_bored (substring S 1 (string-length S)))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0\
    \ 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (define (is_bored-iter S)\n    (cond\n      [(empty? S) 0]\n\
    \      [(string=? (first S) \"I\") (+ 1 (is_bored-iter (rest S)))]\n      [else\
    \ (is_bored-iter (rest S))]))\n  (is_bored-iter (string-split S #\\.)))\n", " \
    \ (count (string-split S #rx\"[.?!]\")\n         (lambda (s) (string-prefix? \"\
    I\" (string-trim s)))))\n", "  (count (lambda (x) (string=? (substring x 0 1)\
    \ \"I\"))\n         (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (cond [(empty?\
    \ S) 0]\n        [else (if (string=? (first S) \"I\")\n                 (+ 1 (is_bored\
    \ (rest S)))\n                 (is_bored (rest S)))]))\n", "  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(equal? (first S) \"I\") (+ 1 (is-bored-helper\
    \ (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split\
    \ S #\\.)))\n", "  (count (lambda (x) (string=? (string-trim x) \"I\"))\n    \
    \     (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (count-if (lambda (x) (string=?\
    \ (string-trim (car (string-split x))) \"I\"))\n            (string-split S \"\
    [.?!]\")))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2 (string-length S))))]\n    [else (is_bored\
    \ (substring S 1 (string-length S)))]))\n", "  (cond [(empty? S) 0]\n        [else\
    \ (cond [(string=? (first S) \"I\")\n                     (+ 1 (is_bored (rest\
    \ S)))]\n                    [else (is_bored (rest S))])]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (length (filter (lambda\
    \ (x) (string=? (string-trim (first (string-split x #\\space))) \"I\"))\n    \
    \              (string-split S #\\!))))\n", "  (define (is_bored-helper S)\n \
    \   (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1 (is_bored-helper\
    \ (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split\
    \ S #\\.)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (cond [(empty? S) 0]\n        [else (if (string=? (first (string-split\
    \ S #\\.)) \"I\")\n                 (+ 1 (is_bored (string-join (rest (string-split\
    \ S #\\.)) #\\.)))\n                 (is_bored (string-join (rest (string-split\
    \ S #\\.)) #\\.)))]))\n", "  (cond\n    [(string=? S \"\") 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (count (lambda (x) (equal? (string-upcase (substring\
    \ x 0 1)) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored\
    \ (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (count-boredoms (string-split S #\\.)\n                \
    \  (string-split S #\\?)\n                  (string-split S #\\!)))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count-if (lambda (x)\
    \ (string=? (substring x 0 1) \"I\"))\n            (regexp-split #rx\"\\\\.|\\\
    \\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (let ((words\
    \ (string-split S)))\n    (count (lambda (W)\n             (and (string=? (string-take\
    \ W 1) \"I\")\n                  (not (string=? (string-take W 2) \"I \"))))\n\
    \           words)))\n", "  (count-if (lambda (x) (string=? (substring x 0 1)\
    \ \"I\"))\n            (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (define (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=?\
    \ (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper\
    \ (rest S))]))\n  (is_bored-helper (string-split S #\\.)))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (length (regexp-match #rx\"I\" S)))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (string-take S\
    \ 1) \"I\") (+ 1 (is_bored (string-drop S 1)))]\n    [else (is_bored (string-drop\
    \ S 1))]))\n", "  (cond [(empty? S) 0]\n        [else (cond [(string=? (first\
    \ (string-split S)) \"I\")\n                     (+ 1 (is_bored (string-join (rest\
    \ (string-split S)) \" \")))]\n                    [else (is_bored (string-join\
    \ (rest (string-split S)) \" \"))])]))\n", "  (count (lambda (x) (equal? (substring\
    \ x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (count-boredoms (string-split S #\\.)\n      \
    \            0))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n\
    \         (regexp-split #rx\"[.?!]\" S)))\n", "  (let ([words (string-split S\
    \ #\\space)])\n    (for/fold ([count 0]) ([word words])\n      (if (string=? word\
    \ \"I\")\n          (+ count 1)\n          count))))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (equal?\
    \ (substring x 0 1) \"I\"))\n         (split-string S \"[.?!]\")))\n", "  (cond\
    \ [(empty? S) 0]\n        [else\n         (cond [(string=? (substring S 0 2) \"\
    I \")\n                (+ 1 (is_bored (substring S 2 (string-length S))))]\n \
    \              [else (is_bored (substring S 1 (string-length S)))])]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored\
    \ (string-drop S 1)))]\n    [else (is_bored (string-drop S 1))]))\n", "  (cond\
    \ [(empty? S) 0]\n        [else (if (equal? (first S) \"I\")\n               \
    \  (+ 1 (is_bored (rest S)))\n                 (is_bored (rest S)))]))\n", " \
    \ (count-if (lambda (x) (string=? (first x) \"I\"))\n            (split-string\
    \ S \"[.?!]\")))\n", "  (define (is_bored-helper S acc)\n    (cond ((null? S)\
    \ acc)\n          ((string=? (car S) \"I\") (is_bored-helper (cdr S) (+ acc 1)))\n\
    \          (else (is_bored-helper (cdr S) acc))))\n  (is_bored-helper (string-split\
    \ S #\\.) 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? \"I\" (first S)) (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n", "  (define (is_bored-helper S n)\n    (cond\n  \
    \    [(empty? S) n]\n      [(string=? (first S) \"I\") (is_bored-helper (rest\
    \ S) (+ n 1))]\n      [else (is_bored-helper (rest S) n)]))\n  (is_bored-helper\
    \ (string-split S #\\.) 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (string-upcase\
    \ (substring S 0 1)) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (count (lambda (x) (string=? x \"I\")) (split-string S \"\\\\\
    .|\\\\?|!\")))\n", "  (if (string=? S \"\")\n      0\n      (if (string-contains\
    \ S \"I\")\n          (+ 1 (is_bored (substring S (string-index S \"I\") (string-length\
    \ S))))\n          (is_bored (substring S (string-index S \".\") (string-length\
    \ S))))))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1\
    \ (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond [(empty?\
    \ S) 0]\n        [else (cond [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n                    [else (is_bored (rest S))])]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond [(empty? S) 0]\n        [else\n\
    \         (cond [(string=? (first S) \"I\")\n                (+ 1 (is_bored (rest\
    \ S)))]\n               [else\n                (is_bored (rest S))])]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (let ([words\
    \ (string-split S #\\space)])\n    (cond\n      [(empty? words) 0]\n      [(string=?\
    \ (first words) \"I\") (+ 1 (is_bored (string-join (rest words) #\\space)))]\n\
    \      [else (is_bored (string-join (rest words) #\\space))])))\n", "  (let ([S\
    \ (string-split S #\\.)])\n    (for/fold ([boredoms 0]) ([s S])\n      (if (string-prefix?\
    \ \"I\" s)\n          (+ boredoms 1)\n          boredoms))))\n", "  (cond\n  \
    \  [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (count-if (lambda (s)\
    \ (string=? (string-trim s) \"I\"))\n            (regexp-split #rx\"\\\\.|\\\\\
    ?|!\" S)))\n", "  (count-if (lambda (x) (string=? (car x) \"I\"))\n          \
    \  (split-string S \"[.?!]\")))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(string=? (first (string-split S #\\.)) \"I\") (+ 1 (is_bored (string-split\
    \ S #\\.)))]\n    [else (is_bored (string-split S #\\.))]))\n", "  (cond [(empty?\
    \ S) 0]\n        [else (cond [(string=? (first (string-split S #\\.)) \"I\")\n\
    \                     (+ 1 (is_bored (string-join (rest (string-split S #\\.))\
    \ #\\.)))]\n                    [else (is_bored (string-join (rest (string-split\
    \ S #\\.)) #\\.))])]))\n", "  (define (split-sentences S)\n    (regexp-split #rx\"\
    \\\\.|\\\\?|!\" S))\n  (define (is-bored-sentence S)\n    (regexp-match? #rx\"\
    ^I\" S))\n  (define (count-boredoms L)\n    (if (null? L)\n        0\n       \
    \ (+ (if (is-bored-sentence (car L)) 1 0)\n           (count-boredoms (cdr L)))))\n\
    \  (count-boredoms (split-sentences S)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
