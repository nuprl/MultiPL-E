name: HumanEval_14_all_prefixes
language: rkt
results:
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (if (empty? string)\n      (list \"\"\
    )\n      (append (all_prefixes (substring string 0 (- (string-length string) 1)))\n\
    \              (list string))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxq7tpt5.rkt:17:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmxq7tpt5.rkt:18:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxq7tpt5.rkt:19:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqs7ato0r.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqs7ato0r.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hyjy9md.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hyjy9md.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_helper string prefixes)\n\
    \    (if (empty? string)\n        prefixes\n        (all_prefixes_helper (rest\
    \ string) (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_helper string (list)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xn1cnvs.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9xn1cnvs.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xn1cnvs.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk_q2eo0.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk_q2eo0.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpae12h48c.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpae12h48c.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyv0rbug8.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyv0rbug8.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (if (string=? string \"\")\n      (list\
    \ \"\")\n      (append (all_prefixes (substring string 0 (- (string-length string)\
    \ 1)))\n              (list string))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8agoyj18.rkt:17:4\n\
    actual:     '(\"\")\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8agoyj18.rkt:18:4\nactual:\
    \     '(\"\" \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\nexpected:  \
    \ '(\"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8agoyj18.rkt:19:4\n\
    actual:     '(\"\" \"W\" \"WW\" \"WWW\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfsq2iqb1.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfsq2iqb1.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefix-list)\n\
    \    (if (string=? string \"\")\n        prefix-list\n        (all_prefixes_iter\
    \ (substring string 1)\n                           (append prefix-list (list string)))))\n\
    \  (all_prefixes_iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmput9t2fn1.rkt:20:4\n\
    actual:     '(\"asdfgh\" \"sdfgh\" \"dfgh\" \"fgh\" \"gh\" \"h\")\nexpected: \
    \  '(\"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmput9t2fn1.rkt:21:4\n\
    actual:     '(\"WWW\" \"WW\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xvir2yh.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xvir2yh.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (empty? string)\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwlv4g67i.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpwlv4g67i.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpwlv4g67i.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpohauz_fu.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpohauz_fu.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw6dhi8v.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw6dhi8v.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes-iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3kqvxu4j.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3kqvxu4j.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (if (string=? string \"\")\n      (list\
    \ \"\")\n      (append (all_prefixes (substring string 0 (- (string-length string)\
    \ 1)))\n              (list string))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprpr8x4en.rkt:17:4\n\
    actual:     '(\"\")\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprpr8x4en.rkt:18:4\nactual:\
    \     '(\"\" \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\nexpected:  \
    \ '(\"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprpr8x4en.rkt:19:4\n\
    actual:     '(\"\" \"W\" \"WW\" \"WWW\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (cond [(empty? string) prefixes]\n          [else (all_prefixes_iter (rest\
    \ string) (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes_iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzanq9suk.rkt:17:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzanq9suk.rkt:18:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzanq9suk.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (helper string prefixes)\n  \
    \  (if (string=? string \"\")\n        prefixes\n        (helper (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (helper string '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp37qdrevq.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp37qdrevq.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft3_5tws.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft3_5tws.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> (all_prefixes \"abc\")\n;; (list \"a\" \"ab\" \"\
    abc\")\n(define (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n\
    \    (if (string=? string \"\")\n        prefixes\n        (all_prefixes_iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wcabt4e.rkt:19:4\n\
    actual:     '(\"h\" \"g\" \"f\" \"d\" \"s\" \"a\")\nexpected:   '(\"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wcabt4e.rkt:20:4\nactual:\
    \     '(\"W\" \"W\" \"W\")\nexpected:   '(\"W\" \"WW\" \"WWW\")\n--------------------\n"
  exit_code: 0
  status: Exception
