name: HumanEval_18_how_many_times
language: rkt
results:
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string 1) substring))\n\
    \      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpea7f23dp.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpea7f23dp.rkt:11:7\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz_tuoeg0.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpz_tuoeg0.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (cond\n\
    \    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n     (+ 1 (how_many_times (substring\
    \ string 1) substring))]\n    [else (how_many_times (substring string 1) substring)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpovcwee2r.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpovcwee2r.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpovcwee2r.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpovcwee2r.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(string=? (substring string 0 (string-length substring)) substring)\
    \ (how_many_times-iter (substring string 1) substring (+ count 1))]\n      [else\
    \ (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgrsrn1yg.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpgrsrn1yg.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpgrsrn1yg.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgrsrn1yg.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t69nw49.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp0t69nw49.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp0t69nw49.rkt:26:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t69nw49.rkt:27:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(empty? substring) count]\n      [(equal? (first string) (first\
    \ substring))\n       (how_many_times-iter (rest string) (rest substring) (+ count\
    \ 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n \
    \ (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynptou24.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpynptou24.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpynptou24.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpynptou24.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (count-substring string substring)\n    (if (string-contains string substring)\n\
    \        (+ 1 (count-substring (substring string (string-index string substring)\
    \ (string-length string)) substring))\n        0))\n  (count-substring string\
    \ substring))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n  \
    \  (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpixycw82z.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpixycw82z.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string 1) substring))\n\
    \      0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ how_many_times))\n    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal?\
    \ (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\"\
    \ \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppqaloftn.rkt:11:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmppqaloftn.rkt:11:7\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1fvep6v2.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp1fvep6v2.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjjpr51co.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpjjpr51co.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdos662l9.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpdos662l9.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxa84b20y.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpxa84b20y.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(empty? substring) count]\n      [(string=? (first string) (first\
    \ substring))\n       (how_many_times-iter (rest string) (rest substring) (+ count\
    \ 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n \
    \ (how_many_times-iter string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\"\
    \ \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal?\
    \ (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\"\
    \ \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6rer7rqa.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6rer7rqa.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyxyxyx\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6rer7rqa.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"cacacacac\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6rer7rqa.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"john doe\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times_iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times_iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times_iter (substring string 1) substring count)]))\n  (how_many_times_iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjw32bzm.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcjw32bzm.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpcjw32bzm.rkt:26:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcjw32bzm.rkt:27:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n    (check-equal?\
    \ (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n\
    \    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate\
    \ \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6sg_tzez.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp6sg_tzez.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy56n1t9b.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpy56n1t9b.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp01ex4cv1.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp01ex4cv1.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate how_many_times))\n    (check-equal? (candidate \"\" \"x\"\
    ) 0)\n    (check-equal? (candidate \"xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate\
    \ \"cacacacac\" \"cac\") 4)\n    (check-equal? (candidate \"john doe\" \"john\"\
    ) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp485cfbvp.rkt:24:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp485cfbvp.rkt:25:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp485cfbvp.rkt:26:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp485cfbvp.rkt:27:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoa6o4jnw.rkt:12:9: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpoa6o4jnw.rkt:12:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Find how many times a given substring can be found\
    \ in the original string. Count overlaping cases.\n;; >>> (how_many_times \"\"\
    \ \"a\")\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times\
    \ \"aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n  (cond\n\
    \    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n     (+ 1 (how_many_times (substring\
    \ string 1) substring))]\n    [else (how_many_times (substring string 1) substring)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
    \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"\
    xyxyxyx\" \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n\
    \    (check-equal? (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm1dx4neo.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"x\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpm1dx4neo.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: \"x\"\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpm1dx4neo.rkt:25:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: \"cac\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm1dx4neo.rkt:26:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: \"john\"\n--------------------\n"
  exit_code: 0
  status: Exception
