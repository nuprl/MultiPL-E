name: HumanEval_47_median
language: rkt
prompt: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
  \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
  (define (median l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
  \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n \
  \   (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
  \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n    \
    \  [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/\
    \ (median-helper l) 2))\n", "  (define (sort l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [else (insert (first l) (sort (rest l)))]))\n  (define (insert\
    \ x l)\n    (cond\n      [(empty? l) (list x)]\n      [(> x (first l)) (cons (first\
    \ l) (insert x (rest l)))]\n      [else (cons x l)]))\n  (define (middle l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\
    \ (middle (rest l))]))\n  (define (middle-two l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (first\
    \ l)]\n      [else (middle-two (rest l))]))\n  (cond\n    [(empty? l) 0]\n   \
    \ [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l))) (first l)]\n  \
    \  [(empty? (rest (rest (rest l)))) (/ (+ (first l) (first (rest l))) 2)]\n  \
    \  [else (/ (+ (middle-two (sort l)) (middle (sort l))) 2)]))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (define (median-helper2\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) empty]\n \
    \     [else (median-helper2 (rest l))]))\n  (define (median-helper3 l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest\
    \ (rest l))) (first (rest l))]\n      [else (median-helper3 (rest l))]))\n  (if\
    \ (empty? l)\n      empty\n      (if (empty? (rest l))\n          (first l)\n\
    \          (if (empty? (rest (rest l)))\n              (first l)\n           \
    \   (if (empty? (rest (rest (rest l))))\n                  (/ (+ (median-helper\
    \ l) (median-helper2 l)) 2)\n                  (/ (+ (median-helper l) (median-helper3\
    \ l)) 2))))))\n", "  (define (median-helper l n)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l) (- n 1))]))\n  (median-helper l (length l)))\n",
  "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first\
    \ l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond\n      [(empty? l)\
    \ (list x)]\n      [(< x (first l)) (cons x l)]\n      [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (length l)\n    (cond\n      [(empty? l) 0]\n   \
    \   [else (+ 1 (length (rest l)))]))\n  (define (nth n l)\n    (cond\n      [(=\
    \ n 0) (first l)]\n      [else (nth (- n 1) (rest l))]))\n  (define (even? n)\n\
    \    (= (remainder n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n  (define\
    \ (half n)\n    (/ n 2))\n  (define (nth-from-end n l)\n    (nth (- (length l)\
    \ n) l))\n  (cond\n    [(empty? l) 0]\n    [(even? (length l))\n     (/ (+ (nth\
    \ (half (length l)) (sort l))\n           (nth-from-end (half (length l)) (sort\
    \ l)))\n        2)]\n    [(odd? (length l))\n     (nth (half (length l)) (sort\
    \ l))]))\n", "  (define (sorted-list l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert-sorted (first l) (sorted-list (rest l)))]))\n  (define (insert-sorted\
    \ n l)\n    (cond\n      [(empty? l) (list n)]\n      [(< n (first l)) (cons n\
    \ l)]\n      [else (cons (first l) (insert-sorted n (rest l)))]))\n  (define (middle\
    \ l)\n    (if (empty? (rest l))\n        (first l)\n        (/ (+ (first l) (first\
    \ (rest l))) 2)))\n  (if (empty? l)\n      0\n      (middle (sorted-list l))))\n",
  "  (define (median-helper l n)\n    (cond\n      [(= n 1) (first l)]\n      [(=\
    \ n 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest l) (-\
    \ n 1))]))\n  (median-helper (sort l <) (length l)))\n", "  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\
    \ (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [else (median-helper (rest l))]))\n  (/ (+ (median-helper l) (median-helper\
    \ (sort < l))) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\n       (define mid\
    \ (/ (length l) 2))\n       (define (median-helper-helper l)\n         (cond\n\
    \           [(empty? l) 0]\n           [(= (length l) mid) (first l)]\n      \
    \     [else (median-helper-helper (rest l))]))\n       (median-helper-helper l)]))\n\
    \  (define (median-helper-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty?\
    \ (rest l)) (first l)]\n      [else\n       (define mid (/ (length l) 2))\n  \
    \     (define (median-helper-helper-helper l)\n         (cond\n           [(empty?\
    \ l) 0]\n           [(= (length l) mid) (first l)]\n           [else (median-helper-helper-helper\
    \ (rest l))]))\n       (median-helper-helper-helper l)]))\n  (define (median-helper-helper-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else\n       (define mid (/ (length l) 2))\n       (define (median-helper-helper-helper-helper\
    \ l)\n         (cond\n           [(empty? l) 0]\n           [(= (length l) mid)\
    \ (first l)]\n           [else (median-helper-helper-helper-helper (rest l))]))\n\
    \       (median-helper-helper-helper-helper l)]))\n  (define (median-helper-helper-helper-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else\n       (define mid (/ (length l) 2))\n       (define (median-helper-helper-helper-helper-helper\
    \ l)\n        ", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n    \
    \  [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(= (length l) 1) (first l)]\n      [(=\
    \ (length l) 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ (rest l)))]))\n  (median-helper (sort l <)))\n", "  (define (median-iter l n)\n\
    \    (if (zero? n)\n        (error \"median: empty list\")\n        (if (= n 1)\n\
    \            (car l)\n            (let ((n2 (quotient n 2)))\n              (if\
    \ (odd? n)\n                  (median-iter (cdr l) (- n 1))\n                \
    \  (let ((m1 (median-iter l n2))\n                        (m2 (median-iter (cdr\
    \ l) n2)))\n                    (/ (+ m1 m2) 2.0)))))))\n  (median-iter l (length\
    \ l)))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n   \
    \   [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n\
    \      [else (cons (first l) (insert x (rest l)))]))\n  (define (length l)\n \
    \   (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest l)))]))\n  (define\
    \ (nth l n)\n    (cond\n      [(empty? l) empty]\n      [(= n 0) (first l)]\n\
    \      [else (nth (rest l) (- n 1))]))\n  (define (half l)\n    (quotient (length\
    \ l) 2))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (average\
    \ x y)\n    (/ (+ x y) 2))\n  (cond\n    [(empty? l) empty]\n    [(even? (length\
    \ l))\n     (average (nth (sort-list l) (half l))\n              (nth (sort-list\
    \ l) (- (half l) 1)))]\n    [else (nth (sort-list l) (half l))]))\n", "  (define\
    \ (sort l)\n    (cond\n      [(null? l) '()]\n      [else (insert (car l) (sort\
    \ (cdr l)))]))\n  (define (insert n l)\n    (cond\n      [(null? l) (list n)]\n\
    \      [(<= n (car l)) (cons n l)]\n      [else (cons (car l) (insert n (cdr l)))]))\n\
    \  (define (length l)\n    (cond\n      [(null? l) 0]\n      [else (+ 1 (length\
    \ (cdr l)))]))\n  (define (nth n l)\n    (cond\n      [(= n 0) (car l)]\n    \
    \  [else (nth (- n 1) (cdr l))]))\n  (define (nth-from-end n l)\n    (cond\n \
    \     [(= n 0) (car l)]\n      [else (nth-from-end (- n 1) (cdr (reverse l)))]))\n\
    \  (define (reverse l)\n    (cond\n      [(null? l) '()]\n      [else (append\
    \ (reverse (cdr l)) (list (car l)))]))\n  (define (append l1 l2)\n    (cond\n\
    \      [(null? l1) l2]\n      [else (cons (car l1) (append (cdr l1) l2))]))\n\
    \  (define (half-length l)\n    (quotient (length l) 2))\n  (cond\n    [(null?\
    \ l) 0]\n    [(= (length l) 1) (car l)]\n    [(= (length l) 2) (/ (+ (car l) (cadr\
    \ l)) 2)]\n    [(odd? (length l)) (nth (half-length l) (sort l))]\n    [else (/\
    \ (+ (nth (half-length l) (sort l)) (nth-from-end (half-length l) (sort l))) 2)]))\n\
    ```\n\n## Problem 4\n\n```racket\n#lang racket\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n         \
    \ [else (median-helper (rest l))]))\n  (/ (+ (median-helper l) (median-helper\
    \ (sort < l))) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(empty? l) 0]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l) (- n 1))]))\n  (median-helper\
    \ l (length l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (sort l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [else\n       (insert (first l) (sort (rest l)))]))\n  (define\
    \ (insert e l)\n    (cond\n      [(empty? l) (list e)]\n      [(< e (first l))\
    \ (cons e l)]\n      [else (cons (first l) (insert e (rest l)))]))\n  (define\
    \ (middle l)\n    (if (empty? (rest l))\n        (first l)\n        (/ (+ (first\
    \ l) (first (rest l))) 2)))\n  (if (empty? l)\n      0\n      (middle (sort l))))\n",
  "  (define (sorted-list l)\n    (sort l <))\n  (define (middle-element l)\n    (if\
    \ (empty? l)\n        (error \"List is empty\")\n        (if (even? (length l))\n\
    \            (/ (+ (list-ref l (/ (length l) 2))\n                  (list-ref\
    \ l (- (/ (length l) 2) 1)))\n               2)\n            (list-ref l (/ (length\
    \ l) 2)))))\n  (middle-element (sorted-list l)))\n", "  (define (sort l)\n   \
    \ (if (null? l)\n        '()\n        (insert (car l) (sort (cdr l)))))\n  (define\
    \ (insert n l)\n    (if (null? l)\n        (list n)\n        (if (<= n (car l))\n\
    \            (cons n l)\n            (cons (car l) (insert n (cdr l))))))\n  (define\
    \ (median-helper l)\n    (if (null? l)\n        0\n        (if (= (modulo (length\
    \ l) 2) 0)\n            (/ (+ (list-ref l (/ (length l) 2)) (list-ref l (- (/\
    \ (length l) 2) 1))) 2)\n            (list-ref l (/ (length l) 2)))))\n  (median-helper\
    \ (sort l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) (error \"\
    empty list\")]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\n\
    \       (let ([l1 (median-helper (rest l))]\n             [l2 (median-helper (rest\
    \ (rest l)))]\n             [l3 (median-helper (rest (rest (rest l))))])\n   \
    \      (cond\n           [(and (<= l1 l2) (<= l2 l3)) l2]\n           [(and (<=\
    \ l1 l3) (<= l3 l2)) l3]\n           [(and (<= l2 l1) (<= l1 l3)) l1]\n      \
    \     [(and (<= l2 l3) (<= l3 l1)) l3]\n           [(and (<= l3 l1) (<= l1 l2))\
    \ l1]\n           [(and (<= l3 l2) (<= l2 l1)) l2]))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l s)\n    (if (null? l)\n        (/ s 2)\n\
    \        (median-helper (cdr l) (+ s (car l)))))\n  (median-helper l 0))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (median-helper l n)\n    (cond\n      [(= n 1) (car l)]\n\
    \      [(= n 2) (/ (+ (car l) (cadr l)) 2)]\n      [else (median-helper (cdr l)\
    \ (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper l\
    \ n)\n    (cond\n      [(= n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr l))\
    \ 2)]\n      [else (median-helper (cdr l) (- n 1))]))\n  (median-helper l (length\
    \ l)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n      \
    \  (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (median-helper l n)\n    (cond\n      [(= n 0) (/ (car l) 2)]\n     \
    \ [(= n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr l)) 2)]\n      [else (median-helper\
    \ (cdr l) (- n 1))]))\n  (median-helper (sort l <) (length l)))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper l)\
    \ 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n    \
    \  [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/\
    \ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-iter l n)\n    (if\
    \ (empty? l)\n        n\n        (median-iter (rest l) (first l))))\n  (/ (+ (median-iter\
    \ l 0) (median-iter (reverse l) 0)) 2))\n", "  (define (sort-list l)\n    (cond\n\
    \      [(empty? l) empty]\n      [else\n       (define (insert-in-order x l)\n\
    \         (cond\n           [(empty? l) (list x)]\n           [(< x (first l))\
    \ (cons x l)]\n           [else (cons (first l) (insert-in-order x (rest l)))])\n\
    \         )\n       (insert-in-order (first l) (sort-list (rest l)))]))\n  (define\
    \ (middle l)\n    (if (empty? (rest l))\n        (first l)\n        (/ (+ (first\
    \ l) (first (rest l))) 2.0)))\n  (middle (sort-list l)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [else (median-helper (rest l))]))\n  (/ (+ (median-helper l) (median-helper\
    \ (sort l <))) 2))\n", "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert (first l) (sort (rest l)))]))\n  (define (insert n l)\n \
    \   (cond\n      [(empty? l) (list n)]\n      [(< n (first l)) (cons n l)]\n \
    \     [else (cons (first l) (insert n (rest l)))]))\n  (define (length l)\n  \
    \  (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest l)))]))\n  (define\
    \ (nth n l)\n    (cond\n      [(= n 0) (first l)]\n      [else (nth (- n 1) (rest\
    \ l))]))\n  (define (half l)\n    (quotient (length l) 2))\n  (define (even? n)\n\
    \    (= (remainder n 2) 0))\n  (define (middle l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(empty? (rest l)) (first l)]\n      [else (middle (rest l))]))\n\
    \  (define (middle-two l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) empty]\n      [(empty? (rest (rest l))) empty]\n      [else (list\
    \ (first l) (first (rest l)))]))\n  (cond\n    [(empty? l) empty]\n    [(even?\
    \ (length l))\n     (define (sum l)\n       (cond\n         [(empty? l) 0]\n \
    \        [else (+ (first l) (sum (rest l)))]))\n     (/ (sum (middle-two (sort\
    \ l))) 2)]\n    [else (nth (half (sort l)) (sort l))]))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper l)\
    \ 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n    \
    \  [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/\
    \ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond ((null? l)\
    \ '())\n          ((null? (cdr l)) (list (car l)))\n          (else (cons (car\
    \ l) (median-helper (cdr l))))))\n  (define (median-helper2 l)\n    (cond ((null?\
    \ l) '())\n          ((null? (cdr l)) (car l))\n          (else (/ (+ (car l)\
    \ (median-helper2 (cdr l))) 2))))\n  (median-helper2 (median-helper l)))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (median-helper l n)\n    (cond ((= n 0) (car l))\n          ((= n 1)\
    \ (/ (+ (car l) (cadr l)) 2))\n          ((= n 2) (car (cdr l)))\n          (else\
    \ (median-helper (cdr l) (- n 2)))))\n  (median-helper (sort l <) (length l)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n    \
    \  [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (define (median-helper2 l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (median-helper2 (rest (rest\
    \ l)))]))\n  (/ (+ (median-helper l) (median-helper2 l)) 2))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) (error \"empty list\")]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n  \
    \    [else\n       (let ([left (median (take (quotient (length l) 2) l))]\n  \
    \           [right (median (drop (quotient (length l) 2) l))])\n         (/ (+\
    \ left right) 2))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [else (median-helper (rest l))]))\n  (/ (+ (median-helper l) (median-helper\
    \ (sort l <))) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\n       (define (median-helper2\
    \ l)\n         (cond\n           [(empty? l) 0]\n           [(empty? (rest l))\
    \ (first l)]\n           [else\n            (define (median-helper3 l)\n     \
    \         (cond\n                [(empty? l) 0]\n                [(empty? (rest\
    \ l)) (first l)]\n                [else\n                 (define (median-helper4\
    \ l)\n                   (cond\n                     [(empty? l) 0]\n        \
    \             [(empty? (rest l)) (first l)]\n                     [else\n    \
    \                  (define (median-helper5 l)\n                        (cond\n\
    \                          [(empty? l) 0]\n                          [(empty?\
    \ (rest l)) (first l)]\n                          [else\n                    \
    \       (define (median-helper6 l)\n                             (cond\n     \
    \                          [(empty? l) 0]\n                               [(empty?\
    \ (rest l)) (first l)]\n                               [else\n               \
    \                 (define (median-helper7 l)\n                               \
    \   (cond\n                                    [(empty? l) 0]\n              \
    \                      [(empty? (rest l)) (first l)]\n                       \
    \             [else\n                                     (define (median-helper8\
    \ l)\n                                       (cond\n                         \
    \                [(empty? l) 0]\n                                         [(empty?\
    \ (rest l)) (first l)]\n                                         [else\n     \
    \                                     (define (median-helper9 l)\n           \
    \                                 (cond\n                                    \
    \          [(empty? l) 0]\n                                              [(empty?\
    \ (rest l)) (first l)]\n                                              [else\n\
    \                                               (define (median-helper10 l)\n\
    \                                                 (cond\n                    \
    \                               [(empty? l) 0]\n                             \
    \                      [(empty? (rest l)) (first l)]\n                       \
    \                            [else\n                                         \
    \           (define (median-helper11 l)\n                                    \
    \                  (cond\n                                                   \
    \     [(empty? l) 0]\n                                                       \
    \ [(empty? (rest l)) (first", "  (define (sort l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [else (insert (first l) (sort (rest l)))]))\n  (define (insert\
    \ x l)\n    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x\
    \ l)]\n      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [else (middle (rest l))]))\n  (define (middle-two l)\n    (cond\n     \
    \ [(empty? l) empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest (rest\
    \ l))) empty]\n      [(empty? (rest (rest (rest l)))) empty]\n      [else (list\
    \ (first l) (first (rest (rest l))))]))\n  (cond\n    [(empty? l) empty]\n   \
    \ [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l))) (first l)]\n  \
    \  [else\n     (define sorted (sort l))\n     (define mid (middle sorted))\n \
    \    (define mid-two (middle-two sorted))\n     (cond\n       [(empty? mid-two)\
    \ mid]\n       [else (/ (+ (first mid-two) (first (rest mid-two))) 2.0)])]))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [else (median-helper (rest l))]))\n  (/ (+ (median-helper\
    \ l) (median-helper (sort l <))) 2))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n          [else (median-helper\
    \ (rest l))]))\n  (/ (+ (median-helper l) (median-helper (sort l <))) 2))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (median-helper l)\n    (cond [(empty? l) (error \"Empty\
    \ list\")]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n", "  (define (sort l)\n    (if (null?\
    \ l)\n        '()\n        (append (sort (filter (lambda (x) (< x (car l))) (cdr\
    \ l)))\n                (list (car l))\n                (sort (filter (lambda\
    \ (x) (>= x (car l))) (cdr l))))))\n  (define (middle l)\n    (if (null? l)\n\
    \        0\n        (/ (+ (car l) (car (cdr l))) 2.0)))\n  (if (null? l)\n   \
    \   0\n      (if (even? (length l))\n          (middle (sort l))\n          (car\
    \ (sort l)))))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [else (median-helper (rest l))]))\n\
    \  (/ (+ (median-helper l) (median-helper (sort < l))) 2))\n", "  (define (sort-list\
    \ l)\n    (if (null? l)\n        '()\n        (insert (car l) (sort-list (cdr\
    \ l)))))\n  (define (insert n l)\n    (if (null? l)\n        (list n)\n      \
    \  (if (<= n (car l))\n            (cons n l)\n            (cons (car l) (insert\
    \ n (cdr l))))))\n  (define (median-helper l)\n    (if (null? l)\n        0\n\
    \        (if (= (length l) 1)\n            (car l)\n            (if (= (modulo\
    \ (length l) 2) 0)\n                (/ (+ (list-ref l (/ (length l) 2)) (list-ref\
    \ l (- (/ (length l) 2) 1))) 2)\n                (list-ref l (/ (length l) 2))))))\n\
    \  (median-helper (sort-list l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (define (median-helper2 l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (median-helper2 (rest (rest\
    \ l)))]))\n  (/ (+ (median-helper l) (median-helper2 l)) 2))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [else (median-helper (rest l))]))\n  (define (median-helper2 l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper2\
    \ (rest (rest l)))]))\n  (/ (+ (median-helper l) (median-helper2 l)) 2))\n", " \
    \ (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (sort-list l)\n    (cond\n      [(null? l) '()]\n    \
    \  [else (insert (car l) (sort-list (cdr l)))]))\n  (define (insert n l)\n   \
    \ (cond\n      [(null? l) (list n)]\n      [(<= n (car l)) (cons n l)]\n     \
    \ [else (cons (car l) (insert n (cdr l)))]))\n  (define (middle l)\n    (cond\n\
    \      [(null? l) 0]\n      [(null? (cdr l)) (car l)]\n      [else (middle (cdr\
    \ l))]))\n  (define (length l)\n    (cond\n      [(null? l) 0]\n      [else (+\
    \ 1 (length (cdr l)))]))\n  (define (nth n l)\n    (cond\n      [(= n 0) (car\
    \ l)]\n      [else (nth (- n 1) (cdr l))]))\n  (define (average l)\n    (/ (apply\
    \ + l) (length l)))\n  (define (odd? n)\n    (= (remainder n 2) 1))\n  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (nth (/ (length l) 2) (sort-list l))]\n\
    \    [else (average (list (nth (/ (length l) 2) (sort-list l))\n             \
    \           (nth (- (/ (length l) 2) 1) (sort-list l))))]))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define\
    \ (merge-sort l)\n    (if (null? l)\n        '()\n        (let ([l1 (merge-sort\
    \ (filter (lambda (x) (< x (car l))) (cdr l)))])\n          (let ([l2 (merge-sort\
    \ (filter (lambda (x) (>= x (car l))) (cdr l)))])\n            (append l1 (cons\
    \ (car l) l2))))))\n  (if (null? l)\n      0\n      (let ([l (merge-sort l)])\n\
    \        (if (even? (length l))\n            (/ (+ (list-ref l (/ (length l) 2))\
    \ (list-ref l (- (/ (length l) 2) 1))) 2)\n            (list-ref l (/ (length\
    \ l) 2))))))\n", "  (define (median-helper l n)\n    (cond\n      [(= n 0) (median-helper\
    \ l 1)]\n      [(= n 1) (car l)]\n      [(= n 2) (/ (+ (car l) (cadr l)) 2)]\n\
    \      [else (median-helper (cdr l) (- n 1))]))\n  (median-helper (sort l <) (length\
    \ l)))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n      \
    \  (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (median-helper l)\n    (cond ((null? l) 0)\n          ((null? (cdr l))\
    \ (car l))\n          ((= (modulo (length l) 2) 0)\n           (/ (+ (car l) (car\
    \ (cdr l))) 2))\n          (else (car (cdr l)))))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (median-helper l)\n    (cond ((null? l) 0)\n         \
    \ ((null? (cdr l)) (car l))\n          ((= (modulo (length l) 2) 0)\n        \
    \   (/ (+ (car l) (car (cdr l))) 2))\n          (else (car (cdr l)))))\n  (median-helper\
    \ (sort l <)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n    \
    \  [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\n       (define\
    \ mid (/ (length l) 2))\n       (define (partition l)\n         (cond\n      \
    \     [(empty? l) (values empty empty)]\n           [(zero? mid) (values (list\
    \ (first l)) (rest l))]\n           [else\n            (define (partition-helper\
    \ l acc)\n              (cond\n                [(empty? l) (values acc empty)]\n\
    \                [(zero? mid) (values acc l)]\n                [else (partition-helper\
    \ (rest l) (append acc (list (first l))))]))\n            (partition-helper l\
    \ empty)]))\n       (define (merge l1 l2)\n         (cond\n           [(empty?\
    \ l1) l2]\n           [(empty? l2) l1]\n           [(< (first l1) (first l2))\
    \ (cons (first l1) (merge (rest l1) l2))]\n           [else (cons (first l2) (merge\
    \ l1 (rest l2)))]))\n       (define (merge-sort l)\n         (cond\n         \
    \  [(empty? l) empty]\n           [(empty? (rest l)) l]\n           [else\n  \
    \          (define (merge-sort-helper l)\n              (cond\n              \
    \  [(empty? l) (values empty empty)]\n                [(empty? (rest l)) (values\
    \ (list (first l)) empty)]\n                [else\n                 (define (partition\
    \ l)\n                   (cond\n                     [(empty? l) (values empty\
    \ empty)]\n                     [(zero? mid) (values (list (first l)) (rest l))]\n\
    \                     [else\n                      (define (partition-helper l\
    \ acc)\n                        (cond\n                          [(empty? l) (values\
    \ acc empty)]\n                          [(zero? mid) (values acc l)]\n      \
    \                    [else (partition-helper (rest l) (append acc (list (first\
    \ l))))]))\n                      (partition-helper l empty)]))\n            \
    \     (define (merge l1 l2)\n                   (", "  (define (median-helper\
    \ l)\n    (cond ((null? l) 0)\n          ((null? (cdr l)) (car l))\n         \
    \ ((= (modulo (length l) 2) 0)\n           (/ (+ (car l) (car (cdr l))) 2))\n\
    \          (else (car (cdr l)))))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper l)\
    \ 2))\n", "  (define (median-helper l)\n    (if (null? l)\n        0\n       \
    \ (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [else (median-helper (rest l))]))\n  (/ (+ (median-helper\
    \ l) (median-helper (sort < l))) 2))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) (error \"Empty list\")]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n     \
    \ [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper l)\
    \ 2))\n", "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\
    \ (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond\n \
    \     [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n      [else (cons\
    \ (first l) (insert x (rest l)))]))\n  (define (length l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [else (+ 1 (length (rest l)))]))\n  (define (nth n l)\n    (cond\n\
    \      [(= n 0) (first l)]\n      [else (nth (- n 1) (rest l))]))\n  (define (even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (half n)\n    (/ n 2))\n  (define\
    \ (nth-from-end n l)\n    (nth (- (length l) n) l))\n  (define (nth-from-start\
    \ n l)\n    (nth n l))\n  (define (nth-from-middle n l)\n    (if (even? (length\
    \ l))\n        (nth-from-end (half n) l)\n        (nth-from-start (half n) l)))\n\
    \  (nth-from-middle (half (length l)) (sort l)))\n", "  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (sort l)\n    (cond [(empty?\
    \ l) empty]\n          [else (insert (first l) (sort (rest l)))]))\n  (define\
    \ (insert x l)\n    (cond [(empty? l) (list x)]\n          [(< x (first l)) (cons\
    \ x l)]\n          [else (cons (first l) (insert x (rest l)))]))\n  (define (middle\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [else (middle (rest l))]))\n  (define (length l)\n    (cond [(empty? l)\
    \ 0]\n          [else (+ 1 (length (rest l)))]))\n  (define (even? n)\n    (=\
    \ (remainder n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n  (define (nth\
    \ n l)\n    (cond [(empty? l) 0]\n          [(= n 0) (first l)]\n          [else\
    \ (nth (- n 1) (rest l))]))\n  (define (nth-from-end n l)\n    (nth (- (length\
    \ l) n) l))\n  (cond [(empty? l) 0]\n        [(even? (length l)) (/ (+ (nth (/\
    \ (length l) 2) (sort l))\n                                  (nth-from-end (/\
    \ (length l) 2) (sort l)))\n                               2)]\n        [else\
    \ (nth (/ (length l) 2) (sort l))]))\n", "  (define (median-helper l n)\n    (cond\
    \ ((= n 0) (car l))\n          ((= n 1) (/ (+ (car l) (cadr l)) 2))\n        \
    \  ((= n 2) (cadr l))\n          (else (median-helper (cdr l) (- n 2)))))\n  (median-helper\
    \ (sort l <) (length l)))\n", "  (define (median-iter l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-iter (rest l))]))\n\
    \  (/ (median-iter l) 2))\n", "  (define (median-helper l)\n    (if (null? l)\n\
    \        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper\
    \ l) (length l)))\n", "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n \
    \   (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n \
    \     [else (cons (first l) (insert x (rest l)))]))\n  (define (nth-element l\
    \ n)\n    (cond\n      [(empty? l) (error \"nth-element: list is empty\")]\n \
    \     [(= n 0) (first l)]\n      [else (nth-element (rest l) (- n 1))]))\n  (define\
    \ (length l)\n    (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest\
    \ l)))]))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (odd? n)\n\
    \    (not (even? n)))\n  (define (nth-element-from-end l n)\n    (nth-element\
    \ l (- (length l) n)))\n  (define (middle l)\n    (cond\n      [(empty? l) (error\
    \ \"middle: list is empty\")]\n      [(empty? (rest l)) (first l)]\n      [(odd?\
    \ (length l)) (nth-element l (/ (length l) 2))]\n      [else (/ (+ (nth-element\
    \ l (/ (length l) 2))\n                 (nth-element-from-end l (/ (length l)\
    \ 2)))\n               2.0)]))\n  (middle (sort l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define\
    \ (median-helper l n)\n    (cond\n      [(= n 1) (first l)]\n      [(= n 2) (/\
    \ (+ (first l) (second l)) 2)]\n      [else\n       (let ([m (quotient n 2)])\n\
    \         (if (even? n)\n             (median-helper (rest l) m)\n           \
    \  (median-helper (rest l) (+ m 1))))]))\n  (median-helper (sort l <) (length\
    \ l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n   \
    \   [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n \
    \ (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (define (median-helper-helper\
    \ l)\n      (if (null? l)\n          0\n          (+ (car l) (median-helper-helper\
    \ (cdr l)))))\n    (/ (median-helper-helper l) (length l)))\n  (define (median-helper-helper\
    \ l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper-helper (cdr\
    \ l)))))\n  (/ (median-helper-helper l) (length l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define\
    \ (median-helper l n)\n    (cond\n      [(= n 0) (/ (car l) 2)]\n      [(= n 1)\
    \ (/ (+ (car l) (car (cdr l))) 2)]\n      [else (median-helper (cdr l) (- n 1))]))\n\
    \  (median-helper (sort l <) (quotient (length l) 2)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [else (median-helper (rest l))]))\n  (/ (+ (median-helper l) (median-helper\
    \ (sort l <))) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n          [else (median-helper\
    \ (rest l))]))\n  (/ (+ (median-helper l) (median-helper (sort < l))) 2))\n```\n\
    \n## Problem 2\n\n```racket\n#lang racket\n", "  (define (median-helper l n)\n\
    \    (cond [(= n 1) (first l)]\n          [(= n 2) (/ (+ (first l) (second l))\
    \ 2)]\n          [else (median-helper (rest l) (- n 1))]))\n  (median-helper (sort\
    \ l <) (length l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\
    \ ((null? l) 0)\n          ((= (length l) 1) (car l))\n          ((= (length l)\
    \ 2) (/ (+ (car l) (cadr l)) 2))\n          (else (median-helper (cdr l)))))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond\n \
    \     [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\
    \ (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define\
    \ (quicksort l)\n    (if (null? l)\n        '()\n        (append (quicksort (filter\
    \ (lambda (x) (< x (car l))) (cdr l)))\n                (list (car l))\n     \
    \           (quicksort (filter (lambda (x) (>= x (car l))) (cdr l))))))\n  (define\
    \ (median-helper l)\n    (if (null? l)\n        0\n        (if (= (modulo (length\
    \ l) 2) 0)\n            (/ (+ (list-ref l (/ (length l) 2)) (list-ref l (- (/\
    \ (length l) 2) 1))) 2)\n            (list-ref l (/ (length l) 2)))))\n  (median-helper\
    \ (quicksort l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(= n 0) (car l)]\n      [(= n 1) (/ (+ (car l) (cadr l)) 2)]\n      [(=\
    \ n 2) (cadr l)]\n      [else (median-helper (cdr l) (- n 1))]))\n  (median-helper\
    \ (sort l <) (quotient (length l) 2)))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n          [else (median-helper\
    \ (rest l))]))\n  (/ (+ (median-helper l) (median-helper (sort l <))) 2))\n",
  "  (define (merge-sort l)\n    (define (merge l1 l2)\n      (cond ((null? l1) l2)\n\
    \            ((null? l2) l1)\n            ((< (car l1) (car l2))\n           \
    \  (cons (car l1) (merge (cdr l1) l2)))\n            (else\n             (cons\
    \ (car l2) (merge l1 (cdr l2))))))\n    (define (merge-sort-iter l)\n      (cond\
    \ ((null? l) l)\n            ((null? (cdr l)) l)\n            (else\n        \
    \     (let ((l1 (merge-sort-iter (take l (/ (length l) 2))))\n               \
    \    (l2 (merge-sort-iter (drop l (/ (length l) 2)))))\n               (merge\
    \ l1 l2)))))\n    (merge-sort-iter l))\n  (define (take l n)\n    (cond ((null?\
    \ l) l)\n          ((zero? n) '())\n          (else\n           (cons (car l)\
    \ (take (cdr l) (- n 1))))))\n  (define (drop l n)\n    (cond ((null? l) l)\n\
    \          ((zero? n) l)\n          (else\n           (drop (cdr l) (- n 1)))))\n\
    \  (define (length l)\n    (cond ((null? l) 0)\n          (else\n           (+\
    \ 1 (length (cdr l))))))\n  (define (divide n d)\n    (/ (inexact->exact (round\
    \ (* n (/ 1 d)))) 1))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (cond\
    \ ((null? l) 0)\n        ((null? (cdr l)) (car l))\n        ((even? (length l))\n\
    \         (divide (+ (list-ref (merge-sort l) (/ (length l) 2))\n            \
    \          (list-ref (merge-sort l) (- (/ (length l) 2) 1)))\n               \
    \   2))\n        (else\n         (list-ref (merge-sort l) (/ (length l) 2)))))",
  "  (define (median-helper l n)\n    (cond\n      [(empty? l) 0]\n      [(= n 1)\
    \ (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l) (- n 1))]))\n  (median-helper l (length l)))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper l)\
    \ 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n    \
    \  [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/\
    \ (median-helper l) 2))\n", "  (define (median-helper l)\n    (if (null? l)\n\
    \        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper\
    \ l) (length l)))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert e l)\n\
    \    (cond\n      [(empty? l) (list e)]\n      [(< e (first l)) (cons e l)]\n\
    \      [else (cons (first l) (insert e (rest l)))]))\n  (define (middle l)\n \
    \   (if (empty? (rest l))\n        (first l)\n        (/ (+ (first l) (first (rest\
    \ l))) 2)))\n  (middle (sort-list l)))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (first\
    \ l)]\n    [else (/ (+ (median-helper l) (median-helper (rest l))) 2)]))\n", " \
    \ (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [else (median-helper (rest l))]))\n  (/ (+ (median-helper\
    \ l) (median-helper (sort l <))) 2))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(= (length l) 1) (first l)]\n      [(= (length l)\
    \ 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest (rest l)))]))\n\
    \  (median-helper (sort l <)))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [else (median-helper\
    \ (rest l))]))\n  (/ (+ (median-helper l) (median-helper (sort l <))) 2))\n",
  "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first\
    \ l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond\n      [(empty? l)\
    \ (list x)]\n      [(< x (first l)) (cons x l)]\n      [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (nth-element l n)\n    (cond\n      [(= n 0) (first\
    \ l)]\n      [else (nth-element (rest l) (- n 1))]))\n  (define (length l)\n \
    \   (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest l)))]))\n  (define\
    \ (is-even? n)\n    (= (remainder n 2) 0))\n  (define (half-length l)\n    (quotient\
    \ (length l) 2))\n  (define (first-half l)\n    (nth-element l (half-length l)))\n\
    \  (define (second-half l)\n    (nth-element l (+ (half-length l) 1)))\n  (cond\n\
    \    [(is-even? (length l))\n     (+ (first-half (sort l)) (second-half (sort\
    \ l)))]\n    [else (first-half (sort l))]))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\
    \ (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else\n       (define (merge l1 l2)\n         (cond\n           [(empty?\
    \ l1) l2]\n           [(empty? l2) l1]\n           [(< (first l1) (first l2))\n\
    \            (cons (first l1) (merge (rest l1) l2))]\n           [else\n     \
    \       (cons (first l2) (merge l1 (rest l2)))]))\n       (define (split l)\n\
    \         (cond\n           [(empty? l) (values (list) (list))]\n           [(empty?\
    \ (rest l)) (values (list (first l)) (list))]\n           [else\n            (define\
    \ (split-helper l1 l2)\n              (cond\n                [(empty? l2) (values\
    \ l1 l2)]\n                [(empty? (rest l2)) (values (append l1 (list (first\
    \ l2))) (list))]\n                [else (split-helper (append l1 (list (first\
    \ l2))) (rest (rest l2)))]))\n            (split-helper (list (first l)) (rest\
    \ (rest l)))]))\n       (define (merge-sort l)\n         (cond\n           [(empty?\
    \ l) (list)]\n           [(empty? (rest l)) l]\n           [else\n           \
    \ (define (merge-sort-helper l1 l2)\n              (merge (merge-sort l1) (merge-sort\
    \ l2)))\n            (define-values (l1 l2) (split l))\n            (merge-sort-helper\
    \ l1 l2)]))\n       (define (median-helper-helper l)\n         (cond\n       \
    \    [(empty? (rest l)) (first l)]\n           [(empty? (rest (rest l))) (/ (+\
    \ (first l) (first (rest l))) 2)]\n           [else (median-helper-helper (rest\
    \ l))]))\n       (median-helper-helper (merge-sort l))]))\n  (", "  (define (sort\
    \ l)\n    (cond\n      [(null? l) '()]\n      [else (insert (car l) (sort (cdr\
    \ l)))]))\n  (define (insert x l)\n    (cond\n      [(null? l) (list x)]\n   \
    \   [(<= x (car l)) (cons x l)]\n      [else (cons (car l) (insert x (cdr l)))]))\n\
    \  (define (middle l)\n    (cond\n      [(null? l) 0]\n      [(null? (cdr l))\
    \ (car l)]\n      [else (middle (cdr l))]))\n  (define (middle-two l)\n    (cond\n\
    \      [(null? l) 0]\n      [(null? (cdr l)) (car l)]\n      [(null? (cdr (cdr\
    \ l))) (/ (+ (car l) (car (cdr l))) 2)]\n      [else (middle-two (cdr l))]))\n\
    \  (cond\n    [(null? l) 0]\n    [(null? (cdr l)) (car l)]\n    [(null? (cdr (cdr\
    \ l))) (car l)]\n    [(null? (cdr (cdr (cdr l)))) (middle-two l)]\n    [else (middle\
    \ (sort l))]))\n", "  (define (sort l)\n    (cond\n      [(null? l) '()]\n   \
    \   [else (append (sort (filter (lambda (x) (< x (car l))) (cdr l)))\n       \
    \             (cons (car l)\n                          (sort (filter (lambda (x)\
    \ (>= x (car l))) (cdr l)))))])\n    )\n  (define (middle l)\n    (cond\n    \
    \  [(null? l) '()]\n      [(null? (cdr l)) (car l)]\n      [else (middle (cdr\
    \ l))]))\n  (define (middle2 l)\n    (cond\n      [(null? l) '()]\n      [(null?\
    \ (cdr l)) (car l)]\n      [(null? (cddr l)) (/ (+ (car l) (cadr l)) 2)]\n   \
    \   [else (middle2 (cdr l))]))\n  (cond\n    [(null? l) '()]\n    [(null? (cdr\
    \ l)) (car l)]\n    [(null? (cddr l)) (/ (+ (car l) (cadr l)) 2)]\n    [else (middle2\
    \ (sort l))]))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (if (null? l)\n\
    \        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper\
    \ l) (length l)))\n", "  (define (median-helper l)\n    (cond [(empty? l) 0]\n\
    \          [(empty? (rest l)) (first l)]\n          [else (median-helper (rest\
    \ l))]))\n  (/ (+ (median-helper l) (median-helper (sort < l))) 2))\n", "  (define\
    \ (median-helper l n)\n    (cond ((= n 0) (car l))\n          ((= n 1) (/ (+ (car\
    \ l) (cadr l)) 2))\n          ((= n 2) (cadr l))\n          (else (median-helper\
    \ (cdr l) (- n 2)))))\n  (median-helper (sort l <) (length l)))\n", "  (define\
    \ (median-helper l)\n    (cond ((null? l) 0)\n          ((null? (cdr l)) (car\
    \ l))\n          ((= (modulo (length l) 2) 0)\n           (/ (+ (median-helper\
    \ (take l (/ (length l) 2)))\n                 (median-helper (drop l (/ (length\
    \ l) 2))))\n              2.0))\n          (else (median-helper (drop l (/ (length\
    \ l) 2))))))\n  (median-helper (sort l <)))\n", "  (define (median-helper l n)\n\
    \    (cond ((= n 0) (car l))\n          ((= n 1) (/ (+ (car l) (cadr l)) 2))\n\
    \          ((= n 2) (cadr l))\n          (else (median-helper (cdr l) (- n 2)))))\n\
    \  (median-helper (sort l <) (length l)))\n", "  (define (median-helper l)\n \
    \   (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n      \
    \    [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n       \
    \   [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-helper l n)\n    (cond\n      [(= n 0) (/ (list-ref l 0) 2)]\n     \
    \ [(= n 1) (list-ref l 1)]\n      [(= n 2) (/ (+ (list-ref l 1) (list-ref l 2))\
    \ 2)]\n      [else (median-helper (cdr l) (- n 1))]))\n  (median-helper (sort\
    \ l <) (length l)))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert\
    \ x l)\n    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x\
    \ l)]\n      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [else (middle (rest l))]))\n  (define (middle-2 l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (middle-2 (rest (rest l)))]))\n  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l)))\
    \ (first l)]\n    [else\n     (define sorted (sort-list l))\n     (define middle-elem\
    \ (middle sorted))\n     (define middle-elem-2 (middle-2 sorted))\n     (/ (+\
    \ middle-elem middle-elem-2) 2.0)]))\n", "  (define (median-helper l n)\n    (cond\n\
    \      [(empty? l) 0]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l) (- n 1))]))\n  (median-helper\
    \ l (length l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ (error \"empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\
    \ (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper\
    \ l1 l2)\n    (if (null? l1)\n        (car l2)\n        (median-helper (cdr l1)\
    \ (cdr l2))))\n  (define (median-helper2 l1 l2)\n    (if (null? l1)\n        (car\
    \ l2)\n        (median-helper2 (cdr l1) (cdr l2))))\n  (define (median-helper3\
    \ l1 l2)\n    (if (null? l1)\n        (car l2)\n        (median-helper3 (cdr l1)\
    \ (cdr l2))))\n  (define (median-helper4 l1 l2)\n    (if (null? l1)\n        (car\
    \ l2)\n        (median-helper4 (cdr l1) (cdr l2))))\n  (define (median-helper5\
    \ l1 l2)\n    (if (null? l1)\n        (car l2)\n        (median-helper5 (cdr l1)\
    \ (cdr l2))))\n  (define (median-helper6 l1 l2)\n    (if (null? l1)\n        (car\
    \ l2)\n        (median-helper6 (cdr l1) (cdr l2))))\n  (define (median-helper7\
    \ l1 l2)\n    (if (null? l1)\n        (car l2)\n        (median-helper7 (cdr l1)\
    \ (cdr l2))))\n  (define (median-helper8 l1 l2)\n    (if (null? l1)\n        (car\
    \ l2)\n        (median-helper8 (cdr l1) (cdr l2))))\n  (define (median-helper9\
    \ l1 l2)\n    (if (null? l1)\n        (car l2)\n        (median-helper9 (cdr l1)\
    \ (cdr l2))))\n  (define (median-helper10 l1 l2)\n    (if (null? l1)\n       ",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (cond\n    [(empty? l) 0]\n    [(empty? (rest l)) (first l)]\n\
    \    [else\n     (let ([sorted (sort l <)])\n       (let ([n (length sorted)])\n\
    \         (let ([mid (quotient n 2)])\n           (if (even? n)\n            \
    \   (/ (+ (list-ref sorted mid) (list-ref sorted (- mid 1))) 2)\n            \
    \   (list-ref sorted mid)))))]))\n", "  (define (sorted-list l)\n    (sort l <))\n\
    \  (define (middle-element l)\n    (list-ref l (/ (length l) 2)))\n  (define (middle-two-elements\
    \ l)\n    (define (first-middle-element l)\n      (list-ref l (/ (length l) 2)))\n\
    \    (define (second-middle-element l)\n      (list-ref l (+ (/ (length l) 2)\
    \ 1)))\n    (define (average-two-elements l)\n      (/ (+ (first-middle-element\
    \ l) (second-middle-element l)) 2))\n    (average-two-elements l))\n  (cond\n\
    \    [(even? (length l)) (middle-two-elements (sorted-list l))]\n    [else (middle-element\
    \ (sorted-list l))]))\n", "  (define (median-iter l n)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l))\
    \ 2)]\n      [else (median-iter (rest l) (- n 1))]))\n  (median-iter l (length\
    \ l)))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n   \
    \   [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n\
    \      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n \
    \   (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n   \
    \   [else (middle (rest l))]))\n  (define (middle-two l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest (rest l)))\
    \ (list (first l) (first (rest l)))]\n      [else (middle-two (rest l))]))\n \
    \ (define (sum-two l)\n    (+ (first l) (first (rest l))))\n  (define (divide-by-two\
    \ n)\n    (/ n 2))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (first\
    \ l)]\n    [(empty? (rest (rest l))) (first l)]\n    [else (divide-by-two (sum-two\
    \ (middle-two (sort-list l))))]))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n          [else (median-helper\
    \ (rest l))]))\n  (/ (+ (median-helper l) (median-helper (sort < l))) 2))\n",
  "  (define (median-helper l n)\n    (cond\n      [(= n 0) (car l)]\n      [(= n\
    \ 1) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 2) (cadr l)]\n      [else (median-helper\
    \ (cdr l) (- n 1))]))\n  (median-helper (sort l <) (quotient (length l) 2)))\n",
  "  (define (median-helper l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper\
    \ (cdr l)))))\n  (/ (median-helper l) (length l)))\n", "  (define (sort-list l)\n\
    \    (sort l <))\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n\
    \      [(= (length l) 1) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest (rest l)))]))\n  (median-helper (sort-list\
    \ l)))\n", "  (define (median-helper l n)\n    (cond\n      [(= n 0) (car l)]\n\
    \      [(= n 1) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 2) (cadr l)]\n      [else\n\
    \       (median-helper (cdr l) (- n 1))]))\n  (median-helper l (length l)))\n",
  "  (define (sort l)\n    (cond [(empty? l) empty]\n          [else (insert (first\
    \ l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond [(empty? l) (list\
    \ x)]\n          [(< x (first l)) (cons x l)]\n          [else (cons (first l)\
    \ (insert x (rest l)))]))\n  (define (middle l)\n    (if (empty? (rest l))\n \
    \       (first l)\n        (/ (+ (first l) (first (rest l))) 2)))\n  (if (empty?\
    \ l)\n      0\n      (middle (sort l))))\n", "  (define (sort-list l)\n    (sort\
    \ l <))\n  (define (middle l)\n    (if (empty? l)\n        (error \"middle: empty\
    \ list\")\n        (if (empty? (rest l))\n            (first l)\n            (if\
    \ (empty? (rest (rest l)))\n                (/ (+ (first l) (first (rest l)))\
    \ 2)\n                (middle (rest l))))))\n  (middle (sort-list l)))\n", " \
    \ (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first\
    \ l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond\n      [(empty? l)\
    \ (list x)]\n      [(< x (first l)) (cons x l)]\n      [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (middle l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (middle (rest l))]))\n  (define\
    \ (middle-two l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l))\
    \ (list (first l) (first l))]\n      [(empty? (rest (rest l))) (list (first l)\
    \ (first (rest l)))]\n      [else (middle-two (rest l))]))\n  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l)))\
    \ (first l)]\n    [else\n     (define sorted (sort l))\n     (define m (middle\
    \ sorted))\n     (define m2 (middle-two sorted))\n     (if (= m (first m2))\n\
    \         m\n         (/ (+ m (first m2)) 2.0))]))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(= (length l) 1) (first l)]\n  \
    \    [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest (rest l)))]))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [else (median-helper (rest l))]))\n  (/ (+ (median-helper l) (median-helper\
    \ (sort < l))) 2))\n```\n\n### Exercise 2.4\n\n```racket\n#lang racket\n", " \
    \ (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define\
    \ pivot (first l))\n       (define rest (rest l))\n       (append (sort (filter\
    \ (lambda (x) (< x pivot)) rest))\n               (list pivot)\n             \
    \  (sort (filter (lambda (x) (>= x pivot)) rest)))]))\n  (define sorted (sort\
    \ l))\n  (define len (length l))\n  (define mid (quotient len 2))\n  (if (odd?\
    \ len)\n      (list-ref sorted mid)\n      (/ (+ (list-ref sorted mid) (list-ref\
    \ sorted (- mid 1))) 2.0)))\n", "  (define (median-helper l)\n    (cond\n    \
    \  [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\
    \ (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (sort\
    \ l)\n    (cond\n      [(null? l) '()]\n      [else (insert (car l) (sort (cdr\
    \ l)))]))\n  (define (insert n l)\n    (cond\n      [(null? l) (list n)]\n   \
    \   [(< n (car l)) (cons n l)]\n      [else (cons (car l) (insert n (cdr l)))]))\n\
    \  (define (middle l)\n    (cond\n      [(null? l) 0]\n      [(null? (cdr l))\
    \ (car l)]\n      [else (middle (cdr l))]))\n  (define (length l)\n    (cond\n\
    \      [(null? l) 0]\n      [else (+ 1 (length (cdr l)))]))\n  (define (even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (sum l)\n    (cond\n      [(null?\
    \ l) 0]\n      [else (+ (car l) (sum (cdr l)))]))\n  (cond\n    [(null? l) 0]\n\
    \    [(even? (length l)) (/ (sum (list (middle l) (middle (cdr l)))) 2)]\n   \
    \ [else (middle l)]))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) (error \"Empty list\")]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n       \
    \   [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (sort l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first l)\
    \ (sort (rest l)))]))\n  (define (insert n l)\n    (cond\n      [(empty? l) (list\
    \ n)]\n      [(< n (first l)) (cons n l)]\n      [else (cons (first l) (insert\
    \ n (rest l)))]))\n  (define (middle l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (middle (rest l))]))\n  (define\
    \ (middle-two l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l))\
    \ empty]\n      [(empty? (rest (rest l))) empty]\n      [(empty? (rest (rest (rest\
    \ l)))) empty]\n      [else (list (first l) (first (rest (rest l))))]))\n  (cond\n\
    \    [(empty? l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest\
    \ (rest l))) (first l)]\n    [else\n     (define sorted (sort l))\n     (define\
    \ middle-two (middle-two sorted))\n     (if (empty? middle-two)\n         (middle\
    \ sorted)\n         (/ (+ (first middle-two) (first (rest middle-two))) 2))]))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n \
    \     [else\n       (insert (first l) (sort-list (rest l)))]))\n  (define (insert\
    \ x l)\n    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x\
    \ l)]\n      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else (middle (rest l))]))\n  (define (middle-two l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (middle-two (rest l))]))\n  (define (middle-two-sum\
    \ l)\n    (+ (middle-two l) (middle-two (rest l))))\n  (define (middle-two-avg\
    \ l)\n    (/ (middle-two-sum l) 2))\n  (cond\n    [(empty? l) 0]\n    [(empty?\
    \ (rest l)) (first l)]\n    [(empty? (rest (rest l))) (first l)]\n    [else\n\
    \     (cond\n       [(empty? (rest (rest (rest l)))) (middle-two-avg l)]\n   \
    \    [else (middle l)])]))\n", "  (define (sorted l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [else (insert (first l) (sorted (rest l)))]))\n  (define (insert\
    \ x l)\n    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x\
    \ l)]\n      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [else (middle (rest l))]))\n  (define (length l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [else (+ 1 (length (rest l)))]))\n  (define (even? n)\n    (= (remainder\
    \ n 2) 0))\n  (cond\n    [(empty? l) empty]\n    [(even? (length l)) (/ (+ (middle\
    \ l) (middle (rest l))) 2)]\n    [else (middle l)]))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n \
    \         [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n",
  "  (define (median-helper l n)\n    (cond\n      [(= n 0) (car l)]\n      [(= n\
    \ 1) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 2) (cadr l)]\n      [else (median-helper\
    \ (cdr l) (- n 1))]))\n  (median-helper (sort l <) (quotient (length l) 2)))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (sort-by-first-element l)\n    (sort\
    \ l <))\n  (define (sort-by-second-element l)\n    (sort l (lambda (x y) (< (cadr\
    \ x) (cadr y)))))\n  (define (median-helper l)\n    (if (null? l)\n        0\n\
    \        (if (null? (cdr l))\n            (car l)\n            (/ (+ (car l) (cadr\
    \ l)) 2))))\n  (median-helper (sort-by-second-element (sort-by-first-element l))))\n",
  "  (define (median-helper l)\n    (cond [(empty? l) 0]\n          [(empty? (rest\
    \ l)) (first l)]\n          [else (median-helper (rest l))]))\n  (/ (+ (median-helper\
    \ l) (median-helper (sort < l))) 2))\n", "  (define (median-helper l)\n    (cond\
    \ [(empty? l) (error \"Empty list\")]\n          [(empty? (rest l)) (first l)]\n\
    \          [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n       \
    \   [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper l)\
    \ 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n    \
    \  [(empty? (rest l)) (first l)]\n      [else\n       (define (merge-sort l)\n\
    \         (define (merge l1 l2)\n           (cond\n             [(empty? l1) l2]\n\
    \             [(empty? l2) l1]\n             [(< (first l1) (first l2))\n    \
    \          (cons (first l1) (merge (rest l1) l2))]\n             [else\n     \
    \         (cons (first l2) (merge l1 (rest l2)))]))\n         (define (split l)\n\
    \           (cond\n             [(empty? l) (values (list) (list))]\n        \
    \     [(empty? (rest l)) (values (list (first l)) (list))]\n             [else\n\
    \              (define (split-helper l1 l2)\n                (cond\n         \
    \         [(empty? l2) (values l1 l2)]\n                  [(empty? (rest l2))\
    \ (values (append l1 (list (first l2))) (list))]\n                  [else (split-helper\
    \ (append l1 (list (first l2))) (rest (rest l2)))]))\n              (split-helper\
    \ (list (first l)) (rest l))]))\n         (define (merge-sort-helper l)\n    \
    \       (cond\n             [(empty? l) (list)]\n             [(empty? (rest l))\
    \ l]\n             [else\n              (define (merge-sort-helper-helper l1 l2)\n\
    \                (merge (merge-sort l1) (merge-sort l2)))\n              (merge-sort-helper-helper\
    \ (first (split l)) (second (split l)))]))\n         (merge-sort-helper l))\n\
    \       (define (median-helper-helper l)\n         (cond\n           [(empty?\
    \ l) 0]\n           [(empty? (rest l)) (first l)]\n           [(empty? (rest (rest\
    \ l))) (/ (+ (first l) (first (rest l))) 2)]\n           [else (first (rest (rest\
    \ l", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty?\
    \ (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/ (median-helper\
    \ l) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n    \
    \  [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\n       (define\
    \ (split l)\n         (cond\n           [(empty? l) (list empty empty)]\n    \
    \       [else\n            (define (split-helper l1 l2)\n              (cond\n\
    \                [(empty? l1) (list l2 empty)]\n                [else (split-helper\
    \ (rest l1) (cons (first l1) l2))]))\n            (split-helper (rest l) (list\
    \ (first l)))]))\n       (define (merge l1 l2)\n         (cond\n           [(empty?\
    \ l1) l2]\n           [(empty? l2) l1]\n           [(< (first l1) (first l2))\
    \ (cons (first l1) (merge (rest l1) l2))]\n           [else (cons (first l2) (merge\
    \ l1 (rest l2)))]))\n       (define (merge-sort l)\n         (cond\n         \
    \  [(empty? l) empty]\n           [(empty? (rest l)) l]\n           [else\n  \
    \          (define (merge-sort-helper l1 l2)\n              (merge (merge-sort\
    \ l1) (merge-sort l2)))\n            (merge-sort-helper (first (split l)) (second\
    \ (split l)))]))\n       (define (median-helper l)\n         (cond\n         \
    \  [(empty? l) 0]\n           [(empty? (rest l)) (first l)]\n           [else\n\
    \            (define (median-helper-helper l)\n              (cond\n         \
    \       [(empty? l) 0]\n                [(empty? (rest l)) (first l)]\n      \
    \          [else (median-helper-helper (rest l))]))\n            (median-helper-helper\
    \ (merge-sort l))]))\n       (median-helper (merge-sort l))]))\n  (median-helper\
    \ l))\n", "  (define (median-helper l)\n    (cond ((null? l) 0)\n          ((null?\
    \ (cdr l)) (car l))\n          ((= (modulo (length l) 2) 0)\n           (/ (+\
    \ (median-helper (take (length l) 2))\n                 (median-helper (drop (length\
    \ l) 2)))\n              2))\n          (else (median-helper (drop (length l)\
    \ 1)))))\n  (median-helper (sort l <)))\n", "  (define (median-helper l)\n   \
    \ (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\n\
    \       (let ([l1 (median-helper (rest l))]\n             [l2 (median-helper (rest\
    \ (rest l)))]\n             [l3 (median-helper (rest (rest (rest l))))])\n   \
    \      (cond\n           [(and (<= l1 l2) (<= l2 l3)) l2]\n           [(and (<=\
    \ l1 l3) (<= l3 l2)) l3]\n           [(and (<= l2 l1) (<= l1 l3)) l1]\n      \
    \     [(and (<= l2 l3) (<= l3 l1)) l3]\n           [(and (<= l3 l1) (<= l1 l2))\
    \ l1]\n           [(and (<= l3 l2) (<= l2 l1)) l2]))]))\n  (median-helper (sort\
    \ l <)))\n", "  (define (median-helper l n)\n    (cond\n      [(empty? l) 0]\n\
    \      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n \
    \     [else (median-helper (rest l) (- n 1))]))\n  (median-helper l (length l)))\n",
  "  (define (sort-list l)\n    (cond [(empty? l) empty]\n          [else (insert\
    \ (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n    (cond [(empty?\
    \ l) (list x)]\n          [(< x (first l)) (cons x l)]\n          [else (cons\
    \ (first l) (insert x (rest l)))]))\n  (define (middle l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [else (middle\
    \ (rest l))]))\n  (define (middle-two l)\n    (cond [(empty? l) empty]\n     \
    \     [(empty? (rest l)) empty]\n          [(empty? (rest (rest l))) empty]\n\
    \          [(empty? (rest (rest (rest l)))) (list (first l) (second l))]\n   \
    \       [else (middle-two (rest (rest l)))]))\n  (define (average x y)\n    (/\
    \ (+ x y) 2))\n  (cond [(empty? l) empty]\n        [(empty? (rest l)) (first l)]\n\
    \        [(empty? (rest (rest l))) (first l)]\n        [else (average (middle\
    \ (sort-list l)) (first (middle-two (sort-list l))))]))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define\
    \ (median-helper l1 l2)\n    (cond\n      [(empty? l1) (first l2)]\n      [(empty?\
    \ l2) (first l1)]\n      [(< (first l1) (first l2)) (median-helper (rest l1) l2)]\n\
    \      [else (median-helper l1 (rest l2))]))\n  (define (split l)\n    (cond\n\
    \      [(empty? l) (values empty empty)]\n      [(empty? (rest l)) (values l empty)]\n\
    \      [else (let-values ([(l1 l2) (split (rest (rest l)))])\n              (values\
    \ (cons (first l) l1) (cons (second l) l2)))]))\n  (define (merge l1 l2)\n   \
    \ (cond\n      [(empty? l1) l2]\n      [(empty? l2) l1]\n      [(< (first l1)\
    \ (first l2)) (cons (first l1) (merge (rest l1) l2))]\n      [else (cons (first\
    \ l2) (merge l1 (rest l2)))]))\n  (define (merge-sort l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) l]\n      [else (let-values ([(l1 l2) (split\
    \ l)])\n              (merge (merge-sort l1) (merge-sort l2)))]))\n  (define (even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (odd? n)\n    (not (even? n)))\n \
    \ (define (length l)\n    (cond\n      [(empty? l) 0]\n      [else (+ 1 (length\
    \ (rest l)))]))\n  (define (nth l n)\n    (cond\n      [(empty? l) (error 'nth\
    \ \"nth: empty list\")]\n      [(= n 0) (first l)]\n      [else (nth (rest l)\
    \ (- n 1))]))\n  (define (drop l n)\n    (cond\n      [(empty? l) empty]\n   \
    \   [(=", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n    \
    \  [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n\
    \      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n \
    \   (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n   \
    \   [else (middle (rest l))]))\n  (define (middle-two l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest (rest l)))\
    \ empty]\n      [(empty? (rest (rest (rest l)))) empty]\n      [else (list (first\
    \ l) (first (rest (rest l))))]))\n  (define (average l)\n    (/ (+ (first l) (first\
    \ (rest l))) 2))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (first\
    \ l)]\n    [(empty? (rest (rest l))) (first l)]\n    [else (cond\n           \
    \ [(empty? (rest (rest (rest l)))) (average (middle-two (sort-list l)))]\n   \
    \         [else (middle (sort-list l))])]))\n", "  (define (median-helper l)\n\
    \    (if (null? l)\n        0\n        (+ (car l) (median-helper (cdr l)))))\n\
    \  (/ (median-helper l) (length l)))\n", "  (define (sort l)\n    (cond\n    \
    \  [(empty? l) empty]\n      [else (insert (first l) (sort (rest l)))]))\n  (define\
    \ (insert n l)\n    (cond\n      [(empty? l) (list n)]\n      [(< n (first l))\
    \ (cons n l)]\n      [else (cons (first l) (insert n (rest l)))]))\n  (define\
    \ (middle l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first\
    \ l)]\n      [else (middle (rest l))]))\n  (define (middle-two l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest\
    \ (rest l))) empty]\n      [(empty? (rest (rest (rest l)))) (list (first l) (first\
    \ (rest l)))]\n      [else (middle-two (rest l))]))\n  (cond\n    [(empty? l)\
    \ empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l))) (/\
    \ (+ (first l) (first (rest l))) 2)]\n    [else (define sorted (sort l))\n   \
    \       (cond\n            [(empty? (rest (rest (rest l)))) (middle sorted)]\n\
    \            [else (define middle-two-sorted (middle-two sorted))\n          \
    \        (/ (+ (first middle-two-sorted) (first (rest middle-two-sorted))) 2)])]))\n",
  "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else (insert (first\
    \ l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond\n      [(empty? l)\
    \ (list x)]\n      [(< x (first l)) (cons x l)]\n      [else (cons (first l) (insert\
    \ x (rest l)))]))\n  (define (length l)\n    (cond\n      [(empty? l) 0]\n   \
    \   [else (+ 1 (length (rest l)))]))\n  (define (nth l n)\n    (cond\n      [(empty?\
    \ l) (error \"nth: index out of range\")]\n      [(= n 0) (first l)]\n      [else\
    \ (nth (rest l) (- n 1))]))\n  (define (half l)\n    (cond\n      [(= (length\
    \ l) 1) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (nth l (/ (length l) 2))]))\n  (half (sort l)))\n", "  (define (sort\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define (insert\
    \ x l)\n         (cond\n           [(empty? l) (list x)]\n           [(< x (first\
    \ l)) (cons x l)]\n           [else (cons (first l) (insert x (rest l)))]))\n\
    \       (define (sort-iter l acc)\n         (cond\n           [(empty? l) acc]\n\
    \           [else (sort-iter (rest l) (insert (first l) acc))]))\n       (sort-iter\
    \ l empty)]))\n  (define (middle l)\n    (cond\n      [(empty? l) empty]\n   \
    \   [(empty? (rest l)) (first l)]\n      [else (middle (rest l))]))\n  (define\
    \ (average x y)\n    (/ (+ x y) 2))\n  (cond\n    [(empty? l) empty]\n    [(empty?\
    \ (rest l)) (first l)]\n    [(empty? (rest (rest l))) (average (first l) (first\
    \ (rest l)))]\n    [else (middle (sort l))]))\n", "  (define (median-helper l)\n\
    \    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n     \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      \
    \    [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n", "  (define\
    \ (median-helper l)\n    (cond ((null? l) 0)\n          ((null? (cdr l)) (car\
    \ l))\n          ((null? (cddr l)) (/ (+ (car l) (cadr l)) 2))\n          (else\
    \ (median-helper (cdr l)))))\n  (median-helper (sort l <)))\n", "  (define (median-helper\
    \ l l1 l2)\n    (cond\n      [(empty? l) (if (empty? l1) (first l2) (first l1))]\n\
    \      [(< (first l) (first l1)) (median-helper (rest l) (cons (first l) l1) l2)]\n\
    \      [(> (first l) (first l2)) (median-helper (rest l) l1 (cons (first l) l2))]\n\
    \      [else (median-helper (rest l) l1 l2)]))\n  (median-helper l (list (first\
    \ l)) (list (first l))))\n", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [else (median-helper\
    \ (rest l))]))\n  (/ (+ (median-helper l) (median-helper (sort l <))) 2))\n",
  "  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n       (define\
    \ pivot (first l))\n       (define left (filter (lambda (x) (< x pivot)) (rest\
    \ l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest l)))\n  \
    \     (append (sort left) (list pivot) (sort right))]])\n  (define (middle l)\n\
    \    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n  \
    \    [else (middle (rest l))]))\n  (define (middle2 l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (middle2 (rest (rest l)))]))\n  (define (average l)\n\
    \    (/ (+ (first l) (first (rest l))) 2))\n  (cond\n    [(empty? l) empty]\n\
    \    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l))) (first l)]\n\
    \    [else\n     (cond\n       [(empty? (rest (rest (rest l)))) (average (list\
    \ (first l) (first (rest l)) (first (rest (rest l))))) ]\n       [else (middle\
    \ (sort l))])]))\n", "  (define (median-helper l1 l2)\n    (if (null? l1)\n  \
    \      (car l2)\n        (median-helper (cdr l1) (cdr l2))))\n  (define (median-helper2\
    \ l)\n    (if (null? l)\n        0\n        (+ (car l) (median-helper2 (cdr l)))))\n\
    \  (define (median-helper3 l)\n    (if (null? l)\n        0\n        (if (null?\
    \ (cdr l))\n            1\n            (+ 1 (median-helper3 (cdr l))))))\n  (define\
    \ (median-helper4 l)\n    (if (null? l)\n        0\n        (if (null? (cdr l))\n\
    \            (car l)\n            (median-helper4 (cdr l)))))\n  (define (median-helper5\
    \ l)\n    (if (null? l)\n        0\n        (if (null? (cdr l))\n            (car\
    \ l)\n            (median-helper4 (cdr l)))))\n  (define (median-helper6 l)\n\
    \    (if (null? l)\n        0\n        (if (null? (cdr l))\n            (car l)\n\
    \            (median-helper4 (cdr l)))))\n  (define (median-helper7 l)\n    (if\
    \ (null? l)\n        0\n        (if (null? (cdr l))\n            (car l)\n   \
    \         (median-helper4 (cdr l)))))\n  (define (median-helper8 l)\n    (if (null?\
    \ l)\n        0\n        (if (null? (cdr l))\n            (car l)\n          \
    \  (median-helper4 (cdr l)))))\n  (define (median-helper9 l)\n    (if (null? l)\n\
    \        0\n        (if (null? (cdr l))\n            (car l)\n            (median-helper4\
    \ (cdr l)))))\n  (define (median-helper", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\
    \ (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (sorted-list\
    \ l)\n    (sort l <))\n  (define (middle-element l)\n    (list-ref l (/ (length\
    \ l) 2)))\n  (define (middle-elements l)\n    (list (list-ref l (/ (length l)\
    \ 2))\n          (list-ref l (- (/ (length l) 2) 1))))\n  (define (average-of-two-numbers\
    \ a b)\n    (/ (+ a b) 2))\n  (cond ((even? (length l))\n         (average-of-two-numbers\
    \ (middle-elements (sorted-list l))))\n        (else (middle-element (sorted-list\
    \ l)))))\n", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n    \
    \  [(empty? l) 0]\n      [(= (length l) 1) (first l)]\n      [(= (length l) 2)\
    \ (/ (+ (first l) (second l)) 2)]\n      [else\n       (define (merge-sort l)\n\
    \         (define (merge l1 l2)\n           (cond\n             [(empty? l1) l2]\n\
    \             [(empty? l2) l1]\n             [(< (first l1) (first l2))\n    \
    \          (cons (first l1) (merge (rest l1) l2))]\n             [else\n     \
    \         (cons (first l2) (merge l1 (rest l2)))]))\n         (define (merge-sort-helper\
    \ l)\n           (cond\n             [(empty? l) empty]\n             [(empty?\
    \ (rest l)) l]\n             [else\n              (merge (merge-sort-helper (take\
    \ l (/ (length l) 2)))\n                     (merge-sort-helper (drop l (/ (length\
    \ l) 2))))]))\n         (merge-sort-helper l))\n       (define (take l n)\n  \
    \       (cond\n           [(empty? l) empty]\n           [(zero? n) empty]\n \
    \          [else (cons (first l) (take (rest l) (- n 1)))]))\n       (define (drop\
    \ l n)\n         (cond\n           [(empty? l) empty]\n           [(zero? n) l]\n\
    \           [else (drop (rest l) (- n 1))]))\n       (define (length l)\n    \
    \     (cond\n           [(empty? l) 0]\n           [else (+ 1 (length (rest l)))]))\n\
    \       (define (first l)\n         (cond\n           [(empty? l) (error \"first:\
    \ empty list\")]\n           [else (car l)]))\n       (define (second l)\n   \
    \      (cond\n           [(empty? l) (error \"second: empty list\")]\n       \
    \    [(empty? (rest l)) (error \"second: list too short\")]\n           [else\
    \ (car (rest l))]))\n       (define (empty? l", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\
    \ (median-helper (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else\n       (define (median-helper-helper l)\n         (cond\n       \
    \    [(empty? l) 0]\n           [(empty? (rest l)) (first l)]\n           [else\n\
    \            (define (median-helper-helper-helper l)\n              (cond\n  \
    \              [(empty? l) 0]\n                [(empty? (rest l)) (first l)]\n\
    \                [else\n                 (define (median-helper-helper-helper-helper\
    \ l)\n                   (cond\n                     [(empty? l) 0]\n        \
    \             [(empty? (rest l)) (first l)]\n                     [else\n    \
    \                  (define (median-helper-helper-helper-helper-helper l)\n   \
    \                     (cond\n                          [(empty? l) 0]\n      \
    \                    [(empty? (rest l)) (first l)]\n                         \
    \ [else\n                           (define (median-helper-helper-helper-helper-helper-helper\
    \ l)\n                             (cond\n                               [(empty?\
    \ l) 0]\n                               [(empty? (rest l)) (first l)]\n      \
    \                         [else\n                                (define (median-helper-helper-helper-helper-helper-helper-helper\
    \ l)\n                                  (cond\n                              \
    \      [(empty? l) 0]\n                                    [(empty? (rest l))\
    \ (first l)]\n                                    [else\n                    \
    \                 (define (median-helper-helper-helper-helper-helper-helper-helper-helper\
    \ l)\n                                       (cond\n                         \
    \                [(empty? l) 0]\n                                         [(empty?\
    \ (rest l)) (first l)]\n                                         [else\n     \
    \                                     (define (median-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ l)\n                                            (cond\n                    \
    \                          [(empty? l) 0]\n                                  \
    \            [(empty? (rest l)) (first l)]\n                                 \
    \            ", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (sort l)\n    (if (null? l)\n     \
    \   '()\n        (insert (car l) (sort (cdr l)))))\n  (define (insert n l)\n \
    \   (if (null? l)\n        (list n)\n        (if (<= n (car l))\n            (cons\
    \ n l)\n            (cons (car l) (insert n (cdr l))))))\n  (define (length l)\n\
    \    (if (null? l)\n        0\n        (+ 1 (length (cdr l)))))\n  (define (nth\
    \ l n)\n    (if (= n 0)\n        (car l)\n        (nth (cdr l) (- n 1))))\n  (define\
    \ (middle l)\n    (nth l (/ (length l) 2)))\n  (define (even? n)\n    (= (remainder\
    \ n 2) 0))\n  (define (average l)\n    (/ (+ (car l) (cadr l)) 2))\n  (if (even?\
    \ (length l))\n      (average (list (middle l) (nth l (- (length l) 1))))\n  \
    \    (middle l)))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert n l)\n\
    \    (cond\n      [(empty? l) (list n)]\n      [(< n (first l)) (cons n l)]\n\
    \      [else (cons (first l) (insert n (rest l)))]))\n  (define (middle l)\n \
    \   (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n   \
    \   [else (middle (rest l))]))\n  (define (middle-2 l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) empty]\n      [(empty? (rest (rest l)))\
    \ (first l)]\n      [else (middle-2 (rest (rest l)))]))\n  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (first (rest l))) 2)]\n    [else (cond\n            [(even?\
    \ (length l)) (/ (+ (middle-2 (sort-list l)) (middle (sort-list l))) 2)]\n   \
    \         [else (middle (sort-list l))])]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
