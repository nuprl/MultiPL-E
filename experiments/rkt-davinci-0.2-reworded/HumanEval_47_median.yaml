name: HumanEval_47_median
language: rkt
prompt: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
  \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
  (define (median l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
  \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n \
  \   (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
  \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n    \
    \  [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n  (/\
    \ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper\
    \ (rest l))]))\n  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n\
    \    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n  \
    \    [else\n       (define (merge-sort l)\n         (define (merge l1 l2)\n  \
    \         (cond\n             [(empty? l1) l2]\n             [(empty? l2) l1]\n\
    \             [(< (first l1) (first l2))\n              (cons (first l1) (merge\
    \ (rest l1) l2))]\n             [else\n              (cons (first l2) (merge l1\
    \ (rest l2)))]))\n         (define (split l)\n           (cond\n             [(empty?\
    \ l) (list empty empty)]\n             [(empty? (rest l)) (list (list (first l))\
    \ empty)]\n             [else\n              (define (split-helper l1 l2)\n  \
    \              (cond\n                  [(empty? l2) (list l1 empty)]\n      \
    \            [else\n                   (split-helper (cons (first l2) l1) (rest\
    \ l2))]))\n              (split-helper (list (first l)) (rest l))]))\n       \
    \  (define (merge-sort-helper l)\n           (cond\n             [(empty? l) empty]\n\
    \             [(empty? (rest l)) (first l)]\n             [else\n            \
    \  (define (merge-sort-helper-helper l1 l2)\n                (merge (merge-sort\
    \ l1) (merge-sort l2)))\n              (merge-sort-helper-helper (first l) (second\
    \ l))]))\n         (merge-sort-helper (split l)))\n       (define (median-helper-helper\
    \ l)\n         (cond\n           [(empty? l) empty]\n           [(empty? (rest\
    \ l)) (first l)]\n           [else\n            (define (median-helper-helper-helper\
    \ l1 l2)\n              (cond\n                [(empty? l2) (first l1)]\n    \
    \            [else\n                 (median-helper-helper-helper (rest l1) (rest\
    \ l2))]))", "  (define (median-helper l n)\n    (cond\n      [(= n 0) (car l)]\n\
    \      [(= n 1) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 2) (cadr l)]\n      [else\
    \ (median-helper (cdr l) (- n 1))]))\n  (median-helper (sort l <) (quotient (length\
    \ l) 2)))\n", "  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert n l)\n\
    \    (cond\n      [(empty? l) (list n)]\n      [(< n (first l)) (cons n l)]\n\
    \      [else (cons (first l) (insert n (rest l)))]))\n  (define (middle l)\n \
    \   (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) empty]\n      [(empty?\
    \ (rest (rest l))) (first l)]\n      [else (middle (rest l))]))\n  (define (average\
    \ l)\n    (/ (+ (first l) (second l)) 2))\n  (cond\n    [(empty? l) empty]\n \
    \   [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l))) (first l)]\n\
    \    [else (cond\n            [(empty? (rest (rest (rest l)))) (average (list\
    \ (first l) (second l) (third l)))]\n            [else (middle (sort-list l))])]))\n",
  "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest\
    \ l)) (first l)]\n      [else\n       (define (merge-sort l)\n         (define\
    \ (merge l1 l2)\n           (cond\n             [(empty? l1) l2]\n           \
    \  [(empty? l2) l1]\n             [(< (first l1) (first l2))\n              (cons\
    \ (first l1) (merge (rest l1) l2))]\n             [else\n              (cons (first\
    \ l2) (merge l1 (rest l2)))]))\n         (define (split l)\n           (cond\n\
    \             [(empty? l) (values empty empty)]\n             [(empty? (rest l))\
    \ (values (list (first l)) empty)]\n             [else\n              (define\
    \ (split-helper l1 l2)\n                (cond\n                  [(empty? (rest\
    \ l2)) (values l1 l2)]\n                  [else (split-helper (append l1 (list\
    \ (first l2))) (rest l2))]))\n              (split-helper (list (first l)) (rest\
    \ l))]))\n         (define (merge-sort-helper l)\n           (cond\n         \
    \    [(empty? l) empty]\n             [(empty? (rest l)) l]\n             [else\n\
    \              (let* ([(l1 l2) (split l)]\n                     [l1 (merge-sort-helper\
    \ l1)]\n                     [l2 (merge-sort-helper l2)])\n                (merge\
    \ l1 l2))]))\n         (merge-sort-helper l))\n       (define (median-helper-helper\
    \ l)\n         (cond\n           [(empty? l) 0]\n           [(empty? (rest l))\
    \ (first l)]\n           [else\n            (define (median-helper-helper-helper\
    \ l)\n              (cond\n                [(empty? l) 0]\n                [(empty?\
    \ (rest l)) (first l)]\n                [else\n                 (define (median-helper-helper-helper-helper\
    \ l)\n                   (cond", "  (define (sort l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [else (insert (first l) (sort (rest l)))]))\n  (define (insert\
    \ x l)\n    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x\
    \ l)]\n      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle\
    \ l)\n    (if (empty? (rest l))\n        (first l)\n        (/ (+ (first l) (first\
    \ (rest l))) 2)))\n  (if (empty? l)\n      (error \"median: empty list\")\n  \
    \    (middle (sort l))))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (define (median-helper2 l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (median-helper2 (rest (rest\
    \ l)))]))\n  (/ (+ (median-helper l) (median-helper2 l)) 2))\n", "  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [else (median-helper (rest l))]))\n  (/ (+ (median-helper l) (median-helper\
    \ (sort l <))) 2))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(= (length l) 1) (first l)]\n      [(= (length l) 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else\n       (define (median-helper-helper l)\n \
    \        (cond\n           [(empty? l) 0]\n           [(= (length l) 1) (first\
    \ l)]\n           [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n        \
    \   [else\n            (define (median-helper-helper-helper l)\n             \
    \ (cond\n                [(empty? l) 0]\n                [(= (length l) 1) (first\
    \ l)]\n                [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n   \
    \             [else\n                 (define (median-helper-helper-helper-helper\
    \ l)\n                   (cond\n                     [(empty? l) 0]\n        \
    \             [(= (length l) 1) (first l)]\n                     [(= (length l)\
    \ 2) (/ (+ (first l) (second l)) 2)]\n                     [else\n           \
    \           (define (median-helper-helper-helper-helper-helper l)\n          \
    \              (cond\n                          [(empty? l) 0]\n             \
    \             [(= (length l) 1) (first l)]\n                          [(= (length\
    \ l) 2) (/ (+ (first l) (second l)) 2)]\n                          [else\n   \
    \                        (define (median-helper-helper-helper-helper-helper-helper\
    \ l)\n                             (cond\n                               [(empty?\
    \ l) 0]\n                               [(= (length l) 1) (first l)]\n       \
    \                        [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n \
    \                              [else\n                                (define\
    \ (median-helper-helper-helper-helper-helper-helper-helper l)\n              \
    \                    (cond\n                                    [(empty? l) 0]\n\
    \                                    [(= (length l) 1) (first l)]\n          \
    \                          [(= (", "  (define (median-helper l)\n    (cond [(empty?\
    \ l) 0]\n          [(empty? (rest l)) (first l)]\n          [else (median-helper\
    \ (rest l))]))\n  (/ (+ (median-helper l) (median-helper (sort l <))) 2))\n",
  "  (define (median-iter l acc)\n    (if (null? l)\n        acc\n        (median-iter\
    \ (cdr l) (+ acc (car l)))))\n  (/ (median-iter l 0) (length l)))\n", "  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l))\
    \ (first l)]\n      [else\n       (define (median-helper-helper l)\n         (cond\n\
    \           [(empty? l) 0]\n           [(empty? (rest l)) (first l)]\n       \
    \    [else\n            (define (median-helper-helper-helper l)\n            \
    \  (cond\n                [(empty? l) 0]\n                [(empty? (rest l)) (first\
    \ l)]\n                [else\n                 (define (median-helper-helper-helper-helper\
    \ l)\n                   (cond\n                     [(empty? l) 0]\n        \
    \             [(empty? (rest l)) (first l)]\n                     [else\n    \
    \                  (define (median-helper-helper-helper-helper-helper l)\n   \
    \                     (cond\n                          [(empty? l) 0]\n      \
    \                    [(empty? (rest l)) (first l)]\n                         \
    \ [else\n                           (define (median-helper-helper-helper-helper-helper-helper\
    \ l)\n                             (cond\n                               [(empty?\
    \ l) 0]\n                               [(empty? (rest l)) (first l)]\n      \
    \                         [else\n                                (define (median-helper-helper-helper-helper-helper-helper-helper\
    \ l)\n                                  (cond\n                              \
    \      [(empty? l) 0]\n                                    [(empty? (rest l))\
    \ (first l)]\n                                    [else\n                    \
    \                 (define (median-helper-helper-helper-helper-helper-helper-helper-helper\
    \ l)\n                                       (cond\n                         \
    \                [(empty? l) 0]\n                                         [(empty?\
    \ (rest l)) (first l)]\n                                         [else\n     \
    \                                     (define (median-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ l)\n                                            (cond\n                    \
    \                          [(empty? l) 0]\n                                  \
    \            [(empty? (rest l)) (first l)]\n                                 \
    \            ", "  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n", "  (define (median-helper l)\n    (if (null? l)\n\
    \        0\n        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper\
    \ l) (length l)))\n", "  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) empty]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (define (median-helper2 l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [else (median-helper2 (rest (rest\
    \ l)))]))\n  (/ (+ (median-helper l) (median-helper2 l)) 2))\n", "  (define (median-helper\
    \ l n)\n    (cond\n      [(= n 0) (/ (car l) 2)]\n      [(= n 1) (/ (+ (car l)\
    \ (car (cdr l))) 2)]\n      [else (median-helper (cdr l) (- n 1))]))\n  (median-helper\
    \ (sort l <) (quotient (length l) 2)))\n", "  (define (sort l)\n    (cond\n  \
    \    [(empty? l) empty]\n      [else (insert (first l) (sort (rest l)))]))\n \
    \ (define (insert n l)\n    (cond\n      [(empty? l) (list n)]\n      [(< n (first\
    \ l)) (cons n l)]\n      [else (cons (first l) (insert n (rest l)))]))\n  (define\
    \ (length l)\n    (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest\
    \ l)))]))\n  (define (nth n l)\n    (cond\n      [(= n 0) (first l)]\n      [else\
    \ (nth (- n 1) (rest l))]))\n  (define (half l)\n    (quotient (length l) 2))\n\
    \  (define (sorted-l l)\n    (sort l))\n  (define (sorted-l-length l)\n    (length\
    \ (sorted-l l)))\n  (define (sorted-l-half l)\n    (half (sorted-l l)))\n  (define\
    \ (sorted-l-nth l n)\n    (nth n (sorted-l l)))\n  (define (sorted-l-nth-half\
    \ l)\n    (sorted-l-nth l (sorted-l-half l)))\n  (define (sorted-l-nth-half-plus-one\
    \ l)\n    (sorted-l-nth l (+ 1 (sorted-l-half l))))\n  (define (sorted-l-nth-half-plus-one-minus-one\
    \ l)\n    (sorted-l-nth l (- (sorted-l-half l) 1)))\n  (cond\n    [(= (sorted-l-length\
    \ l) 0) 0]\n    [(= (sorted-l-length l) 1) (sorted-l-nth-half l)]\n    [(= (sorted-l-length\
    \ l) 2) (/ (+ (sorted-l-nth-half l) (sorted-l-nth-half-plus-one l)) 2)]\n    [(=\
    \ (s", "  (define (median-helper l n)\n    (cond\n      [(= n 0) (car l)]\n  \
    \    [(= n 1) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 2) (cadr l)]\n      [else\n\
    \       (median-helper (cdr l) (- n 1))]))\n  (median-helper l (length l)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
