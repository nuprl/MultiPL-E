name: HumanEval_9_rolling_max
language: rkt
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n;; >>> (rolling_max\
  \ (list 1 2 3 2 3 4 2))\n;; (list 1 2 3 3 3 4 4)\n(define (rolling_max numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [(empty? max-so-far) (rolling_max_iter (rest numbers)\
    \ (list (first numbers)))]\n      [else\n       (cons (max (first max-so-far)\
    \ (first numbers))\n             (rolling_max_iter (rest numbers) (cons (first\
    \ numbers) max-so-far)))]))\n  (rolling_max_iter numbers empty))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (cond\n      [(empty? numbers)\
    \ (reverse maxes)]\n      [else (rolling_max_iter (rest numbers) (cons (max (first\
    \ numbers) (first maxes)) maxes))]))\n  (rolling_max_iter (rest numbers) (list\
    \ (first numbers))))\n", "  (define (rolling_max_iter numbers max-so-far)\n  \
    \  (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (if (null? numbers)\n  \
    \    '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max-iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max-iter numbers\
    \ 0))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n\
    \        '()\n        (cons max-so-far (rolling_max_iter (cdr numbers) (max (car\
    \ numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n", " \
    \ (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n   \
    \     '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (let loop ([numbers numbers]\n             [max-so-far -1]\n    \
    \         [result '()])\n    (cond [(empty? numbers) (reverse result)]\n     \
    \     [(> (first numbers) max-so-far)\n           (loop (rest numbers)\n     \
    \            (first numbers)\n                 (cons (first numbers) result))]\n\
    \          [else\n           (loop (rest numbers)\n                 max-so-far\n\
    \                 (cons max-so-far result))])))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n\
    \              (max max-so-far (first (rest numbers)))\n              (append\
    \ result (list (max max-so-far (first (rest numbers)))))))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max-so-far)\n       (rolling_max_iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) max-so-far (cons max-so-far result))]))\n  (rolling_max_iter\
    \ numbers (first numbers) (list (first numbers))))\n", "  (define (rolling_max_helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_helper\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_helper numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max_iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max_iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max_iter numbers -1 '()))\n", "  (let loop ([numbers numbers]\n  \
    \           [max-so-far -1]\n             [result '()])\n    (cond [(empty? numbers)\
    \ (reverse result)]\n          [(> (first numbers) max-so-far)\n           (loop\
    \ (rest numbers)\n                 (first numbers)\n                 (cons (first\
    \ numbers) result))]\n          [else\n           (loop (rest numbers)\n     \
    \            max-so-far\n                 (cons max-so-far result))])))\n", " \
    \ (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ (list)]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (if (null? numbers)\n  \
    \    '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max-iter max-so-far numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max-iter (first numbers) (rest numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max-iter max-so-far (rest numbers)))]))\n  (rolling_max-iter\
    \ (first numbers) (rest numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (first numbers)]\n             [result (list max-so-far)])\n    (if (null? (rest\
    \ numbers))\n        result\n        (loop (rest numbers)\n              (if (&gt;\
    \ (first numbers) max-so-far)\n                  (first numbers)\n           \
    \       max-so-far)\n              (cons (if (&gt; (first numbers) max-so-far)\n\
    \                        (first numbers)\n                        max-so-far)\n\
    \                    result)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (if (null? numbers)\n      '()\n     \
    \ (cons (max (car numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n      (cons (max (car\
    \ numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n",
  "  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers)) (list (first\
    \ numbers))]\n    [else (cons (max (first numbers) (first (rolling_max (rest numbers))))\n\
    \                (rolling_max (rest numbers)))]))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max\
    \ (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max-iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max-iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [maxs '()])\n    (cond [(empty? numbers)\
    \ (reverse maxs)]\n          [else (let ([max (max (first numbers) (or (first\
    \ maxs) 0))])\n                  (loop (rest numbers) (cons max maxs)))])))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (cond\n      [(empty? numbers)\
    \ (reverse maxes)]\n      [else (rolling_max_iter (rest numbers) (cons (max (first\
    \ numbers) (first maxes)) maxes))]))\n  (rolling_max_iter (rest numbers) (list\
    \ (first numbers))))\n", "  (if (null? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n\
    \      '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far 0]\n             [result '()])\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (loop\
    \ (rest numbers)\n             (first numbers)\n             (cons (first numbers)\
    \ result))]\n      [else\n       (loop (rest numbers)\n             max-so-far\n\
    \             (cons max-so-far result))])))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond ((null? numbers) '())\n          ((> (car numbers) max-so-far)\n\
    \           (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n\
    \          (else (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (if (null? numbers)\n      '()\n     \
    \ (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", " \
    \ (cond\n    [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n\
    \    [else\n     (cons (max (first numbers) (first (rolling_max (rest numbers))))\n\
    \           (rolling_max (rest numbers)))]))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (if (null? numbers)\n  \
    \    '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (max max-so-far (first\
    \ (rest numbers)))\n              (append result (list (max max-so-far (first\
    \ (rest numbers)))))))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (if (null? numbers)\n  \
    \    '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (iter numbers max-so-far result)\n    (cond\n      [(empty? numbers)\
    \ (reverse result)]\n      [(> (first numbers) max-so-far) (iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else (iter (rest numbers)\
    \ max-so-far (cons max-so-far result))]))\n  (iter numbers (first numbers) (list\
    \ (first numbers))))\n", "  (define (rolling_max_iter numbers max-so-far)\n  \
    \  (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (let ([current-max (max (car numbers) max-so-far)])\n      \
    \    (cons current-max (rolling_max_iter (cdr numbers) current-max)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (if (empty? numbers)\n \
    \     '()\n      (cons (max (first numbers) (first (rolling_max (rest numbers))))\n\
    \            (rolling_max (rest numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers max_so_far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max_so_far)\n       (cons max_so_far (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max_so_far (rolling_max_iter (rest\
    \ numbers) max_so_far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max)\n\
    \    (if (null? numbers)\n        '()\n        (cons max (rolling_max_iter (cdr\
    \ numbers) (max (car numbers) max)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n  (rolling_max-iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) (reverse max-so-far)]\n      [(> (first numbers)\
    \ (first max-so-far))\n       (rolling_max_iter (rest numbers) (cons (first numbers)\
    \ max-so-far))]\n      [else (rolling_max_iter (rest numbers) (cons (first max-so-far)\
    \ max-so-far))]))\n  (rolling_max_iter numbers (list (first numbers))))\n", " \
    \ (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n          \
    \  (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (let ((max-so-far (if (&gt; (car\
    \ numbers) max-so-far)\n                              (car numbers)\n        \
    \                      max-so-far)))\n          (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (if (empty? numbers)\n      '()\n      (cons (apply max numbers)\n          \
    \  (rolling_max (rest numbers)))))\n", "  (let loop ([numbers numbers]\n     \
    \        [max-so-far 0]\n             [result '()])\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (loop\
    \ (rest numbers)\n             (first numbers)\n             (cons (first numbers)\
    \ result))]\n      [else\n       (loop (rest numbers)\n             max-so-far\n\
    \             (cons max-so-far result))])))\n", "  (define (rolling_max_iter max-so-far\
    \ numbers)\n    (cond ((null? numbers) '())\n          ((> (car numbers) max-so-far)\n\
    \           (cons (car numbers) (rolling_max_iter (car numbers) (cdr numbers))))\n\
    \          (else (cons max-so-far (rolling_max_iter max-so-far (cdr numbers))))))\n\
    \  (rolling_max_iter (car numbers) (cdr numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n\
    \             [result (list max-so-far)])\n    (if (null? (rest numbers))\n  \
    \      result\n        (loop (rest numbers)\n              (max max-so-far (first\
    \ (rest numbers)))\n              (append result (list (max max-so-far (first\
    \ (rest numbers)))))))))\n", "  (define (rolling_max_iter numbers maxes)\n   \
    \ (cond\n      [(empty? numbers) (reverse maxes)]\n      [else (rolling_max_iter\
    \ (rest numbers) (cons (max (first numbers) (first maxes)) maxes))]))\n  (rolling_max_iter\
    \ (rest numbers) (list (first numbers))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers) (first\
    \ numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest numbers)\
    \ max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (first numbers)]\n             [result (list max-so-far)])\n    (if (null? (rest\
    \ numbers))\n        result\n        (loop (rest numbers)\n              (if (max?\
    \ (first numbers) max-so-far)\n                  (first numbers)\n           \
    \       max-so-far)\n              (cons (if (max? (first numbers) max-so-far)\n\
    \                        (first numbers)\n                        max-so-far)\n\
    \                    result)))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", " \
    \ (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n    \
    \         [result (list max-so-far)])\n    (if (null? (cdr numbers))\n       \
    \ result\n        (loop (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (let loop ([numbers numbers]\n        \
    \     [max-so-far (car numbers)]\n             [result (list max-so-far)])\n \
    \   (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n \
    \             (if (&gt; (car numbers) max-so-far)\n                  (car numbers)\n\
    \                  max-so-far)\n              (cons max-so-far result)))))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_helper numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_helper (rest numbers) max-so-far))]))\n\
    \  (rolling_max_helper numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter max-so-far numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (first numbers) (rest numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter max-so-far (rest numbers)))]))\n  (rolling_max_iter\
    \ (first numbers) (rest numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (if (null? numbers)\n  \
    \    '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (max max-so-far (first\
    \ (rest numbers)))\n              (append result (list (max max-so-far (first\
    \ (rest numbers)))))))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr\
    \ numbers))\n        result\n        (loop (cdr numbers)\n              (if (&gt;\
    \ (car numbers) max-so-far)\n                  (car numbers)\n               \
    \   max-so-far)\n              (cons max-so-far result)))))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (cond\n      [(empty? numbers) (reverse maxes)]\n      [else\n\
    \       (let ([n (first numbers)])\n         (rolling_max_iter (rest numbers)\
    \ (cons (if (empty? maxes) n (max n (first maxes))) maxes)))]))\n  (rolling_max_iter\
    \ numbers empty))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n     \
    \  (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max) (cons (first numbers) (rolling_max_iter (rest\
    \ numbers) (first numbers)))]\n      [else (cons max (rolling_max_iter (rest numbers)\
    \ max))]))\n  (rolling_max_iter numbers 0))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max (car numbers)\
    \ max-so-far)\n              (rolling_max_iter (cdr numbers) (max (car numbers)\
    \ max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (let loop ([numbers\
    \ numbers]\n             [max-so-far 0]\n             [result '()])\n    (cond\
    \ [(empty? numbers) (reverse result)]\n          [else (let ([current-max (max\
    \ (first numbers) max-so-far)])\n                  (loop (rest numbers)\n    \
    \                    current-max\n                        (cons current-max result)))])))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max-iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max-iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max-iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max-iter numbers (first numbers)))\n", "  (if (null? numbers)\n  \
    \    '()\n      (cons (max (car numbers) (car (rolling_max (cdr numbers))))\n\
    \            (rolling_max (cdr numbers)))))\n", "  (cond\n    [(empty? numbers)\
    \ empty]\n    [(empty? (rest numbers)) (list (first numbers))]\n    [else (cons\
    \ (max (first numbers) (first (rolling_max (rest numbers))))\n               \
    \ (rolling_max (rest numbers)))]))\n", "  (if (null? numbers)\n      '()\n   \
    \   (cons (max (car numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n   \
    \ (if (null? numbers)\n        '()\n        (let ((current-max (max (car numbers)\
    \ max-so-far)))\n          (cons current-max (rolling_max_iter (cdr numbers) current-max)))))\n\
    \  (rolling_max_iter numbers -1))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (let loop ([numbers numbers]\n       \
    \      [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (cond [(empty? numbers) (reverse result)]\n          [(> (first numbers)\
    \ max-so-far)\n           (loop (rest numbers)\n                 (first numbers)\n\
    \                 (cons (first numbers) result))]\n          [else\n         \
    \  (loop (rest numbers)\n                 max-so-far\n                 (cons max-so-far\
    \ result))])))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (if (null?\
    \ numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n      \
    \        (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond ((null? numbers) '())\n          ((> (car numbers) max-so-far)\n  \
    \         (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n\
    \          (else (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers 0))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n   \
    \ (cond\n      [(empty? numbers) empty]\n      [(= (first numbers) max-so-far)\
    \ (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]\n      [(> (first\
    \ numbers) max-so-far) (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else (cons max-so-far (rolling_max_iter (rest numbers)\
    \ max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (define\
    \ (rolling_max_helper numbers max)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max) (cons (first numbers) (rolling_max_helper (rest\
    \ numbers) (first numbers)))]\n      [else (cons max (rolling_max_helper (rest\
    \ numbers) max))]))\n  (rolling_max_helper numbers (first numbers)))\n", "  (define\
    \ (rolling_max_iter numbers max_so_far)\n    (cond ((null? numbers) '())\n   \
    \       ((> (car numbers) max_so_far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max_so_far (rolling_max_iter\
    \ (cdr numbers) max_so_far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers) (first\
    \ numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest numbers)\
    \ max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n   \
    \ (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (let ([max-so-far (max (car numbers) max-so-far)])\n       \
    \   (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (if (empty? numbers)\n \
    \     empty\n      (cons (apply max numbers)\n            (rolling_max (rest numbers)))))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        (reverse\
    \ maxes)\n        (let ((new-max (max (car numbers) (car maxes))))\n         \
    \ (rolling_max_iter (cdr numbers) (cons new-max maxes)))))\n  (rolling_max_iter\
    \ numbers (list (car numbers))))\n", "  (define (rolling_max_iter numbers maxes)\n\
    \    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter (cdr\
    \ numbers)\n                          (cons (max (car numbers) (car maxes)) maxes))))\n\
    \  (rolling_max_iter (cdr numbers) (list (car numbers))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers maxes)\n\
    \    (cond [(empty? numbers) (reverse maxes)]\n          [else (rolling_max_iter\
    \ (rest numbers)\n                                  (cons (max (first numbers)\
    \ (first maxes)) maxes))]))\n  (rolling_max_iter (rest numbers) (list (first numbers))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [acc '()])\n    (cond [(empty? numbers) (reverse acc)]\n       \
    \   [else (loop (rest numbers)\n                      (cons (max (first numbers)\
    \ (if (empty? acc) 0 (first acc))) acc))])))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond ((null? numbers) '())\n          ((&gt; (car\
    \ numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter (cdr\
    \ numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (if (max? (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons (if (max? (first numbers) max-so-far)\n                 \
    \       (first numbers)\n                        max-so-far)\n               \
    \     result)))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (first numbers)]\n             [result (list max-so-far)])\n    (if (null? (rest\
    \ numbers))\n        result\n        (loop (rest numbers)\n              (if (&gt;\
    \ (first numbers) max-so-far)\n                  (first numbers)\n           \
    \       max-so-far)\n              (cons (if (&gt; (first numbers) max-so-far)\n\
    \                        (first numbers)\n                        max-so-far)\n\
    \                    result)))))\n", "  (define (rolling_max_iter max-so-far numbers)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (first numbers) (rest numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter max-so-far (rest numbers)))]))\n\
    \  (rolling_max_iter (first numbers) (rest numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (let ([n\
    \ (car numbers)])\n          (cons (if (&gt; n max-so-far) n max-so-far)\n   \
    \             (rolling_max_iter (cdr numbers) (if (&gt; n max-so-far) n max-so-far))))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max-so-far)\n       (rolling_max_iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) max-so-far (cons max-so-far result))]))\n  (rolling_max_iter\
    \ numbers 0 empty))\n", "  (define (rolling_max_iter numbers max-so-far result)\n\
    \    (cond\n      [(empty? numbers) (reverse result)]\n      [(> (first numbers)\
    \ max-so-far)\n       (rolling_max_iter (rest numbers) (first numbers) (cons (first\
    \ numbers) result))]\n      [else\n       (rolling_max_iter (rest numbers) max-so-far\
    \ (cons max-so-far result))]))\n  (rolling_max_iter numbers -1000000000 '()))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers current-max result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) current-max)\n       (rolling_max_iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max_iter (rest numbers) current-max (cons current-max result))]))\n\
    \  (rolling_max_iter numbers (first numbers) (list (first numbers))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (if (max? (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (cons max-so-far result)))))\n", "  (define (rolling_max_iter max-so-far numbers)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (max max-so-far (car numbers)) (cdr numbers)))))\n  (rolling_max_iter (car numbers)\
    \ (cdr numbers)))\n", "  (define (rolling_max-iter numbers max-so-far)\n    (if\
    \ (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max-iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max-iter numbers 0))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ max-so-far numbers)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (first\
    \ numbers) (rest numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ max-so-far (rest numbers)))]))\n  (rolling_max_iter (first numbers) (rest numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far result)\n    (cond\n      [(empty?\
    \ numbers) (reverse result)]\n      [(> (first numbers) max-so-far)\n       (rolling_max_iter\
    \ (rest numbers) (first numbers) (cons (first numbers) result))]\n      [else\n\
    \       (rolling_max_iter (rest numbers) max-so-far (cons max-so-far result))]))\n\
    \  (rolling_max_iter numbers -1 '()))\n", "  (define (rolling_max_iter numbers\
    \ maxes)\n    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter\
    \ (cdr numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter\
    \ (cdr numbers) (list (car numbers))))\n", "  (define (rolling_max_iter numbers\
    \ maxes)\n    (cond\n      [(empty? numbers) (reverse maxes)]\n      [else\n \
    \      (let ([n (first numbers)])\n         (rolling_max_iter (rest numbers) (cons\
    \ (if (empty? maxes) n (max n (first maxes))) maxes)))]))\n  (rolling_max_iter\
    \ numbers '()))\n", "  (define (rolling_max_acc numbers acc)\n    (cond\n    \
    \  [(empty? numbers) acc]\n      [(empty? acc) (rolling_max_acc (rest numbers)\
    \ (list (first numbers)))]\n      [else (rolling_max_acc (rest numbers) (append\
    \ acc (list (max (first numbers) (first acc)))))]))\n  (rolling_max_acc numbers\
    \ '()))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n    \
    \  [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons\
    \ (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons max-so-far (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max_so_far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max_so_far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max_so_far)))))\n  (rolling_max_iter numbers 0))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max-iter (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n  (rolling_max-iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ -1]\n             [result '()])\n    (cond [(empty? numbers) (reverse result)]\n\
    \          [(> (first numbers) max-so-far)\n           (loop (rest numbers)\n\
    \                 (first numbers)\n                 (cons (first numbers) result))]\n\
    \          [else\n           (loop (rest numbers)\n                 max-so-far\n\
    \                 (cons max-so-far result))])))\n", "  (define (rolling_max_helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_helper\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_helper numbers (first numbers)))\n",
  "  (define (rolling_max_iter max-so-far numbers)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling_max_iter (first numbers) (rest numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling_max_iter max-so-far (rest numbers)))]))\n  (rolling_max_iter\
    \ (first numbers) (rest numbers)))\n", "  (if (null? numbers)\n      '()\n   \
    \   (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n       \
    \      [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n\
    \              (if (&gt; (first numbers) max-so-far)\n                  (first\
    \ numbers)\n                  max-so-far)\n              (cons (if (&gt; (first\
    \ numbers) max-so-far)\n                        (first numbers)\n            \
    \            max-so-far)\n                    result)))))\n", "  (define (rolling_max_helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_helper (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_helper numbers 0))\n", "  (cond\n\
    \    [(empty? numbers) empty]\n    [(empty? (rest numbers)) numbers]\n    [else\n\
    \     (cons (max (first numbers) (first (rolling_max (rest numbers))))\n     \
    \      (rolling_max (rest numbers)))]))\n", "  (define (rolling_max_iter max-so-far\
    \ numbers)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (first numbers)\
    \ (rest numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter max-so-far\
    \ (rest numbers)))]))\n  (rolling_max_iter (first numbers) (rest numbers)))\n",
  "  (if (empty? numbers)\n      '()\n      (cons (apply max numbers)\n          \
    \  (rolling_max (rest numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (cond\n      [(empty? numbers)\
    \ maxes]\n      [(empty? maxes) (rolling_max_iter (rest numbers) (list (first\
    \ numbers)))]\n      [else (rolling_max_iter (rest numbers) (append maxes (list\
    \ (max (first numbers) (first maxes)))))]))\n  (rolling_max_iter numbers (list)))\n",
  "  (define (rolling_max_iter numbers max)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [(> (first numbers) max) (cons (first numbers) (rolling_max_iter (rest\
    \ numbers) (first numbers)))]\n      [else (cons max (rolling_max_iter (rest numbers)\
    \ max))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (if (null? numbers)\n\
    \      '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far -1]\n             [accumulator\
    \ (list)])\n    (cond\n      [(empty? numbers) (reverse accumulator)]\n      [(>\
    \ (first numbers) max-so-far)\n       (loop (rest numbers)\n             (first\
    \ numbers)\n             (cons (first numbers) accumulator))]\n      [else\n \
    \      (loop (rest numbers)\n             max-so-far\n             (cons max-so-far\
    \ accumulator))])))\n", "  (define (rolling_max_iter numbers max-so-far)\n   \
    \ (cond\n      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far result)\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max-so-far)\n       (rolling_max_iter (rest numbers)\
    \ (first numbers) (cons (first numbers) result))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) max-so-far (cons max-so-far result))]))\n  (rolling_max_iter\
    \ numbers -inf.0 empty))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (let ((max-so-far (if (&gt; (car\
    \ numbers) max-so-far)\n                              (car numbers)\n        \
    \                      max-so-far)))\n          (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (if (null? numbers)\n      '()\n     \
    \ (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", " \
    \ (if (null? numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max\
    \ (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (rolling_max_helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_helper\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_helper\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_helper numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n\
    \          ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far -1]\n             [result\
    \ '()])\n    (cond [(empty? numbers) (reverse result)]\n          [(> (first numbers)\
    \ max-so-far)\n           (loop (rest numbers)\n                 (first numbers)\n\
    \                 (cons (first numbers) result))]\n          [else\n         \
    \  (loop (rest numbers)\n                 max-so-far\n                 (cons max-so-far\
    \ result))])))\n", "  (let loop ([numbers numbers]\n             [max-so-far 0]\n\
    \             [result '()])\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max-so-far)\n       (loop (rest numbers)\n        \
    \     (first numbers)\n             (cons (first numbers) result))]\n      [else\n\
    \       (loop (rest numbers)\n             max-so-far\n             (cons max-so-far\
    \ result))])))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n     \
    \  (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter\
    \ (cdr numbers)\n                          (cons (max (car numbers) (car maxes))\
    \ maxes))))\n  (rolling_max_iter (cdr numbers) (list (car numbers))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n   \
    \       ((&gt; (car numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (cond\n      [(empty? numbers)\
    \ (reverse maxes)]\n      [else\n       (rolling_max_iter (rest numbers)\n   \
    \                      (cons (max (first numbers) (first maxes)) maxes))]))\n\
    \  (rolling_max_iter (rest numbers) (list (first numbers))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [(> (first numbers) max-so-far)\n       (cons (first\
    \ numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers maxes)\n\
    \    (cond\n      [(empty? numbers) (reverse maxes)]\n      [else\n       (define\
    \ current (first numbers))\n       (define max (if (empty? maxes) current (max\
    \ current (first maxes))))\n       (rolling_max_iter (rest numbers) (cons max\
    \ maxes))]))\n  (rolling_max_iter numbers (list)))\n", "  (if (null? numbers)\n\
    \      '()\n      (cons (max (car numbers) (car (rolling_max (cdr numbers))))\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers 0))\n", "  (define (rolling_max_iter numbers maxes)\n\
    \    (cond [(empty? numbers) (reverse maxes)]\n          [else (rolling_max_iter\
    \ (rest numbers)\n                                  (cons (max (first numbers)\
    \ (first maxes)) maxes))]))\n  (rolling_max_iter (rest numbers) (list (first numbers))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers 0))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max (cdr numbers))))\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (cond ((null? numbers) '())\n          ((> (car numbers) max-so-far)\n\
    \           (cons (car numbers) (rolling_max_iter (cdr numbers) (car numbers))))\n\
    \          (else (cons max-so-far (rolling_max_iter (cdr numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (if (null? numbers)\n    \
    \  '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond ((null? numbers) '())\n\
    \          ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling_max_iter\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
