name: HumanEval_130_tri
language: rkt
prompt: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
  \ by mathematicians in \n;; the last couple centuries. However, what people don't\
  \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
  ;; tri(1) = 3\n;; tri(n) = 1 + n / 2, if n is even.\n;; tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n;; For example:\n;; tri(2) = 1 + (2 / 2) = 2\n\
  ;; tri(4) = 3\n;; tri(3) = tri(2) + tri(1) + tri(4)\n;; = 2 + 3 + 3 = 8 \n;; You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n;; first n + 1 numbers of the Tribonacci sequence.\n;; Examples:\n;; >>> (tri\
  \ 3)\n;; (list 1 3 2 8)\n(define (tri n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n\
  \    (check-equal? (candidate 3) (list 1 3 2 8))\n    (check-equal? (candidate 4)\
  \ (list 1 3 2 8 3))\n    (check-equal? (candidate 5) (list 1 3 2 8 3 15))\n    (check-equal?\
  \ (candidate 6) (list 1 3 2 8 3 15 4))\n    (check-equal? (candidate 7) (list 1\
  \ 3 2 8 3 15 4 24))\n    (check-equal? (candidate 8) (list 1 3 2 8 3 15 4 24 5))\n\
  \    (check-equal? (candidate 9) (list 1 3 2 8 3 15 4 24 5 35))\n    (check-equal?\
  \ (candidate 20) (list 1 3 2 8 3 15 4 24 5 35 6 48 7 63 8 80 9 99 10 120 11))\n\
  \    (check-equal? (candidate 0) (list 1))\n    (check-equal? (candidate 1) (list\
  \ 1 3))\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      (list 1)\n      (if (= n 1)\n          (list 1\
    \ 3)\n          (if (= n 2)\n              (list 1 3 2)\n              (if (=\
    \ n 3)\n                  (list 1 3 2 8)\n                  (if (= n 4)\n    \
    \                  (list 1 3 2 8 3)\n                      (if (= n 5)\n     \
    \                     (list 1 3 2 8 3 11)\n                          (if (= n\
    \ 6)\n                              (list 1 3 2 8 3 11 21)\n                 \
    \             (if (= n 7)\n                                  (list 1 3 2 8 3 11\
    \ 21 34)\n                                  (if (= n 8)\n                    \
    \                  (list 1 3 2 8 3 11 21 34 55)\n                            \
    \          (if (= n 9)\n                                          (list 1 3 2\
    \ 8 3 11 21 34 55 89)\n                                          (if (= n 10)\n\
    \                                              (list 1 3 2 8 3 11 21 34 55 89\
    \ 144)\n                                              (if (= n 11)\n         \
    \                                         (list 1 3 2 8 3 11 21 34 55 89 144 233)\n\
    \                                                  (if (= n 12)\n            \
    \                                          (list 1 3 2 8 3 11 21 34 55 89 144\
    \ 233 377)\n                                                      (if (= n 13)\n\
    \                                                          (list 1 3 2 8 3 11\
    \ 21 34 55 89 144 233 377 610)\n                                             \
    \             (if (= n 14)\n                                                 \
    \             (list 1 3 2 8 3 11 21 34 55 89 144 233 377 610 987)\n          \
    \                                                    (if (= n 15)\n          \
    \                                                        (list 1 3 2 8 3 11 21\
    \ 34 55 89 144 233 377 610 987 1597)\n                                       \
    \                           (if (= n 16)\n                                   \
    \                                   (list 1 3 2 8 3 11 21 34 55 89 144 233 377\
    \ 610 987 1597 2584)\n                                                       \
    \               (if (= n 17)\n                                               \
    \                           (list 1 3 2 8 3 11 21 34 55 89 144 233 377 610 987\
    \ 1597 2584 4181)\n                                                          \
    \                (if (= n 18)\n                                              \
    \                                (list 1 3 2 8 3 11 21 34 55 89 144 233 377 610\
    \ 987 1597 2584 4181 6765)", "  (cond\n    [(= n 0) (list 1)]\n    [(= n 1) (list\
    \ 1 3)]\n    [(= n 2) (list 1 3 2)]\n    [else (append (tri (- n 1)) (list (+\
    \ (list-ref (tri (- n 1)) (- n 1))\n                                         \
    \ (list-ref (tri (- n 1)) (- n 2))\n                                         \
    \ (list-ref (tri (- n 1)) (- n 3)))))]))\n", "  (cond\n    [(= n 0) (list 1)]\n\
    \    [(= n 1) (list 1 3)]\n    [(= n 2) (list 1 3 2)]\n    [else (append (tri\
    \ (- n 1)) (list (+ (list-ref (tri (- n 1)) (- n 1)) (list-ref (tri (- n 1)) (-\
    \ n 2)) (list-ref (tri (- n 1)) (- n 3)))))]))\n", "  (cond\n    [(= n 0) (list\
    \ 1)]\n    [(= n 1) (list 1 3)]\n    [(= n 2) (list 1 3 2)]\n    [else (append\
    \ (tri (- n 1)) (list (+ (list-ref (tri (- n 1)) (- n 1))\n                  \
    \                        (list-ref (tri (- n 1)) (- n 2))\n                  \
    \                        (list-ref (tri (- n 1)) (+ n 1)))))]))\n", "  (if (=\
    \ n 0)\n      (list 1)\n      (if (= n 1)\n          (list 1 3)\n          (if\
    \ (= n 2)\n              (list 1 3 2)\n              (if (= (remainder n 2) 0)\n\
    \                  (cons (add1 (/ n 2)) (tri (- n 1)))\n                  (cons\
    \ (add1 (tri (- n 1))) (tri (- n 2)))\n                  (cons (add1 (tri (+ n\
    \ 1))) (tri (- n 1)))\n                  )))))\n", "  (if (= n 0)\n      (list\
    \ 1)\n      (if (= n 1)\n          (list 1 3)\n          (if (= n 2)\n       \
    \       (list 1 3 2)\n              (if (= (remainder n 2) 0)\n              \
    \    (cons (add1 (/ n 2)) (tri (- n 1)))\n                  (cons (add1 (+ (list-ref\
    \ (tri (- n 1)) (- n 1)) (list-ref (tri (- n 2)) (- n 2)) (list-ref (tri (+ n\
    \ 1)) (+ n 1)))) (tri (- n 1))))))))\n", "  (if (= n 0)\n      (list 1)\n    \
    \  (if (= n 1)\n          (list 1 3)\n          (if (= n 2)\n              (list\
    \ 1 3 2)\n              (if (= (remainder n 2) 0)\n                  (cons (tri\
    \ n) (list (+ 1 (/ n 2))))\n                  (cons (tri n) (list (+ (car (tri\
    \ (- n 1))) (car (tri (- n 2))) (car (tri (+ n 1)))))))))))\n", "  (cond\n   \
    \ [(= n 0) (list 1)]\n    [(= n 1) (list 1 3)]\n    [(= n 2) (list 1 3 2)]\n \
    \   [else (append (tri (- n 1)) (list (+ (list-ref (tri (- n 1)) (- n 1)) (list-ref\
    \ (tri (- n 1)) (- n 2)) (list-ref (tri (- n 1)) (- n 3)))))]))\n", "  (cond\n\
    \    [(= n 0) (list 1)]\n    [(= n 1) (list 1 3)]\n    [(= n 2) (list 1 3 2)]\n\
    \    [else (append (tri (- n 1)) (list (+ (list-ref (tri (- n 1)) (- n 1))\n \
    \                                         (list-ref (tri (- n 1)) (- n 2))\n \
    \                                         (list-ref (tri (- n 1)) (- n 3)))))]))\n",
  "  (if (= n 0)\n      (list 1)\n      (if (= n 1)\n          (list 1 3)\n      \
    \    (if (= n 2)\n              (list 1 3 2)\n              (if (= (modulo n 2)\
    \ 0)\n                  (cons (tri n) (tri (- n 1)))\n                  (cons\
    \ (tri n) (tri (- n 1)))\n                  )))))\n", "  (define (tri-iter n a\
    \ b c)\n    (cond ((= n 0) '())\n          ((= n 1) (list a))\n          ((= n\
    \ 2) (list a b))\n          ((= n 3) (list a b c))\n          (else (cons a (tri-iter\
    \ (- n 1) b c (+ a b c))))))\n  (tri-iter n 1 3 2))\n", "  (if (= n 0)\n     \
    \ (list 1)\n      (if (= n 1)\n          (list 1 3)\n          (if (= n 2)\n \
    \             (list 1 3 2)\n              (if (= (modulo n 2) 0)\n           \
    \       (cons (add1 (/ n 2)) (tri (- n 1)))\n                  (cons (+ (list-ref\
    \ (tri (- n 1)) 0) (list-ref (tri (- n 2)) 0) (list-ref (tri (+ n 1)) 0)) (tri\
    \ (- n 1))))))))\n", "  (cond\n    [(= n 0) (list 1)]\n    [(= n 1) (list 1 3)]\n\
    \    [(= n 2) (list 1 3 2)]\n    [else (append (tri (- n 1)) (list (+ (list-ref\
    \ (tri (- n 1)) (- n 1))\n                                          (list-ref\
    \ (tri (- n 1)) (- n 2))\n                                          (list-ref\
    \ (tri (- n 1)) (+ n 1)))))]))\n", "  (if (= n 0)\n      (list 1)\n      (if (=\
    \ n 1)\n          (list 1 3)\n          (if (= n 2)\n              (list 1 3 2)\n\
    \              (if (= (remainder n 2) 0)\n                  (cons (add1 (/ n 2))\
    \ (tri (- n 1)))\n                  (cons (add1 (tri (- n 1))) (tri (- n 2)))\n\
    \                  (cons (add1 (tri (+ n 1))) (tri (- n 1)))\n               \
    \   )))))\n", "  (define (tri-iter n a b c)\n    (if (= n 0)\n        (list a\
    \ b c)\n        (if (even? n)\n            (tri-iter (- n 1) a b (+ c (/ n 2)))\n\
    \            (tri-iter (- n 1) a (+ b c) (+ c (+ b a))))))\n  (tri-iter n 1 3\
    \ 2))\n", "  (if (= n 0)\n      (list 1)\n      (if (= n 1)\n          (list 1\
    \ 3)\n          (if (= n 2)\n              (list 1 3 2)\n              (if (=\
    \ (modulo n 2) 0)\n                  (cons (tri (- n 1)) (list (+ 1 (/ n 2))))\n\
    \                  (cons (tri (- n 1)) (list (+ (tri (- n 1)) (tri (- n 2)) (tri\
    \ (+ n 1))))))))))\n", "  (define (tri-iter n a b c)\n    (if (= n 0)\n      \
    \  (list a b c)\n        (if (even? n)\n            (tri-iter (- n 1) a b (+ c\
    \ (/ n 2)))\n            (tri-iter (- n 1) a (+ b c) (+ c (+ b a))))))\n  (tri-iter\
    \ n 1 3 2))\n", "  (cond\n    [(= n 0) (list 1)]\n    [(= n 1) (list 1 3)]\n \
    \   [(= n 2) (list 1 3 2)]\n    [else (append (tri (- n 1)) (list (+ (list-ref\
    \ (tri (- n 1)) (- n 1))\n                                          (list-ref\
    \ (tri (- n 1)) (- n 2))\n                                          (list-ref\
    \ (tri (- n 1)) (+ n 1)))))]))\n", "  (cond\n    [(= n 0) (list 1)]\n    [(= n\
    \ 1) (list 1 3)]\n    [(= n 2) (list 1 3 2)]\n    [else (append (tri (- n 1))\
    \ (list (+ (list-ref (tri (- n 1)) (- n 1))\n                                \
    \          (list-ref (tri (- n 1)) (- n 2))\n                                \
    \          (list-ref (tri (- n 1)) (- n 3)))))]))\n", "  (define (tri-iter n acc)\n\
    \    (if (= n 0)\n        acc\n        (let ((last (car (reverse acc))))\n   \
    \       (tri-iter (- n 1) (append acc (list (+ last (car (reverse (cdr (reverse\
    \ acc)))) (car (reverse (cdr (reverse (cdr (reverse acc)))))))))))))\n  (tri-iter\
    \ n (list 3)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
