name: HumanEval_130_tri
language: rkt
prompt: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
  \ by mathematicians in \n;; the last couple centuries. However, what people don't\
  \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
  ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri 3)\n\
  ;; 8\n(define (tri n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n\
  \    (check-equal? (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate\
  \ 4) (list 1 3 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0\
  \ 3.0 15.0))\n    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n\
  \    (check-equal? (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal?\
  \ (candidate 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate\
  \ 9) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
  \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0 9.0\
  \ 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
  \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
completions: ["  (cond [(= n 1) 3]\n        [(= n 2) 2]\n        [(= n 3) 8]\n   \
    \     [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n  \
    \  [(= n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (- n 1)) (tri\
    \ (- n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 1) 3)\n        ((= n 2) 2)\n \
    \       ((= n 3) 8)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n",
  "  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n 1) 3]\n    [(=\
    \ n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n\
    \ 3)))]))\n", "  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n  \
    \  [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(=\
    \ n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n   \
    \ [(= n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n",
  "  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n 1) 3]\n    [(=\
    \ n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n\
    \ 3)))]))\n", "  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n  \
    \  [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n```\n\n## Problem 3\n\
    \n```racket\n#lang racket\n", "  (if (= n 1) 3\n      (if (= n 2) 2\n        \
    \  (if (= n 3) 8\n              (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))))\n",
  "  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n 1) 3]\n    [(=\
    \ n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n\
    \ 3)))]))\n", "  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n  \
    \  [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(=\
    \ n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (- n 1)) (tri (-\
    \ n 2)) (tri (- n 3)))]))\n", "  (cond ((= n 1) 3)\n        ((= n 2) 2)\n    \
    \    ((= n 3) 8)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n",
  "  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (-\
    \ n 1)) (tri (- n 2)) (tri (- n 3)))]))\n", "  (cond\n    [(= n 1) 3]\n    [(=\
    \ n 2) 2]\n    [(= n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n\
    \ 3)))]))\n", "  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(= n 3) 8]\n  \
    \  [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
