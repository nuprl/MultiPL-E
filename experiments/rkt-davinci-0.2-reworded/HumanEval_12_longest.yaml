name: HumanEval_12_longest
language: rkt
prompt: "#lang racket\n\n;; Out of list of strings, return the longest one. Return\
  \ the first one in case of multiple\n;; strings of the same length. Return #f in\
  \ case the input list is empty.\n;; >>> (longest (list ))\n;; #f\n;; >>> (longest\
  \ (list \"a\" \"b\" \"c\"))\n;; \"a\"\n;; >>> (longest (list \"a\" \"bb\" \"ccc\"\
  ))\n;; \"ccc\"\n(define (longest strings)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longest))\n\
  \    (check-equal? (candidate (list )) #f)\n    (check-equal? (candidate (list \"\
  x\" \"y\" \"z\")) \"x\")\n    (check-equal? (candidate (list \"x\" \"yyy\" \"zzzz\"\
  \ \"www\" \"kkkk\" \"abc\")) \"zzzz\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? strings) #f]\n    [(empty? (rest strings)) (first\
    \ strings)]\n    [else\n     (let* ([longest-so-far (first strings)]\n       \
    \     [longest-so-far-length (string-length longest-so-far)])\n       (for ([s\
    \ (rest strings)])\n         (let ([s-length (string-length s)])\n           (when\
    \ (> s-length longest-so-far-length)\n             (set! longest-so-far s)\n \
    \            (set! longest-so-far-length s-length))))\n       longest-so-far)]))\n",
  "  (cond\n    [(empty? strings) #f]\n    [(empty? (rest strings)) (first strings)]\n\
    \    [else\n     (let* ([longest-so-far (first strings)]\n            [longest-so-far-length\
    \ (string-length longest-so-far)])\n       (for ([s (rest strings)])\n       \
    \  (let ([s-length (string-length s)])\n           (when (> s-length longest-so-far-length)\n\
    \             (set! longest-so-far s)\n             (set! longest-so-far-length\
    \ s-length))))\n       longest-so-far)]))\n", "  (if (empty? strings)\n      #f\n\
    \      (let ([longest-so-far (first strings)])\n        (for ([s (in-list (rest\
    \ strings))])\n          (if (> (string-length s) (string-length longest-so-far))\n\
    \              (set! longest-so-far s)))\n        longest-so-far)))\n", "  (cond\n\
    \    [(empty? strings) #f]\n    [(empty? (rest strings)) (first strings)]\n  \
    \  [else\n     (let ([longest-so-far (first strings)]\n           [rest-strings\
    \ (rest strings)])\n       (cond\n         [(> (string-length longest-so-far)\
    \ (string-length (first rest-strings)))\n          (longest (cons longest-so-far\
    \ (rest rest-strings)))]\n         [else\n          (longest (cons (first rest-strings)\
    \ (rest rest-strings)))]))]))\n", "  (if (null? strings)\n      #f\n      (let\
    \ loop ((strings strings)\n                 (longest (car strings)))\n       \
    \ (if (null? strings)\n            longest\n            (let ((str (car strings)))\n\
    \              (if (> (string-length str) (string-length longest))\n         \
    \         (loop (cdr strings) str)\n                  (loop (cdr strings) longest)))))))\n",
  "  (cond\n    [(empty? strings) #f]\n    [(empty? (rest strings)) (first strings)]\n\
    \    [else\n     (let ([longest-so-far (first strings)]\n           [rest-of-strings\
    \ (rest strings)])\n       (for ([s rest-of-strings])\n         (if (> (string-length\
    \ s) (string-length longest-so-far))\n             (set! longest-so-far s)))\n\
    \       longest-so-far)]))\n", "  (cond\n    [(empty? strings) #f]\n    [(empty?\
    \ (rest strings)) (first strings)]\n    [else\n     (let ([longest-so-far (first\
    \ strings)]\n           [rest-of-strings (rest strings)])\n       (for ([s rest-of-strings])\n\
    \         (if (> (string-length s) (string-length longest-so-far))\n         \
    \    (set! longest-so-far s)))\n       longest-so-far)]))\n", "  (cond\n    [(empty?\
    \ strings) #f]\n    [(empty? (rest strings)) (first strings)]\n    [else\n   \
    \  (let ([longest-so-far (first strings)]\n           [rest-strings (rest strings)])\n\
    \       (for ([s rest-strings])\n         (if (> (string-length s) (string-length\
    \ longest-so-far))\n             (set! longest-so-far s)))\n       longest-so-far)]))\n",
  "  (cond\n    [(empty? strings) #f]\n    [(empty? (rest strings)) (first strings)]\n\
    \    [else\n     (let ([longest-so-far (first strings)]\n           [rest-strings\
    \ (rest strings)])\n       (for ([s rest-strings])\n         (if (> (string-length\
    \ s) (string-length longest-so-far))\n             (set! longest-so-far s)))\n\
    \       longest-so-far)]))\n", "  (cond\n    [(empty? strings) #f]\n    [(empty?\
    \ (rest strings)) (first strings)]\n    [else\n     (define (longest-tail strings)\n\
    \       (cond\n         [(empty? strings) #f]\n         [(empty? (rest strings))\
    \ (first strings)]\n         [else\n          (define (longest-tail-tail strings)\n\
    \            (cond\n              [(empty? strings) #f]\n              [(empty?\
    \ (rest strings)) (first strings)]\n              [else\n               (define\
    \ (longest-tail-tail-tail strings)\n                 (cond\n                 \
    \  [(empty? strings) #f]\n                   [(empty? (rest strings)) (first strings)]\n\
    \                   [else\n                    (define (longest-tail-tail-tail-tail\
    \ strings)\n                      (cond\n                        [(empty? strings)\
    \ #f]\n                        [(empty? (rest strings)) (first strings)]\n   \
    \                     [else\n                         (define (longest-tail-tail-tail-tail-tail\
    \ strings)\n                           (cond\n                             [(empty?\
    \ strings) #f]\n                             [(empty? (rest strings)) (first strings)]\n\
    \                             [else\n                              (define (longest-tail-tail-tail-tail-tail-tail\
    \ strings)\n                                (cond\n                          \
    \        [(empty? strings) #f]\n                                  [(empty? (rest\
    \ strings)) (first strings)]\n                                  [else\n      \
    \                             (define (longest-tail-tail-tail-tail-tail-tail-tail\
    \ strings)\n                                     (cond\n                     \
    \                  [(empty? strings) #f]\n                                   \
    \    [(empty? (rest strings)) (first strings)]\n                             \
    \          [else\n                                        (define (longest-tail-tail-tail-tail-tail-tail-tail-tail\
    \ strings)\n                                          (cond\n                \
    \                            [(empty? strings) #f]\n                         \
    \                   [(empty? (rest strings)) (first strings)]\n              \
    \                              [else\n                                       \
    \      (define (longest-tail-tail-tail-tail-tail-tail-tail-tail-tail strings)\n\
    \                                               (cond\n                      \
    \                           [(empty? strings) #f]\n                          \
    \                       [(empty? (rest strings)) (first strings)]\n          \
    \                                      ", "  (cond\n    [(empty? strings) #f]\n\
    \    [(empty? (rest strings)) (first strings)]\n    [else\n     (let ([longest-so-far\
    \ (first strings)]\n           [rest-strings (rest strings)])\n       (for/fold\
    \ ([longest-so-far longest-so-far])\n                 ([string rest-strings])\n\
    \         (if (> (string-length string) (string-length longest-so-far))\n    \
    \         string\n             longest-so-far)))]))\n", "  (cond\n    [(empty?\
    \ strings) #f]\n    [(empty? (rest strings)) (first strings)]\n    [else\n   \
    \  (let ([longest-so-far (first strings)]\n           [rest-strings (rest strings)])\n\
    \       (for ([s rest-strings])\n         (when (> (string-length s) (string-length\
    \ longest-so-far))\n           (set! longest-so-far s)))\n       longest-so-far)]))\n",
  "  (cond\n    [(empty? strings) #f]\n    [(empty? (rest strings)) (first strings)]\n\
    \    [else\n     (let ([longest-so-far (first strings)]\n           [rest-of-strings\
    \ (rest strings)])\n       (for ([s rest-of-strings])\n         (when (> (string-length\
    \ s) (string-length longest-so-far))\n           (set! longest-so-far s)))\n \
    \      longest-so-far)]))\n", "  (cond\n    [(empty? strings) #f]\n    [(empty?\
    \ (rest strings)) (first strings)]\n    [else\n     (cond\n       [(> (string-length\
    \ (first strings)) (string-length (longest (rest strings))))\n        (first strings)]\n\
    \       [else (longest (rest strings))])]))\n", "  (cond\n    [(empty? strings)\
    \ #f]\n    [(empty? (rest strings)) (first strings)]\n    [else\n     (let ([longest-so-far\
    \ (first strings)]\n           [rest-strings (rest strings)])\n       (for ([s\
    \ rest-strings])\n         (if (&gt; (string-length s) (string-length longest-so-far))\n\
    \             (set! longest-so-far s)))\n       longest-so-far)]))\n</code>\n",
  "  (if (null? strings)\n      #f\n      (let loop ((strings strings)\n         \
    \        (longest (car strings)))\n        (if (null? strings)\n            longest\n\
    \            (let ((current (car strings)))\n              (if (> (string-length\
    \ current) (string-length longest))\n                  (loop (cdr strings) current)\n\
    \                  (loop (cdr strings) longest)))))))\n", "  (cond\n    [(empty?\
    \ strings) #f]\n    [(empty? (rest strings)) (first strings)]\n    [else\n   \
    \  (let ([longest-so-far (first strings)]\n           [rest-strings (rest strings)])\n\
    \       (cond\n         [(> (string-length longest-so-far) (string-length (first\
    \ rest-strings)))\n          (longest rest-strings)]\n         [else\n       \
    \   (longest (cons longest-so-far (rest rest-strings)))]))]))\n", "  (cond\n \
    \   [(empty? strings) #f]\n    [(empty? (rest strings)) (first strings)]\n   \
    \ [else\n     (let ([longest-so-far (first strings)]\n           [rest-of-strings\
    \ (rest strings)])\n       (for ([s rest-of-strings])\n         (if (> (string-length\
    \ s) (string-length longest-so-far))\n             (set! longest-so-far s)))\n\
    \       longest-so-far)]))\n", "  (if (null? strings)\n      #f\n      (let loop\
    \ ((strings strings)\n                 (longest (car strings)))\n        (if (null?\
    \ strings)\n            longest\n            (let ((next (car strings)))\n   \
    \           (if (&gt; (string-length next) (string-length longest))\n        \
    \          (loop (cdr strings) next)\n                  (loop (cdr strings) longest)))))))\n\
    </code>\n", "  (cond\n    [(empty? strings) #f]\n    [(empty? (rest strings))\
    \ (first strings)]\n    [else\n     (let ([longest-so-far (first strings)]\n \
    \          [rest-strings (rest strings)])\n       (cond\n         [(> (string-length\
    \ longest-so-far) (string-length (first rest-strings)))\n          (longest rest-strings)]\n\
    \         [else\n          (longest (cons longest-so-far (rest rest-strings)))]))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
