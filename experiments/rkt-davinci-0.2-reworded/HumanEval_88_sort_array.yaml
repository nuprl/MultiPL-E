name: HumanEval_88_sort_array
language: rkt
prompt: "#lang racket\n\n;; Given a list of non-negative integers, return a corkt\
  \ of the given list after sorting,\n;; you will sort the given list in ascending\
  \ order if the sum( first index value, last index value) is odd,\n;; or sort it\
  \ in descending order if the sum( first index value, last index value) is even.\n\
  ;; Note:\n;; * don't change the given list.\n;; Examples:\n;; >>> (sort_array (list\
  \ ))\n;; (list )\n;; >>> (sort_array (list 5))\n;; (list 5)\n;; >>> (sort_array\
  \ (list 2 4 3 0 1 5))\n;; (list 0 1 2 3 4 5)\n;; >>> (sort_array (list 2 4 3 0 1\
  \ 5 6))\n;; (list 6 5 4 3 2 1 0)\n(define (sort_array array)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 5)) (list 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3\
  \ 4 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0))\n\
  \    (check-equal? (candidate (list 2 1)) (list 1 2))\n    (check-equal? (candidate\
  \ (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87))\n    (check-equal? (candidate\
  \ (list 21 14 23 11)) (list 23 21 14 11))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? array)\n      (list)\n      (let* ([first (first array)]\n\
    \             [last (last array)]\n             [sum (+ first last)]\n       \
    \      [rest (rest (butlast array))])\n        (if (odd? sum)\n            (sort\
    \ < rest (list first last))\n            (sort > rest (list first last))))))\n",
  "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [sorted (sort array <)])\n       (if (odd?\
    \ sum) sorted (reverse sorted)))]))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [rest (rest (butlast array))])\n       (if (odd? sum)\n           (sort rest\
    \ <)\n           (sort rest >)))]))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(empty? (rest array)) array]\n    [else\n     (let ([first (first array)]\n\
    \           [last (last array)])\n       (if (odd? (+ first last))\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (if (null? array)\n \
    \     (list)\n      (if (null? (cdr array))\n          array\n          (let*\
    \ ([first (car array)]\n                 [last (car (reverse array))]\n      \
    \           [sum (+ first last)]\n                 [sorted (sort array (if (odd?\
    \ sum) < >))])\n            sorted))))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let ([first (first array)]\n\
    \           [last (last array)])\n       (if (odd? (+ first last))\n         \
    \  (sort array <)\n           (sort array >)))]))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let* ([first (first\
    \ array)]\n            [last (last array)]\n            [sum (+ first last)]\n\
    \            [rest (rest (butlast array))])\n       (if (odd? sum)\n         \
    \  (append (sort_array rest) (list first) (list last))\n           (append (sort_array\
    \ rest) (list last) (list first))))]))\n", "  (cond\n    [(empty? array) (list)]\n\
    \    [(= (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (if (null? array)\n      (list)\n      (let* ([first (car array)]\n         \
    \    [last (car (reverse array))]\n             [sum (+ first last)])\n      \
    \  (if (odd? sum)\n            (sort array <)\n            (sort array >)))))\n",
  "  (if (null? array)\n      (list)\n      (if (= (length array) 1)\n          array\n\
    \          (if (odd? (+ (car array) (last array)))\n              (sort array\
    \ <)\n              (sort array >)))))\n", "  (if (empty? array)\n      (list)\n\
    \      (if (= (length array) 1)\n          array\n          (if (odd? (+ (first\
    \ array) (last array)))\n              (sort array <)\n              (sort array\
    \ >)))))\n", "  (cond\n    [(empty? array) (list)]\n    [(= (length array) 1)\
    \ array]\n    [else\n     (let ([first (first array)]\n           [last (last\
    \ array)])\n       (if (odd? (+ first last))\n           (sort array <)\n    \
    \       (sort array >)))]))\n", "  (if (null? array)\n      (list)\n      (if\
    \ (odd? (+ (car array) (last array)))\n          (sort array <)\n          (sort\
    \ array >))))\n", "  (if (null? array)\n      (list)\n      (if (null? (cdr array))\n\
    \          array\n          (let* ([first (car array)]\n                 [last\
    \ (car (reverse array))]\n                 [sum (+ first last)]\n            \
    \     [sorted (sort array <)])\n            (if (odd? sum)\n                sorted\n\
    \                (reverse sorted))))))\n", "  (if (null? array)\n      (list)\n\
    \      (if (= (length array) 1)\n          array\n          (let* ([first (first\
    \ array)]\n                 [last (last array)]\n                 [sum (+ first\
    \ last)]\n                 [sorted (sort array <)])\n            (if (odd? sum)\n\
    \                sorted\n                (reverse sorted))))))\n", "  (if (null?\
    \ array)\n      (list)\n      (if (null? (cdr array))\n          array\n     \
    \     (let* ([first (car array)]\n                 [last (car (reverse array))]\n\
    \                 [sum (+ first last)]\n                 [sorted (sort array (if\
    \ (odd? sum) < >))])\n            sorted))))\n", "  (cond\n    [(empty? array)\
    \ (list)]\n    [(= (length array) 1) array]\n    [else\n     (let ([first (first\
    \ array)]\n           [last (last array)])\n       (cond\n         [(odd? (+ first\
    \ last))\n          (sort array <)]\n         [else\n          (sort array >)]))]))\n",
  "  (if (empty? array)\n      (list)\n      (if (empty? (rest array))\n         \
    \ (list (first array))\n          (if (odd? (+ (first array) (last array)))\n\
    \              (sort array <)\n              (sort array >)))))\n", "  (if (null?\
    \ array)\n      (list)\n      (if (even? (+ (car array) (last array)))\n     \
    \     (sort array >)\n          (sort array <))))\n", "  (define (sum-first-last\
    \ array)\n    (if (null? array)\n        0\n        (+ (car array) (car (reverse\
    \ array)))))\n  (if (odd? (sum-first-last array))\n      (sort array <)\n    \
    \  (sort array >)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
