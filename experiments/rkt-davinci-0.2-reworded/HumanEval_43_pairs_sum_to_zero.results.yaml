name: HumanEval_43_pairs_sum_to_zero
language: rkt
results:
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphcaouxl1.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphcaouxl1.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmphcaouxl1.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphcaouxl1.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfg81gk0c.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfg81gk0c.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpfg81gk0c.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkcrdh3af.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpkcrdh3af.rkt:20:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprqo_j4wh.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprqo_j4wh.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmprqo_j4wh.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprqo_j4wh.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw8nyulqh.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpw8nyulqh.rkt:20:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp496ha9ow.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp496ha9ow.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp496ha9ow.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx_oyz1xd.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx_oyz1xd.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpx_oyz1xd.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1mqpjtu8.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1mqpjtu8.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp1mqpjtu8.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpphenvgkq.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpphenvgkq.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpphenvgkq.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxmvq0vqq.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxmvq0vqq.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxmvq0vqq.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxmvq0vqq.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfmxnoodh.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfmxnoodh.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpfmxnoodh.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7glrxtl9.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7glrxtl9.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp7glrxtl9.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiv2xt_hf.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiv2xt_hf.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiv2xt_hf.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiv2xt_hf.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiv2xt_hf.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiv2xt_hf.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiv2xt_hf.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiv2xt_hf.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (negate (first\
    \ l)) (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu5zneqob.rkt:28:4\n\
    \nnegate: contract violation\n  expected: procedure?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu5zneqob.rkt:29:4\n\
    \nnegate: contract violation\n  expected: procedure?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu5zneqob.rkt:30:4\n\
    \nnegate: contract violation\n  expected: procedure?\n  given: 1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu5zneqob.rkt:31:4\n\
    \nnegate: contract violation\n  expected: procedure?\n  given: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu5zneqob.rkt:33:4\n\
    \nnegate: contract violation\n  expected: procedure?\n  given: -3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu5zneqob.rkt:34:4\n\
    \nnegate: contract violation\n  expected: procedure?\n  given: -3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu5zneqob.rkt:35:4\n\
    \nnegate: contract violation\n  expected: procedure?\n  given: -3\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu5zneqob.rkt:36:4\n\
    \nnegate: contract violation\n  expected: procedure?\n  given: -3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl62h3i30.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl62h3i30.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpl62h3i30.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxv3j4had.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxv3j4had.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxv3j4had.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp891zmshk.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp891zmshk.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp891zmshk.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp891zmshk.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgpf18t2n.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgpf18t2n.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgpf18t2n.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l) (first\
    \ (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgrqnug6.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxgrqnug6.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxgrqnug6.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxgrqnug6.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns #t if there are two distinct elements in the list that\n;; sum to\
    \ zero, and #f otherwise.\n;; >>> (pairs_sum_to_zero (list 1 3 5 0))\n;; #f\n\
    ;; >>> (pairs_sum_to_zero (list 1 3 -2 1))\n;; #f\n;; >>> (pairs_sum_to_zero (list\
    \ 1 2 3 7))\n;; #f\n;; >>> (pairs_sum_to_zero (list 2 4 -5 3 5 7))\n;; #t\n;;\
    \ >>> (pairs_sum_to_zero (list 1))\n;; #f\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (zero? (- (first\
    \ l) (first (rest l)))) l) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyi81_ewb.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyi81_ewb.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyi81_ewb.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
