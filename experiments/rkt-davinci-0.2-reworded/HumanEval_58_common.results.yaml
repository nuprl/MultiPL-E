language: rkt
name: HumanEval_58_common
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnpxrg_mi.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnpxrg_mi.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnpxrg_mi.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnpxrg_mi.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv9jn5616.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv9jn5616.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv9jn5616.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv9jn5616.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpivz14vpb.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpivz14vpb.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpivz14vpb.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpivz14vpb.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ohblcww.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ohblcww.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ohblcww.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ohblcww.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn9_14pbq.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn9_14pbq.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn9_14pbq.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn9_14pbq.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmuak4x0z.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmuak4x0z.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmuak4x0z.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmuak4x0z.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy5ofx31c.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy5ofx31c.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy5ofx31c.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy5ofx31c.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5weqrlrm.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5weqrlrm.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5weqrlrm.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5weqrlrm.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_kmi0fzb.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_kmi0fzb.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_kmi0fzb.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_kmi0fzb.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj6hfg9m.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj6hfg9m.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj6hfg9m.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvj6hfg9m.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pufd3x9.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pufd3x9.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pufd3x9.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pufd3x9.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc7h1ycgv.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc7h1ycgv.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc7h1ycgv.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc7h1ycgv.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppvgp_a6w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppvgp_a6w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppvgp_a6w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppvgp_a6w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt87suy0c.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt87suy0c.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt87suy0c.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt87suy0c.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8c0u8yb_.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8c0u8yb_.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8c0u8yb_.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8c0u8yb_.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb1riskoa.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb1riskoa.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb1riskoa.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb1riskoa.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_npm2tq.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_npm2tq.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_npm2tq.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_npm2tq.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrqfqma_.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrqfqma_.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrqfqma_.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrqfqma_.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67pm6a2n.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67pm6a2n.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67pm6a2n.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67pm6a2n.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) #&lt;))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpc04626il.rkt:9:2: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 11\n  context...:\n  \
    \ read-one/not-eof\n   loop\n   [repeats 6 more times]\n   read-unwrapped-sequence\n\
    \   read-undotted\n   read-one/not-eof\n   loop\n   [repeats 2 more times]\n \
    \  read-unwrapped-sequence\n   read-undotted\n   read-syntax\n   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects/racket/../syntax/module-reader.rkt:65:9:\
    \ lang:read-syntax\n   read-syntax\n   default-load-handler\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (unique (append l1 l2)) <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal? (candidate\
    \ (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal?\
    \ (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list\
    \ 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (define (common-helper l1 l2 acc)\n    (cond [(empty? l1) acc]\n \
    \         [(empty? l2) acc]\n          [(member (first l1) l2) (common-helper\
    \ (rest l1) l2 (cons (first l1) acc))]\n          [else (common-helper (rest l1)\
    \ l2 acc)]))\n  (sort (common-helper l1 l2 '()) <))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal? (candidate\
    \ (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal?\
    \ (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list\
    \ 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(member\
    \ (first l1) l2) (cons (first l1) (common (rest l1) l2))]\n    [else (common (rest\
    \ l1) l2)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (define (common-helper l1 l2 acc)\n    (cond ((null? l1) acc)\n  \
    \        ((null? l2) acc)\n          ((member (car l1) l2) (common-helper (cdr\
    \ l1) l2 (cons (car l1) acc)))\n          (else (common-helper (cdr l1) l2 acc))))\n\
    \  (sort (common-helper l1 l2 '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate common))\n    (check-equal? (candidate (list 1 4 3 34\
    \ 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate\
    \ (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4\
    \ 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2\
    \ 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (intersection l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (unique (append l1 l2)) <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal? (candidate\
    \ (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n    (check-equal?\
    \ (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate (list\
    \ 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (define (common-helper l1 l2)\n    (cond\n      [(empty? l1) empty]\n\
    \      [(member (first l1) l2) (cons (first l1) (common-helper (rest l1) l2))]\n\
    \      [else (common-helper (rest l1) l2)]))\n  (sort (common-helper l1 l2) <))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
    \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
    \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
    \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
    \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (define (common-helper l1 l2)\n    (cond\n      [(empty? l1) empty]\n\
    \      [(empty? l2) empty]\n      [(member (first l1) l2) (cons (first l1) (common-helper\
    \ (rest l1) l2))]\n      [else (common-helper (rest l1) l2)]))\n  (sort (common-helper\
    \ l1 l2) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ common))\n    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5\
    \ 9 653 121)) (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list\
    \ 3 2)) (list 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4))\
    \ (list 2 3 4))\n    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747491
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:16:4

    actual:     ''(1 2 3 4 5 7 9 34 121 653)

    expected:   ''(1 5 653)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:17:4

    actual:     ''(2 3 5 8)

    expected:   ''(2 3)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:18:4

    actual:     ''(2 3 4 8)

    expected:   ''(2 3 4)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_vhmhh9w.rkt:19:4

    actual:     ''(2 3 4 8)

    expected:   ''()

    --------------------

    '
  stdout: ''
