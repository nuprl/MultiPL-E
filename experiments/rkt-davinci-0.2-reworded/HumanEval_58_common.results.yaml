name: HumanEval_58_common
language: rkt
results:
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnpxrg_mi.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnpxrg_mi.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnpxrg_mi.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnpxrg_mi.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv9jn5616.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv9jn5616.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv9jn5616.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv9jn5616.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpivz14vpb.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpivz14vpb.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpivz14vpb.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpivz14vpb.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5ohblcww.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5ohblcww.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5ohblcww.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5ohblcww.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn9_14pbq.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn9_14pbq.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn9_14pbq.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn9_14pbq.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuak4x0z.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuak4x0z.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuak4x0z.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuak4x0z.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy5ofx31c.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy5ofx31c.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy5ofx31c.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy5ofx31c.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5weqrlrm.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5weqrlrm.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5weqrlrm.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5weqrlrm.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_kmi0fzb.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_kmi0fzb.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_kmi0fzb.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_kmi0fzb.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvj6hfg9m.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvj6hfg9m.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvj6hfg9m.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvj6hfg9m.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1pufd3x9.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1pufd3x9.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1pufd3x9.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1pufd3x9.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7h1ycgv.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7h1ycgv.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7h1ycgv.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7h1ycgv.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvgp_a6w.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvgp_a6w.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvgp_a6w.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvgp_a6w.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt87suy0c.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt87suy0c.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt87suy0c.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt87suy0c.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8c0u8yb_.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8c0u8yb_.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8c0u8yb_.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8c0u8yb_.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb1riskoa.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb1riskoa.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb1riskoa.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb1riskoa.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz_npm2tq.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz_npm2tq.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz_npm2tq.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz_npm2tq.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqfqma_.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqfqma_.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqfqma_.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqfqma_.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67pm6a2n.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67pm6a2n.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67pm6a2n.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67pm6a2n.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
    ;; >>> (common (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\n;; (list 1 5\
    \ 653)\n;; >>> (common (list 5 3 2 8) (list 3 2))\n;; (list 2 3)\n(define (common\
    \ l1 l2)\n  (sort (remove-duplicates (append l1 l2)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate common))\n    (check-equal?\
    \ (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121)) (list 1 5 653))\n\
    \    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list 2 3))\n    (check-equal?\
    \ (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n    (check-equal? (candidate\
    \ (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_vhmhh9w.rkt:16:4\n\
    actual:     '(1 2 3 4 5 7 9 34 121 653)\nexpected:   '(1 5 653)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_vhmhh9w.rkt:17:4\n\
    actual:     '(2 3 5 8)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_vhmhh9w.rkt:18:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '(2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_vhmhh9w.rkt:19:4\nactual:\
    \     '(2 3 4 8)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
