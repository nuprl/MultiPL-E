name: HumanEval_11_string_xor
language: rkt
prompt: "#lang racket\n\n;; Input are two strings a and b consisting only of 1s and\
  \ 0s.\n;; Perform binary XOR on these inputs and return result also as a string.\n\
  ;; >>> (string_xor \"010\" \"110\")\n;; \"100\"\n(define (string_xor a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_xor))\n\
  \    (check-equal? (candidate \"111000\" \"101010\") \"010010\")\n    (check-equal?\
  \ (candidate \"1\" \"1\") \"0\")\n    (check-equal? (candidate \"0101\" \"0000\"\
  ) \"0101\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else (string\
    \ (bitwise-xor (string-&gt;number (string-ref a 0))\n                        \
    \       (string-&gt;number (string-ref b 0))))\n          (string_xor (substring\
    \ a 1) (substring b 1))]))\n</code>\n", "  (if (or (string=? a \"\") (string=?\
    \ b \"\"))\n      \"\"\n      (string-append\n       (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0))\n                            (string-&gt;number (string-ref\
    \ b 0))))\n       (string_xor (substring a 1) (substring b 1)))))\n</code>\n",
  "  (string-join (map (\u03BB (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\n\
    \       (bitwise-xor (string-&gt;number (string-ref x 0))\n                  \
    \  (string-&gt;number (string-ref x 1)))))\n    (map (lambda (x) (list (string-ref\
    \ a x) (string-ref b x)))\n         (build-list (string-length a) (lambda (x)\
    \ x))))))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty?\
    \ b) a]\n    [else (string_xor (rest a) (rest b))]))\n", "  (string-join (map\
    \ (lambda (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"\
    ))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\\
    0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else\
    \ #\\1)))\n  (define (xor-string a b)\n    (if (string=? a \"\")\n        \"\"\
    \n        (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                       (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (string-split (string-append\
    \ a b) \"\")) \"\"))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (xor (string-&gt;number (string-ref x 0))\n                                \
    \         (string-&gt;number (string-ref x 1)))))\n        (map list (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty?\
    \ b) a]\n    [else\n     (string-append\n      (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0))\n                           (string-&gt;number (string-ref\
    \ b 0))))\n      (string_xor (substring a 1) (substring b 1)))]))\n</code>\n",
  "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\\
    0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\\
    1)))\n  (define (xor-string a b)\n    (cond ((string=? a \"\") \"\")\n       \
    \   ((string=? b \"\") \"\")\n          (else (string-append (string (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                               (xor-string\
    \ (substring a 1) (substring b 1))))))\n  (xor-string a b))\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\
    \ (string-append (string (bitwise-xor (string-&gt;number (string-ref a 0)) (string-&gt;number\
    \ (string-ref b 0)))) (string_xor (substring a 1) (substring b 1)))]))\n", " \
    \ (string-join\n   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string-ref x 0))\n                                   (string->number (string-ref\
    \ x 1)))))\n    (map list (string->list a) (string->list b)))\n   \"\"))\n", " \
    \ (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (zip\
    \ (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (define (xor-char a\
    \ b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n  (define (xor-string\
    \ a b)\n    (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                   (xor-string (substring a 1) (substring b 1))))\n  (if (string=?\
    \ a \"\")\n      \"\"\n      (xor-string a b)))\n", "  (string-join (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (string-zip a b)) \"\"))\n", "  (define (xor-char a b)\n\
    \    (if (equal? a b)\n        #\\0\n        #\\1))\n  (apply string (map xor-char\
    \ a b)))\n", "  (string-append (map (\u03BB (x) (if (equal? (car x) (cadr x))\
    \ \"0\" \"1\")) (zip (string->list a) (string->list b)))))\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string x) 2)\
    \ (string->number (string (cdr x)) 2)))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (zip\
    \ (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (string-join\n   (map\
    \ (lambda (x) (number->string (bitwise-xor (string->number (string x) 2) (string->number\
    \ (string (list-ref b (string-index x a))) 2))))\n        (string-&gt;list a))\n\
    \   \"\"))\n</code>\n", "  (string-join (map (\u03BB (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (map\
    \ list (string->list a) (string->list b))) \"\"))\n", "  (string-join (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (string-zip a b)) \"\"))\n", "  (define (xor-char a b)\n\
    \    (cond\n      [(char=? a b) \"0\"]\n      [else \"1\"]))\n  (string-join (map\
    \ (lambda (a b) (xor-char a b)) a b)))\n", "  (string-append (map (lambda (x)\
    \ (if (equal? (car x) (cadr x)) \"0\" \"1\")) (zip (string->list a) (string->list\
    \ b)))))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (string-zip a b)) \"\"))\n", "  (string-append\n\
    \   (if (string= (substring a 0 1) \"1\") \"0\" \"1\")\n   (if (string= (substring\
    \ b 0 1) \"1\") \"0\" \"1\")\n   (if (string= (substring a 1 2) \"1\") \"0\" \"\
    1\")\n   (if (string= (substring b 1 2) \"1\") \"0\" \"1\")\n   (if (string= (substring\
    \ a 2 3) \"1\") \"0\" \"1\")\n   (if (string= (substring b 2 3) \"1\") \"0\" \"\
    1\")))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (define (xor-char a b)\n    (cond\n \
    \     [(equal? a b) \"0\"]\n      [else \"1\"]))\n  (define (xor-string a b)\n\
    \    (cond\n      [(equal? (string-length a) 0) \"\"]\n      [(equal? (string-length\
    \ b) 0) \"\"]\n      [else (string-append (xor-char (string-ref a 0) (string-ref\
    \ b 0))\n                         (xor-string (substring a 1) (substring b 1)))]))\n\
    \  (xor-string a b))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (zip\
    \ (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (string-join\n   (map\
    \ (lambda (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1)))))\n        (map (lambda (x) (string x)) (string-split (string-append\
    \ a b) \"\")))\n   \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n\
    \    [else\n     (string-append\n      (string (bitwise-xor (string-&gt;number\
    \ (string-take a 1))\n                           (string-&gt;number (string-take\
    \ b 1))))\n      (string_xor (string-drop a 1) (string-drop b 1)))]))\n", "  (define\
    \ (xor-char a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n  (define\
    \ (xor-string a b)\n    (string-append\n     (list (xor-char (string-ref a 0)\
    \ (string-ref b 0)))\n     (xor-string (substring a 1) (substring b 1))))\n  (if\
    \ (or (string-null? a) (string-null? b))\n      \"\"\n      (xor-string a b)))\n",
  "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2) (string->number (string (list-ref b (string-index x a))) 2))))\n\
    \        (string-&gt;list a))\n   \"\"))\n</code>\n", "  (string-join\n   (map\
    \ (lambda (x) (number->string (bitwise-xor (string->number (string x) 2) (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (string-split (string-append a b) \"\")) \"\"))\n", "  (string-join\n\
    \   (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1)))))\n        (map (lambda (x) (string\
    \ (car x) (cadr x)))\n             (zip (string->list a) (string->list b))))))\n",
  "  (string-join (map (\u03BB (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (if (equal? a b) \"0\" \"1\"\
    ))\n  (define (xor-chars a b)\n    (if (or (empty? a) (empty? b))\n        \"\"\
    \n        (string-append (xor-char (first a) (first b))\n                    \
    \   (xor-chars (rest a) (rest b)))))\n  (xor-chars a b))\n", "  (cond\n    [(empty?\
    \ a) b]\n    [(empty? b) a]\n    [else (string_xor (rest a) (rest b))]))\n", " \
    \ (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\
    \ (string-append (string_xor (rest a) (rest b))\n                         (string\
    \ (xor (string->number (string (first a)))\n                                 \
    \     (string->number (string (first b))))))]))\n", "  (define (xor-char a b)\n\
    \    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-map xor-char a\
    \ b))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty?\
    \ b) a]\n    [else\n     (string-append\n      (string (bitwise-xor (string-&gt;number\
    \ (string-take a 1))\n                           (string-&gt;number (string-take\
    \ b 1))))\n      (string_xor (string-drop a 1) (string-drop b 1)))]))\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=?\
    \ b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n   \
    \       (else #\\1)))\n  (define (xor-string a b)\n    (if (or (string-null? a)\
    \ (string-null? b))\n        \"\"\n        (string-append (string (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                       (xor-string (substring a 1)\
    \ (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n   \
    \ (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-join (map (lambda\
    \ (x) (xor-char (car x) (cadr x))) (zip (string->list a) (string->list b)))))\n",
  "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (map (lambda (x) (list (string-ref\
    \ a x) (string-ref b x))) (build-list (string-length a) (lambda (x) x)))) \"\"\
    ))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n\
    \      (if (char=? (string-ref a 0) (string-ref b 0)) \"0\" \"1\")\n      (string_xor\
    \ (substring a 1) (substring b 1)))]))\n", "  (cond\n    [(empty? a) b]\n    [(empty?\
    \ b) a]\n    [else\n     (string-append\n      (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0))\n                           (string-&gt;number (string-ref\
    \ b 0))))\n      (string_xor (substring a 1) (substring b 1)))]))\n</code>\n",
  "  (define (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=?\
    \ a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join (map (lambda (a b)\
    \ (xor-char a b)) (string->list a) (string->list b))))\n", "  (string-append (map\
    \ (lambda (x) (string (xor (string-ref a x) (string-ref b x)))) (build-list (string-length\
    \ a) (lambda (x) x))) \"\"))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (cond\n\
    \    [(empty? a) b]\n    [(empty? b) a]\n    [else (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0))\n                               (string-&gt;number (string-ref\
    \ b 0))))\n          (string_xor (substring a 1) (substring b 1))]))\n</code>\n",
  "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string-ref x 0))\n                           \
    \        (string->number (string-ref x 1)))))\n    (string-zip a b))\n   \"\"\
    ))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (define (xor-char a b)\n    (cond ((and\
    \ (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=?\
    \ b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-helper a b)\n    (if\
    \ (or (string-null? a) (string-null? b))\n        \"\"\n        (string-append\
    \ (string (xor-char (string-ref a 0) (string-ref b 0)))\n                    \
    \   (xor-helper (substring a 1) (substring b 1)))))\n  (xor-helper a b))\n", " \
    \ (define (xor-char a b)\n    (cond\n      [(char=? a b) \"0\"]\n      [else \"\
    1\"]))\n  (string-join (map (lambda (a b) (xor-char a b)) a b)))\n", "  (string-join\
    \ (map (\u03BB (x) (number->string (bitwise-xor (string->number (string x) 2)\
    \ (string->number (string (cdr x)) 2)))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n\
    \     (string-append\n      (string (bitwise-xor (string-&gt;number (string-ref\
    \ a 0))\n                           (string-&gt;number (string-ref b 0))))\n \
    \     (string_xor (substring a 1) (substring b 1)))]))\n</code>\n", "  (define\
    \ (xor-char a b)\n    (cond\n      [(char=? a b) \"0\"]\n      [else \"1\"]))\n\
    \  (define (xor-string a b)\n    (cond\n      [(empty? a) b]\n      [(empty? b)\
    \ a]\n      [else (string-append (xor-char (string-ref a 0) (string-ref b 0))\n\
    \                           (xor-string (substring a 1) (substring b 1)))]))\n\
    \  (xor-string a b))\n", "  (define (xor-char a b)\n    (cond\n      [(char=?\
    \ a b) \"0\"]\n      [else \"1\"]))\n  (string-join (map xor-char a b)))\n", " \
    \ (string-join\n   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string-ref x 0))\n                                   (string->number (string-ref\
    \ x 1)))))\n    (string-zip a b))\n   \"\"))\n", "  (string-join (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"\
    ))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) \"0\"]\n    \
    \  [else \"1\"]))\n  (string-join (map (lambda (x) (xor-char (car x) (cadr x)))\
    \ (zip (string->list a) (string->list b))) \"\"))\n", "  (define (xor-char a b)\n\
    \    (if (equal? a b) \"0\" \"1\"))\n  (string-join (map (lambda (x) (xor-char\
    \ (car x) (cadr x))) (zip (string->list a) (string->list b)))))\n", "  (define\
    \ (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=? a #\\1)\
    \ (if (char=? b #\\0) #\\1 #\\0)]))\n  (string-join (map (lambda (x) (xor-char\
    \ (car x) (cadr x))) (zip (string->list a) (string->list b))) \"\"))\n", "  (string-join\
    \ (map (\u03BB (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (map list (string->list a) (string->list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\\
    0\n        #\\1))\n  (string-append (map (lambda (x) (xor-char (car x) (cadr x)))\
    \ (zip (string->list a) (string->list b)))))\n", "  (cond\n    [(string=? a \"\
    \") b]\n    [(string=? b \"\") a]\n    [else (string-append (string_xor (substring\
    \ a 1) (substring b 1))\n                       (string (bitwise-xor (string->number\
    \ (substring a 0 1))\n                                            (string->number\
    \ (substring b 0 1)))))]))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (string-join\
    \ (map (lambda (x) (number->string (xor (string-&gt;number (string-ref x 0)) (string-&gt;number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n",
  "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1)))))\n        (map list (string->list\
    \ a) (string->list b)))\n   \"\"))\n", "  (string-join\n   (map\n    (lambda (x)\n\
    \      (number->string\n       (bitwise-xor (string-&gt;number (string-ref x 0))\n\
    \                    (string-&gt;number (string-ref x 1)))))\n    (map list (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (string-zip a b)) \"\"))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1)))))\n        (map (lambda (x) (string (char-upcase x)))\n             (string-split\
    \ (string-append a b) \"\")))\n   \"\"))\n", "  (string-join (map (lambda (x)\
    \ (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n",
  "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n\
    \     (string-append\n      (string (bitwise-xor (string-&gt;number (string-ref\
    \ a 0))\n                           (string-&gt;number (string-ref b 0))))\n \
    \     (string_xor (substring a 1) (substring b 1)))]))\n</code>\n", "  (string-join\
    \ (map (lambda (x) (if (equal? (car x) (cadr x)) \"0\" \"1\")) (zip (string->list\
    \ a) (string->list b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (define\
    \ (xor-char a b)\n    (cond\n      [(char=? a b) \"0\"]\n      [else \"1\"]))\n\
    \  (string-join (map (lambda (pair) (xor-char (car pair) (cadr pair))) (zip (string->list\
    \ a) (string->list b))) \"\"))\n", "  (define (xor-char a b)\n    (cond ((and\
    \ (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=?\
    \ b #\\1)) #\\0)\n          (else #\\1)))\n  (string-map xor-char a b))\n", " \
    \ (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (zip\
    \ (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (let ([a (string->list\
    \ a)]\n        [b (string->list b)])\n    (string-join (map (lambda (x) (if (equal?\
    \ (car x) (cadr x)) \"0\" \"1\")) (zip a b)))))\n", "  (define (xor-char a b)\n\
    \    (if (eq? a b)\n        #\\0\n        #\\1))\n  (string-map xor-char a b))\n",
  "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n\
    \      (string (bitwise-xor (string-&gt;number (string-ref a 0))\n           \
    \                (string-&gt;number (string-ref b 0))))\n      (string_xor (substring\
    \ a 1) (substring b 1)))]))\n</code>\n", "  (let ([a (string->list a)]\n     \
    \   [b (string->list b)])\n    (string-join (map (lambda (x) (if (equal? (car\
    \ x) (cadr x)) \"0\" \"1\")) (zip a b)))))\n", "  (define (xor-char a b)\n   \
    \ (if (equal? a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n\
    \    (string-append (list (xor-char (string-ref a 0) (string-ref b 0)))\n    \
    \               (xor-string (substring a 1) (substring b 1))))\n  (if (equal?\
    \ (string-length a) (string-length b))\n      (xor-string a b)\n      (error \"\
    Strings are not of equal length\")))\n", "  (let ([a (string->list a)]\n     \
    \   [b (string->list b)])\n    (string-join (map (\u03BB (x) (if (equal? (car\
    \ x) (cadr x)) \"0\" \"1\")) (zip a b)))))\n", "  (define (xor-char c1 c2)\n \
    \   (cond ((and (char=? c1 #\\1) (char=? c2 #\\0)) #\\1)\n          ((and (char=?\
    \ c1 #\\0) (char=? c2 #\\1)) #\\1)\n          (else #\\0)))\n  (define (xor-string\
    \ a b)\n    (cond ((and (string=? a \"\") b) b)\n          ((and a (string=? b\
    \ \"\")) a)\n          (else (string-append (string (xor-char (string-ref a 0)\
    \ (string-ref b 0)))\n                               (xor-string (substring a\
    \ 1) (substring b 1))))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (if (char=? a b)\n        #\\0\n        #\\1))\n  (string-join\n   (map (lambda\
    \ (c) (xor-char (car c) (cadr c)))\n        (zip (string->list a) (string->list\
    \ b)))\n   \"\"))\n", "  (string-append (map (lambda (x y) (if (equal? x y) #\\\
    0 #\\1)) a b)))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (zip\
    \ (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (string-join (map (\u03BB\
    \ (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n",
  "  (define (xor-char a b)\n    (if (equal? a b) \"0\" \"1\"))\n  (if (or (equal?\
    \ a \"\") (equal? b \"\"))\n      \"\"\n      (string-append (xor-char (string-ref\
    \ a 0) (string-ref b 0))\n                    (string_xor (substring a 1) (substring\
    \ b 1)))))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n \
    \    (string-append\n      (string (bitwise-xor (string-&gt;number (string-ref\
    \ a 0))\n                           (string-&gt;number (string-ref b 0))))\n \
    \     (string_xor (substring a 1) (substring b 1)))]))\n</code>\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (string-zip a b)) \"\"))\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n\
    \     (string-append\n      (if (char=? (string-ref a 0) (string-ref b 0)) \"\
    0\" \"1\")\n      (string_xor (substring a 1) (substring b 1)))]))\n", "  (define\
    \ (xor-char a b)\n    (if (or (and (char=? a #\\1) (char=? b #\\0))\n        \
    \    (and (char=? a #\\0) (char=? b #\\1)))\n        #\\1\n        #\\0))\n  (define\
    \ (xor-string a b)\n    (if (or (string-null? a) (string-null? b))\n        \"\
    \"\n        (string-append (xor-char (string-ref a 0) (string-ref b 0))\n    \
    \                   (xor-string (string-drop a 1) (string-drop b 1)))))\n  (xor-string\
    \ a b))\n", "  (string-append (map (\u03BB (x) (if (equal? (car x) (cadr x)) \"\
    0\" \"1\")) (zip (string->list a) (string->list b)))))\n", "  (string-join\n \
    \  (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1)))))\n        (map (lambda (x) (string (string-ref\
    \ a x) (string-ref b x)))\n             (build-list (string-length a) (lambda\
    \ (x) x))))\n   \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (map\
    \ list (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (string-append\
    \ (map (lambda (x y) (if (equal? x y) #\\0 #\\1)) a b)))\n", "  (cond\n    [(empty?\
    \ a) b]\n    [(empty? b) a]\n    [else (cons (xor (string-&gt;number (string-ref\
    \ a 0))\n                    (string-&gt;number (string-ref b 0)))\n         \
    \       (string_xor (substring a 1) (substring b 1)))]))\n</code>\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) \"\
    0\"]\n      [else \"1\"]))\n  (string-join (map (lambda (x) (xor-char (car x)\
    \ (cadr x))) (zip (string->list a) (string->list b))) \"\"))\n", "  (string-append\
    \ (map (lambda (x) (string (xor (string-ref x 0) (string-ref x 1)))) (string-zip\
    \ a b))))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string-ref x 0))\n                           \
    \        (string->number (string-ref x 1)))))\n    (map (lambda (x) (list (string-ref\
    \ a x) (string-ref b x)))\n         (range (string-length a))))))\n", "  (string-join\
    \ (map (lambda (x) (number->string (xor (string-&gt;number (string-ref x 0)) (string-&gt;number\
    \ (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"\
    ))\n", "  (string-join (map (lambda (x) (if (equal? (car x) (cadr x)) \"0\" \"\
    1\")) (zip (string->list a) (string->list b))) \"\"))\n", "  (define (xor-char\
    \ a b)\n    (if (equal? a b) \"0\" \"1\"))\n  (string-join (map (lambda (x) (xor-char\
    \ (car x) (cadr x))) (zip (string->list a) (string->list b)))))\n", "  (string-join\
    \ (map (lambda (x) (string (xor (string-&gt;number (string-ref x 0)) (string-&gt;number\
    \ (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"\
    ))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n\
    \      (string (bitwise-xor (string-&gt;number (string-ref a 0))\n           \
    \                (string-&gt;number (string-ref b 0))))\n      (string_xor (substring\
    \ a 1) (substring b 1)))]))\n</code>\n", "  (string-join\n   (map (lambda (x)\
    \ (number->string (bitwise-xor (string->number (string x) 2) (string->number (string\
    \ (list-ref b (string-index x a))) 2))))\n        (string-&gt;list a))\n   \"\"\
    ))\n</code>\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n\
    \     (string-append\n      (string (bitwise-xor (string-&gt;number (string-ref\
    \ a 0))\n                           (string-&gt;number (string-ref b 0))))\n \
    \     (string_xor (substring a 1) (substring b 1)))]))\n</code>\n", "  (define\
    \ (xor-char a b)\n    (if (equal? a b) \"0\" \"1\"))\n  (if (equal? (string-length\
    \ a) (string-length b))\n      (string-join (map (lambda (x y) (xor-char x y))\
    \ (string->list a) (string->list b)))\n      (error \"Strings must be of equal\
    \ length\")))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n\
    \     (string-append\n      (string\n       (if (equal? (first a) (first b))\n\
    \           #\\0\n           #\\1))\n      (string_xor (rest a) (rest b)))]))\n",
  "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (zip\
    \ (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (define (xor-char a\
    \ b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and\
    \ (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string\
    \ a b)\n    (if (or (string-null? a) (string-null? b))\n        \"\"\n       \
    \ (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n     \
    \                  (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=?\
    \ b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n   \
    \       (else #\\1)))\n  (define (xor-string a b)\n    (if (or (string-null? a)\
    \ (string-null? b))\n        \"\"\n        (string-append (xor-char (string-ref\
    \ a 0) (string-ref b 0))\n                       (xor-string (substring a 1) (substring\
    \ b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (string-join (map (lambda (x) (xor-char\
    \ (car x) (cadr x))) (zip (string->list a) (string->list b)))))\n", "  (apply\
    \ string (map (lambda (x y) (if (equal? x y) #\\0 #\\1)) a b)))\n", "  (cond\n\
    \    [(or (string=? a \"\") (string=? b \"\")) \"\"]\n    [(string=? (string-ref\
    \ a 0) (string-ref b 0))\n     (string-append \"0\" (string_xor (substring a 1)\
    \ (substring b 1)))]\n    [else\n     (string-append \"1\" (string_xor (substring\
    \ a 1) (substring b 1)))]))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b)\
    \ a]\n    [else\n     (string-append\n      (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0))\n                           (string-&gt;number (string-ref\
    \ b 0))))\n      (string_xor (substring a 1) (substring b 1)))]))\n</code>\n",
  "  (string-append (map (lambda (x) (if (equal? x \"0\") \"1\" \"0\")) (string-split\
    \ a \"\"))\n                 (map (lambda (x) (if (equal? x \"0\") \"1\" \"0\"\
    )) (string-split b \"\"))))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (cond\n\
    \    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n    \
    \  (string (bitwise-xor (string-&gt;number (string-ref a 0))\n               \
    \            (string-&gt;number (string-ref b 0))))\n      (string_xor (substring\
    \ a 1) (substring b 1)))]))\n</code>\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (string-join\n\
    \   (map\n    (lambda (x)\n      (number->string (bitwise-xor (string->number\
    \ (string-ref x 0))\n                                   (string->number (string-ref\
    \ x 1)))))\n    (map (lambda (x) (string x)) (string-split a #\\space)))))\n",
  "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n\
    \      (string (bitwise-xor (string-&gt;number (string-ref a 0))\n           \
    \                (string-&gt;number (string-ref b 0))))\n      (string_xor (substring\
    \ a 1) (substring b 1)))]))\n</code>\n", "  (string-join\n   (map\n    (lambda\
    \ (x)\n      (number->string (bitwise-xor (string->number (string-ref x 0))\n\
    \                                   (string->number (string-ref x 1)))))\n   \
    \ (map list (string->list a) (string->list b)))\n   \"\"))\n", "  (define (xor-char\
    \ a b)\n    (cond\n      ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n      ((and\
    \ (char=? a #\\1) (char=? b #\\1)) #\\0)\n      (else #\\1)))\n  (define (xor-string\
    \ a b)\n    (if (string=? a \"\")\n        \"\"\n        (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (cond\n    [(empty?\
    \ a) b]\n    [(empty? b) a]\n    [else (string-append (string_xor (rest a) (rest\
    \ b))\n                         (string (xor (string->number (string (first a)))\n\
    \                                      (string->number (string (first b))))))]))\n",
  "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\\
    0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\\
    1)))\n  (define (xor-str a b)\n    (if (or (string-null? a) (string-null? b))\n\
    \        \"\"\n        (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-str (substring a 1) (substring b 1)))))\n\
    \  (xor-str a b))\n", "  (cond\n    [(string=? a \"\") b]\n    [(string=? b \"\
    \") a]\n    [else (string-append (string_xor (substring a 1) (substring b 1))\n\
    \                       (string (xor (string->number (substring a 0 1))\n    \
    \                                (string->number (substring b 0 1)))))]))\n",
  "  (cond ((equal? (string-length a) 0) \"\")\n        ((equal? (string-length b)\
    \ 0) \"\")\n        ((equal? (string-ref a 0) (string-ref b 0))\n         (string\
    \ (string-ref a 0) (string_xor (substring a 1) (substring b 1))))\n        (else\
    \ (string (if (equal? (string-ref a 0) #\\0) #\\1 #\\0)\n                    \
    \ (string_xor (substring a 1) (substring b 1))))))\n", "  (define (xor-char a\
    \ b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and\
    \ (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string\
    \ a b)\n    (if (string=? a \"\")\n        \"\"\n        (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) \"\
    0\"]\n      [else \"1\"]))\n  (string-join (map (lambda (x) (xor-char (string-ref\
    \ a (car x)) (string-ref b (car x)))) (enumerate (string-length a))) \"\"))\n",
  "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else (string-append (string_xor\
    \ (rest a) (rest b))\n                         (string (bitwise-xor (string->number\
    \ (string (first a)))\n                                              (string->number\
    \ (string (first b))))))]))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\
    \ (string_xor (rest a) (rest b))]))\n", "  (cond\n    [(empty? a) b]\n    [(empty?\
    \ b) a]\n    [else\n     (string-append\n      (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0))\n                           (string-&gt;number (string-ref\
    \ b 0))))\n      (string_xor (substring a 1) (substring b 1)))]))\n</code>\n",
  "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n\
    \     (string-append\n      (string (bitwise-xor (string-&gt;number (string-ref\
    \ a 0))\n                           (string-&gt;number (string-ref b 0))))\n \
    \     (string_xor (substring a 1) (substring b 1)))]))\n</code>\n", "  (string-join\n\
    \   (map\n    (\u03BB (x) (number->string (bitwise-xor (string-&gt;number (string\
    \ x) 2)\n                                        (string-&gt;number (string (cdr\
    \ x)) 2))))\n    (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n",
  "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n\
    \      (string-append\n       (string-append\n        (string-append\n       \
    \  (string-append\n          (string-append\n           (string-append\n     \
    \       (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n\
    \                                ", "  (define (xor-char a b)\n    (cond\n   \
    \   [(char=? a b) \"0\"]\n      [else \"1\"]))\n  (string-join (map xor-char a\
    \ b)))\n", "  (define (xor-char a b)\n    (cond\n      ((and (char=? a #\\0) (char=?\
    \ b #\\0)) #\\0)\n      ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n      (else\
    \ #\\1)))\n  (define (xor-string a b)\n    (cond\n      ((string=? a \"\") b)\n\
    \      ((string=? b \"\") a)\n      (else (string-append (string (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                           (xor-string (substring a\
    \ 1) (substring b 1))))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (if (equal? a b)\n        #\\0\n        #\\1))\n  (apply string (map xor-char\
    \ a b)))\n", "  (string-append\n   (if (string=? (substring a 0 1) \"1\") \"0\"\
    \ \"1\")\n   (if (string=? (substring a 1 1) \"1\") \"0\" \"1\")\n   (if (string=?\
    \ (substring a 2 1) \"1\") \"0\" \"1\")))\n", "  (string-join (map (lambda (x)\
    \ (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"\
    ))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) \"0\"]\n    \
    \  [else \"1\"]))\n  (define (xor-chars a b)\n    (if (string-empty? a)\n    \
    \    \"\"\n        (string-append (xor-char (string-ref a 0) (string-ref b 0))\n\
    \                       (xor-chars (string-drop a 1) (string-drop b 1)))))\n \
    \ (xor-chars a b))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\
    \ (cons (xor (first a) (first b)) (string_xor (rest a) (rest b)))]))\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) \"\
    0\"]\n      [else \"1\"]))\n  (define (xor-string a b)\n    (cond\n      [(empty?\
    \ a) b]\n      [(empty? b) a]\n      [else (string-append (xor-char (first a)\
    \ (first b))\n                           (xor-string (rest a) (rest b)))]))\n\
    \  (xor-string a b))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (list-ref\
    \ b (string-index x a))) 2))))\n        (string-&gt;list a))\n   \"\"))\n</code>\n",
  "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else (string-append (string-xor\
    \ (string-take a 1) (string-take b 1))\n                        (string-xor (string-drop\
    \ a 1) (string-drop b 1)))]))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b)\
    \ a]\n    [else (string_xor (rest a) (rest b))]))\n", "  (if (or (empty? a) (empty?\
    \ b))\n      \"\"\n      (string (bitwise-xor (string-&gt;number (string-ref a\
    \ 0))\n                           (string-&gt;number (string-ref b 0))))\n   \
    \   (string_xor (substring a 1) (substring b 1))))\n</code>\n", "  (define (xor-char\
    \ a b)\n    (cond\n      [(char=? a b) \"0\"]\n      [else \"1\"]))\n  (define\
    \ (xor-string a b)\n    (cond\n      [(empty? a) \"\"]\n      [(empty? b) \"\"\
    ]\n      [else (string-append (xor-char (first a) (first b))\n               \
    \            (xor-string (rest a) (rest b)))]))\n  (xor-string a b))\n", "  (cond\n\
    \    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string\n      (xor (string-&gt;number\
    \ (string-ref a 0))\n           (string-&gt;number (string-ref b 0)))\n      (string_xor\
    \ (substring a 1) (substring b 1)))]))\n", "  (cond\n    [(empty? a) b]\n    [(empty?\
    \ b) a]\n    [else (string_xor (rest a) (rest b))]))\n", "  (string-join\n   (map\
    \ (lambda (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1)))))\n        (map (lambda (x) (string x)) (string-split (string-append\
    \ a b) \"\")))\n   \"\"))\n", "  (string-join (map (lambda (x) (if (equal? (car\
    \ x) (cadr x)) \"0\" \"1\")) (zip (string->list a) (string->list b))) \"\"))\n",
  "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\
    \ (string (bitwise-xor (string-&gt;number (string-ref a 0))\n                \
    \               (string-&gt;number (string-ref b 0))))\n          (string_xor\
    \ (substring a 1) (substring b 1))]))\n</code>\n", "  (string-join\n   (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1)))))\n        (map (lambda (x) (string (car x) (cadr x)))\n\
    \             (partition a b)))\n   \"\"))\n", "  (cond\n    [(empty? a) b]\n\
    \    [(empty? b) a]\n    [else (string-append (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0)) (string-&gt;number (string-ref b 0)))) (string_xor (substring\
    \ a 1) (substring b 1)))]))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (define\
    \ (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (define\
    \ (xor-string a b)\n    (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                   (xor-string (substring a 1) (substring b 1))))\n\
    \  (if (equal? (string-length a) (string-length b))\n      (xor-string a b)\n\
    \      (error \"string_xor: strings not of equal length\")))\n", "  (define (xor-char\
    \ a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (define (xor-string\
    \ a b)\n    (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                   (xor-string (substring a 1) (substring b 1))))\n  (xor-string\
    \ a b))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n    \
    \ (string-append\n      (string\n       (if (eq? (string-ref a 0) (string-ref\
    \ b 0))\n           #\\0\n           #\\1))\n      (string_xor (substring a 1)\
    \ (substring b 1)))]))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n \
    \       #\\0\n        #\\1))\n  (string-map xor-char a b))\n", "  (cond [(string=?\
    \ a \"\") b]\n        [(string=? b \"\") a]\n        [else (string-append (string_xor\
    \ (substring a 1) (substring b 1))\n                             (string (bitwise-xor\
    \ (string-&gt;number (substring a 0 1))\n                                    \
    \              (string-&gt;number (substring b 0 1)))))]))\n</code>\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string (list-ref b (string-index\
    \ x a))) 2)))) (string-&gt;list a)) \"\"))\n", "  (string-join (map (lambda (x)\
    \ (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"\
    ))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n\
    \      (if (equal? (first a) (first b)) \"0\" \"1\")\n      (string_xor (rest\
    \ a) (rest b)))]))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string (cdr x)) 2)))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (string-join (map (\u03BB (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (map list (string->list a) (string->list b))) \"\"))\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (string-split (string-append a b) #\\\
    space)) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n\
    \     (string-append\n      (string (bitwise-xor (string-&gt;number (string-take\
    \ a 1))\n                           (string-&gt;number (string-take b 1))))\n\
    \      (string_xor (string-drop a 1) (string-drop b 1)))]))\n", "  (cond\n   \
    \ [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string\n      (bitwise-xor\n\
    \       (string-&gt;number (string-ref a 0))\n       (string-&gt;number (string-ref\
    \ b 0))))\n     (string_xor (substring a 1) (substring b 1))]))\n</code>\n", " \
    \ (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=?\
    \ b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n   \
    \       (else #\\1)))\n  (define (xor-str a b)\n    (if (or (string-null? a) (string-null?\
    \ b))\n        \"\"\n        (string-append (string (xor-char (string-ref a 0)\
    \ (string-ref b 0)))\n                       (xor-str (substring a 1) (substring\
    \ b 1)))))\n  (xor-str a b))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
