name: HumanEval_121_solution
language: rkt
results:
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm1g1g8pm.rkt:22:4\n\
    actual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm1g1g8pm.rkt:23:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpm1g1g8pm.rkt:24:4\nactual:     54\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpm1g1g8pm.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm1g1g8pm.rkt:26:4\n\
    actual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm1g1g8pm.rkt:27:4\nactual:     62\n\
    expected:   23\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpm1g1g8pm.rkt:28:4\nactual:     2\nexpected:\
    \   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond [(empty?\
    \ lst) 0]\n        [(even? (second lst)) (+ (first lst) (solution (rest (rest\
    \ lst))))]\n        [else (solution (rest (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkwmqvq9y.rkt:21:4\n\
    actual:     5\nexpected:   12\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpkwmqvq9y.rkt:22:4\n\nsecond: list\
    \ contains too few elements\n  list: '(3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkwmqvq9y.rkt:24:4\nactual:\
    \     0\nexpected:   5\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkwmqvq9y.rkt:25:4\n\nsecond: list contains\
    \ too few elements\n  list: '(8)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkwmqvq9y.rkt:27:4\nactual:\
    \     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (solution (rest\
    \ lst)))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate\
    \ (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n   \
    \ (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate\
    \ (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal?\
    \ (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13\
    \ 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy33aixw3.rkt:22:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy33aixw3.rkt:23:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpy33aixw3.rkt:24:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy33aixw3.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy33aixw3.rkt:27:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy33aixw3.rkt:28:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even?\
    \ (first lst)) (first lst) + (solution (rest lst))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv3zkg2y7.rkt:23:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv3zkg2y7.rkt:24:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpv3zkg2y7.rkt:26:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpv3zkg2y7.rkt:28:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv3zkg2y7.rkt:29:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (+ (solution (rest lst)) (first\
    \ (rest lst)))]\n    [else (solution (rest lst))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5lvuimqr.rkt:22:4\n\
    actual:     7\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5lvuimqr.rkt:23:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp5lvuimqr.rkt:24:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5lvuimqr.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5lvuimqr.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5lvuimqr.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5lvuimqr.rkt:28:4\nactual:\
    \     9\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq2sd__1v.rkt:22:4\n\
    actual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq2sd__1v.rkt:23:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpq2sd__1v.rkt:24:4\nactual:     54\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq2sd__1v.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq2sd__1v.rkt:26:4\n\
    actual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq2sd__1v.rkt:27:4\nactual:     62\n\
    expected:   23\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpq2sd__1v.rkt:28:4\nactual:     2\nexpected:\
    \   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw5vle7q9.rkt:22:4\n\
    actual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw5vle7q9.rkt:23:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpw5vle7q9.rkt:24:4\nactual:     54\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw5vle7q9.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw5vle7q9.rkt:26:4\n\
    actual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw5vle7q9.rkt:27:4\nactual:     62\n\
    expected:   23\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpw5vle7q9.rkt:28:4\nactual:     2\nexpected:\
    \   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (car lst)) (solution (cdr (cdr lst))) ]\n  \
    \  [else (+ (car lst) (solution (cdr (cdr lst))))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn8acr4dl.rkt:22:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpn8acr4dl.rkt:23:4\n\ncdr: contract\
    \ violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn8acr4dl.rkt:24:4\nactual:\
    \     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn8acr4dl.rkt:25:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpn8acr4dl.rkt:26:4\n\ncdr: contract violation\n\
    \  expected: pair?\n  given: '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn8acr4dl.rkt:27:4\nactual:\
    \     30\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn8acr4dl.rkt:28:4\nactual:     2\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even?\
    \ (first lst)) (first lst) + (solution (rest lst))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1f7l4vxt.rkt:23:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1f7l4vxt.rkt:24:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp1f7l4vxt.rkt:26:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1f7l4vxt.rkt:28:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1f7l4vxt.rkt:29:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even?\
    \ (first lst)) (first lst) + (solution (rest lst))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprkftfcf4.rkt:23:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprkftfcf4.rkt:24:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmprkftfcf4.rkt:26:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprkftfcf4.rkt:28:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprkftfcf4.rkt:29:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2)) (solution (rest\
    \ lst))]\n    [(odd? (first lst)) (+ (first lst) (solution (rest lst)))]\n   \
    \ [else (solution (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp07666d5u.rkt:23:4\n\
    actual:     1\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp07666d5u.rkt:25:4\nactual:     334\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp07666d5u.rkt:26:4\nactual:     9\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp07666d5u.rkt:28:4\nactual:     13\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp07666d5u.rkt:29:4\n\
    actual:     22\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (solution (rest lst))]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfqup1i54.rkt:22:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfqup1i54.rkt:23:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpfqup1i54.rkt:24:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfqup1i54.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfqup1i54.rkt:27:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfqup1i54.rkt:28:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (solution (cdr lst))]\n    [(odd?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate\
    \ (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n   \
    \ (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate\
    \ (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal?\
    \ (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13\
    \ 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwin0qinq.rkt:22:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwin0qinq.rkt:23:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpwin0qinq.rkt:24:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwin0qinq.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwin0qinq.rkt:27:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwin0qinq.rkt:28:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (car lst)) (solution (cdr lst))]\n    [(odd?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate\
    \ (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n   \
    \ (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate\
    \ (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal?\
    \ (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13\
    \ 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pbdcp2e.rkt:22:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4pbdcp2e.rkt:23:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp4pbdcp2e.rkt:24:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4pbdcp2e.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pbdcp2e.rkt:27:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4pbdcp2e.rkt:28:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqyols1gv.rkt:22:4\n\
    actual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqyols1gv.rkt:23:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpqyols1gv.rkt:24:4\nactual:     54\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqyols1gv.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqyols1gv.rkt:26:4\n\
    actual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqyols1gv.rkt:27:4\nactual:     62\n\
    expected:   23\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqyols1gv.rkt:28:4\nactual:     2\nexpected:\
    \   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (solution (rest lst))]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmavumpq5.rkt:22:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmavumpq5.rkt:23:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpmavumpq5.rkt:24:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmavumpq5.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmavumpq5.rkt:27:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmavumpq5.rkt:28:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (solution (rest lst))]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg2cpzjlj.rkt:22:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg2cpzjlj.rkt:23:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpg2cpzjlj.rkt:24:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpg2cpzjlj.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg2cpzjlj.rkt:27:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg2cpzjlj.rkt:28:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38vpum3l.rkt:22:4\n\
    actual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp38vpum3l.rkt:23:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp38vpum3l.rkt:24:4\nactual:     54\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp38vpum3l.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38vpum3l.rkt:26:4\n\
    actual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp38vpum3l.rkt:27:4\nactual:     62\n\
    expected:   23\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp38vpum3l.rkt:28:4\nactual:     2\nexpected:\
    \   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7p1377cg.rkt:22:4\n\
    actual:     8\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7p1377cg.rkt:23:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp7p1377cg.rkt:24:4\nactual:     54\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7p1377cg.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7p1377cg.rkt:26:4\n\
    actual:     14\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7p1377cg.rkt:27:4\nactual:     62\n\
    expected:   23\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp7p1377cg.rkt:28:4\nactual:     2\nexpected:\
    \   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; >>>\
    \ (solution (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n\
    ;; >>> (solution (list 30 13 24 321))\n;; 0\n(define (solution lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (solution (rest lst))]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2o8g0au2.rkt:22:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2o8g0au2.rkt:23:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp2o8g0au2.rkt:24:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2o8g0au2.rkt:25:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2o8g0au2.rkt:27:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2o8g0au2.rkt:28:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
