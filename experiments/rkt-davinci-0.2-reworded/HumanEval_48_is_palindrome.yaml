name: HumanEval_48_is_palindrome
language: rkt
prompt: "#lang racket\n\n;; Checks if given string is a palindrome\n;; >>> (is_palindrome\
  \ \"\")\n;; #t\n;; >>> (is_palindrome \"aba\")\n;; #t\n;; >>> (is_palindrome \"\
  aaaaa\")\n;; #t\n;; >>> (is_palindrome \"zbcd\")\n;; #f\n(define (is_palindrome\
  \ text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_palindrome))\n\
  \    (check-equal? (candidate \"\") #t)\n    (check-equal? (candidate \"aba\") #t)\n\
  \    (check-equal? (candidate \"aaaaa\") #t)\n    (check-equal? (candidate \"zbcd\"\
  ) #f)\n    (check-equal? (candidate \"xywyx\") #t)\n    (check-equal? (candidate\
  \ \"xywyz\") #f)\n    (check-equal? (candidate \"xywzx\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (is_palindrome_helper text i j)\n    (cond\n      [(= i j)\
    \ #t]\n      [(= (+ i 1) j) #t]\n      [(char=? (string-ref text i) (string-ref\
    \ text j))\n       (is_palindrome_helper text (+ i 1) (- j 1))]\n      [else #f]))\n\
    \  (is_palindrome_helper text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter\
    \ text i j)\n    (cond\n      [(= i j) #t]\n      [(= i (+ j 1)) #t]\n      [(char=?\
    \ (string-ref text i) (string-ref text j))\n       (is_palindrome_iter text (+\
    \ i 1) (- j 1))]\n      [else #f]))\n  (is_palindrome_iter text 0 (- (string-length\
    \ text) 1)))\n", "  (define (helper text left right)\n    (if (= left right)\n\
    \        #t\n        (if (= (string-ref text left) (string-ref text right))\n\
    \            (helper text (+ left 1) (- right 1))\n            #f)))\n  (helper\
    \ text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter text\
    \ left right)\n    (if (= left right)\n        #t\n        (if (= (string-ref\
    \ text left) (string-ref text right))\n            (is_palindrome_iter text (+\
    \ left 1) (- right 1))\n            #f)))\n  (is_palindrome_iter text 0 (- (string-length\
    \ text) 1)))\n", "  (define (is_palindrome-iter text left right)\n    (if (= left\
    \ right)\n        #t\n        (if (= (string-ref text left) (string-ref text right))\n\
    \            (is_palindrome-iter text (+ left 1) (- right 1))\n            #f)))\n\
    \  (is_palindrome-iter text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome-iter\
    \ text i j)\n    (cond ((= i j) #t)\n          ((= (+ i 1) j) #t)\n          ((char=?\
    \ (string-ref text i) (string-ref text j))\n           (is_palindrome-iter text\
    \ (+ i 1) (- j 1)))\n          (else #f)))\n  (is_palindrome-iter text 0 (- (string-length\
    \ text) 1)))\n", "  (define (is_palindrome_iter text left right)\n    (if (= left\
    \ right)\n        #t\n        (if (= (string-ref text left) (string-ref text right))\n\
    \            (is_palindrome_iter text (+ left 1) (- right 1))\n            #f)))\n\
    \  (is_palindrome_iter text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter\
    \ text i j)\n    (if (>= i j)\n        #t\n        (if (string-ref text i)\n \
    \           (if (string-ref text j)\n                (if (char=? (string-ref text\
    \ i) (string-ref text j))\n                    (is_palindrome_iter text (+ i 1)\
    \ (- j 1))\n                    #f)\n                #f)\n            #f)))\n\
    \  (is_palindrome_iter text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome-iter\
    \ text left right)\n    (if (= left right)\n        #t\n        (if (= (string-ref\
    \ text left) (string-ref text right))\n            (is_palindrome-iter text (+\
    \ left 1) (- right 1))\n            #f)))\n  (is_palindrome-iter text 0 (- (string-length\
    \ text) 1)))\n", "  (define (is_palindrome_helper text i j)\n    (cond\n     \
    \ [(> i j) #t]\n      [(not (equal? (string-ref text i) (string-ref text j)))\
    \ #f]\n      [else (is_palindrome_helper text (+ i 1) (- j 1))]))\n  (is_palindrome_helper\
    \ text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter text\
    \ i j)\n    (cond ((= i j) #t)\n          ((= (+ i 1) j) #t)\n          ((char=?\
    \ (string-ref text i) (string-ref text j))\n           (is_palindrome_iter text\
    \ (+ i 1) (- j 1)))\n          (else #f)))\n  (is_palindrome_iter text 0 (- (string-length\
    \ text) 1)))\n", "  (define (is_palindrome-iter text i j)\n    (cond [(> i j)\
    \ #t]\n          [(char=? (string-ref text i) (string-ref text j))\n         \
    \  (is_palindrome-iter text (+ i 1) (- j 1))]\n          [else #f]))\n  (is_palindrome-iter\
    \ text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_helper text\
    \ left right)\n    (if (= left right)\n        #t\n        (if (= (string-ref\
    \ text left) (string-ref text right))\n            (is_palindrome_helper text\
    \ (+ left 1) (- right 1))\n            #f)))\n  (is_palindrome_helper text 0 (-\
    \ (string-length text) 1)))\n", "  (define (is_palindrome-helper text i j)\n \
    \   (cond\n      [(> i j) #t]\n      [(not (equal? (string-ref text i) (string-ref\
    \ text j))) #f]\n      [else (is_palindrome-helper text (+ i 1) (- j 1))]))\n\
    \  (is_palindrome-helper text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_helper\
    \ text i j)\n    (if (>= i j)\n        #t\n        (if (char=? (string-ref text\
    \ i) (string-ref text j))\n            (is_palindrome_helper text (+ i 1) (- j\
    \ 1))\n            #f)))\n  (is_palindrome_helper text 0 (- (string-length text)\
    \ 1)))\n", "  (define (is_palindrome_helper text left right)\n    (if (= left\
    \ right)\n        #t\n        (if (= (string-ref text left) (string-ref text right))\n\
    \            (is_palindrome_helper text (+ left 1) (- right 1))\n            #f)))\n\
    \  (is_palindrome_helper text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome_iter\
    \ text i j)\n    (if (>= i j)\n        #t\n        (if (char=? (string-ref text\
    \ i) (string-ref text j))\n            (is_palindrome_iter text (+ i 1) (- j 1))\n\
    \            #f)))\n  (is_palindrome_iter text 0 (- (string-length text) 1)))\n",
  "  (define (is_palindrome_iter text left right)\n    (if (= left right)\n      \
    \  #t\n        (if (= (string-ref text left) (string-ref text right))\n      \
    \      (is_palindrome_iter text (+ left 1) (- right 1))\n            #f)))\n \
    \ (is_palindrome_iter text 0 (- (string-length text) 1)))\n", "  (define (is_palindrome-iter\
    \ text-len)\n    (if (= text-len 0)\n        #t\n        (and (char=? (string-ref\
    \ text (- text-len 1)) (string-ref text (- (string-length text) text-len)))\n\
    \             (is_palindrome-iter (- text-len 1)))))\n  (is_palindrome-iter (string-length\
    \ text)))\n", "  (define (is_palindrome_iter text len)\n    (if (= len 1)\n  \
    \      #t\n        (if (= len 2)\n            (equal? (string-ref text 0) (string-ref\
    \ text 1))\n            (and (equal? (string-ref text 0) (string-ref text (- len\
    \ 1)))\n                 (is_palindrome_iter (substring text 1 (- len 2)) (- len\
    \ 2))))))\n  (is_palindrome_iter text (string-length text)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
