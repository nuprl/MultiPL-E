name: HumanEval_133_sum_squares
language: rkt
prompt: "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return\
  \ the sum of squared numbers in the given list,\n;; round each element in the list\
  \ to the upper int(Ceiling) first.\n;; Examples:\n;; >>> lst\n;; (list 1 2 3)\n\
  ;; >>> lst\n;; (list 1 4 9)\n;; >>> lst\n;; (list 1 3 5 7)\n;; >>> lst\n;; (list\
  \ 1.4 4.2 0)\n;; >>> lst\n;; (list -2.4 1 1)\n(define (sum_squares lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n\
  \    (check-equal? (candidate (list 1 2 3)) 14)\n    (check-equal? (candidate (list\
  \ 1.0 2 3)) 14)\n    (check-equal? (candidate (list 1 3 5 7)) 84)\n    (check-equal?\
  \ (candidate (list 1.4 4.2 0)) 29)\n    (check-equal? (candidate (list -2.4 1 1))\
  \ 6)\n    (check-equal? (candidate (list 100 1 15 2)) 10230)\n    (check-equal?\
  \ (candidate (list 10000 10000)) 200000000)\n    (check-equal? (candidate (list\
  \ -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n\
  \    (check-equal? (candidate (list 0)) 0)\n    (check-equal? (candidate (list -1))\
  \ 1)\n    (check-equal? (candidate (list -1 1 0)) 2)\n))\n\n(test-humaneval)"
completions: ["  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply\
    \ + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt x 2))\
    \ (map ceiling lst))))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (*\
    \ x x)) (map ceiling lst))))\n", "  (apply + (map (lambda (x) (expt (ceiling x)\
    \ 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n",
  "  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ x 2)) (map ceiling lst))))\n", "  (apply + (map (lambda (x) (expt (ceiling x)\
    \ 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt x 2)) (map ceiling lst))))\n", "  (apply + (map (lambda (x)\
    \ (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt x 2)) (map ceiling\
    \ lst))))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (define (ceiling x)\n    (cond\n      [(< x 0) (- (floor x))]\n\
    \      [else (ceiling x)]))\n  (apply + (map (lambda (x) (* x x)) (map ceiling\
    \ lst))))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (* x x)) (map ceiling lst))))\n", "  (apply + (map (lambda (x) (*\
    \ x x)) (map ceiling lst))))\n", "  (apply + (map (lambda (x) (expt (ceiling x)\
    \ 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (* x x)) (map\
    \ ceiling lst))))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (* x x)) (map\
    \ ceiling lst))))\n", "  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n", "  (apply + (map\
    \ (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map\
    \ (lambda (x) (expt x 2)) (map ceiling lst))))\n", "  (apply + (map (lambda (x)\
    \ (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt x 2)) (map ceiling lst))))\n", "  (apply + (map (lambda (x) (expt\
    \ (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2))\
    \ lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", " \
    \ (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [else (+ (expt (ceiling (first lst)) 2) (sum_squares (rest lst)))]))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling\
    \ x) 2)) lst)))\n", "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n",
  "  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n", "  (apply + (map (lambda\
    \ (x) (expt (ceiling x) 2)) lst)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
