name: HumanEval_39_prime_fib
language: rkt
prompt: "#lang racket\n\n;; prime_fib returns n-th number that is a Fibonacci number\
  \ and it's also prime.\n;; >>> (prime_fib 1)\n;; 2\n;; >>> (prime_fib 2)\n;; 3\n\
  ;; >>> (prime_fib 3)\n;; 5\n;; >>> (prime_fib 4)\n;; 13\n;; >>> (prime_fib 5)\n\
  ;; 89\n(define (prime_fib n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n\
  \    (check-equal? (candidate 1) 2)\n    (check-equal? (candidate 2) 3)\n    (check-equal?\
  \ (candidate 3) 5)\n    (check-equal? (candidate 4) 13)\n    (check-equal? (candidate\
  \ 5) 89)\n    (check-equal? (candidate 6) 233)\n    (check-equal? (candidate 7)\
  \ 1597)\n    (check-equal? (candidate 8) 28657)\n    (check-equal? (candidate 9)\
  \ 514229)\n    (check-equal? (candidate 10) 433494437)\n))\n\n(test-humaneval)"
completions: ["  (define (fib n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n \
    \         (else (+ (fib (- n 1)) (fib (- n 2))))))\n  (define (prime? n)\n   \
    \ (define (prime-helper n i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (prime-helper n (+ i 1)))))\n    (prime-helper\
    \ n 2))\n  (define (prime-fib-helper n i)\n    (cond ((= i n) (fib n))\n     \
    \     ((and (prime? (fib i)) (= n 1)) (fib i))\n          ((and (prime? (fib i))\
    \ (> n 1)) (prime-fib-helper (- n 1) (+ i 1)))\n          (else (prime-fib-helper\
    \ n (+ i 1)))))\n  (prime-fib-helper n 1))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (fib n)\n    (define\
    \ (iter i a b)\n      (cond ((= i n) b)\n            (else (iter (+ i 1) b (+\
    \ a b)))))\n    (iter 1 0 1))\n  (define (iter i)\n    (cond ((= i n) (fib i))\n\
    \          ((and (prime? (fib i)) (prime? (fib (+ i 1)))) (fib (+ i 1)))\n   \
    \       (else (iter (+ i 1)))))\n  (iter 1))\n", "  (let loop ((i 1) (fib1 1)\
    \ (fib2 1) (count 0))\n    (if (= i n)\n        fib2\n        (if (and (prime?\
    \ fib2) (= count 1))\n            (loop (+ i 1) fib2 (+ fib1 fib2) 0)\n      \
    \      (loop i fib2 (+ fib1 fib2) (+ count 1))))))\n", "  (define (prime_fib_iter\
    \ n f1 f2 count)\n    (cond ((= count n) f1)\n          ((and (prime? f1) (= count\
    \ (- n 1))) f1)\n          (else (prime_fib_iter n f2 (+ f1 f2) (+ count 1)))))\n\
    \  (prime_fib_iter n 2 1 1))\n", "  (define (fib n)\n    (cond\n      [(= n 1)\
    \ 1]\n      [(= n 2) 1]\n      [else (+ (fib (- n 1)) (fib (- n 2)))]))\n  (define\
    \ (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder\
    \ n 2) 0) #f]\n      [else (let loop ([i 3])\n              (cond\n          \
    \      [(= (remainder n i) 0) #f]\n                [(> i (sqrt n)) #t]\n     \
    \           [else (loop (+ i 2))]))]))\n  (let loop ([i 1] [cnt 0])\n    (cond\n\
    \      [(= cnt n) (fib i)]\n      [(prime? (fib i)) (loop (+ i 1) (+ cnt 1))]\n\
    \      [else (loop (+ i 1) cnt)])))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (define (fib n)\n    (cond ((= n 0) 0)\n     \
    \     ((= n 1) 1)\n          (else (+ (fib (- n 1)) (fib (- n 2))))))\n  (define\
    \ (prime-fib n)\n    (cond ((= n 1) 2)\n          ((= n 2) 3)\n          (else\
    \ (let loop ((n (- n 2)) (a 1) (b 2) (c 3))\n                  (cond ((= n 0)\
    \ c)\n                        (else (loop (- n 1) b c (+ b c))))))))\n  (prime-fib\
    \ n))\n", "  (define (prime? n)\n    (define (prime-helper n i)\n      (cond ((<=\
    \ i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (prime-helper\
    \ n (- i 1)))))\n    (prime-helper n (floor (/ n 2))))\n  (define (fib n)\n  \
    \  (cond ((= n 0) 0)\n          ((= n 1) 1)\n          (else (+ (fib (- n 1))\
    \ (fib (- n 2))))))\n  (define (prime-fib-helper n i)\n    (cond ((= n 1) 2)\n\
    \          ((= n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 13)\n      \
    \    ((= n 5) 89)\n          ((and (prime? i) (= (fib n) i)) i)\n          (else\
    \ (prime-fib-helper n (+ i 1)))))\n  (prime-fib-helper n 1))\n", "  (define (fib\
    \ n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n          (else (+ (fib (-\
    \ n 1)) (fib (- n 2))))))\n  (define (is_prime n)\n    (cond ((= n 1) #f)\n  \
    \        ((= n 2) #t)\n          ((= n 3) #t)\n          ((= n 4) #f)\n      \
    \    ((= n 5) #t)\n          ((= n 6) #f)\n          ((= n 7) #t)\n          ((=\
    \ n 8) #f)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11)\
    \ #t)\n          ((= n 12) #f)\n          ((= n 13) #t)\n          ((= n 14) #f)\n\
    \          ((= n 15) #f)\n          ((= n 16) #f)\n          ((= n 17) #t)\n \
    \         ((= n 18) #f)\n          ((= n 19) #t)\n          ((= n 20) #f)\n  \
    \        ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #t)\n   \
    \       ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n    \
    \      ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #t)\n     \
    \     ((= n 30) #f)\n          ((= n 31) #t)\n          ((= n 32) #f)\n      \
    \    ((= n 33) #f)\n          ((= n 34) #f)\n          ((= n 35) #f)\n       \
    \   ((= n 36) #f)\n          ((= n 37) #t)\n          ((= n 38) #f)\n        \
    \  ((= n 39) #f)\n          ((= n 40) #f)\n          ((= n 41) #t)\n         \
    \ ((= n 42) #f)\n          ((= n 43) #t)\n          ((= n 44) #f)\n          ((=\
    \ n 45) #f)\n", "  (define (prime_fib_iter n f1 f2 count)\n    (cond ((= count\
    \ n) f1)\n          ((and (prime? f1) (= count (- n 1))) f1)\n          (else\
    \ (prime_fib_iter n f2 (+ f1 f2) (+ count 1)))))\n  (prime_fib_iter n 2 1 1))\n",
  "  (define (prime_fib_iter n a b i)\n    (if (= i n)\n        b\n        (if (and\
    \ (prime? b) (fib? b))\n            (prime_fib_iter n b (+ a b) (+ i 1))\n   \
    \         (prime_fib_iter n b (+ a b) i))))\n  (prime_fib_iter n 0 1 1))\n", " \
    \ (define (fib n)\n    (if (< n 2)\n        n\n        (+ (fib (- n 1)) (fib (-\
    \ n 2)))))\n  (define (prime? n)\n    (define (prime? n i)\n      (if (= i 1)\n\
    \          #t\n          (if (= (modulo n i) 0)\n              #f\n          \
    \    (prime? n (- i 1)))))\n    (prime? n (floor (/ n 2))))\n  (define (prime_fib\
    \ n i)\n    (if (= n 1)\n        (fib i)\n        (if (prime? (fib i))\n     \
    \       (prime_fib (- n 1) (+ i 1))\n            (prime_fib n (+ i 1)))))\n  (prime_fib\
    \ n 1))\n", "  (define (prime? n)\n    (define (prime?-iter i)\n      (if (> (*\
    \ i i) n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n\
    \              (prime?-iter (+ i 1)))))\n    (prime?-iter 2))\n  (define (fib\
    \ n)\n    (define (fib-iter i a b)\n      (if (= i n)\n          b\n         \
    \ (fib-iter (+ i 1) b (+ a b))))\n    (fib-iter 1 0 1))\n  (define (prime_fib-iter\
    \ i a)\n    (if (= i n)\n        a\n        (if (prime? a)\n            (prime_fib-iter\
    \ (+ i 1) a)\n            (prime_fib-iter i (fib (+ i 1))))))\n  (prime_fib-iter\
    \ 1 (fib 1)))\n", "  (define (fib n)\n    (if (< n 2)\n        n\n        (+ (fib\
    \ (- n 1)) (fib (- n 2)))))\n  (define (is_prime n)\n    (define (divisible? a\
    \ b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= n (find-divisor n 2)))\n  (define (prime_fib_iter n count)\n    (if (= n\
    \ count)\n        (fib n)\n        (if (is_prime (fib n))\n            (prime_fib_iter\
    \ n (+ count 1))\n            (prime_fib_iter n count))))\n  (prime_fib_iter n\
    \ 1))\n", "  (define (fib n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n \
    \         (else (+ (fib (- n 1)) (fib (- n 2))))))\n  (define (is_prime n)\n \
    \   (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond ((= i n) (fib i))\n          ((and (is_prime (fib i)) (is_prime\
    \ (fib (+ i 1)))) (fib (+ i 1)))\n          (else (iter (+ i 1)))))\n  (iter 1))\n",
  "  (define (fib n)\n    (cond\n      [(= n 1) 1]\n      [(= n 2) 1]\n      [else\
    \ (+ (fib (- n 1)) (fib (- n 2)))]))\n  (define (is-prime? n)\n    (cond\n   \
    \   [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n     \
    \ [else\n       (define (iter i)\n         (cond\n           [(= i (sqrt n)) #t]\n\
    \           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n \
    \      (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i n) (fib i)]\n \
    \     [(and (is-prime? (fib i)) (is-prime? (fib (+ i 1))))\n       (iter (+ i\
    \ 1))]\n      [else (iter (+ i 1))]))\n  (iter 1))\n", "  (define (fib n)\n  \
    \  (cond ((= n 1) 1)\n          ((= n 2) 1)\n          (else (+ (fib (- n 1))\
    \ (fib (- n 2))))))\n  (define (prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) (fib i))\n \
    \         ((prime? (fib i)) (iter (+ i 1)))\n          (else (iter (+ i 1)))))\n\
    \  (iter 1))\n", "  (define (prime_fib_iter counter current next)\n    (if (=\
    \ counter n)\n        current\n        (if (and (prime? next) (fib? next))\n \
    \           (prime_fib_iter (+ counter 1) next (+ current next))\n           \
    \ (prime_fib_iter counter next (+ current next)))))\n  (prime_fib_iter 1 2 3))\n",
  "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else\n     (let loop ([i 3] [a\
    \ 1] [b 2] [c 3])\n       (cond\n         [(= i n) c]\n         [(and (prime?\
    \ c) (fib? c)) (loop (+ i 1) b c (+ a b))]\n         [else (loop (+ i 1) b c (+\
    \ a b))]))]))\n", "  (define (fib n)\n    (cond ((= n 1) 1)\n          ((= n 2)\
    \ 1)\n          (else (+ (fib (- n 1)) (fib (- n 2))))))\n  (define (prime? n)\n\
    \    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= n (find-divisor n 2)))\n  (define (prime_fib_iter n i)\n    (cond\
    \ ((= n 1) 2)\n          ((prime? i) (if (= n 2) i (prime_fib_iter (- n 1) (+\
    \ i 1))))\n          (else (prime_fib_iter n (+ i 1)))))\n  (prime_fib_iter n\
    \ 1))\n", "  (define (prime_fib_iter i f1 f2)\n    (cond ((= i n) f1)\n      \
    \    ((and (prime? f1) (prime? f2)) (prime_fib_iter (+ i 1) f2 (+ f1 f2)))\n \
    \         (else (prime_fib_iter i f2 (+ f1 f2)))))\n  (prime_fib_iter 1 2 3))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
