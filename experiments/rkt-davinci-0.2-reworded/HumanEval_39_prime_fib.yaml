name: HumanEval_39_prime_fib
language: rkt
prompt: "#lang racket\n\n;; prime_fib returns n-th number that is a Fibonacci number\
  \ and it's also prime.\n;; >>> (prime_fib 1)\n;; 2\n;; >>> (prime_fib 2)\n;; 3\n\
  ;; >>> (prime_fib 3)\n;; 5\n;; >>> (prime_fib 4)\n;; 13\n;; >>> (prime_fib 5)\n\
  ;; 89\n(define (prime_fib n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n\
  \    (check-equal? (candidate 1) 2)\n    (check-equal? (candidate 2) 3)\n    (check-equal?\
  \ (candidate 3) 5)\n    (check-equal? (candidate 4) 13)\n    (check-equal? (candidate\
  \ 5) 89)\n    (check-equal? (candidate 6) 233)\n    (check-equal? (candidate 7)\
  \ 1597)\n    (check-equal? (candidate 8) 28657)\n    (check-equal? (candidate 9)\
  \ 514229)\n    (check-equal? (candidate 10) 433494437)\n))\n\n(test-humaneval)"
completions: ["  (define (prime_fib_iter i f1 f2)\n    (if (= i n)\n        f2\n \
    \       (if (and (prime? f2) (fib? f2))\n            (prime_fib_iter (+ i 1) f2\
    \ (+ f1 f2))\n            (prime_fib_iter i f2 (+ f1 f2)))))\n  (prime_fib_iter\
    \ 1 1 1))\n", "  (define (fib n)\n    (cond\n      [(= n 1) 1]\n      [(= n 2)\
    \ 1]\n      [else (+ (fib (- n 1)) (fib (- n 2)))]))\n  (define (prime? n)\n \
    \   (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ i)\n    (cond\n      [(= i n) (fib i)]\n      [(and (prime? (fib i)) (prime?\
    \ (fib (+ i 1)))) (fib (+ i 1))]\n      [else (iter (+ i 1))]))\n  (iter 1))\n",
  "  (define (fib n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n          (else\
    \ (+ (fib (- n 1)) (fib (- n 2))))))\n  (define (is_prime? n)\n    (define (is_prime_helper\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is_prime_helper n (- i 1)))))\n  (is_prime_helper n (floor (/ n\
    \ 2))))\n  (define (prime_fib_helper n i)\n    (cond ((= n 1) 2)\n          ((=\
    \ n 2) 3)\n          ((= n 3) 5)\n          ((= n 4) 13)\n          ((= n 5) 89)\n\
    \          ((and (is_prime? (fib i)) (= n (- i 1))) (fib i))\n          (else\
    \ (prime_fib_helper n (+ i 1)))))\n  (prime_fib_helper n 6))\n", "  (define (prime?\
    \ n)\n    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (fib\
    \ n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n          (else (+ (fib (-\
    \ n 1)) (fib (- n 2))))))\n  (define (iter n i)\n    (cond ((= n 1) (fib i))\n\
    \          ((and (prime? (fib i)) (prime? (fib (+ i 1)))) (iter (- n 1) (+ i 1)))\n\
    \          (else (iter n (+ i 1)))))\n  (iter n 1))\n", "  (define (fib n)\n \
    \   (cond\n      [(= n 1) 1]\n      [(= n 2) 1]\n      [else (+ (fib (- n 1))\
    \ (fib (- n 2)))]))\n  (define (is_prime n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) (fib\
    \ i)]\n      [(and (is_prime (fib i)) (is_prime (fib (+ i 1)))) (fib (+ i 1))]\n\
    \      [else (iter (+ i 1))]))\n  (iter 1))\n", "  (define (fib n)\n    (if (<\
    \ n 2)\n        n\n        (+ (fib (- n 1)) (fib (- n 2)))))\n  (define (prime?\
    \ n)\n    (define (prime? n i)\n      (if (= i 1)\n          #t\n          (if\
    \ (= (remainder n i) 0)\n              #f\n              (prime? n (- i 1)))))\n\
    \    (prime? n (floor (sqrt n))))\n  (define (prime_fib n i)\n    (if (= n 1)\n\
    \        i\n        (if (prime? i)\n            (prime_fib (- n 1) (+ i (fib i)))\n\
    \            (prime_fib n (+ i (fib i))))))\n  (prime_fib n 1))\n", "  (define\
    \ (fib n)\n    (cond\n      [(= n 1) 1]\n      [(= n 2) 1]\n      [else (+ (fib\
    \ (- n 1)) (fib (- n 2)))]))\n  (define (is_prime n)\n    (define (is_prime_iter\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is_prime_iter n (- i 1))]))\n    (is_prime_iter n (floor (/ n 2))))\n\
    \  (define (prime_fib_iter n i)\n    (cond\n      [(= n i) (fib i)]\n      [(and\
    \ (is_prime (fib i)) (not (is_prime (fib (+ i 1))))) (prime_fib_iter n (+ i 1))]\n\
    \      [else (prime_fib_iter n (+ i 1))]))\n  (prime_fib_iter n 1))\n", "  (define\
    \ (fib n)\n    (cond\n      [(= n 1) 1]\n      [(= n 2) 1]\n      [else (+ (fib\
    \ (- n 1)) (fib (- n 2)))]))\n  (define (prime? n)\n    (define (divisible? a\
    \ b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond\n        [(> (square test-divisor) n) n]\n        [(divisible? n\
    \ test-divisor) test-divisor]\n        [else (find-divisor n (+ test-divisor 1))]))\n\
    \    (= (find-divisor n 2) n))\n  (define (prime_fib_iter n i)\n    (cond\n  \
    \    [(= n 1) 2]\n      [(= n 2) 3]\n      [(and (prime? i) (= (fib n) i)) i]\n\
    \      [else (prime_fib_iter n (+ i 1))]))\n  (prime_fib_iter n 1))\n", "  (let\
    \ loop ((i 1) (fib1 1) (fib2 1) (count 0))\n    (cond ((= i n) fib2)\n       \
    \   ((and (prime? fib2) (= count 1)) (loop (+ i 1) fib2 (+ fib1 fib2) 0))\n  \
    \        (else (loop i fib2 (+ fib1 fib2) (+ count 1))))))\n", "  (define (fib\
    \ n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n          (else (+ (fib (-\
    \ n 1)) (fib (- n 2))))))\n  (define (prime? n)\n    (define (prime-helper n i)\n\
    \      (cond ((= n 1) #f)\n            ((= i n) #t)\n            ((= (modulo n\
    \ i) 0) #f)\n            (else (prime-helper n (+ i 1)))))\n    (prime-helper\
    \ n 2))\n  (define (prime-fib-helper n i)\n    (cond ((= n 1) (fib i))\n     \
    \     ((prime? (fib i)) (prime-fib-helper (- n 1) (+ i 1)))\n          (else (prime-fib-helper\
    \ n (+ i 1)))))\n  (prime-fib-helper n 1))\n", "  (define (prime_fib_iter n i\
    \ f1 f2)\n    (cond ((= n i) f2)\n          ((and (prime? f2) (= n (+ i 1))) f2)\n\
    \          (else (prime_fib_iter n (+ i 1) f2 (+ f1 f2)))))\n  (prime_fib_iter\
    \ n 1 1 1))\n", "  (let loop ((i 1) (fibs '(2 3)) (primes '(2 3)))\n    (cond\
    \ ((= i n) (car fibs))\n          ((prime? (car fibs)) (loop (+ i 1) (cdr fibs)\
    \ (cons (car fibs) primes)))\n          (else (loop i (cdr fibs) primes)))))\n",
  "  (define (fib n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n          (else\
    \ (+ (fib (- n 1)) (fib (- n 2))))))\n  (define (prime? n)\n    (define (prime?\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n  (define (prime_fib\
    \ n i)\n    (cond ((= n 1) i)\n          ((prime? i) (prime_fib (- n 1) (+ i 1)))\n\
    \          (else (prime_fib n (+ i 1)))))\n  (prime_fib n (fib n)))\n", "  (define\
    \ (fib n)\n    (if (< n 2)\n        n\n        (+ (fib (- n 1)) (fib (- n 2)))))\n\
    \  (define (is-prime n)\n    (define (iter i)\n      (if (> i (sqrt n))\n    \
    \      #t\n          (if (zero? (modulo n i))\n              #f\n            \
    \  (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n)\n   \
    \     (fib i)\n        (if (is-prime (fib i))\n            (iter (+ i 1))\n  \
    \          (iter (+ i 1)))))\n  (iter 1))\n", "  (define (fib n)\n    (cond\n\
    \      [(= n 1) 1]\n      [(= n 2) 1]\n      [else (+ (fib (- n 1)) (fib (- n\
    \ 2)))]))\n  (define (prime? n)\n    (define (iter i)\n      (cond\n        [(=\
    \ i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i n) (fib i)]\n     \
    \ [(and (prime? (fib i)) (prime? (fib (+ i 1)))) (fib (+ i 1))]\n      [else (iter\
    \ (+ i 1))]))\n  (iter 1))\n", "  (define (prime_fib_iter i f1 f2)\n    (cond\
    \ ((= i n) f1)\n          ((prime? (+ f1 f2)) (prime_fib_iter (+ i 1) (+ f1 f2)\
    \ f1))\n          (else (prime_fib_iter (+ i 1) (+ f1 f2) f1))))\n  (prime_fib_iter\
    \ 1 2 1))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((< i n)\
    \ (if (zero? (modulo n i)) #f (iter (+ i 1))))\n            (else #t)))\n    (iter\
    \ 2))\n  (define (fib n)\n    (cond ((= n 1) 1)\n          ((= n 2) 1)\n     \
    \     (else (+ (fib (- n 1)) (fib (- n 2))))))\n  (define (iter i)\n    (cond\
    \ ((= i n) (fib i))\n          (else (if (prime? (fib i)) (iter (+ i 1)) (iter\
    \ (+ i 1))))))\n  (iter 1))\n", "  (define (prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (+ i 1)))))\n    (iter 2))\n  (define (fib n)\n    (define (iter\
    \ i a b)\n      (cond ((= i n) b)\n            (else (iter (+ i 1) b (+ a b)))))\n\
    \    (iter 1 0 1))\n  (define (iter i)\n    (cond ((= i n) (fib i))\n        \
    \  ((and (prime? (fib i)) (prime? (fib (+ i 1)))) (fib (+ i 1)))\n          (else\
    \ (iter (+ i 1)))))\n  (iter 1))\n", "  (define (fib n)\n    (if (< n 2)\n   \
    \     n\n        (+ (fib (- n 1)) (fib (- n 2)))))\n  (define (prime? n)\n   \
    \ (define (prime-helper n i)\n      (if (= i 1)\n          #t\n          (if (=\
    \ (modulo n i) 0)\n              #f\n              (prime-helper n (- i 1)))))\n\
    \    (prime-helper n (- n 1)))\n  (define (prime-fib-helper n i)\n    (if (= n\
    \ i)\n        (fib n)\n        (if (prime? (fib n))\n            (prime-fib-helper\
    \ n (+ i 1))\n            (prime-fib-helper n n))))\n  (prime-fib-helper n 1))\n",
  "  (define (fib-iter a b count)\n    (if (= count n)\n        (if (prime? a)\n \
    \           a\n            (fib-iter b (+ a b) (- count 1)))\n        (fib-iter\
    \ b (+ a b) (- count 1))))\n  (fib-iter 1 1 n))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
