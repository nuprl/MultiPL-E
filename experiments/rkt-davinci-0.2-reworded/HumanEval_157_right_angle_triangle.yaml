name: HumanEval_157_right_angle_triangle
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ #t if the three\n;; sides form a right-angled triangle, #f otherwise.\n;; A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n;; 90 degree.\n\
  ;; Example:\n;; >>> (right_angle_triangle 3 4 5)\n;; #t\n;; >>> (right_angle_triangle\
  \ 1 2 3)\n;; #f\n(define (right_angle_triangle a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n\
  \    (check-equal? (candidate 3 4 5) #t)\n    (check-equal? (candidate 1 2 3) #f)\n\
  \    (check-equal? (candidate 10 6 8) #t)\n    (check-equal? (candidate 2 2 2) #f)\n\
  \    (check-equal? (candidate 7 24 25) #t)\n    (check-equal? (candidate 10 5 7)\
  \ #f)\n    (check-equal? (candidate 5 12 13) #t)\n    (check-equal? (candidate 15\
  \ 8 17) #t)\n    (check-equal? (candidate 48 55 73) #t)\n    (check-equal? (candidate\
  \ 1 1 1) #f)\n    (check-equal? (candidate 2 2 10) #f)\n))\n\n(test-humaneval)"
completions: ["  (and (and (<= a b) (<= b c))\n       (or (= (+ (* a a) (* b b)) (*\
    \ c c))\n           (= (+ (* a a) (* c c)) (* b b))\n           (= (+ (* b b)\
    \ (* c c)) (* a a)))))\n", "  (cond\n    [(and (= (square a) (+ (square b) (square\
    \ c)))\n          (= (square b) (+ (square a) (square c)))\n          (= (square\
    \ c) (+ (square a) (square b))))\n     #t]\n    [else #f]))\n", "  (cond\n   \
    \ [(and (> a 0) (> b 0) (> c 0))\n     (and (>= (+ (* a a) (* b b)) (* c c))\n\
    \          (>= (+ (* a a) (* c c)) (* b b))\n          (>= (+ (* b b) (* c c))\
    \ (* a a)))]\n    [else #f]))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       #t))\n", "  (cond\n    [(and (= (expt a 2) (+ (expt b 2)\
    \ (expt c 2)))\n          (= (expt b 2) (+ (expt a 2) (expt c 2)))\n         \
    \ (= (expt c 2) (+ (expt a 2) (expt b 2)))) #t]\n    [else #f]))\n", "  (let ((a2\
    \ (* a a))\n        (b2 (* b b))\n        (c2 (* c c)))\n    (or (= (+ a2 b2)\
    \ c2)\n        (= (+ a2 c2) b2)\n        (= (+ b2 c2) a2))))\n", "  (cond\n  \
    \  [(and (= (sqr a) (+ (sqr b) (sqr c))) (= (sqr b) (+ (sqr a) (sqr c))) (= (sqr\
    \ c) (+ (sqr a) (sqr b)))) #t]\n    [else #f]))\n", "  (cond\n    [(and (> a 0)\
    \ (> b 0) (> c 0))\n     (or (and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n \
    \             (= a b))\n         (and (= (expt b 2) (+ (expt a 2) (expt c 2)))\n\
    \              (= b c))\n         (and (= (expt c 2) (+ (expt a 2) (expt b 2)))\n\
    \              (= a c)))]\n    [else #f]))\n", "  (and (or (= a (sqrt (+ (* b\
    \ b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c\
    \ (sqrt (+ (* a a) (* b b)))))\n       (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (=\
    \ b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n", "  (cond\n    [(and (= (square a)\
    \ (+ (square b) (square c)))\n          (= (square b) (+ (square a) (square c)))\n\
    \          (= (square c) (+ (square a) (square b))))\n     #t]\n    [else #f]))\n",
  "  (cond\n    [(and (= (sqr a) (+ (sqr b) (sqr c)))\n          (= (sqr b) (+ (sqr\
    \ a) (sqr c)))\n          (= (sqr c) (+ (sqr a) (sqr b)))) #t]\n    [else #f]))\n",
  "  (and (> a 0) (> b 0) (> c 0)\n       (or (= (expt a 2) (+ (expt b 2) (expt c\
    \ 2)))\n           (= (expt b 2) (+ (expt a 2) (expt c 2)))\n           (= (expt\
    \ c 2) (+ (expt a 2) (expt b 2))))))\n", "  (cond\n    [(and (= a (sqrt (+ (*\
    \ b b) (* c c))))\n          (= b (sqrt (+ (* a a) (* c c))))\n          (= c\
    \ (sqrt (+ (* a a) (* b b))))) #t]\n    [else #f]))\n", "  (and (= (square a)\
    \ (+ (square b) (square c)))\n       (= (square b) (+ (square a) (square c)))\n\
    \       (= (square c) (+ (square a) (square b)))))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       #t))\n", "  (cond\n    [(and (=\
    \ (sqr a) (+ (sqr b) (sqr c)))\n          (= (sqr b) (+ (sqr a) (sqr c)))\n  \
    \        (= (sqr c) (+ (sqr a) (sqr b)))) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(and (= (square a) (+ (square b) (square c)))\n          (= (square b) (+\
    \ (square a) (square c)))\n          (= (square c) (+ (square a) (square b))))\n\
    \     #t]\n    [else #f]))\n", "  (cond\n    [(and (= a (sqrt (+ (* b b) (* c\
    \ c))))\n          (= b (sqrt (+ (* a a) (* c c))))\n          (= c (sqrt (+ (*\
    \ a a) (* b b))))) #t]\n    [else #f]))\n", "  (cond ((and (= (expt a 2) (+ (expt\
    \ b 2) (expt c 2)))\n              (= (expt b 2) (+ (expt a 2) (expt c 2)))\n\
    \              (= (expt c 2) (+ (expt a 2) (expt b 2))))\n         #t)\n     \
    \   (else #f)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
