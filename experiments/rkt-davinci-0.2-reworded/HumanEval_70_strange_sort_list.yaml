name: HumanEval_70_strange_sort_list
language: rkt
prompt: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
  ;; Strange sorting, is when you start with the minimum value,\n;; then maximum of\
  \ the remaining integers, then minimum and so on.\n;; Examples:\n;; >>> (strange_sort_list\
  \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
  ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
  \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
  \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1))\
  \ (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5\
  \ 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
  \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
  \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
  \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      lst\n      (let ([min (apply min lst)]\n \
    \           [max (apply max lst)])\n        (if (equal? min max)\n           \
    \ lst\n            (cons min (cons max (strange_sort_list (remove min (remove\
    \ max lst)))))))))\n", "  (if (null? lst)\n      '()\n      (append (list (min\
    \ lst) (max lst))\n              (strange_sort_list (remove (min lst) (remove\
    \ (max lst) lst))))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n    \
    \ (append\n      (list (min (rest lst) (first lst)))\n      (strange_sort_list\
    \ (remove (min (rest lst) (first lst)) lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [else\n     (append\n      (list (min lst) (max lst))\n      (strange_sort_list\
    \ (remove (min lst) (remove (max lst) lst))))]))\n", "  (if (null? lst)\n    \
    \  '()\n      (let* ([min (apply min lst)]\n             [max (apply max lst)]\n\
    \             [rest (remove min (remove max lst))])\n        (append (list min\
    \ max) (strange_sort_list rest)))))\n", "  (cond\n    [(empty? lst) empty]\n \
    \   [else\n     (cons (min lst)\n           (cons (max (remove (min lst) lst))\n\
    \                 (strange_sort_list (remove (max (remove (min lst) lst))\n  \
    \                                          (remove (min lst) lst)))))]))\n", " \
    \ (cond\n    [(empty? lst) '()]\n    [else\n     (append\n      (list (min lst)\
    \ (max lst))\n      (strange_sort_list (remove (min lst) (remove (max lst) lst))))]))\n",
  "  (if (null? lst)\n      lst\n      (let* ([min-val (apply min lst)]\n        \
    \     [max-val (apply max lst)]\n             [min-index (index-of min-val lst)]\n\
    \             [max-index (index-of max-val lst)]\n             [min-index-lst\
    \ (remove min-index lst)]\n             [max-index-lst (remove max-index lst)])\n\
    \        (append (list min-val max-val)\n                (strange_sort_list min-index-lst)\n\
    \                (strange_sort_list max-index-lst)))))\n", "  (if (null? lst)\n\
    \      '()\n      (append (list (min lst) (max lst))\n              (strange_sort_list\
    \ (remove (min lst) (remove (max lst) lst))))))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [else\n     (let* ([min (apply min lst)]\n            [max (apply\
    \ max lst)]\n            [lst (remove min lst)]\n            [lst (remove max\
    \ lst)])\n       (append (list min max) (strange_sort_list lst)))]))\n", "  (if\
    \ (null? lst)\n      '()\n      (let* ([min (apply min lst)]\n             [max\
    \ (apply max lst)]\n             [rest (remove min (remove max lst))])\n     \
    \   (append (list min max) (strange_sort_list rest)))))\n", "  (if (null? lst)\n\
    \      '()\n      (let ([min (apply min lst)]\n            [max (apply max lst)])\n\
    \        (cons min (cons max (strange_sort_list (remove min (remove max lst))))))))\n",
  "  (if (null? lst)\n      lst\n      (append (list (min lst) (max lst))\n      \
    \        (strange_sort_list (remove (min lst) (remove (max lst) lst))))))\n",
  "  (cond\n    [(empty? lst) empty]\n    [else (cons (min lst) (cons (max lst) (strange_sort_list\
    \ (remove (min lst) (remove (max lst) lst)))))]))\n", "  (define (strange_sort_list_iter\
    \ lst acc)\n    (if (null? lst)\n        acc\n        (let* ([min (apply min lst)]\n\
    \               [max (apply max lst)]\n               [lst (remove min lst)]\n\
    \               [lst (remove max lst)])\n          (strange_sort_list_iter lst\
    \ (append acc (list min max))))))\n  (strange_sort_list_iter lst (list)))\n",
  "  (cond [(empty? lst) empty]\n        [else\n         (append (list (min lst) (max\
    \ lst))\n                 (strange_sort_list (remove (min lst) (remove (max lst)\
    \ lst))))]))\n", "  (if (null? lst)\n      '()\n      (append (list (min lst)\
    \ (max lst))\n              (strange_sort_list (remove (min lst) (remove (max\
    \ lst) lst))))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n\
    \      (list (min lst))\n      (list (max (remove (min lst) lst)))\n      (strange_sort_list\
    \ (remove (max (remove (min lst) lst)) (remove (min lst) lst))))]))\n", "  (cond\
    \ [(empty? lst) empty]\n        [else (append (list (min lst) (max lst))\n   \
    \                   (strange_sort_list (remove (min lst) (remove (max lst) lst))))]))\n",
  "  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n      (list (min lst))\n\
    \      (list (max (remove (min lst) lst)))\n      (strange_sort_list (remove (max\
    \ (remove (min lst) lst)) (remove (min lst) lst))))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
