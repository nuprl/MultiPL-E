name: HumanEval_131_digits
language: rkt
results:
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond [(zero? n) 0]\n        [(odd? n) (* n (digits (quotient n 10)))]\n\
    \        [else (digits (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digits))\n    (check-equal? (candidate 5) 5)\n    (check-equal?\
    \ (candidate 54) 5)\n    (check-equal? (candidate 120) 1)\n    (check-equal? (candidate\
    \ 5014) 5)\n    (check-equal? (candidate 98765) 315)\n    (check-equal? (candidate\
    \ 5576543) 2625)\n    (check-equal? (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwhdgai0.rkt:22:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcwhdgai0.rkt:23:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpcwhdgai0.rkt:24:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcwhdgai0.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwhdgai0.rkt:26:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcwhdgai0.rkt:27:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond [(zero? n) 0]\n        [(odd? n) (* n (digits (quotient n 10)))]\n\
    \        [else (digits (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digits))\n    (check-equal? (candidate 5) 5)\n    (check-equal?\
    \ (candidate 54) 5)\n    (check-equal? (candidate 120) 1)\n    (check-equal? (candidate\
    \ 5014) 5)\n    (check-equal? (candidate 98765) 315)\n    (check-equal? (candidate\
    \ 5576543) 2625)\n    (check-equal? (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp53x6njby.rkt:22:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp53x6njby.rkt:23:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp53x6njby.rkt:24:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp53x6njby.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp53x6njby.rkt:26:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp53x6njby.rkt:27:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n\
    \ 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_z5apaoh.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_z5apaoh.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp_z5apaoh.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_z5apaoh.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_z5apaoh.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_z5apaoh.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if\
    \ (odd? d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digits))\n    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54)\
    \ 5)\n    (check-equal? (candidate 120) 1)\n    (check-equal? (candidate 5014)\
    \ 5)\n    (check-equal? (candidate 98765) 315)\n    (check-equal? (candidate 5576543)\
    \ 2625)\n    (check-equal? (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi4apv7zs.rkt:25:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi4apv7zs.rkt:26:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpi4apv7zs.rkt:27:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpi4apv7zs.rkt:28:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi4apv7zs.rkt:29:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi4apv7zs.rkt:30:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n\
    \ 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp2nm85r.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfp2nm85r.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpfp2nm85r.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfp2nm85r.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfp2nm85r.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfp2nm85r.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if\
    \ (odd? d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digits))\n    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54)\
    \ 5)\n    (check-equal? (candidate 120) 1)\n    (check-equal? (candidate 5014)\
    \ 5)\n    (check-equal? (candidate 98765) 315)\n    (check-equal? (candidate 5576543)\
    \ 2625)\n    (check-equal? (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9rbd_904.rkt:25:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9rbd_904.rkt:26:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp9rbd_904.rkt:27:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9rbd_904.rkt:28:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9rbd_904.rkt:29:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9rbd_904.rkt:30:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond [(zero? n) 0]\n        [(odd? n) (* n (digits (quotient n 10)))]\n\
    \        [else (digits (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digits))\n    (check-equal? (candidate 5) 5)\n    (check-equal?\
    \ (candidate 54) 5)\n    (check-equal? (candidate 120) 1)\n    (check-equal? (candidate\
    \ 5014) 5)\n    (check-equal? (candidate 98765) 315)\n    (check-equal? (candidate\
    \ 5576543) 2625)\n    (check-equal? (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pma5sfm.rkt:22:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7pma5sfm.rkt:23:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp7pma5sfm.rkt:24:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7pma5sfm.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pma5sfm.rkt:26:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7pma5sfm.rkt:27:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n\
    \ 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9b5vggem.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9b5vggem.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp9b5vggem.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9b5vggem.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9b5vggem.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9b5vggem.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient\
    \ n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnf8rjgvv.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnf8rjgvv.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpnf8rjgvv.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnf8rjgvv.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnf8rjgvv.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnf8rjgvv.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n\
    \ 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pxiemsq.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7pxiemsq.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp7pxiemsq.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7pxiemsq.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pxiemsq.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7pxiemsq.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10))\n     (* (remainder\
    \ n 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n\
    \    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n   \
    \ (check-equal? (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n  \
    \  (check-equal? (candidate 98765) 315)\n    (check-equal? (candidate 5576543)\
    \ 2625)\n    (check-equal? (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ydvmbcc.rkt:24:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1ydvmbcc.rkt:25:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp1ydvmbcc.rkt:26:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1ydvmbcc.rkt:27:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ydvmbcc.rkt:28:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1ydvmbcc.rkt:29:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n          (*\
    \ (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient n 10)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n\
    \    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n   \
    \ (check-equal? (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n  \
    \  (check-equal? (candidate 98765) 315)\n    (check-equal? (candidate 5576543)\
    \ 2625)\n    (check-equal? (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymdmmasc.rkt:24:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpymdmmasc.rkt:25:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpymdmmasc.rkt:26:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpymdmmasc.rkt:27:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymdmmasc.rkt:28:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpymdmmasc.rkt:29:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n\
    \ 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8ngdfd25.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8ngdfd25.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp8ngdfd25.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8ngdfd25.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8ngdfd25.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8ngdfd25.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n\
    \ 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx5_zys3g.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx5_zys3g.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpx5_zys3g.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpx5_zys3g.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx5_zys3g.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx5_zys3g.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n\
    \ 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuv5rsr0r.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuv5rsr0r.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpuv5rsr0r.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuv5rsr0r.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuv5rsr0r.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuv5rsr0r.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (if (zero? n)\n      0\n      (let ([d (remainder n 10)])\n        (if\
    \ (odd? d)\n            (* d (digits (quotient n 10)))\n            (digits (quotient\
    \ n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digits))\n    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54)\
    \ 5)\n    (check-equal? (candidate 120) 1)\n    (check-equal? (candidate 5014)\
    \ 5)\n    (check-equal? (candidate 98765) 315)\n    (check-equal? (candidate 5576543)\
    \ 2625)\n    (check-equal? (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn7g2g_w0.rkt:25:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn7g2g_w0.rkt:26:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpn7g2g_w0.rkt:27:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn7g2g_w0.rkt:28:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn7g2g_w0.rkt:29:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn7g2g_w0.rkt:30:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n\
    \ 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1m5766ol.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1m5766ol.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp1m5766ol.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1m5766ol.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1m5766ol.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1m5766ol.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(zero? n) 0]\n    [(odd? (remainder n 10)) (* (remainder n\
    \ 10) (digits (quotient n 10)))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw6vppuiy.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw6vppuiy.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpw6vppuiy.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw6vppuiy.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw6vppuiy.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw6vppuiy.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (cond\n    [(= n 0) 0]\n    [(odd? (remainder n 10)) (* (digits (quotient\
    \ n 10)) (remainder n 10))]\n    [else (digits (quotient n 10))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n   \
    \ (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n    (check-equal?\
    \ (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n    (check-equal?\
    \ (candidate 98765) 315)\n    (check-equal? (candidate 5576543) 2625)\n    (check-equal?\
    \ (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp65uwov7a.rkt:23:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp65uwov7a.rkt:24:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp65uwov7a.rkt:25:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp65uwov7a.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp65uwov7a.rkt:27:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp65uwov7a.rkt:28:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the product of the\
    \ odd digits.\n;; Return 0 if all digits are even.\n;; For example:\n;; >>> (digits\
    \ 1)\n;; 1\n;; >>> (digits 4)\n;; 0\n;; >>> (digits 235)\n;; 15\n(define (digits\
    \ n)\n  (if (zero? n)\n      0\n      (if (odd? (remainder n 10))\n          (*\
    \ (remainder n 10) (digits (quotient n 10)))\n          (digits (quotient n 10)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digits))\n\
    \    (check-equal? (candidate 5) 5)\n    (check-equal? (candidate 54) 5)\n   \
    \ (check-equal? (candidate 120) 1)\n    (check-equal? (candidate 5014) 5)\n  \
    \  (check-equal? (candidate 98765) 315)\n    (check-equal? (candidate 5576543)\
    \ 2625)\n    (check-equal? (candidate 2468) 0)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa3rucxdy.rkt:24:4\n\
    actual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa3rucxdy.rkt:25:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpa3rucxdy.rkt:26:4\nactual:     0\nexpected:\
    \   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa3rucxdy.rkt:27:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa3rucxdy.rkt:28:4\n\
    actual:     0\nexpected:   315\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa3rucxdy.rkt:29:4\nactual:     0\n\
    expected:   2625\n--------------------\n"
  exit_code: 0
  status: Exception
