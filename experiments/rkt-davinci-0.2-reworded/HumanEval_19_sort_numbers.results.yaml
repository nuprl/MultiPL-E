name: HumanEval_19_sort_numbers
language: rkt
results:
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space) <) #\\space))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcsbvbzc.rkt:16:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxcsbvbzc.rkt:17:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcsbvbzc.rkt:18:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxcsbvbzc.rkt:19:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcsbvbzc.rkt:20:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (< (string->number a)\n                          (string->number b))))\n \
    \              #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe60p0nla.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe60p0nla.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe60p0nla.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe60p0nla.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe60p0nla.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join\n   (sort\n\
    \    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   #\\space))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpigr7umj_.rkt:21:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpigr7umj_.rkt:22:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpigr7umj_.rkt:23:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpigr7umj_.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpigr7umj_.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join\n   (sort\n\
    \    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (string->number\
    \ a) (string->number b))))\n   #\\space))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg3ihf5km.rkt:21:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg3ihf5km.rkt:22:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg3ihf5km.rkt:23:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpg3ihf5km.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpg3ihf5km.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space) string<?)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmqwwwtnf.rkt:16:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmqwwwtnf.rkt:17:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmqwwwtnf.rkt:18:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmqwwwtnf.rkt:19:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmqwwwtnf.rkt:20:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space) (lambda (a b) (< (string->number a) (string->number b))))\
    \ \" \"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal?\
    \ (candidate \"three\") \"three\")\n    (check-equal? (candidate \"three five\
    \ nine\") \"three five nine\")\n    (check-equal? (candidate \"five zero four\
    \ seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbntx0ob.rkt:16:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnbntx0ob.rkt:17:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbntx0ob.rkt:18:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnbntx0ob.rkt:19:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbntx0ob.rkt:20:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space) <) #\\space))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnop5zm7s.rkt:16:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnop5zm7s.rkt:17:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnop5zm7s.rkt:18:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnop5zm7s.rkt:19:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnop5zm7s.rkt:20:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (< (string->number a)\n                          (string->number b))))\n \
    \              #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpig6t6b2h.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpig6t6b2h.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpig6t6b2h.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpig6t6b2h.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpig6t6b2h.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers) string<?)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvdn7ki19.rkt:18:4\n\
    actual:     \"five nine three\"\nexpected:   \"three five nine\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvdn7ki19.rkt:19:4\n\
    actual:     \"eight five four nine seven zero\"\nexpected:   \"zero four five\
    \ seven eight nine\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvdn7ki19.rkt:20:4\nactual:     \"five\
    \ four one six three two zero\"\nexpected:   \"zero one two three four five six\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers) string<?)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplc9_lbn7.rkt:18:4\n\
    actual:     \"five nine three\"\nexpected:   \"three five nine\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplc9_lbn7.rkt:19:4\n\
    actual:     \"eight five four nine seven zero\"\nexpected:   \"zero four five\
    \ seven eight nine\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmplc9_lbn7.rkt:20:4\nactual:     \"five\
    \ four one six three two zero\"\nexpected:   \"zero one two three four five six\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (< (string->number a)\n                          (string->number b))))\n \
    \              #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz96hxlf6.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpz96hxlf6.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpz96hxlf6.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpz96hxlf6.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpz96hxlf6.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers) (\u03BB (a b) (< (string->number a) (string->number b)))) \" \"))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_numbers))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"three\"\
    ) \"three\")\n    (check-equal? (candidate \"three five nine\") \"three five nine\"\
    )\n    (check-equal? (candidate \"five zero four seven nine eight\") \"zero four\
    \ five seven eight nine\")\n    (check-equal? (candidate \"six five four three\
    \ two one zero\") \"zero one two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpizafkeup.rkt:18:4\n\
    \n<: contract violation\n  expected: real?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpizafkeup.rkt:19:4\n\
    \n<: contract violation\n  expected: real?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpizafkeup.rkt:20:4\n\
    \n<: contract violation\n  expected: real?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (< (string->number a)\n                          (string->number b))))\n \
    \              #\\space))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpddmj25vz.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpddmj25vz.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpddmj25vz.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpddmj25vz.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpddmj25vz.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space) string<?)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsicl59gp.rkt:16:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsicl59gp.rkt:17:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsicl59gp.rkt:18:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsicl59gp.rkt:19:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsicl59gp.rkt:20:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space) <) #\\space))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd54hc16e.rkt:16:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd54hc16e.rkt:17:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd54hc16e.rkt:18:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd54hc16e.rkt:19:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd54hc16e.rkt:20:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers #\\space)\n                     (lambda (a b)\n                    \
    \   (string<? a b)))\n               #\\space))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal?\
    \ (candidate \"three five nine\") \"three five nine\")\n    (check-equal? (candidate\
    \ \"five zero four seven nine eight\") \"zero four five seven eight nine\")\n\
    \    (check-equal? (candidate \"six five four three two one zero\") \"zero one\
    \ two three four five six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzilqczdv.rkt:19:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzilqczdv.rkt:20:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzilqczdv.rkt:21:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzilqczdv.rkt:22:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzilqczdv.rkt:23:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers) string<?)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbtzkml_b.rkt:18:4\n\
    actual:     \"five nine three\"\nexpected:   \"three five nine\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbtzkml_b.rkt:19:4\n\
    actual:     \"eight five four nine seven zero\"\nexpected:   \"zero four five\
    \ seven eight nine\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbtzkml_b.rkt:20:4\nactual:     \"five\
    \ four one six three two zero\"\nexpected:   \"zero one two three four five six\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join\n   (sort\n\
    \    (string-split numbers #\\space)\n    (lambda (a b)\n      (< (number-from-string\
    \ a) (number-from-string b))))\n   \" \"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2fxz0kxw.rkt:13:10: number-from-string: unbound identifier\n  in:\
    \ number-from-string\n  location...:\n   /tmp/tmp2fxz0kxw.rkt:13:10\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (define (numeral->number\
    \ numeral)\n    (cond\n      [(string=? numeral \"zero\") 0]\n      [(string=?\
    \ numeral \"one\") 1]\n      [(string=? numeral \"two\") 2]\n      [(string=?\
    \ numeral \"three\") 3]\n      [(string=? numeral \"four\") 4]\n      [(string=?\
    \ numeral \"five\") 5]\n      [(string=? numeral \"six\") 6]\n      [(string=?\
    \ numeral \"seven\") 7]\n      [(string=? numeral \"eight\") 8]\n      [(string=?\
    \ numeral \"nine\") 9]))\n  (define (number->numeral number)\n    (cond\n    \
    \  [(= number 0) \"zero\"]\n      [(= number 1) \"one\"]\n      [(= number 2)\
    \ \"two\"]\n      [(= number 3) \"three\"]\n      [(= number 4) \"four\"]\n  \
    \    [(= number 5) \"five\"]\n      [(= number 6) \"six\"]\n      [(= number 7)\
    \ \"seven\"]\n      [(= number 8) \"eight\"]\n      [(= number 9) \"nine\"]))\n\
    \  (define (sort-numbers-helper numbers)\n    (cond\n      [(empty? numbers) empty]\n\
    \      [else\n       (define (insert-number number sorted-numbers)\n         (cond\n\
    \           [(empty? sorted-numbers) (cons number empty)]\n           [(< number\
    \ (first sorted-numbers)) (cons number sorted-numbers)]\n           [else (cons\
    \ (first sorted-numbers) (insert-number number (rest sorted-numbers)))]))\n  \
    \     (insert-number (numeral->number (first numbers)) (sort-numbers-helper (rest\
    \ numbers)))]))\n  (define (numbers->string numbers)\n    (cond\n      [(empty?\
    \ numbers) \"\"]\n      [else (string-append (number->numeral (first numbers))\
    \ \" \" (numbers->string (rest numbers)))]))\n  (numbers->string (sort-numbers-helper\
    \ (string-split numbers))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\
    \")\n    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmbkkxtvo.rkt:55:4\n\
    actual:     \"three \"\nexpected:   \"three\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmbkkxtvo.rkt:56:4\nactual:\
    \     \"three five nine \"\nexpected:   \"three five nine\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmbkkxtvo.rkt:57:4\n\
    actual:     \"zero four five seven eight nine \"\nexpected:   \"zero four five\
    \ seven eight nine\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmbkkxtvo.rkt:58:4\nactual:     \"zero\
    \ one two three four five six \"\nexpected:   \"zero one two three four five six\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Input is a space-delimited string of numberals from\
    \ 'zero' to 'nine'.\n;; Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n;; Return the string with numbers\
    \ sorted from smallest to largest\n;; >>> (sort_numbers \"three one five\")\n\
    ;; \"one three five\"\n(define (sort_numbers numbers)\n  (string-join (sort (string-split\
    \ numbers) string<? #:key (lambda (x) (string->number (string-replace x #rx\"\
    zero\" \"0\")))) \" \"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate sort_numbers))\n    (check-equal? (candidate \"\") \"\")\n\
    \    (check-equal? (candidate \"three\") \"three\")\n    (check-equal? (candidate\
    \ \"three five nine\") \"three five nine\")\n    (check-equal? (candidate \"five\
    \ zero four seven nine eight\") \"zero four five seven eight nine\")\n    (check-equal?\
    \ (candidate \"six five four three two one zero\") \"zero one two three four five\
    \ six\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq8su7eo.rkt:18:4\n\
    \nstring<?: contract violation\n  expected: string?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq8su7eo.rkt:19:4\n\
    \nstring<?: contract violation\n  expected: string?\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq8su7eo.rkt:20:4\n\
    \nstring<?: contract violation\n  expected: string?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
