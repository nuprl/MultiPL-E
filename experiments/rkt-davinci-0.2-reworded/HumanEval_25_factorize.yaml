name: HumanEval_25_factorize
language: rkt
prompt: "#lang racket\n\n;; Return list of prime factors of given integer in the order\
  \ from smallest to largest.\n;; Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n;; Input number\
  \ should be equal to the product of all factors\n;; >>> (factorize 8)\n;; (list\
  \ 2 2 2)\n;; >>> (factorize 25)\n;; (list 5 5)\n;; >>> (factorize 70)\n;; (list\
  \ 2 5 7)\n(define (factorize n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate factorize))\n\
  \    (check-equal? (candidate 2) (list 2))\n    (check-equal? (candidate 4) (list\
  \ 2 2))\n    (check-equal? (candidate 8) (list 2 2 2))\n    (check-equal? (candidate\
  \ 57) (list 3 19))\n    (check-equal? (candidate 3249) (list 3 3 19 19))\n    (check-equal?\
  \ (candidate 185193) (list 3 3 3 19 19 19))\n    (check-equal? (candidate 20577)\
  \ (list 3 19 19 19))\n    (check-equal? (candidate 18) (list 2 3 3))\n))\n\n(test-humaneval)"
completions: ["  (define (factorize-iter n i factors)\n    (cond\n      [(= n 1) factors]\n\
    \      [(= (remainder n i) 0) (factorize-iter (/ n i) i (cons i factors))]\n \
    \     [else (factorize-iter n (+ i 1) factors)]))\n  (factorize-iter n 2 '()))\n",
  "  (define (factorize-iter n i)\n    (if (= n 1)\n        '()\n        (if (= (remainder\
    \ n i) 0)\n            (cons i (factorize-iter (/ n i) i))\n            (factorize-iter\
    \ n (+ i 1)))))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n\
    \    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n divisor factors)\n    (cond\n      [(=\
    \ n 1) factors]\n      [(= (remainder n divisor) 0) (factorize-iter (/ n divisor)\
    \ divisor (cons divisor factors))]\n      [else (factorize-iter n (+ divisor 1)\
    \ factors)]))\n  (factorize-iter n 2 (list)))\n", "  (define (factorize-iter n\
    \ i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (cond\n    [(= n 1) (list)]\n    [(= n 2) (list 2)]\n    [(= n 3)\
    \ (list 3)]\n    [(= n 5) (list 5)]\n    [(= n 7) (list 7)]\n    [(= n 11) (list\
    \ 11)]\n    [(= n 13) (list 13)]\n    [(= n 17) (list 17)]\n    [(= n 19) (list\
    \ 19)]\n    [(= n 23) (list 23)]\n    [(= n 29) (list 29)]\n    [(= n 31) (list\
    \ 31)]\n    [(= n 37) (list 37)]\n    [(= n 41) (list 41)]\n    [(= n 43) (list\
    \ 43)]\n    [(= n 47) (list 47)]\n    [(= n 53) (list 53)]\n    [(= n 59) (list\
    \ 59)]\n    [(= n 61) (list 61)]\n    [(= n 67) (list 67)]\n    [(= n 71) (list\
    \ 71)]\n    [(= n 73) (list 73)]\n    [(= n 79) (list 79)]\n    [(= n 83) (list\
    \ 83)]\n    [(= n 89) (list 89)]\n    [(= n 97) (list 97)]\n    [(= n 101) (list\
    \ 101)]\n    [(= n 103) (list 103)]\n    [(= n 107) (list 107)]\n    [(= n 109)\
    \ (list 109)]\n    [(= n 113) (list 113)]\n    [(= n 127) (list 127)]\n    [(=\
    \ n 131) (list 131)]\n    [(= n 137) (list 137)]\n    [(= n 139) (list 139)]\n\
    \    [(= n 149) (list 149)]\n    [(= n 151) (list 151)]\n    [(= n 157) (list\
    \ 157)]\n    [(= n 163) (list 163)]\n    [(= n 167) (list 167)]\n    [(= n 173)\
    \ (list 173)]\n    [(= n 179) (list 179)]\n    [(= n 181) (list 181)]\n    [(=\
    \ n 191) (list 191)]\n    [(= n 193) (list 193)]\n    [(= n 197) (list 197)]\n\
    \    [(", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter n i)\n  \
    \  (cond ((= n 1) '())\n          ((= (remainder n i) 0) (cons i (iter (/ n i)\
    \ i)))\n          (else (iter n (+ i 1)))))\n  (iter n 2))\n", "  (define (factorize-iter\
    \ n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter\
    \ (/ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n\
    \ 2))\n", "  (define (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n  \
    \    [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter\
    \ n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define (prime? n)\n    (define\
    \ (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n\
    \ test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (define (factors n)\n    (define (factors-iter\
    \ n test-divisor)\n      (cond ((prime? n) (list n))\n            ((divisible?\
    \ n test-divisor) (cons test-divisor (factors-iter (/ n test-divisor) test-divisor)))\n\
    \            (else (factors-iter n (+ test-divisor 1)))))\n    (factors-iter n\
    \ 2))\n  (factors n))\n", "  (define (factorize-iter n i)\n    (cond\n      [(=\
    \ n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i) i))]\n\
    \      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n i)\
    \ 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n (+ i\
    \ 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n    (cond\n\
    \      [(= n 1) empty]\n      [(= (remainder n i) 0) (cons i (factorize-iter (/\
    \ n i) i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (cond\n    [(= n 1) (list)]\n    [(= n 2) (list 2)]\n    [(= n 3) (list 3)]\n\
    \    [(= n 4) (list 2 2)]\n    [(= n 5) (list 5)]\n    [(= n 6) (list 2 3)]\n\
    \    [(= n 7) (list 7)]\n    [(= n 8) (list 2 2 2)]\n    [(= n 9) (list 3 3)]\n\
    \    [(= n 10) (list 2 5)]\n    [(= n 11) (list 11)]\n    [(= n 12) (list 2 2\
    \ 3)]\n    [(= n 13) (list 13)]\n    [(= n 14) (list 2 7)]\n    [(= n 15) (list\
    \ 3 5)]\n    [(= n 16) (list 2 2 2 2)]\n    [(= n 17) (list 17)]\n    [(= n 18)\
    \ (list 2 3 3)]\n    [(= n 19) (list 19)]\n    [(= n 20) (list 2 2 5)]\n    [(=\
    \ n 21) (list 3 7)]\n    [(= n 22) (list 2 11)]\n    [(= n 23) (list 23)]\n  \
    \  [(= n 24) (list 2 2 2 3)]\n    [(= n 25) (list 5 5)]\n    [(= n 26) (list 2\
    \ 13)]\n    [(= n 27) (list 3 3 3)]\n    [(= n 28) (list 2 2 7)]\n    [(= n 29)\
    \ (list 29)]\n    [(= n 30) (list 2 3 5)]\n    [(= n 31) (list 31)]\n    [(= n\
    \ 32) (list 2 2 2 2 2)]\n    [(= n 33) (list 3 11)]\n    [(= n 34) (list 2 17)]\n\
    \    [(= n 35) (list 5 7)]\n    [(= n 36) (list 2 2 3 3)]\n    [(= n 37) (list\
    \ 37)]\n    [(= n 38) (list 2 19)]\n    [(= n 39) (list 3 13)]\n    [(= n 40)\
    \ (list 2 2 2 5)]\n    [(= n 41) (list 41)]\n    [(= n 42) (list 2 3 7)]", " \
    \ (define (prime? n)\n    (define (prime?-iter n i)\n      (cond ((= i n) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (prime?-iter n (+ i 1)))))\n\
    \    (prime?-iter n 2))\n  (define (factorize-iter n i)\n    (cond ((= n 1) '())\n\
    \          ((= (modulo n i) 0) (cons i (factorize-iter (/ n i) i)))\n        \
    \  (else (factorize-iter n (+ i 1)))))\n  (factorize-iter n 2))\n", "  (define\
    \ (factorize-iter n i)\n    (cond\n      [(= n 1) '()]\n      [(= (modulo n i)\
    \ 0) (cons i (factorize-iter (/ n i) i))]\n      [else (factorize-iter n (+ i\
    \ 1))]))\n  (factorize-iter n 2))\n", "  (define (factorize-iter n i)\n    (cond\n\
    \      [(= n 1) '()]\n      [(= (modulo n i) 0) (cons i (factorize-iter (/ n i)\
    \ i))]\n      [else (factorize-iter n (+ i 1))]))\n  (factorize-iter n 2))\n",
  "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 2 n)))\n\
    \  (define (prime? n)\n    (empty? (divisors n)))\n  (define (prime-factors n)\n\
    \    (if (prime? n)\n        (list n)\n        (let* ([d (first (divisors n))]\n\
    \               [f (prime-factors (quotient n d))])\n          (cons d f))))\n\
    \  (prime-factors n))\n", "  (cond\n    [(= n 1) (list)]\n    [(= (remainder n\
    \ 2) 0) (cons 2 (factorize (/ n 2)))]\n    [(= (remainder n 3) 0) (cons 3 (factorize\
    \ (/ n 3)))]\n    [(= (remainder n 5) 0) (cons 5 (factorize (/ n 5)))]\n    [(=\
    \ (remainder n 7) 0) (cons 7 (factorize (/ n 7)))]\n    [else (list n)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
