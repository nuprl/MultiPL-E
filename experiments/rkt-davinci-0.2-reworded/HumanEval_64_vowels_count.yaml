name: HumanEval_64_vowels_count
language: rkt
prompt: "#lang racket\n\n;; Write a function vowels_count which takes a string representing\n\
  ;; a word as input and returns the number of vowels in the string.\n;; Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only\
  \ when it is at the end of the given word.\n;; Example:\n;; >>> (vowels_count \"\
  abcde\")\n;; 2\n;; >>> (vowels_count \"ACEDY\")\n;; 3\n(define (vowels_count s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n\
  \    (check-equal? (candidate \"abcde\") 2)\n    (check-equal? (candidate \"Alone\"\
  ) 3)\n    (check-equal? (candidate \"key\") 2)\n    (check-equal? (candidate \"\
  bye\") 1)\n    (check-equal? (candidate \"keY\") 2)\n    (check-equal? (candidate\
  \ \"bYe\") 1)\n    (check-equal? (candidate \"ACEDY\") 3)\n))\n\n(test-humaneval)"
completions: ["  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c\
    \ #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\\
    u)))\n  (define (is_vowel_at_end? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels s)\n    (if (null?\
    \ s)\n        0\n        (if (is_vowel? (car s))\n            (+ 1 (count-vowels\
    \ (cdr s)))\n            (count-vowels (cdr s)))))\n  (if (null? s)\n      0\n\
    \      (if (is_vowel_at_end? (car (reverse s)))\n          (+ 1 (count-vowels\
    \ (reverse (cdr (reverse s)))))\n          (count-vowels (reverse (cdr (reverse\
    \ s)))))))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"\
    e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [(member (first\
    \ s) '(\"A\" \"E\" \"I\" \"O\" \"U\"))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) \"y\") (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count-iter\
    \ s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n      [(or (char=?\
    \ (string-ref s i) #\\a)\n           (char=? (string-ref s i) #\\e)\n        \
    \   (char=? (string-ref s i) #\\i)\n           (char=? (string-ref s i) #\\o)\n\
    \           (char=? (string-ref s i) #\\u)\n           (and (= i (- (string-length\
    \ s) 1))\n                (char=? (string-ref s i) #\\y)))\n       (vowels_count-iter\
    \ s (+ i 1) (+ acc 1))]\n      [else (vowels_count-iter s (+ i 1) acc)]))\n  (vowels_count-iter\
    \ s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n\
    \         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n        \
    \ (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first\
    \ s) 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n   \
    \      (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (equal? (first s) 'y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (member (first s) '(#\\A #\\E #\\I #\\O #\\U))\n          (empty? (rest\
    \ s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n \
    \   (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n  \
    \      (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_at_end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (count-vowels s)\n    (if (string-empty? s)\n        0\n        (if\
    \ (is_vowel? (string-ref s 0))\n            (+ 1 (count-vowels (substring s 1)))\n\
    \            (count-vowels (substring s 1)))))\n  (if (string-empty? s)\n    \
    \  0\n      (if (is_vowel_at_end? (string-ref s (- (string-length s) 1)))\n  \
    \        (+ 1 (count-vowels (substring s 0 (- (string-length s) 1))))\n      \
    \    (count-vowels s))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first\
    \ s) #\\a)\n         (equal? (first s) #\\e)\n         (equal? (first s) #\\i)\n\
    \         (equal? (first s) #\\o)\n         (equal? (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y)\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count_iter\
    \ s i acc)\n    (cond ((= i (string-length s)) acc)\n          ((or (char=? (string-ref\
    \ s i) #\\a)\n               (char=? (string-ref s i) #\\e)\n               (char=?\
    \ (string-ref s i) #\\i)\n               (char=? (string-ref s i) #\\o)\n    \
    \           (char=? (string-ref s i) #\\u)\n               (and (= i (- (string-length\
    \ s) 1))\n                    (char=? (string-ref s i) #\\y)))\n           (vowels_count_iter\
    \ s (+ i 1) (+ acc 1)))\n          (else (vowels_count_iter s (+ i 1) acc))))\n\
    \  (vowels_count_iter s 0 0))\n", "  (define (vowels_count_iter s count)\n   \
    \ (cond\n      [(empty? s) count]\n      [(or (char=? (first s) #\\a)\n      \
    \     (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n          \
    \ (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n       (vowels_count_iter\
    \ (rest s) (+ count 1))]\n      [(and (char=? (first s) #\\y)\n            (empty?\
    \ (rest s)))\n       (vowels_count_iter (rest s) (+ count 1))]\n      [else (vowels_count_iter\
    \ (rest s) count)]))\n  (vowels_count_iter s 0))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n   \
    \      (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e\
    \ #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-vowel-y c)\n    (and (char=? c #\\y)\n         (equal? (substring s (sub1\
    \ (string-length s)) (string-length s)) \"y\")))\n  (define (is-vowel-y-end c)\n\
    \    (and (char=? c #\\y)\n         (equal? (substring s (sub1 (string-length\
    \ s)) (string-length s)) \"y\")\n         (equal? (substring s (sub1 (string-length\
    \ s)) (string-length s)) \"Y\")))\n  (define (is-vowel-y-start c)\n    (and (char=?\
    \ c #\\y)\n         (equal? (substring s 0 1) \"y\")\n         (equal? (substring\
    \ s 0 1) \"Y\")))\n  (define (is-vowel-y-middle c)\n    (and (char=? c #\\y)\n\
    \         (not (equal? (substring s (sub1 (string-length s)) (string-length s))\
    \ \"y\"))\n         (not (equal? (substring s (sub1 (string-length s)) (string-length\
    \ s)) \"Y\"))\n         (not (equal? (substring s 0 1) \"y\"))\n         (not\
    \ (equal? (substring s 0 1) \"Y\"))))\n  (define (is-vowel-y-middle-upper c)\n\
    \    (and (char=? c #\\y)\n         (not (equal? (substring s (sub1 (string-length\
    \ s)) (string-length s)) \"y\"))\n         (not (equal? (substring s (sub1 (string-length\
    \ s)) (string-length s)) \"Y\"))\n         (not (equal? (substring s 0 1) \"y\"\
    ))\n         (not (equal? (substring s 0 1) \"Y", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n \
    \   (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n  \
    \      (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_y c)\n\
    \    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (is_vowel_y_end c)\n\
    \    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (count_vowels s)\n\
    \    (cond ((null? s) 0)\n          ((is_vowel (car s)) (+ 1 (count_vowels (cdr\
    \ s))))\n          (else (count_vowels (cdr s)))))\n  (define (count_vowels_y\
    \ s)\n    (cond ((null? s) 0)\n          ((is_vowel_y (car s)) (+ 1 (count_vowels_y\
    \ (cdr s))))\n          (else (count_vowels_y (cdr s)))))\n  (define (count_vowels_y_end\
    \ s)\n    (cond ((null? s) 0)\n          ((is_vowel_y_end (car s)) (+ 1 (count_vowels_y_end\
    \ (cdr s))))\n          (else (count_vowels_y_end (cdr s)))))\n  (cond ((null?\
    \ s) 0)\n        ((char=? (car s) #\\y) (count_vowels_y_end (cdr s)))\n      \
    \  (else (count_vowels_y s))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
