name: HumanEval_31_is_prime
language: rkt
prompt: "#lang racket\n\n;; Return true if a given number is prime, and false otherwise.\n\
  ;; >>> (is_prime 6)\n;; #f\n;; >>> (is_prime 101)\n;; #t\n;; >>> (is_prime 11)\n\
  ;; #t\n;; >>> (is_prime 13441)\n;; #t\n;; >>> (is_prime 61)\n;; #t\n;; >>> (is_prime\
  \ 4)\n;; #f\n;; >>> (is_prime 1)\n;; #f\n(define (is_prime n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_prime))\n\
  \    (check-equal? (candidate 6) #f)\n    (check-equal? (candidate 101) #t)\n  \
  \  (check-equal? (candidate 11) #t)\n    (check-equal? (candidate 13441) #t)\n \
  \   (check-equal? (candidate 61) #t)\n    (check-equal? (candidate 4) #f)\n    (check-equal?\
  \ (candidate 1) #f)\n    (check-equal? (candidate 5) #t)\n    (check-equal? (candidate\
  \ 11) #t)\n    (check-equal? (candidate 17) #t)\n    (check-equal? (candidate 85)\
  \ #f)\n    (check-equal? (candidate 77) #f)\n    (check-equal? (candidate 255379)\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (define (is_prime-helper n i)\n    (cond ((= i 1) #t)\n         \
    \ ((= (modulo n i) 0) #f)\n          (else (is_prime-helper n (- i 1)))))\n  (is_prime-helper\
    \ n (floor (/ n 2))))\n", "  (define (is_prime-helper n i)\n    (cond ((= i 1)\
    \ #t)\n          ((= (modulo n i) 0) #f)\n          (else (is_prime-helper n (-\
    \ i 1)))))\n  (is_prime-helper n (floor (/ n 2))))\n", "  (define (is_prime-helper\
    \ n i)\n    (cond ((= i 1) #t)\n          ((= (modulo n i) 0) #f)\n          (else\
    \ (is_prime-helper n (- i 1)))))\n  (is_prime-helper n (floor (/ n 2))))\n", " \
    \ (define (is_prime-helper n i)\n    (cond ((= i 1) #t)\n          ((= (modulo\
    \ n i) 0) #f)\n          (else (is_prime-helper n (- i 1)))))\n  (is_prime-helper\
    \ n (- n 1)))\n", "  (define (is_prime-iter n i)\n    (cond ((= n 1) #f)\n   \
    \       ((= n 2) #t)\n          ((= n i) #t)\n          ((= 0 (modulo n i)) #f)\n\
    \          (else (is_prime-iter n (+ i 1)))))\n  (is_prime-iter n 2))\n", "  (define\
    \ (is_prime-iter n divisor)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n\
    \          ((= n divisor) #t)\n          ((= (remainder n divisor) 0) #f)\n  \
    \        (else (is_prime-iter n (+ divisor 1)))))\n  (is_prime-iter n 2))\n",
  "  (define (is_prime-helper n i)\n    (cond ((= i 1) #t)\n          ((= (modulo\
    \ n i) 0) #f)\n          (else (is_prime-helper n (- i 1)))))\n  (is_prime-helper\
    \ n (floor (/ n 2))))\n", "  (if (= n 1)\n      #f\n      (if (= n 2)\n      \
    \    #t\n          (if (even? n)\n              #f\n              (let loop ((i\
    \ 3))\n                (if (= i n)\n                    #t\n                 \
    \   (if (zero? (modulo n i))\n                        #f\n                   \
    \     (loop (+ i 2)))))))))\n", "  (cond\n    [(= n 1) #f]\n    [(= n 2) #t]\n\
    \    [(= (remainder n 2) 0) #f]\n    [else\n     (define (is_prime? n d)\n   \
    \    (cond\n         [(= d 1) #t]\n         [(= (remainder n d) 0) #f]\n     \
    \    [else (is_prime? n (- d 1))]))\n     (is_prime? n (- n 1))]))\n", "  (define\
    \ (is_prime-helper n div)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n\
    \      [(= n div) #t]\n      [(= (modulo n div) 0) #f]\n      [else (is_prime-helper\
    \ n (+ div 1))]))\n  (is_prime-helper n 2))\n", "  (define (is_prime-iter n divisor)\n\
    \    (cond ((= n divisor) #t)\n          ((= 0 (modulo n divisor)) #f)\n     \
    \     (else (is_prime-iter n (+ divisor 1)))))\n  (cond ((= n 1) #f)\n       \
    \ ((= n 2) #t)\n        (else (is_prime-iter n 2))))\n", "  (define (is_prime-helper\
    \ n d)\n    (cond ((= d 1) #t)\n          ((= (modulo n d) 0) #f)\n          (else\
    \ (is_prime-helper n (- d 1)))))\n  (cond ((= n 1) #f)\n        ((= n 2) #t)\n\
    \        (else (is_prime-helper n (- n 1)))))\n", "  (define (is_prime-helper\
    \ n i)\n    (cond ((= i 1) #t)\n          ((= (modulo n i) 0) #f)\n          (else\
    \ (is_prime-helper n (- i 1)))))\n  (is_prime-helper n (- n 1)))\n", "  (define\
    \ (is_prime-helper n i)\n    (cond\n      [(= i 1) #t]\n      [(= (modulo n i)\
    \ 0) #f]\n      [else (is_prime-helper n (- i 1))]))\n  (is_prime-helper n (-\
    \ n 1)))\n", "  (define (is_prime_helper n i)\n    (cond\n      [(= i 1) #t]\n\
    \      [(= (modulo n i) 0) #f]\n      [else (is_prime_helper n (- i 1))]))\n \
    \ (is_prime_helper n (floor (/ n 2))))\n", "  (define (is_prime-helper n i)\n\
    \    (cond\n      [(= i 1) #t]\n      [(= (modulo n i) 0) #f]\n      [else (is_prime-helper\
    \ n (- i 1))]))\n  (is_prime-helper n (- n 1)))\n", "  (define (is_prime-iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0) #f)\n       \
    \   (else (is_prime-iter n (+ i 1)))))\n  (is_prime-iter n 2))\n", "  (define\
    \ (is_prime-iter i)\n    (cond ((= i n) #t)\n          ((= (remainder n i) 0)\
    \ #f)\n          (else (is_prime-iter (+ i 1)))))\n  (if (= n 1)\n      #f\n \
    \     (is_prime-iter 2)))\n", "  (if (= n 1)\n      #f\n      (if (= n 2)\n  \
    \        #t\n          (let loop ((i 2))\n            (if (= i n)\n          \
    \      #t\n                (if (= (remainder n i) 0)\n                    #f\n\
    \                    (loop (+ i 1))))))))\n", "  (define (is_prime-helper n i)\n\
    \    (cond ((= i 1) #t)\n          ((= (modulo n i) 0) #f)\n          (else (is_prime-helper\
    \ n (- i 1)))))\n  (is_prime-helper n (floor (/ n 2))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
