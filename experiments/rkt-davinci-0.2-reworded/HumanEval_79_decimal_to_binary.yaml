name: HumanEval_79_decimal_to_binary
language: rkt
prompt: "#lang racket\n\n;; You will be given a number in decimal form and your task\
  \ is to convert it to\n;; binary format. The function should return a string, with\
  \ each character representing a binary\n;; number. Each character in the string\
  \ will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at the\
  \ beginning and at the end of the string.\n;; The extra characters are there to\
  \ help with the format.\n;; Examples:\n;; >>> (decimal_to_binary 15)\n;; \"db1111db\"\
  \n;; >>> (decimal_to_binary 32)\n;; \"db100000db\"\n(define (decimal_to_binary decimal)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n\
  \    (check-equal? (candidate 0) \"db0db\")\n    (check-equal? (candidate 32) \"\
  db100000db\")\n    (check-equal? (candidate 103) \"db1100111db\")\n    (check-equal?\
  \ (candidate 15) \"db1111db\")\n))\n\n(test-humaneval)"
completions: ["  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
