name: HumanEval_66_digitSum
language: rkt
prompt: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
  \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
  ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
  \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\"\
  )\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n\
  \    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\"\
  ) 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate\
  \ \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
  \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref\
    \ s 0))\n                 (digitSum (substring s 1)))]))\n", "  (apply + (map\
    \ (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list s))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\n    \
    \           (char->integer c)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (apply + (map (lambda (c) (if\
    \ (char-upper-case? c) (char->integer c) 0)) (string->list s))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map (\u03BB (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\n    \
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n\
    \     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond [(empty? s) 0]\n        [else (+ (if (char-upper-case?\
    \ (first s)) (char->integer (first s)) 0)\n                 (digitSum (rest s)))]))\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (let ([s (string-&gt;list s)])\n    (apply + (map (lambda (c)\n\
    \                    (if (char-upper-case? c)\n                        (char-&gt;integer\
    \ c)\n                        0))\n                  s))))\n</code>\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer\
    \ c) 0)) s)))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\n    \
    \           (- c #\\A)\n               0)\n           (digitSum (substring s 1))))))\n",
  "  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n",
  "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+\
    \ (if (char-upper-case? c)\n               (- c #\\A)\n               0)\n   \
    \        (digitSum (substring s 1))))))\n", "  (cond\n    [(empty? s) 0]\n   \
    \ [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref s 0))\
    \ (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n", " \
    \ (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s\
    \ 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else\
    \ (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (apply + (map char->integer\
    \ (filter char-upcase? (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first\
    \ s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n   \
    \ [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (define (sum-upper-chars s)\n\
    \    (cond ((null? s) 0)\n          ((char-upper-case? (car s)) (+ (char->integer\
    \ (car s)) (sum-upper-chars (cdr s))))\n          (else (sum-upper-chars (cdr\
    \ s)))))\n  (sum-upper-chars (string->list s)))\n", "  (define (sum-upper-chars\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case? (first s)) (+\
    \ (char->integer (first s)) (sum-upper-chars (rest s)))]\n      [else (sum-upper-chars\
    \ (rest s))]))\n  (sum-upper-chars (string->list s)))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (first s)) (+ (digitSum (rest s)) (char->integer\
    \ (first s)))]\n    [else (digitSum (rest s))]))\n", "  (if (string=? s \"\")\n\
    \      0\n      (let ([c (string-ref s 0)])\n        (+ (if (and (>= c #\\A) (<=\
    \ c #\\Z))\n               (- c #\\A)\n               0)\n           (digitSum\
    \ (substring s 1))))))\n", "  (apply + (map char->integer (filter char-upper-case?\
    \ (string->list s)))))\n", "  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+\
    \ (if (char-upper-case? c) (char->integer c) 0)\n           (digitSum (substring\
    \ s 1))))))\n", "  (apply + (map (lambda (c)\n                  (if (and (>= c\
    \ 65) (<= c 90))\n                      (- c 64)\n                      0))\n\
    \                (string->list s))))\n", "  (if (empty? s)\n      0\n      (+\
    \ (if (char-upper-case? (first s))\n             (char->integer (first s))\n \
    \            0)\n         (digitSum (rest s)))))\n", "  (if (string=? s \"\")\n\
    \      0\n      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case?\
    \ c)\n               (- c #\\A)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (apply + (map (lambda (x) (if\
    \ (char-upper-case? x) (char->integer x) 0)) (string->list s))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer\
    \ c) 0)) (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (apply + (map char->integer\
    \ (filter char-upcase? (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+\
    \ (if (char-upper-case? c) (char->integer c) 0)\n           (digitSum (substring\
    \ s 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n   \
    \ [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upcase? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s\
    \ 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (define (char-&gt;num c)\n   \
    \ (char-&gt;integer c))\n  (define (is-upper? c)\n    (char-upcase c))\n  (define\
    \ (is-lower? c)\n    (char-downcase c))\n  (define (is-alpha? c)\n    (char-alphabetic?\
    \ c))\n  (define (is-upper-or-lower? c)\n    (or (is-upper? c) (is-lower? c)))\n\
    \  (define (is-upper-or-lower-or-alpha? c)\n    (or (is-upper? c) (is-lower? c)\
    \ (is-alpha? c)))\n  (define (sum-of-upper-chars s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is-upper-or-lower? (first s)) (+ (char-&gt;num (first s)) (sum-of-upper-chars\
    \ (rest s)))]\n      [else (sum-of-upper-chars (rest s))]))\n  (define (sum-of-upper-chars-or-alpha\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-upper-or-lower-or-alpha? (first\
    \ s)) (+ (char-&gt;num (first s)) (sum-of-upper-chars-or-alpha (rest s)))]\n \
    \     [else (sum-of-upper-chars-or-alpha (rest s))]))\n  (cond\n    [(empty? s)\
    \ 0]\n    [(is-upper-or-lower? (first s)) (+ (char-&gt;num (first s)) (sum-of-upper-chars\
    \ (rest s)))]\n    [else (sum-of-upper-chars-or-alpha (rest s))]))\n</code>\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) s)))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (if (string=? s \"\")\n      0\n      (let ([chars\
    \ (string->list s)])\n        (apply + (map (lambda (c)\n                    \
    \    (if (char-upcase? c)\n                            (char->integer c)\n   \
    \                         0))\n                      chars)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (define (sum-of-upper-chars s)\n    (cond ((null? s) 0)\n  \
    \        ((char-upper-case? (car s)) (+ (char->integer (car s)) (sum-of-upper-chars\
    \ (cdr s))))\n          (else (sum-of-upper-chars (cdr s)))))\n  (sum-of-upper-chars\
    \ (string->list s)))\n", "  (apply + (map (lambda (c) (if (char-upper-case? c)\
    \ (char->integer c) 0)) (string->list s))))\n", "  (let loop ([s s] [sum 0])\n\
    \    (cond [(empty? s) sum]\n          [(char-upper-case? (first s)) (loop (rest\
    \ s) (+ sum (char->integer (first s))))]\n          [else (loop (rest s) sum)])))\n",
  "  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n",
  "  (define (sum-upper-chars s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum-upper-chars (rest s)))]\n     \
    \ [else (sum-upper-chars (rest s))]))\n  (sum-upper-chars s))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(and (char-upper-case? (first s)) (char-numeric? (first\
    \ s))) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [(and (char-upper-case?\
    \ (first s)) (not (char-numeric? (first s)))) (digitSum (rest s))]\n    [else\
    \ (digitSum (rest s))]))\n", "  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s\
    \ 0)])\n        (+ (if (char-upper-case? c)\n               (- c #\\A)\n     \
    \          0)\n           (digitSum (substring s 1))))))\n", "  (apply + (map\
    \ char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer (first s))\
    \ (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c) (char->integer\
    \ c) 0)\n           (digitSum (substring s 1))))))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (define (sum s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case? (first\
    \ s)) (+ (char->integer (first s)) (sum (rest s)))]\n      [else (sum (rest s))]))\n\
    \  (sum (string->list s)))\n", "  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (define (sum s)\n    (if (empty? s)\n        0\n\
    \        (+ (char->integer (car s)) (sum (cdr s)))))\n  (define (upper? s)\n \
    \   (if (empty? s)\n        0\n        (if (char-upper-case? (car s))\n      \
    \      (+ (sum (car s)) (upper? (cdr s)))\n            (upper? (cdr s)))))\n \
    \ (upper? s))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (apply + (map (lambda (c) (if (char-upper-case? c)\
    \ (char->integer c) 0)) (string->list s))))\n", "  (if (string=? s \"\")\n   \
    \   0\n      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\
    \ (char->integer c) 0)\n           (digitSum (substring s 1))))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+\
    \ (if (and (>= c #\\A) (<= c #\\Z))\n               (- c #\\A)\n             \
    \  0)\n           (digitSum (substring s 1))))))\n", "  (apply + (map (lambda\
    \ (c)\n                  (if (and (&gt;= c #\\A) (&lt;= c #\\Z))\n           \
    \           (- c #\\A)\n                      0))\n                s)))\n</code>\n",
  "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s\
    \ 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (if (empty? s)\n      0\n      (+ (if (char-upper-case? (string-ref s 0))\n \
    \            (char->integer (string-ref s 0))\n             0)\n         (digitSum\
    \ (substring s 1)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\n\
    \     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer\
    \ c) 0)) (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (apply + (map char->integer (filter char-upcase?\
    \ (string->list s)))))\n", "  (apply + (map char->integer (filter char-upcase?\
    \ (string->list s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n   \
    \ [else (digitSum (substring s 1))]))\n", "  (cond [(empty? s) 0]\n        [else\
    \ (+ (char->integer (string-ref s 0))\n                 (digitSum (substring s\
    \ 1)))]))\n", "  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer\
    \ x) 0)) (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (apply + (map (lambda\
    \ (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list s))))\n", " \
    \ (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n", "  (cond [(empty? s) 0]\n        [else (+ (char->integer\
    \ (string-ref s 0))\n                 (digitSum (substring s 1)))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer\
    \ c) 0)) (string->list s))))\n", "  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) (string->list s))))\n", "  (apply + (map (lambda (c)\
    \ (if (char-upper-case? c) (char->integer c) 0)) (string->list s))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upcase? (first s))\n     (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n   \
    \ [else (digitSum (substring s 1))]))\n", "  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n", "  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n", "  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond [(empty? s) 0]\n\
    \        [else (+ (char->integer (string-ref s 0))\n                 (digitSum\
    \ (substring s 1)))]))\n", "  (define (sum-upper-chars s)\n    (if (empty? s)\n\
    \        0\n        (if (char-upcase? (first s))\n            (+ (char->integer\
    \ (first s)) (sum-upper-chars (rest s)))\n            (sum-upper-chars (rest s)))))\n\
    \  (sum-upper-chars s))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref\
    \ s 0)])\n        (+ (if (and (>= c #\\A) (<= c #\\Z))\n               (- c #\\\
    A)\n               0)\n           (digitSum (substring s 1))))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (string-ref s 0))\n     (+ (char->integer (string-ref s\
    \ 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring s 1))]))\n",
  "  (define (sum-of-upper-chars s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum-of-upper-chars (rest s)))]\n  \
    \    [else (sum-of-upper-chars (rest s))]))\n  (sum-of-upper-chars (string->list\
    \ s)))\n", "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) s)))\n", " \
    \ (define (char-&gt;int c)\n    (char-&gt;integer c))\n  (define (is-upper? c)\n\
    \    (and (&gt;= c #\\A) (&lt;= c #\\Z)))\n  (define (sum-upper-chars s)\n   \
    \ (cond\n      [(empty? s) 0]\n      [(is-upper? (first s)) (+ (char-&gt;int (first\
    \ s)) (sum-upper-chars (rest s)))]\n      [else (sum-upper-chars (rest s))]))\n\
    \  (sum-upper-chars s))\n</code>\nI'm not sure if this is the best way to do it,\
    \ but I'm trying to learn Racket.\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer\
    \ x) 0)) s)))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (define (upper? c)\n    (and\
    \ (&gt;= c #\\A) (&lt;= c #\\Z)))\n  (define (sum-upper s)\n    (if (null? s)\n\
    \        0\n        (+ (if (upper? (car s))\n               (- (car s) #\\A)\n\
    \               0)\n           (sum-upper (cdr s)))))\n  (sum-upper s))\n</code>\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n", " \
    \ (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) s)))\n",
  "  (define (sum-upper-chars s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum-upper-chars (rest s)))]\n     \
    \ [else (sum-upper-chars (rest s))]))\n  (sum-upper-chars s))\n", "  (apply +\
    \ (map char->integer (filter char-upcase? (string->list s)))))\n", "  (if (string=?\
    \ s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case?\
    \ c) (char->integer c) 0)\n           (digitSum (substring s 1))))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s\
    \ 0)])\n        (+ (if (char-upper-case? c)\n               (char->integer c)\n\
    \               0)\n           (digitSum (substring s 1))))))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (if\
    \ (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n        (+ (if\
    \ (char-upper-case? c)\n               (char->integer c)\n               0)\n\
    \           (digitSum (substring s 1))))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-upcase? (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n\
    \    [else (digitSum (rest s))]))\n", "  (apply + (filter (lambda (x) (and (&gt;=\
    \ x 65) (&lt;= x 90))) (map char-&gt;integer (string-&gt;list s)))))\n</code>\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\
    \ [(empty? s) 0]\n        [else (+ (char->integer (string-ref s 0)) (digitSum\
    \ (substring s 1)))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s))\n     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else\
    \ (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n", "  (apply + (map char->integer\
    \ (filter char-upper-case? (string->list s)))))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer (first s)) (digitSum\
    \ (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply + (map char->integer\
    \ (filter char-upcase? (string->list s)))))\n", "  (apply + (map (lambda (x) (if\
    \ (char-upper-case? x) (char->integer x) 0)) (string->list s))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref\
    \ s 0))\n                 (digitSum (substring s 1)))]))\n", "  (apply + (map\
    \ (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list s))))\n",
  "  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s\
    \ 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (apply + (map (lambda (c)\n  \
    \                (if (char-upper-case? c)\n                      (char->integer\
    \ c)\n                      0))\n                (string->list s))))\n", "  (apply\
    \ + (map char->integer (filter char-upcase? (string->list s)))))\n", "  (apply\
    \ + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) s)))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
