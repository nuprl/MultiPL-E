name: HumanEval_66_digitSum
language: rkt
prompt: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
  \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
  ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
  \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\"\
  )\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
  \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n\
  \    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\"\
  ) 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate\
  \ \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
  \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref\
    \ s 0))\n                 (digitSum (substring s 1)))]))\n", "  (apply + (map\
    \ (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list s))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply\
    \ + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n", "  (apply + (map char->integer (filter char-upcase? (string->list\
    \ s)))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (if (string=? s \"\")\n      0\n\
    \      (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\n    \
    \           (char->integer c)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+\
    \ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref\
    \ s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n\
    \    [else (digitSum (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n  \
    \  [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(char-upper-case? (first s)) (+ (char->integer (first s)) (digitSum (rest\
    \ s)))]\n    [else (digitSum (rest s))]))\n", "  (apply + (map (lambda (c) (if\
    \ (char-upper-case? c) (char->integer c) 0)) (string->list s))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (cond\n \
    \   [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n", "  (apply +\
    \ (map (\u03BB (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\n    \
    \ (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n\
    \     (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n", "  (cond [(empty? s) 0]\n        [else (+ (if (char-upper-case?\
    \ (first s)) (char->integer (first s)) 0)\n                 (digitSum (rest s)))]))\n",
  "  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
