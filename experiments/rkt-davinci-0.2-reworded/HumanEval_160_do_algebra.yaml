name: HumanEval_160_do_algebra
language: rkt
prompt: "#lang racket\n\n;; Given two lists operator, and operand. The first list\
  \ has basic algebra operations, and \n;; the second list is a list of integers.\
  \ Use the two given lists to build the algebric \n;; expression and return the evaluation\
  \ of this expression.\n;; The basic algebra operations:\n;; Addition ( + ) \n;;\
  \ Subtraction ( - ) \n;; Multiplication ( * ) \n;; Floor division ( // ) \n;; Exponentiation\
  \ ( ** ) \n;; Example:\n;; operator['+', '*', '-']\n;; list = [2, 3, 4, 5]\n;; result\
  \ = 2 + 3 * 4 - 5\n;; => result = 9\n;; Note:\n;; The length of operator list is\
  \ equal to the length of operand list minus one.\n;; Operand is a list of of non-negative\
  \ integers.\n;; Operator list has at least one operator, and operand list has at\
  \ least two operands.\n(define (do_algebra operator operand)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n\
  \    (check-equal? (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37)\n  \
  \  (check-equal? (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9)\n    (check-equal?\
  \ (candidate (list \"//\" \"*\") (list 7 3 4)) 8)\n))\n\n(test-humaneval)"
completions: ["  (let loop ([operator (reverse operator)]\n             [operand (reverse\
    \ operand)])\n    (if (null? operator)\n        (car operand)\n        (let* ([op\
    \ (car operator)]\n               [op1 (car operand)]\n               [op2 (cadr\
    \ operand)])\n          (cond [(equal? op '+) (+ op1 op2)]\n                [(equal?\
    \ op '-) (- op1 op2)]\n                [(equal? op '*) (* op1 op2)]\n        \
    \        [(equal? op '//) (quotient op1 op2)]\n                [(equal? op '**)\
    \ (expt op1 op2)])))))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_helper (cdr operator)\
    \ (cdr operand)\n                           (cond\n                          \
    \   ((equal? (car operator) '+) (+ result (car operand)))\n                  \
    \           ((equal? (car operator) '-) (- result (car operand)))\n          \
    \                   ((equal? (car operator) '*) (* result (car operand)))\n  \
    \                           ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                             ((equal? (car operator) '**) (expt\
    \ result (car operand)))))))\n  (do_algebra_helper operator operand (car operand)))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (cond [(null? operator) result]\n          [else (loop (cdr operator) (cdr\
    \ operand)\n                      (match (car operator)\n                    \
    \    ['+ (+ result (car operand))]\n                        ['* (* result (car\
    \ operand))]\n                        ['- (- result (car operand))]\n        \
    \                ['// (quotient result (car operand))]\n                     \
    \   ['** (expt result (car operand))]))])))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) (first operand)]\n\
    \      [(empty? operand) result]\n      [else\n       (do_algebra_helper (rest\
    \ operator) (rest operand)\n                          (cond\n                \
    \            [(equal? (first operator) '+) (+ result (first operand))]\n     \
    \                       [(equal? (first operator) '-) (- result (first operand))]\n\
    \                            [(equal? (first operator) '*) (* result (first operand))]\n\
    \                            [(equal? (first operator) '//) (quotient result (first\
    \ operand))]\n                            [(equal? (first operator) '**) (expt\
    \ result (first operand))]))]))\n  (do_algebra_helper operator operand 0))\n",
  "  (let loop ((operator operator)\n             (operand operand)\n            \
    \ (result (car operand)))\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator)\n              (cdr operand)\n              (match (car operator)\n\
    \                     ['+ (+ result (car operand))]\n                     ['*\
    \ (* result (car operand))]\n                     ['- (- result (car operand))]\n\
    \                     ['// (quotient result (car operand))]\n                \
    \     ['** (expt result (car operand))])))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond [(equal? (car operator) '+)\n                                  (+ result\
    \ (car operand))]\n                                 [(equal? (car operator) '-)\n\
    \                                  (- result (car operand))]\n               \
    \                  [(equal? (car operator) '*)\n                             \
    \     (* result (car operand))]\n                                 [(equal? (car\
    \ operator) '//)\n                                  (quotient result (car operand))]\n\
    \                                 [(equal? (car operator) '**)\n             \
    \                     (expt result (car operand))]))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator (reverse operator)]\n  \
    \           [operand (reverse operand)])\n    (cond [(null? operator) (car operand)]\n\
    \          [(null? (cdr operand)) (car operand)]\n          [else (loop (cdr operator)\n\
    \                      (cons (case (car operator)\n                          \
    \    [('+ ) (+ (car operand) (cadr operand))]\n                              [('-\
    \ ) (- (car operand) (cadr operand))]\n                              [('* ) (*\
    \ (car operand) (cadr operand))]\n                              [('// ) (quotient\
    \ (car operand) (cadr operand))]\n                              [('** ) (expt\
    \ (car operand) (cadr operand))])\n                            (cddr operand)))])))\n",
  "  (let loop ((operator operator)\n             (operand operand)\n            \
    \ (result (car operand)))\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator)\n              (cdr operand)\n              (case (car operator)\n\
    \                ((+ - * // **)\n                 (apply (car operator) result\
    \ (car operand)))\n                (else\n                 (error \"Invalid operator\"\
    )))))))\n", "  (define (do_algebra_iter operator operand result)\n    (if (null?\
    \ operator)\n        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n\
    \                         (cond\n                           ((string=? (car operator)\
    \ \"+\") (+ result (car operand)))\n                           ((string=? (car\
    \ operator) \"-\") (- result (car operand)))\n                           ((string=?\
    \ (car operator) \"*\") (* result (car operand)))\n                          \
    \ ((string=? (car operator) \"//\") (quotient result (car operand)))\n       \
    \                    ((string=? (car operator) \"**\") (expt result (car operand)))))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (helper opers\
    \ operands)\n    (if (null? opers)\n        (car operands)\n        (helper (cdr\
    \ opers) (cons (eval (list (car opers) (car operands) (car (cdr operands)))) (cdr\
    \ (cdr operands))))))\n  (helper operator operand))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (cond\n\
    \                [(equal? (car operator) '+) (+ result (car operand))]\n     \
    \           [(equal? (car operator) '-) (- result (car operand))]\n          \
    \      [(equal? (car operator) '*) (* result (car operand))]\n               \
    \ [(equal? (car operator) '//) (quotient result (car operand))]\n            \
    \    [(equal? (car operator) '**) (expt result (car operand))])))))\n", "  (define\
    \ (do_algebra_iter operator operand result)\n    (if (null? operator)\n      \
    \  result\n        (do_algebra_iter (cdr operator) (cdr operand)\n           \
    \              (match (car operator)\n                                [(\"+\"\
    ) (+ result (car operand))]\n                                [(\"-\") (- result\
    \ (car operand))]\n                                [(\"*\") (* result (car operand))]\n\
    \                                [(\"//\") (quotient result (car operand))]\n\
    \                                [(\"**\") (expt result (car operand))]))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (do_op op1\
    \ op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq? op '-) (- op1\
    \ op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op '//) (quotient\
    \ op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define (do_op_list\
    \ ops ops_list)\n    (if (null? ops_list)\n        (car ops)\n        (do_op_list\
    \ (do_op (car ops) (car ops_list) (car operator)) (cdr ops_list))))\n  (do_op_list\
    \ (car operand) (cdr operand)))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (cond\n           \
    \     [(equal? (car operator) '+) (+ result (car operand))]\n                [(equal?\
    \ (car operator) '-) (- result (car operand))]\n                [(equal? (car\
    \ operator) '*) (* result (car operand))]\n                [(equal? (car operator)\
    \ '//) (quotient result (car operand))]\n                [(equal? (car operator)\
    \ '**) (expt result (car operand))])))))\n", "  (define (do_algebra-helper operator\
    \ operand result)\n    (cond\n      [(empty? operator) result]\n      [else (do_algebra-helper\
    \ (rest operator) (rest operand)\n                               (cond\n     \
    \                            [(equal? (first operator) '+) (+ result (first operand))]\n\
    \                                 [(equal? (first operator) '-) (- result (first\
    \ operand))]\n                                 [(equal? (first operator) '*) (*\
    \ result (first operand))]\n                                 [(equal? (first operator)\
    \ '//) (quotient result (first operand))]\n                                 [(equal?\
    \ (first operator) '**) (expt result (first operand))]))]))\n  (do_algebra-helper\
    \ operator operand (first operand)))\n", "  (define (do_algebra_iter oprnd oprtr)\n\
    \    (cond\n      [(empty? oprtr) (first oprnd)]\n      [else (do_algebra_iter\
    \ (cons (eval (list (first oprtr) (first oprnd) (second oprnd))) (rest (rest oprnd)))\
    \ (rest oprtr))]))\n  (do_algebra_iter operand operator))\n", "  (let ([op (car\
    \ operator)]\n        [op1 (car operand)]\n        [op2 (cadr operand)])\n   \
    \ (cond [(equal? op '+) (+ op1 op2)]\n          [(equal? op '-) (- op1 op2)]\n\
    \          [(equal? op '*) (* op1 op2)]\n          [(equal? op '//) (quotient\
    \ op1 op2)]\n          [(equal? op '**) (expt op1 op2)])))\n", "  (define (helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (helper (cdr operator) (cdr operand)\n                (cond\n              \
    \    ((string=? (car operator) \"+\") (+ result (car operand)))\n            \
    \      ((string=? (car operator) \"-\") (- result (car operand)))\n          \
    \        ((string=? (car operator) \"*\") (* result (car operand)))\n        \
    \          ((string=? (car operator) \"//\") (quotient result (car operand)))\n\
    \                  ((string=? (car operator) \"**\") (expt result (car operand)))))))\n\
    \  (helper operator operand (car operand)))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond\n \
    \               [(equal? (car operator) '+)\n                 (+ result (car operand))]\n\
    \                [(equal? (car operator) '-)\n                 (- result (car\
    \ operand))]\n                [(equal? (car operator) '*)\n                 (*\
    \ result (car operand))]\n                [(equal? (car operator) '//)\n     \
    \            (quotient result (car operand))]\n                [(equal? (car operator)\
    \ '**)\n                 (expt result (car operand))])))))\n", "  (let* ([op (car\
    \ operator)]\n         [op1 (car operand)]\n         [op2 (cadr operand)])\n \
    \   (cond\n      [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n\
    \      [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n\
    \      [(equal? op '**) (expt op1 op2)])))\n", "  (let loop ((operator operator)\n\
    \             (operand operand)\n             (result (car operand)))\n    (if\
    \ (null? operator)\n        result\n        (loop (cdr operator)\n           \
    \   (cdr operand)\n              (match (car operator)\n                ['+ (+\
    \ result (car operand))]\n                ['* (* result (car operand))]\n    \
    \            ['- (- result (car operand))]\n                ['// (quotient result\
    \ (car operand))]\n                ['** (expt result (car operand))])))))\n",
  "  (define (do_algebra_helper operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_helper (cdr operator) (cdr operand)\n   \
    \                        (cond\n                             ((string=? (car operator)\
    \ \"+\") (+ result (car operand)))\n                             ((string=? (car\
    \ operator) \"-\") (- result (car operand)))\n                             ((string=?\
    \ (car operator) \"*\") (* result (car operand)))\n                          \
    \   ((string=? (car operator) \"//\") (quotient result (car operand)))\n     \
    \                        ((string=? (car operator) \"**\") (expt result (car operand)))))))\n\
    \  (do_algebra_helper operator operand (car operand)))\n", "  (let loop ([op operator]\
    \ [opd operand] [result (car opd)])\n    (if (null? op)\n        result\n    \
    \    (loop (cdr op) (cdr opd)\n              (cond\n                [(equal? (car\
    \ op) '+) (+ result (car opd))]\n                [(equal? (car op) '-) (- result\
    \ (car opd))]\n                [(equal? (car op) '*) (* result (car opd))]\n \
    \               [(equal? (car op) '//) (quotient result (car opd))]\n        \
    \        [(equal? (car op) '**) (expt result (car opd))])))))\n", "  (apply (lambda\
    \ (op1 op2)\n           (cond\n             ((eq? op1 '+) (+ op2))\n         \
    \    ((eq? op1 '-) (- op2))\n             ((eq? op1 '*) (* op2))\n           \
    \  ((eq? op1 '//) (quotient op2))\n             ((eq? op1 '**) (expt op2))))\n\
    \         operator\n         operand))\n", "  (let loop ([op operator] [opd operand]\
    \ [acc (car opd)])\n    (cond [(empty? op) acc]\n          [else (loop (cdr op)\
    \ (cdr opd)\n                      (match (car op)\n                        ['+\
    \ (+ acc (car opd))]\n                        ['* (* acc (car opd))]\n       \
    \                 ['- (- acc (car opd))]\n                        ['// (quotient\
    \ acc (car opd))]\n                        ['** (expt acc (car opd))]))])))\n",
  "  (define (do_algebra_iter operator operand acc)\n    (if (empty? operator)\n \
    \       acc\n        (do_algebra_iter (rest operator) (rest operand)\n       \
    \                  (match (first operator)\n                                [('+\
    \ (first operand) (second operand))]\n                                [('- (first\
    \ operand) (second operand))]\n                                [('* (first operand)\
    \ (second operand))]\n                                [('// (first operand) (second\
    \ operand))]\n                                [('** (first operand) (second operand))]))))\n\
    \  (do_algebra_iter operator operand (first operand)))\n", "  (define (do_algebra-helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra-helper (cdr operator) (cdr operand)\n                          \
    \ (eval `(,(car operator) ,result ,(car operand))))))\n  (do_algebra-helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (case (car operator)\n         \
    \       ((+ -) (eval `(,(car operator) ,result ,(car operand))))\n           \
    \     ((* // **) (eval `(,(car operator) ,result ,(car operand)))))))))\n", " \
    \ (define (do_op op1 op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n\
    \      [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n    \
    \  [(equal? op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n\
    \  (define (do_algebra_helper operator operand)\n    (cond\n      [(empty? operator)\
    \ (first operand)]\n      [(empty? operand) (error \"operand is empty\")]\n  \
    \    [else (do_algebra_helper (rest operator) (cons (do_op (first operand) (second\
    \ operand) (first operator)) (rest (rest operand))))]))\n  (do_algebra_helper\
    \ operator operand))\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(eq?\
    \ op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (*\
    \ op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt\
    \ op1 op2)]))\n  (define (do_ops ops)\n    (if (null? ops)\n        0\n      \
    \  (do_op (car ops) (do_ops (cdr ops)) (car operator))))\n  (do_ops operand))\n",
  "  (define (do_algebra_helper operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_helper (cdr operator) (cdr operand)\n   \
    \                        (cond\n                             ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                             ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                             ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (eval-op op1 op2 op)\n    (cond ((equal?\
    \ op '+) (+ op1 op2))\n          ((equal? op '-) (- op1 op2))\n          ((equal?\
    \ op '*) (* op1 op2))\n          ((equal? op '//) (quotient op1 op2))\n      \
    \    ((equal? op '**) (expt op1 op2))))\n  (define (eval-ops ops)\n    (cond ((null?\
    \ ops) 0)\n          ((null? (cdr ops)) (car ops))\n          (else (eval-op (car\
    \ ops) (eval-ops (cdr ops)) (car operator)))))\n  (eval-ops operand))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (cond\n      [(empty? operator)\
    \ result]\n      [else (do_algebra_helper (rest operator) (rest operand)\n   \
    \                            (cond\n                                 [(equal?\
    \ (first operator) '+) (+ result (first operand))]\n                         \
    \        [(equal? (first operator) '-) (- result (first operand))]\n         \
    \                        [(equal? (first operator) '*) (* result (first operand))]\n\
    \                                 [(equal? (first operator) '//) (quotient result\
    \ (first operand))]\n                                 [(equal? (first operator)\
    \ '**) (expt result (first operand))]))]))\n  (do_algebra_helper operator operand\
    \ (first operand)))\n", "  (define (do_algebra_iter operator operand acc)\n  \
    \  (if (null? operator)\n        acc\n        (do_algebra_iter (cdr operator)\
    \ (cdr operand) (eval `(,(car operator) ,acc ,(car operand))))))\n  (do_algebra_iter\
    \ operator operand (car operand)))\n", "  (let loop ([op operator] [opd operand]\
    \ [acc (car opd)])\n    (if (null? op)\n        acc\n        (loop (cdr op) (cdr\
    \ opd)\n              (cond\n                [(equal? (car op) '+) (+ acc (car\
    \ opd))]\n                [(equal? (car op) '-) (- acc (car opd))]\n         \
    \       [(equal? (car op) '*) (* acc (car opd))]\n                [(equal? (car\
    \ op) '//) (quotient acc (car opd))]\n                [(equal? (car op) '**) (expt\
    \ acc (car opd))])))))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (cond [(equal? (car operator) '+)\
    \ (+ result (car operand))]\n                    [(equal? (car operator) '-) (-\
    \ result (car operand))]\n                    [(equal? (car operator) '*) (* result\
    \ (car operand))]\n                    [(equal? (car operator) '//) (quotient\
    \ result (car operand))]\n                    [(equal? (car operator) '**) (expt\
    \ result (car operand))])))))\n", "  (define (do_algebra_helper operator operand\
    \ result)\n    (cond [(empty? operator) result]\n          [(empty? operand) result]\n\
    \          [(empty? (rest operand)) result]\n          [else (do_algebra_helper\
    \ (rest operator) (rest operand) (eval (list (first operator) (first operand)\
    \ (second operand))))]))\n  (do_algebra_helper operator operand (first operand)))\n",
  "  (if (null? operator)\n      (car operand)\n      (let* ([op (car operator)]\n\
    \             [op1 (car operand)]\n             [op2 (cadr operand)])\n      \
    \  (cond\n         ((eq? op '+) (+ op1 op2))\n         ((eq? op '-) (- op1 op2))\n\
    \         ((eq? op '*) (* op1 op2))\n         ((eq? op '//) (quotient op1 op2))\n\
    \         ((eq? op '**) (expt op1 op2))))))\n", "  (define (eval-op op1 op2 op)\n\
    \    (cond ((eq? op '+) (+ op1 op2))\n          ((eq? op '-) (- op1 op2))\n  \
    \        ((eq? op '*) (* op1 op2))\n          ((eq? op '//) (quotient op1 op2))\n\
    \          ((eq? op '**) (expt op1 op2))))\n  (define (eval-ops ops ops-remaining)\n\
    \    (if (null? ops-remaining)\n        (car ops)\n        (eval-ops (cons (eval-op\
    \ (car ops) (car ops-remaining) (car operator)) (cdr ops-remaining)) (cdr operator))))\n\
    \  (eval-ops (cdr operand) (cdr operator)))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (do_op op1 op2 op)\n    (cond ((equal?\
    \ op '+) (+ op1 op2))\n          ((equal? op '-) (- op1 op2))\n          ((equal?\
    \ op '*) (* op1 op2))\n          ((equal? op '//) (quotient op1 op2))\n      \
    \    ((equal? op '**) (expt op1 op2))))\n  (define (do_algebra_helper operator\
    \ operand)\n    (if (null? operator)\n        (car operand)\n        (do_op (car\
    \ operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (let loop ([op operator] [opd\
    \ operand] [result (car opd)])\n    (cond [(null? op) result]\n          [else\
    \ (loop (cdr op) (cdr opd)\n                      (cond [(string=? (car op) \"\
    +\") (+ result (car opd))]\n                            [(string=? (car op) \"\
    -\") (- result (car opd))]\n                            [(string=? (car op) \"\
    *\") (* result (car opd))]\n                            [(string=? (car op) \"\
    //\") (quotient result (car opd))]\n                            [(string=? (car\
    \ op) \"**\") (expt result (car opd))]))])))\n", "  (define (do-op op1 op2 op)\n\
    \    (cond ((eq? op '+) (+ op1 op2))\n          ((eq? op '-) (- op1 op2))\n  \
    \        ((eq? op '*) (* op1 op2))\n          ((eq? op '//) (quotient op1 op2))\n\
    \          ((eq? op '**) (expt op1 op2))))\n  (define (do-ops ops op)\n    (if\
    \ (null? ops)\n        0\n        (do-op (car ops) (do-ops (cdr ops) op) op)))\n\
    \  (do-ops operand (car operator)))\n", "  (define (do_algebra_iter operator operand\
    \ acc)\n    (if (empty? operator)\n        acc\n        (do_algebra_iter (rest\
    \ operator) (rest operand) (eval (list (first operator) acc (first operand))))))\n\
    \  (do_algebra_iter operator operand (first operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (cond\n\
    \                [(equal? (car operator) '+) (+ result (car operand))]\n     \
    \           [(equal? (car operator) '-) (- result (car operand))]\n          \
    \      [(equal? (car operator) '*) (* result (car operand))]\n               \
    \ [(equal? (car operator) '//) (quotient result (car operand))]\n            \
    \    [(equal? (car operator) '**) (expt result (car operand))])))))\n", "  (cond\n\
    \    [(empty? operator) (first operand)]\n    [else\n     (cond\n       [(= (first\
    \ operator) '+) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \       [(= (first operator) '-) (- (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n       [(= (first operator) '*) (* (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n       [(= (first operator) '//) (quotient\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n       [(= (first\
    \ operator) '**) (expt (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \       [else (error 'do_algebra \"Unknown operator\")]\n       )\n     ]\n  \
    \  )\n  )\n", "  (let loop ([operator operator] [operand operand] [result (car\
    \ operand)])\n    (if (null? operator)\n        result\n        (loop (cdr operator)\
    \ (cdr operand)\n              (cond\n                [(equal? (car operator)\
    \ '+) (+ result (car operand))]\n                [(equal? (car operator) '-) (-\
    \ result (car operand))]\n                [(equal? (car operator) '*) (* result\
    \ (car operand))]\n                [(equal? (car operator) '//) (quotient result\
    \ (car operand))]\n                [(equal? (car operator) '**) (expt result (car\
    \ operand))])))))\n", "  (cond\n    [(empty? operator) (first operand)]\n    [else\n\
    \     (cond\n       [(= (first operator) '+) (+ (first operand) (do_algebra (rest\
    \ operator) (rest operand)))]\n       [(= (first operator) '-) (- (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n       [(= (first operator) '*)\
    \ (* (first operand) (do_algebra (rest operator) (rest operand)))]\n       [(=\
    \ (first operator) '//) (quotient (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n       [(= (first operator) '**) (expt (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n       [else (error 'do_algebra \"Unknown\
    \ operator\")]\n       )\n     ]\n    )\n  )\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_iter\
    \ (cdr operator) (cdr operand)\n                         (cond\n             \
    \              ((string=? (car operator) \"+\") (+ result (car operand)))\n  \
    \                         ((string=? (car operator) \"-\") (- result (car operand)))\n\
    \                           ((string=? (car operator) \"*\") (* result (car operand)))\n\
    \                           ((string=? (car operator) \"//\") (quotient result\
    \ (car operand)))\n                           ((string=? (car operator) \"**\"\
    ) (expt result (car operand)))))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (if (empty? operator)\n        (first operand)\n    \
    \    (do_op (first operand) (do_algebra_helper (rest operator) (rest operand))\
    \ (first operator))))\n  (do_algebra_helper operator operand))\n", "  (let ([op\
    \ (car operator)]\n        [op1 (car operand)]\n        [op2 (cadr operand)])\n\
    \    (cond\n      [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n\
    \      [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n\
    \      [(equal? op '**) (expt op1 op2)])))\n", "  (define (do_op op1 op2 op)\n\
    \    (cond ((equal? op '+) (+ op1 op2))\n          ((equal? op '-) (- op1 op2))\n\
    \          ((equal? op '*) (* op1 op2))\n          ((equal? op '//) (quotient\
    \ op1 op2))\n          ((equal? op '**) (expt op1 op2))))\n  (define (do_algebra_helper\
    \ operator operand)\n    (if (null? operator)\n        (car operand)\n       \
    \ (do_op (car operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (let loop ([op operator] [opd\
    \ operand] [result (car opd)])\n    (if (null? op)\n        result\n        (loop\
    \ (cdr op) (cdr opd) (match (car op)\n                                       \
    \ ['+ (+ result (car opd))]\n                                        ['* (* result\
    \ (car opd))]\n                                        ['- (- result (car opd))]\n\
    \                                        ['// (quotient result (car opd))]\n \
    \                                       ['** (expt result (car opd))])))))\n",
  "  (define (do_algebra_helper operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_helper (cdr operator) (cdr operand)\n   \
    \                        (cond\n                             ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                             ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                             ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (do_algebra-helper operator operand result)\n\
    \    (cond ((null? operator) result)\n          ((= (length operator) 1) (eval\
    \ (list (car operand) (car operator) (cadr operand))))\n          (else (do_algebra-helper\
    \ (cdr operator) (cdr operand) (eval (list result (car operator) (cadr operand)))))))\n\
    \  (do_algebra-helper operator operand (car operand)))\n", "  (let loop ([operator\
    \ (reverse operator)]\n             [operand (reverse operand)])\n    (if (null?\
    \ operator)\n        (car operand)\n        (let ([op (car operator)]\n      \
    \        [a (car operand)]\n              [b (cadr operand)])\n          (loop\
    \ (cdr operator)\n                (cons (case op\n                        [(+\
    \ _) (+ a b)]\n                        [(- _) (- a b)]\n                     \
    \   [(* _) (* a b)]\n                        [(// _) (quotient a b)]\n       \
    \                 [(** _) (expt a b)]\n                        [else (error 'do_algebra\
    \ \"unknown operator\" op)])\n                      (cddr operand)))))))\n", " \
    \ (if (null? operator)\n      (car operand)\n      (let* ([op (car operator)]\n\
    \             [op1 (car operand)]\n             [op2 (cadr operand)])\n      \
    \  (cond\n         [(equal? op '+) (+ op1 op2)]\n         [(equal? op '-) (- op1\
    \ op2)]\n         [(equal? op '*) (* op1 op2)]\n         [(equal? op '// (quotient\
    \ op1 op2))]\n         [(equal? op '** (expt op1 op2))]))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_helper (rest operator) (rest operand) (eval `(,(first operator)\
    \ ,result ,(first operand))))]))\n  (do_algebra_helper operator operand (first\
    \ operand)))\n", "  (let loop ([operator operator] [operand operand] [result (car\
    \ operand)])\n    (if (null? operator)\n        result\n        (loop (cdr operator)\
    \ (cdr operand)\n              (cond\n                [(equal? (car operator)\
    \ '+) (+ result (car operand))]\n                [(equal? (car operator) '-) (-\
    \ result (car operand))]\n                [(equal? (car operator) '*) (* result\
    \ (car operand))]\n                [(equal? (car operator) '//) (quotient result\
    \ (car operand))]\n                [(equal? (car operator) '**) (expt result (car\
    \ operand))])))))\n", "  (let loop ([operator operator] [operand operand] [result\
    \ (car operand)])\n    (cond [(null? operator) result]\n          [else (loop\
    \ (cdr operator) (cdr operand)\n                      (match (car operator)\n\
    \                             [('+ ) (+ result (car operand))]\n             \
    \                [('- ) (- result (car operand))]\n                          \
    \   [('* ) (* result (car operand))]\n                             [('// ) (quotient\
    \ result (car operand))]\n                             [('** ) (expt result (car\
    \ operand))]))])))\n", "  (let loop ([operator operator] [operand operand] [result\
    \ 0])\n    (if (null? operator)\n        result\n        (loop (cdr operator)\
    \ (cdr operand)\n              (cond\n                ((string=? (car operator)\
    \ \"+\") (+ result (car operand)))\n                ((string=? (car operator)\
    \ \"-\") (- result (car operand)))\n                ((string=? (car operator)\
    \ \"*\") (* result (car operand)))\n                ((string=? (car operator)\
    \ \"//\") (quotient result (car operand)))\n                ((string=? (car operator)\
    \ \"**\") (expt result (car operand))))))))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (case (car\
    \ operator)\n                [(+) (+ result (car operand))]\n                [(-)\
    \ (- result (car operand))]\n                [(*) (* result (car operand))]\n\
    \                [(//) (quotient result (car operand))]\n                [(**)\
    \ (expt result (car operand))])))))\n", "  (define (do_op op1 op2 op)\n    (cond\n\
    \      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq?\
    \ op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op\
    \ '**) (expt op1 op2)]))\n  (define (do_ops ops)\n    (cond\n      [(null? ops)\
    \ 0]\n      [(null? (cdr ops)) (car ops)]\n      [else (do_op (car ops) (do_ops\
    \ (cdr ops)) (car operator))]))\n  (do_ops operand))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (cond\n\
    \                [(equal? (car operator) '+) (+ result (car operand))]\n     \
    \           [(equal? (car operator) '-) (- result (car operand))]\n          \
    \      [(equal? (car operator) '*) (* result (car operand))]\n               \
    \ [(equal? (car operator) '//) (quotient result (car operand))]\n            \
    \    [(equal? (car operator) '**) (expt result (car operand))])))))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (cond\n      [(empty? operator)\
    \ result]\n      [else (do_algebra_helper (rest operator) (rest operand)\n   \
    \                            (cond\n                                 [(equal?\
    \ (first operator) '+) (+ result (first operand))]\n                         \
    \        [(equal? (first operator) '-) (- result (first operand))]\n         \
    \                        [(equal? (first operator) '*) (* result (first operand))]\n\
    \                                 [(equal? (first operator) '//) (quotient result\
    \ (first operand))]\n                                 [(equal? (first operator)\
    \ '**) (expt result (first operand))]))]))\n  (do_algebra_helper operator operand\
    \ (first operand)))\n", "  (define (do_algebra-helper operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra-helper (cdr operator)\
    \ (cdr operand)\n                           (eval `(,(car operator) ,result ,(car\
    \ operand))))))\n  (do_algebra-helper operator operand (car operand)))\n", " \
    \ (let ([op (car operator)]\n        [op1 (car operand)]\n        [op2 (cadr operand)])\n\
    \    (cond\n      [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n\
    \      [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n\
    \      [(equal? op '**) (expt op1 op2)])))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (case (car\
    \ operator)\n                [(+) (+ result (car operand))]\n                [(-)\
    \ (- result (car operand))]\n                [(*) (* result (car operand))]\n\
    \                [(//) (quotient result (car operand))]\n                [(**)\
    \ (expt result (car operand))])))))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                           (cond\n           \
    \                  ((string=? (car operator) \"+\") (+ result (car operand)))\n\
    \                             ((string=? (car operator) \"-\") (- result (car\
    \ operand)))\n                             ((string=? (car operator) \"*\") (*\
    \ result (car operand)))\n                             ((string=? (car operator)\
    \ \"//\") (quotient result (car operand)))\n                             ((string=?\
    \ (car operator) \"**\") (expt result (car operand)))))))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (cond\n    [(empty? operator) (car operand)]\n\
    \    [else\n     (cond\n       [(= (car operator) '+) (+ (car operand) (do_algebra\
    \ (cdr operator) (cdr operand)))]\n       [(= (car operator) '-) (- (car operand)\
    \ (do_algebra (cdr operator) (cdr operand)))]\n       [(= (car operator) '*) (*\
    \ (car operand) (do_algebra (cdr operator) (cdr operand)))]\n       [(= (car operator)\
    \ '//) (quotient (car operand) (do_algebra (cdr operator) (cdr operand)))]\n \
    \      [(= (car operator) '**) (expt (car operand) (do_algebra (cdr operator)\
    \ (cdr operand))))]\n     ]))\n", "  (let loop ((operator operator)\n        \
    \     (operand operand)\n             (result (car operand)))\n    (if (null?\
    \ operator)\n        result\n        (loop (cdr operator)\n              (cdr\
    \ operand)\n              (match (car operator)\n                     ['+ (+ result\
    \ (car operand))]\n                     ['* (* result (car operand))]\n      \
    \               ['- (- result (car operand))]\n                     ['// (quotient\
    \ result (car operand))]\n                     ['** (expt result (car operand))])))))\n",
  "  (define (do_op op1 op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq?\
    \ op '-) (- op1 op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op\
    \ '//) (quotient op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define\
    \ (do_algebra_helper operator operand result)\n    (if (null? operator)\n    \
    \    result\n        (do_algebra_helper (cdr operator) (cdr operand) (do_op result\
    \ (car operand) (car operator)))))\n  (do_algebra_helper operator operand (car\
    \ operand)))\n", "  (cond [(empty? operator) (first operand)]\n        [else (do_algebra\
    \ (rest operator) (cons (eval (list (first operator) (first operand) (second operand)))\
    \ (rest (rest operand))))]))\n", "  (let loop ([operator operator] [operand operand]\
    \ [acc (car operand)])\n    (cond [(empty? operator) acc]\n          [(empty?\
    \ operand) acc]\n          [else (loop (cdr operator) (cdr operand) (eval `(,(car\
    \ operator) ,acc ,(car operand))))])))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (let ([op (car operator)] [op1 (car operand)] [op2 (cadr operand)])\n\
    \          (loop (cdr operator) (cdr operand)\n                (cond [(equal?\
    \ op '+) (+ result op2)]\n                      [(equal? op '-) (- result op2)]\n\
    \                      [(equal? op '*) (* result op2)]\n                     \
    \ [(equal? op '//) (quotient result op2)]\n                      [(equal? op '**)\
    \ (expt result op2)]))))))\n", "  (let loop ([op operator] [opd operand] [acc\
    \ (car opd)])\n    (if (null? op)\n        acc\n        (loop (cdr op) (cdr opd)\n\
    \              (match (car op)\n                ['+ (+ acc (car opd))]\n     \
    \           ['* (* acc (car opd))]\n                ['** (expt acc (car opd))]\n\
    \                ['/ (/ acc (car opd))]\n                ['- (- acc (car opd))])))))\n",
  "  (let loop ([op operator] [opd operand] [result (car opd)])\n    (if (null? op)\n\
    \        result\n        (loop (cdr op) (cdr opd)\n              (cond\n     \
    \           [(equal? (car op) '+) (+ result (car opd))]\n                [(equal?\
    \ (car op) '-) (- result (car opd))]\n                [(equal? (car op) '*) (*\
    \ result (car opd))]\n                [(equal? (car op) '//) (quotient result\
    \ (car opd))]\n                [(equal? (car op) '**) (expt result (car opd))])))))\n",
  "  (let loop ([op operator] [opd operand] [result (car opd)])\n    (if (null? op)\n\
    \        result\n        (loop (cdr op) (cdr opd)\n              (cond\n     \
    \           [(equal? (car op) '+) (+ result (car opd))]\n                [(equal?\
    \ (car op) '-) (- result (car opd))]\n                [(equal? (car op) '*) (*\
    \ result (car opd))]\n                [(equal? (car op) '//) (quotient result\
    \ (car opd))]\n                [(equal? (car op) '**) (expt result (car opd))])))))\n",
  "  (define (do_op op1 op2 op)\n    (cond [(eq? op '+) (+ op1 op2)]\n          [(eq?\
    \ op '-) (- op1 op2)]\n          [(eq? op '*) (* op1 op2)]\n          [(eq? op\
    \ '//) (quotient op1 op2)]\n          [(eq? op '**) (expt op1 op2)]))\n  (define\
    \ (do_algebra_helper operator operand)\n    (cond [(empty? operator) (first operand)]\n\
    \          [(empty? (rest operator)) (do_op (first operand) (first (rest operand))\
    \ (first operator))]\n          [else (do_op (first operand) (do_algebra_helper\
    \ (rest operator) (rest operand)) (first operator))]))\n  (do_algebra_helper operator\
    \ operand))\n", "  (cond\n    [(empty? operator) (first operand)]\n    [else\n\
    \     (cond\n       [(= (first operator) '+) (do_algebra (rest operator) (cons\
    \ (+ (first operand) (second operand)) (rest (rest operand))))]\n       [(= (first\
    \ operator) '-) (do_algebra (rest operator) (cons (- (first operand) (second operand))\
    \ (rest (rest operand))))]\n       [(= (first operator) '*) (do_algebra (rest\
    \ operator) (cons (* (first operand) (second operand)) (rest (rest operand))))]\n\
    \       [(= (first operator) '//) (do_algebra (rest operator) (cons (quotient\
    \ (first operand) (second operand)) (rest (rest operand))))]\n       [(= (first\
    \ operator) '**) (do_algebra (rest operator) (cons (expt (first operand) (second\
    \ operand)) (rest (rest operand))))]\n       [else (error \"Invalid operator\"\
    )]\n       )\n     ]\n    )\n  )\n", "  (define (do_op op1 op2 op)\n    (cond\n\
    \      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq?\
    \ op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op\
    \ '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator operand)\n   \
    \ (if (null? operator)\n        (car operand)\n        (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))))\n  (do_algebra_helper operator\
    \ operand))\n", "  (let* ([op (car operator)]\n         [op1 (car operand)]\n\
    \         [op2 (cadr operand)])\n    (cond [(equal? op '+) (+ op1 op2)]\n    \
    \      [(equal? op '-) (- op1 op2)]\n          [(equal? op '*) (* op1 op2)]\n\
    \          [(equal? op '//) (quotient op1 op2)]\n          [(equal? op '**) (expt\
    \ op1 op2)])))\n", "  (if (null? operator)\n      (car operand)\n      (let ((op\
    \ (car operator))\n            (op1 (car operand))\n            (op2 (cadr operand)))\n\
    \        (cond ((equal? op '+) (+ op1 op2))\n              ((equal? op '-) (-\
    \ op1 op2))\n              ((equal? op '*) (* op1 op2))\n              ((equal?\
    \ op '//) (quotient op1 op2))\n              ((equal? op '**) (expt op1 op2))))))\n",
  "  (define (helper operator operand)\n    (if (null? operator)\n        (car operand)\n\
    \        (helper (cdr operator) (cons (eval (list (car operator) (car operand)\
    \ (car (cdr operand)))) (cdr (cdr operand))))))\n  (helper operator operand))\n",
  "  (define (helper operator operand)\n    (if (null? operator)\n        (car operand)\n\
    \        (helper (cdr operator) (cons (eval (list (car operator) (car operand)\
    \ (car (cdr operand)))) (cdr (cdr operand))))))\n  (helper operator operand))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator)\n      \
    \        (cdr operand)\n              (match (car operator)\n                \
    \     ['+ (+ result (car operand))]\n                     ['* (* result (car operand))]\n\
    \                     ['- (- result (car operand))]\n                     ['//\
    \ (quotient result (car operand))]\n                     ['** (expt result (car\
    \ operand))])))))\n", "  (cond [(empty? operator) (car operand)]\n        [(empty?\
    \ operand) (car operator)]\n        [else (do_algebra (cdr operator) (cons (eval\
    \ (list (car operator) (car operand) (cadr operand))) (cddr operand)))]))\n",
  "  (define (do_op op1 op2 op)\n    (cond ((equal? op '+) (+ op1 op2))\n        \
    \  ((equal? op '-) (- op1 op2))\n          ((equal? op '*) (* op1 op2))\n    \
    \      ((equal? op '//) (quotient op1 op2))\n          ((equal? op '**) (expt\
    \ op1 op2))))\n  (define (do_algebra_iter operator operand result)\n    (if (null?\
    \ operator)\n        result\n        (do_algebra_iter (cdr operator) (cdr operand)\
    \ (do_op (car operand) (car (cdr operand)) (car operator)))))\n  (do_algebra_iter\
    \ operator operand (car operand)))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (cond\n           \
    \     [(equal? (car operator) '+) (+ result (car operand))]\n                [(equal?\
    \ (car operator) '-) (- result (car operand))]\n                [(equal? (car\
    \ operator) '*) (* result (car operand))]\n                [(equal? (car operator)\
    \ '//) (quotient result (car operand))]\n                [(equal? (car operator)\
    \ '**) (expt result (car operand))])))))\n", "  (if (null? operator)\n      (car\
    \ operand)\n      (do_algebra (cdr operator) (cons (eval (list (car operand) (car\
    \ operator) (cadr operand))) (cddr operand)))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (do_op op1 op2 op)\n    (cond\n     \
    \ [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n      [(equal?\
    \ op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n      [(equal?\
    \ op '**) (expt op1 op2)]))\n  (define (do_algebra_rec opers operands)\n    (if\
    \ (empty? opers)\n        (car operands)\n        (do_algebra_rec (cdr opers)\
    \ (cons (do_op (car operands) (cadr operands) (car opers)) (cddr operands)))))\n\
    \  (do_algebra_rec operator operand))\n", "  (define (do_op op1 op2 op)\n    (cond\n\
    \      [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n    \
    \  [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n\
    \      [(equal? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (if (empty? operator)\n        (first operand)\n        (do_op\
    \ (first operand) (do_algebra_helper (rest operator) (rest operand)) (first operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (cond [(null? operator) result]\n\
    \          [else (loop (cdr operator) (cdr operand)\n                      (match\
    \ (car operator)\n                             ['+ (+ result (car operand))]\n\
    \                             ['* (* result (car operand))]\n                \
    \             ['- (- result (car operand))]\n                             ['//\
    \ (quotient result (car operand))]\n                             ['** (expt result\
    \ (car operand))]))])))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (cond\n      [(empty? operator) result]\n      [else (do_algebra_helper (rest\
    \ operator) (rest operand) (eval `(,(first operator) ,result ,(first operand))))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (match\
    \ (car operator)\n                ['+ (+ result (car operand))]\n            \
    \    ['* (* result (car operand))]\n                ['- (- result (car operand))]\n\
    \                ['// (quotient result (car operand))]\n                ['** (expt\
    \ result (car operand))])))))\n", "  (cond\n    [(empty? operator) (first operand)]\n\
    \    [else\n     (cond\n       [(equal? (first operator) '+)\n        (+ (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n       [(equal? (first\
    \ operator) '-)\n        (- (first operand) (do_algebra (rest operator) (rest\
    \ operand)))]\n       [(equal? (first operator) '*)\n        (* (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n       [(equal? (first operator)\
    \ '//)\n        (quotient (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \       [(equal? (first operator) '**)\n        (expt (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n       [else (error 'do_algebra \"Unknown\
    \ operator\")])])\n  )\n", "  (define (do_op op1 op2 op)\n    (cond [(equal? op\
    \ '+) (+ op1 op2)]\n          [(equal? op '-) (- op1 op2)]\n          [(equal?\
    \ op '*) (* op1 op2)]\n          [(equal? op '//) (quotient op1 op2)]\n      \
    \    [(equal? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (if (null? operator)\n        (car operand)\n        (do_op (car\
    \ operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_algebra_iter op lst)\n\
    \    (cond [(empty? lst) (error \"Empty list\")]\n          [(empty? (rest lst))\
    \ (first lst)]\n          [else (do_algebra_iter op (cons (eval (list (first op)\
    \ (first lst) (second lst))) (rest (rest lst))))]))\n  (do_algebra_iter operator\
    \ operand))\n", "  (let loop ([operator operator] [operand operand] [acc (car\
    \ operand)])\n    (if (null? operator)\n        acc\n        (loop (cdr operator)\
    \ (cdr operand)\n              (match (car operator)\n                ['+ (+ acc\
    \ (car operand))]\n                ['* (* acc (car operand))]\n              \
    \  ['- (- acc (car operand))]\n                ['// (floor (/ acc (car operand)))\
    \ ]\n                ['** (expt acc (car operand))])))))\n", "  (let* ([op (car\
    \ operator)]\n         [op1 (car operand)]\n         [op2 (cadr operand)])\n \
    \   (cond\n      [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n\
    \      [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n\
    \      [(equal? op '**) (expt op1 op2)])))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond\n \
    \               [(equal? (car operator) '+) (+ result (car operand))]\n      \
    \          [(equal? (car operator) '-) (- result (car operand))]\n           \
    \     [(equal? (car operator) '*) (* result (car operand))]\n                [(equal?\
    \ (car operator) '//) (quotient result (car operand))]\n                [(equal?\
    \ (car operator) '**) (expt result (car operand))])))))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_iter (cdr operator) (cdr operand)\n                         (cond\n\
    \                           ((string=? (car operator) \"+\") (+ result (car operand)))\n\
    \                           ((string=? (car operator) \"-\") (- result (car operand)))\n\
    \                           ((string=? (car operator) \"*\") (* result (car operand)))\n\
    \                           ((string=? (car operator) \"//\") (quotient result\
    \ (car operand)))\n                           ((string=? (car operator) \"**\"\
    ) (expt result (car operand)))))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (let loop ([op operator] [opd operand] [result (car opd)])\n    (if (null? op)\n\
    \        result\n        (loop (cdr op) (cdr opd)\n              (cond\n     \
    \           [(equal? (car op) '+) (+ result (car opd))]\n                [(equal?\
    \ (car op) '-) (- result (car opd))]\n                [(equal? (car op) '*) (*\
    \ result (car opd))]\n                [(equal? (car op) '//) (quotient result\
    \ (car opd))]\n                [(equal? (car op) '**) (expt result (car opd))])))))\n",
  "  (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n     \
    \                    (cond\n                           ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                           ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                           ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                           ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                           ((equal? (car\
    \ operator) '**) (expt result (car operand)))))))\n  (do_algebra_iter operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (cond [(empty? operator) result]\n          [else\
    \ (loop (cdr operator) (cdr operand)\n                      (match (car operator)\n\
    \                             ['+ (+ result (car operand))]\n                \
    \             ['* (* result (car operand))]\n                             ['-\
    \ (- result (car operand))]\n                             ['// (quotient result\
    \ (car operand))]\n                             ['** (expt result (car operand))]))])))\n",
  "  (let loop ([operator operator] [operand operand] [result 0])\n    (if (null?\
    \ operator)\n        result\n        (loop (cdr operator) (cdr operand)\n    \
    \          (cond [(equal? (car operator) '+) (+ result (car operand))]\n     \
    \               [(equal? (car operator) '-) (- result (car operand))]\n      \
    \              [(equal? (car operator) '*) (* result (car operand))]\n       \
    \             [(equal? (car operator) '//) (quotient result (car operand))]\n\
    \                    [(equal? (car operator) '**) (expt result (car operand))])))))\n",
  "  (define (do_op op1 op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq?\
    \ op '-) (- op1 op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op\
    \ '//) (quotient op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define\
    \ (do_algebra_helper operator operand)\n    (if (empty? operator)\n        (car\
    \ operand)\n        (do_op (car operand) (do_algebra_helper (cdr operator) (cdr\
    \ operand)) (car operator))))\n  (do_algebra_helper operator operand))\n", " \
    \ (define (calc op1 op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq?\
    \ op '-) (- op1 op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op\
    \ '//) (quotient op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define\
    \ (calc_list ops ops_rest)\n    (if (null? ops_rest)\n        (car ops)\n    \
    \    (calc_list (cons (calc (car ops) (car ops_rest) (car operator)) (cdr ops_rest))\
    \ (cdr ops_rest))))\n  (calc_list (list (car operand)) (cdr operand)))\n", " \
    \ (let loop ([op operator] [opd operand] [result (car opd)])\n    (if (null? op)\n\
    \        result\n        (loop (cdr op) (cdr opd)\n              (cond [(equal?\
    \ (car op) '+) (+ result (car opd))]\n                    [(equal? (car op) '-)\
    \ (- result (car opd))]\n                    [(equal? (car op) '*) (* result (car\
    \ opd))]\n                    [(equal? (car op) '//) (quotient result (car opd))]\n\
    \                    [(equal? (car op) '**) (expt result (car opd))])))))\n",
  "  (let loop ([op operator] [opd operand] [result (car opd)])\n    (if (null? op)\n\
    \        result\n        (loop (cdr op) (cdr opd) (match (car op)\n          \
    \                              [('+) (+ result (car opd))]\n                 \
    \                       [('-) (- result (car opd))]\n                        \
    \                [('*) (* result (car opd))]\n                               \
    \         [('//) (quotient result (car opd))]\n                              \
    \          [('**) (expt result (car opd))])))))\n", "  (define (do_op op1 op2\
    \ op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n\
    \      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n  \
    \    [(eq? op '**) (expt op1 op2)]))\n  (define (do_ops ops op)\n    (if (null?\
    \ (cdr ops))\n        (car ops)\n        (do_ops (cons (do_op (car ops) (cadr\
    \ ops) op) (cddr ops)) op)))\n  (do_ops operand (car operator)))\n", "  (let loop\
    \ ([operator operator] [operand operand] [result (car operand)])\n    (if (null?\
    \ operator)\n        result\n        (loop (cdr operator) (cdr operand)\n    \
    \          (cond\n                [(equal? (car operator) '+) (+ result (car operand))]\n\
    \                [(equal? (car operator) '-) (- result (car operand))]\n     \
    \           [(equal? (car operator) '*) (* result (car operand))]\n          \
    \      [(equal? (car operator) '//) (quotient result (car operand))]\n       \
    \         [(equal? (car operator) '**) (expt result (car operand))])))))\n", " \
    \ (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n   \
    \   [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_iter\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_iter (cdr operator) (cdr operand) (do_op (car operand) (car (cdr\
    \ operand)) (car operator)))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (let loop ([op operator] [opd operand] [result (car opd)])\n    (if (null? op)\n\
    \        result\n        (loop (cdr op) (cdr opd)\n              (case (car op)\n\
    \                ((+ *) result (car opd))\n                (- result (car opd))\n\
    \                (// result (car opd))\n                (** result (car opd)))))))\n",
  "  (define (do_algebra_inner operator operand result)\n    (if (empty? operator)\n\
    \        result\n        (do_algebra_inner (rest operator) (rest operand)\n  \
    \                        (cond\n                            [(equal? (first operator)\
    \ '+)\n                             (+ result (first operand))]\n            \
    \                [(equal? (first operator) '-)\n                             (-\
    \ result (first operand))]\n                            [(equal? (first operator)\
    \ '*)\n                             (* result (first operand))]\n            \
    \                [(equal? (first operator) '//)\n                            \
    \ (quotient result (first operand))]\n                            [(equal? (first\
    \ operator) '**)\n                             (expt result (first operand))]))))\n\
    \  (do_algebra_inner operator operand (first operand)))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n      [(equal? op\
    \ '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n      [(equal? op '//)\
    \ (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n  (define (do_op_list\
    \ ops ops_rest op)\n    (if (null? ops_rest)\n        ops\n        (do_op_list\
    \ (cons (do_op (car ops) (car ops_rest) op) (cdr ops_rest)) (cdr ops_rest) op)))\n\
    \  (define (do_ops ops ops_rest ops_rest_rest)\n    (if (null? ops_rest_rest)\n\
    \        ops\n        (do_ops (do_op_list ops ops_rest (car ops_rest_rest)) ops_rest\
    \ (cdr ops_rest_rest))))\n  (do_ops (list (car operand)) (cdr operand) operator))\n",
  "  (let loop ([operator (reverse operator)]\n             [operand (reverse operand)])\n\
    \    (cond [(empty? operator) (first operand)]\n          [(empty? (rest operand))\
    \ (first operand)]\n          [else\n           (loop (rest operator)\n      \
    \           (cons (eval `(,(first operator) ,(first operand) ,(second operand)))\n\
    \                       (rest (rest operand))))])))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (if (empty? operator)\n        result\n      \
    \  (do_algebra_iter (rest operator) (rest operand)\n                         (cond\n\
    \                          ((= (first operator) '+) (+ result (first operand)))\n\
    \                          ((= (first operator) '-) (- result (first operand)))\n\
    \                          ((= (first operator) '*) (* result (first operand)))\n\
    \                          ((= (first operator) '//) (quotient result (first operand)))\n\
    \                          ((= (first operator) '**) (expt result (first operand)))))))\n\
    \  (do_algebra_iter operator operand (first operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (match\
    \ (car operator)\n                ['+ (+ result (car operand))]\n            \
    \    ['* (* result (car operand))]\n                ['- (- result (car operand))]\n\
    \                ['// (quotient result (car operand))]\n                ['** (expt\
    \ result (car operand))])))))\n", "  (define (do_op op1 op2 op)\n    (cond ((eq?\
    \ op '+) (+ op1 op2))\n          ((eq? op '-) (- op1 op2))\n          ((eq? op\
    \ '*) (* op1 op2))\n          ((eq? op '//) (quotient op1 op2))\n          ((eq?\
    \ op '**) (expt op1 op2))))\n  (define (do_algebra_helper operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_helper (cdr operator)\
    \ (cdr operand) (do_op result (car operand) (car operator)))))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (cond [(null? operator) result]\n    \
    \      [else (loop (cdr operator) (cdr operand)\n                      (match\
    \ (car operator)\n                             [('+ ) (+ result (car operand))]\n\
    \                             [('- ) (- result (car operand))]\n             \
    \                [('* ) (* result (car operand))]\n                          \
    \   [('// ) (quotient result (car operand))]\n                             [('**\
    \ ) (expt result (car operand))]))])))\n", "  (define (helper opers operands)\n\
    \    (cond\n      [(empty? opers) (first operands)]\n      [(empty? (rest operands))\
    \ (first operands)]\n      [else (helper (rest opers) (cons (eval (list (first\
    \ operands) (first opers) (second operands))) (rest (rest operands))))]))\n  (helper\
    \ operator operand))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (cond\n      [(empty? operator) result]\n      [else (do_algebra_helper (rest\
    \ operator) (rest operand) (eval (list (first operator) result (first operand))))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n", "  (if (null? operator)\n\
    \      (car operand)\n      (let ([op (car operator)]\n            [op1 (car operand)]\n\
    \            [op2 (cadr operand)])\n        (cond\n         ((equal? op '+) (+\
    \ op1 op2))\n         ((equal? op '-) (- op1 op2))\n         ((equal? op '*) (*\
    \ op1 op2))\n         ((equal? op '//) (quotient op1 op2))\n         ((equal?\
    \ op '**) (expt op1 op2))))))\n", "  (define (do_algebra_helper operator operand\
    \ result)\n    (cond\n      [(empty? operator) result]\n      [else\n       (do_algebra_helper\
    \ (rest operator) (rest operand)\n                          (cond\n          \
    \                  [(equal? (first operator) '+) (+ result (first operand))]\n\
    \                            [(equal? (first operator) '-) (- result (first operand))]\n\
    \                            [(equal? (first operator) '*) (* result (first operand))]\n\
    \                            [(equal? (first operator) '//) (quotient result (first\
    \ operand))]\n                            [(equal? (first operator) '**) (expt\
    \ result (first operand))]))]))\n  (do_algebra_helper operator operand (first\
    \ operand)))\n", "  (let loop ([operator (reverse operator)] [operand (reverse\
    \ operand)])\n    (if (null? operator)\n        (car operand)\n        (loop (cdr\
    \ operator)\n              (cons (eval `(,(car operator) ,(car operand) ,(cadr\
    \ operand)))\n                    (cddr operand))))))\n", "  (let loop ([operator\
    \ (reverse operator)] [operand (reverse operand)])\n    (if (null? operator)\n\
    \        (car operand)\n        (loop (cdr operator)\n              (cons (eval\
    \ `(,(car operator) ,(car operand) ,(cadr operand)))\n                    (cddr\
    \ operand))))))\n", "  (define (do_op op1 op2 op)\n    (cond ((eq? op '+) (+ op1\
    \ op2))\n          ((eq? op '-) (- op1 op2))\n          ((eq? op '*) (* op1 op2))\n\
    \          ((eq? op '//) (quotient op1 op2))\n          ((eq? op '**) (expt op1\
    \ op2))))\n  (define (do_ops ops op)\n    (if (null? ops)\n        0\n       \
    \ (do_op (car ops) (do_ops (cdr ops) op) op)))\n  (do_ops operand (car operator)))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (case (car operator)\n                [(+) (+ result (car operand))]\n\
    \                [(-) (- result (car operand))]\n                [(*) (* result\
    \ (car operand))]\n                [(//) (quotient result (car operand))]\n  \
    \              [(**) (expt result (car operand))])))))\n", "  (cond\n    [(empty?\
    \ operator) (car operand)]\n    [else\n     (let* ([op (car operator)]\n     \
    \       [op1 (car operand)]\n            [op2 (do_algebra (cdr operator) (cdr\
    \ operand))])\n       (cond\n         [(equal? op '+) (+ op1 op2)]\n         [(equal?\
    \ op '-) (- op1 op2)]\n         [(equal? op '*) (* op1 op2)]\n         [(equal?\
    \ op '//) (quotient op1 op2)]\n         [(equal? op '**) (expt op1 op2)]))]))\n",
  "  (define (do_op op1 op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq?\
    \ op '-) (- op1 op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op\
    \ '//) (quotient op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define\
    \ (do_ops ops op)\n    (if (null? (cdr ops))\n        (car ops)\n        (do_op\
    \ (car ops) (do_ops (cdr ops) op) op)))\n  (do_ops operand (car operator)))\n",
  "  (let loop ([op operator] [opd operand] [acc (car opd)])\n    (cond [(null? op)\
    \ acc]\n          [(= (length op) 1) (apply (car op) acc (cdr opd))]\n       \
    \   [else (loop (cdr op) (cdr opd) (apply (car op) acc (car opd)))])))\n", " \
    \ (define (helper operator operand)\n    (cond [(null? operator) (car operand)]\n\
    \          [(= (length operator) 1) (eval (list (car operand) (car operator) (cadr\
    \ operand)))]\n          [else (eval (list (car operand) (car operator) (helper\
    \ (cdr operator) (cdr operand))))]))\n  (helper operator operand))\n", "  (let\
    \ loop ([operator operator] [operand operand] [result (car operand)])\n    (if\
    \ (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (cond\n                ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                ((equal? (car operator) '-) (- result (car operand)))\n\
    \                ((equal? (car operator) '*) (* result (car operand)))\n     \
    \           ((equal? (car operator) '//) (quotient result (car operand)))\n  \
    \              ((equal? (car operator) '**) (expt result (car operand))))))))\n",
  "  (let loop ((operator operator)\n             (operand operand)\n            \
    \ (result (car operand)))\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator)\n              (cdr operand)\n              (cond\n         \
    \       ((equal? (car operator) '+) (+ result (car operand)))\n              \
    \  ((equal? (car operator) '-) (- result (car operand)))\n                ((equal?\
    \ (car operator) '*) (* result (car operand)))\n                ((equal? (car\
    \ operator) '//) (quotient result (car operand)))\n                ((equal? (car\
    \ operator) '**) (expt result (car operand))))))))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (cond [(null? operator)\
    \ result]\n          [else (loop (cdr operator) (cdr operand)\n              \
    \        (case (car operator)\n                        [(+) (+ result (cadr operand))]\n\
    \                        [(-) (- result (cadr operand))]\n                   \
    \     [(*) (* result (cadr operand))]\n                        [(//) (quotient\
    \ result (cadr operand))]\n                        [(**) (expt result (cadr operand))]))])))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (if (empty? operator)\n        (car operand)\n      \
    \  (do_op (car operand) (do_algebra_helper (cdr operator) (cdr operand)) (car\
    \ operator))))\n  (do_algebra_helper operator operand))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator)\n              (cdr operand)\n \
    \             (match (car operator)\n                     ['+ (+ result (car operand))]\n\
    \                     ['* (* result (car operand))]\n                     ['-\
    \ (- result (car operand))]\n                     ['// (quotient result (car operand))]\n\
    \                     ['** (expt result (car operand))])))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((string=? (car operator) \"+\") (+ result\
    \ (car operand)))\n                             ((string=? (car operator) \"-\"\
    ) (- result (car operand)))\n                             ((string=? (car operator)\
    \ \"*\") (* result (car operand)))\n                             ((string=? (car\
    \ operator) \"//\") (quotient result (car operand)))\n                       \
    \      ((string=? (car operator) \"**\") (expt result (car operand)))))))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (let loop ([op operator] [opd operand]\
    \ [result (car opd)])\n    (if (null? op)\n        result\n        (loop (cdr\
    \ op) (cdr opd)\n              (cond\n                [(equal? (car op) '+) (+\
    \ result (car opd))]\n                [(equal? (car op) '-) (- result (car opd))]\n\
    \                [(equal? (car op) '*) (* result (car opd))]\n               \
    \ [(equal? (car op) '//) (quotient result (car opd))]\n                [(equal?\
    \ (car op) '**) (expt result (car opd))])))))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (let ([op (car operator)] [num (cadr operand)])\n         \
    \ (loop (cdr operator) (cdr operand)\n                (cond\n                \
    \ [(equal? op '+) (+ result num)]\n                 [(equal? op '-) (- result\
    \ num)]\n                 [(equal? op '*) (* result num)]\n                 [(equal?\
    \ op '//) (quotient result num)]\n                 [(equal? op '**) (expt result\
    \ num)]))))))\n", "  (cond\n    [(empty? operator) (first operand)]\n    [else\n\
    \     (cond\n       [(= (first operator) '+) (+ (first operand) (do_algebra (rest\
    \ operator) (rest operand)))]\n       [(= (first operator) '-) (- (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n       [(= (first operator) '*)\
    \ (* (first operand) (do_algebra (rest operator) (rest operand)))]\n       [(=\
    \ (first operator) '//) (quotient (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n       [(= (first operator) '**) (expt (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n       [else (error 'do_algebra \"Unknown\
    \ operator\")]\n       )\n     ]\n    )\n  )\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond\n \
    \               [(equal? (car operator) '+) (+ result (car operand))]\n      \
    \          [(equal? (car operator) '-) (- result (car operand))]\n           \
    \     [(equal? (car operator) '*) (* result (car operand))]\n                [(equal?\
    \ (car operator) '//) (quotient result (car operand))]\n                [(equal?\
    \ (car operator) '**) (expt result (car operand))])))))\n", "  (define (do_algebra_iter\
    \ operator operand acc)\n    (cond\n      [(empty? operator) (car operand)]\n\
    \      [(empty? operand) (car operand)]\n      [else\n       (do_algebra_iter\
    \ (cdr operator) (cdr operand)\n                        (cond\n              \
    \            [(equal? (car operator) '+) (+ (car operand) (car acc))]\n      \
    \                    [(equal? (car operator) '-) (- (car operand) (car acc))]\n\
    \                          [(equal? (car operator) '*) (* (car operand) (car acc))]\n\
    \                          [(equal? (car operator) '//) (quotient (car operand)\
    \ (car acc))]\n                          [(equal? (car operator) '**) (expt (car\
    \ operand) (car acc))]))]))\n  (do_algebra_iter operator operand (cdr operand)))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (match (car operator)\n                ['+ (+ result (car operand))]\n\
    \                ['* (* result (car operand))]\n                ['- (- result\
    \ (car operand))]\n                ['// (quotient result (car operand))]\n   \
    \             ['** (expt result (car operand))])))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (do_op op1 op2 op)\n    (cond ((eq? op\
    \ '+) (+ op1 op2))\n          ((eq? op '-) (- op1 op2))\n          ((eq? op '*)\
    \ (* op1 op2))\n          ((eq? op '//) (quotient op1 op2))\n          ((eq? op\
    \ '**) (expt op1 op2))))\n  (define (do_algebra_helper operator operand result)\n\
    \    (if (empty? operator)\n        result\n        (do_algebra_helper (rest operator)\
    \ (rest operand) (do_op result (first operand) (first operator)))))\n  (do_algebra_helper\
    \ operator operand (first operand)))\n", "  (define (do_op op1 op2 op)\n    (cond\
    \ ((eq? op '+) (+ op1 op2))\n          ((eq? op '-) (- op1 op2))\n          ((eq?\
    \ op '*) (* op1 op2))\n          ((eq? op '//) (quotient op1 op2))\n         \
    \ ((eq? op '**) (expt op1 op2))))\n  (define (do_algebra_helper operator operand\
    \ result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand) (do_op result (car operand) (car operator)))))\n\
    \  (do_algebra_helper operator operand (car operand)))\n", "  (define (do_algebra_iter\
    \ operator operand acc)\n    (if (null? operator)\n        acc\n        (do_algebra_iter\
    \ (cdr operator) (cdr operand) (eval `(,(car operator) ,acc ,(car operand))))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (case\
    \ (car operator)\n                [(+) (+ result (car operand))]\n           \
    \     [(-) (- result (car operand))]\n                [(*) (* result (car operand))]\n\
    \                [(//) (quotient result (car operand))]\n                [(**)\
    \ (expt result (car operand))])))))\n", "  (define (do_op op1 op2 op)\n    (cond\n\
    \      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq?\
    \ op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op\
    \ '**) (expt op1 op2)]))\n  (define (do_ops ops)\n    (cond\n      [(empty? ops)\
    \ (error \"empty list\")]\n      [(empty? (rest ops)) (first ops)]\n      [else\
    \ (do_op (first ops) (do_ops (rest ops)) (first operator))]))\n  (do_ops operand))\n",
  "  (let loop ([operator (reverse operator)]\n             [operand (reverse operand)])\n\
    \    (cond [(null? operator) (car operand)]\n          [(null? (cdr operand))\
    \ (car operand)]\n          [else (loop (cdr operator)\n                     \
    \ (cons (eval (list (car operator) (car operand) (cadr operand)))\n          \
    \                  (cddr operand)))])))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                           (cond\n           \
    \                  ((string=? (car operator) \"+\") (+ result (car operand)))\n\
    \                             ((string=? (car operator) \"-\") (- result (car\
    \ operand)))\n                             ((string=? (car operator) \"*\") (*\
    \ result (car operand)))\n                             ((string=? (car operator)\
    \ \"//\") (quotient result (car operand)))\n                             ((string=?\
    \ (car operator) \"**\") (expt result (car operand)))))))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (define (do_op op1 op2 op)\n    (cond\n\
    \      [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n    \
    \  [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n\
    \      [(equal? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (cond\n      [(empty? operator) (first operand)]\n      [(empty?\
    \ operand) (do_algebra_helper (rest operator) (rest operand))]\n      [else (do_algebra_helper\
    \ (rest operator) (cons (do_op (first operand) (first (rest operand)) (first operator))\
    \ (rest (rest operand))))]))\n  (do_algebra_helper operator operand))\n", "  (cond\n\
    \    [(empty? operator) (first operand)]\n    [else (do_algebra (rest operator)\
    \ (cons (eval (list (first operand) (first operator) (second operand))) (rest\
    \ (rest operand))))]))\n", "  (define (helper operator operand result)\n    (cond\n\
    \      [(null? operator) (car operand)]\n      [(= (length operator) 1) (helper\
    \ (cdr operator) (cdr operand) (list (car operand) (car operator) (cadr operand)))]\n\
    \      [else (helper (cdr operator) (cdr operand) (list (car operand) (car operator)\
    \ (helper (cdr operator) (cdr operand) (list (cadr operand) (cadr operator) (caddr\
    \ operand)))))]))\n  (helper operator operand '()))\n", "  (define (do_op op1\
    \ op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1\
    \ op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n\
    \      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (if (null? operator)\n        (car operand)\n        (do_op (car\
    \ operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_algebra_iter opers\
    \ operands)\n    (if (null? opers)\n        (car operands)\n        (do_algebra_iter\
    \ (cdr opers)\n                         (cons (eval (list (car opers) (car operands)\
    \ (car (cdr operands))))\n                               (cdr (cdr operands))))))\n\
    \  (do_algebra_iter operator operand))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (case (car operator)\n\
    \                [(+) (+ result (car operand))]\n                [(-) (- result\
    \ (car operand))]\n                [(*) (* result (car operand))]\n          \
    \      [(//) (quotient result (car operand))]\n                [(**) (expt result\
    \ (car operand))])))))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_helper (cdr operator)\
    \ (cdr operand)\n                           (cond\n                          \
    \   ((equal? (car operator) '+) (+ result (car operand)))\n                  \
    \           ((equal? (car operator) '-) (- result (car operand)))\n          \
    \                   ((equal? (car operator) '*) (* result (car operand)))\n  \
    \                           ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                             ((equal? (car operator) '**) (expt\
    \ result (car operand)))))))\n  (do_algebra_helper operator operand (car operand)))\n",
  "  (define (iter opers operands)\n    (if (null? opers)\n        (car operands)\n\
    \        (iter (cdr opers) (cons (eval (list (car opers) (car operands) (car (cdr\
    \ operands)))) (cdr (cdr operands))))))\n  (iter operator operand))\n", "  (if\
    \ (null? operator)\n      (car operand)\n      (let* ([op (car operator)]\n  \
    \           [op1 (car operand)]\n             [op2 (cadr operand)])\n        (cond\n\
    \         [(equal? op '+) (+ op1 op2)]\n         [(equal? op '-) (- op1 op2)]\n\
    \         [(equal? op '*) (* op1 op2)]\n         [(equal? op '// (quotient op1\
    \ op2))]\n         [(equal? op '** (expt op1 op2))]))))\n", "  (let loop ([op\
    \ operator] [opd operand] [result (car opd)])\n    (if (null? op)\n        result\n\
    \        (loop (cdr op) (cdr opd)\n              (cond\n                [(equal?\
    \ (car op) '+) (+ result (car opd))]\n                [(equal? (car op) '-) (-\
    \ result (car opd))]\n                [(equal? (car op) '*) (* result (car opd))]\n\
    \                [(equal? (car op) '//) (quotient result (car opd))]\n       \
    \         [(equal? (car op) '**) (expt result (car opd))])))))\n", "  (let loop\
    \ ([operator operator] [operand operand] [result (car operand)])\n    (if (null?\
    \ operator)\n        result\n        (loop (cdr operator) (cdr operand)\n    \
    \          (cond\n                ((equal? (car operator) '+) (+ result (car operand)))\n\
    \                ((equal? (car operator) '-) (- result (car operand)))\n     \
    \           ((equal? (car operator) '*) (* result (car operand)))\n          \
    \      ((equal? (car operator) '//) (quotient result (car operand)))\n       \
    \         ((equal? (car operator) '**) (expt result (car operand))))))))\n", " \
    \ (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n     \
    \                    (match (car operator)\n                           ['+ (car\
    \ operand) + (car (cdr operand))]\n                           ['* (car operand)\
    \ * (car (cdr operand))]\n                           ['- (car operand) - (car\
    \ (cdr operand))]\n                           ['// (car operand) // (car (cdr\
    \ operand))]\n                           ['** (car operand) ** (car (cdr operand))]))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (if (null? operator)\n\
    \      (car operand)\n      (let* ([op (car operator)]\n             [op1 (car\
    \ operand)]\n             [op2 (cadr operand)])\n        (cond\n         ((equal?\
    \ op '+) (+ op1 op2))\n         ((equal? op '-) (- op1 op2))\n         ((equal?\
    \ op '*) (* op1 op2))\n         ((equal? op '//) (quotient op1 op2))\n       \
    \  ((equal? op '**) (expt op1 op2))))))\n", "  (define (helper oprands ops)\n\
    \    (if (null? ops)\n        (car oprands)\n        (helper (list (eval (list\
    \ (car ops) (car oprands) (car (cdr oprands))))) (cdr ops))))\n  (helper operand\
    \ operator))\n", "  (let loop ([operator operator] [operand operand] [result (car\
    \ operand)])\n    (match operator\n      [(list) result]\n      [(list op rest\
    \ ...)\n       (loop rest (cdr operand)\n             (match op\n            \
    \   ['+ (+ result (cadr operand))]\n               ['* (* result (cadr operand))]\n\
    \               ['- (- result (cadr operand))]\n               ['// (quotient\
    \ result (cadr operand))]\n               ['** (expt result (cadr operand))]))])))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n \
    \     [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n     \
    \ [(equal? op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n\
    \  (define (do_algebra_helper operator operand)\n    (if (empty? operator)\n \
    \       (car operand)\n        (do_op (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)) (car operator))))\n  (do_algebra_helper operator operand))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (cond\n                [(equal? (car operator) '+) (+ result (car\
    \ operand))]\n                [(equal? (car operator) '-) (- result (car operand))]\n\
    \                [(equal? (car operator) '*) (* result (car operand))]\n     \
    \           [(equal? (car operator) '//) (quotient result (car operand))]\n  \
    \              [(equal? (car operator) '**) (expt result (car operand))])))))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (let ([op (car operator)] [op1\
    \ (car operand)] [op2 (cadr operand)])\n          (loop (cdr operator) (cdr operand)\n\
    \                (cond\n                 [(equal? op '+) (+ result op2)]\n   \
    \              [(equal? op '-) (- result op2)]\n                 [(equal? op '*)\
    \ (* result op2)]\n                 [(equal? op '//) (quotient result op2)]\n\
    \                 [(equal? op '**) (expt result op2)]))))))\n", "  (define (do_algebra_iter\
    \ oprnd oprtr)\n    (if (null? oprtr)\n        (car oprnd)\n        (do_algebra_iter\
    \ (cons (eval (list (car oprtr) (car oprnd) (cadr oprnd))) (cddr oprnd)) (cdr\
    \ oprtr))))\n  (do_algebra_iter operand operator))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (match\
    \ (car operator)\n                ['+ (+ result (car operand))]\n            \
    \    ['* (* result (car operand))]\n                ['- (- result (car operand))]\n\
    \                ['// (quotient result (car operand))]\n                ['** (expt\
    \ result (car operand))])))))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (cond [(equal? (car operator) '+)\
    \ (+ result (car operand))]\n                    [(equal? (car operator) '-) (-\
    \ result (car operand))]\n                    [(equal? (car operator) '*) (* result\
    \ (car operand))]\n                    [(equal? (car operator) '//) (quotient\
    \ result (car operand))]\n                    [(equal? (car operator) '**) (expt\
    \ result (car operand))])))))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (cond\n                [(equal?\
    \ (car operator) '+) (+ result (car operand))]\n                [(equal? (car\
    \ operator) '-) (- result (car operand))]\n                [(equal? (car operator)\
    \ '*) (* result (car operand))]\n                [(equal? (car operator) '//)\
    \ (quotient result (car operand))]\n                [(equal? (car operator) '**)\
    \ (expt result (car operand))])))))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (case (car operator)\n\
    \                [(+) (+ result (car operand))]\n                [(-) (- result\
    \ (car operand))]\n                [(*) (* result (car operand))]\n          \
    \      [(//) (quotient result (car operand))]\n                [(**) (expt result\
    \ (car operand))])))))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_helper (cdr operator)\
    \ (cdr operand)\n                           (case (car operator)\n           \
    \                  ((+) (+ result (car operand)))\n                          \
    \   ((-) (- result (car operand)))\n                             ((*) (* result\
    \ (car operand)))\n                             ((//) (quotient result (car operand)))\n\
    \                             ((**) (expt result (car operand)))))))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (match (car operator)\n\
    \                ['+ (+ result (car operand))]\n                ['* (* result\
    \ (car operand))]\n                ['- (- result (car operand))]\n           \
    \     ['// (quotient result (car operand))]\n                ['** (expt result\
    \ (car operand))])))))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_helper (cdr operator)\
    \ (cdr operand)\n                           (cond\n                          \
    \   ((equal? (car operator) '+) (+ result (car operand)))\n                  \
    \           ((equal? (car operator) '-) (- result (car operand)))\n          \
    \                   ((equal? (car operator) '*) (* result (car operand)))\n  \
    \                           ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                             ((equal? (car operator) '**) (expt\
    \ result (car operand)))))))\n  (do_algebra_helper operator operand (car operand)))\n",
  "  (if (null? operator)\n      (car operand)\n      (let ([op (car operator)]\n\
    \            [op1 (car operand)]\n            [op2 (cadr operand)])\n        (cond\n\
    \         [(equal? op '+) (+ op1 op2)]\n         [(equal? op '-) (- op1 op2)]\n\
    \         [(equal? op '*) (* op1 op2)]\n         [(equal? op '// (quotient op1\
    \ op2))]\n         [(equal? op '** (expt op1 op2))]))))\n", "  (let loop ([operator\
    \ (reverse operator)] [operand (reverse operand)])\n    (if (null? operator)\n\
    \        (car operand)\n        (loop (cdr operator) (cons (eval (list (car operator)\
    \ (car operand) (car (cdr operand)))) (cdr (cdr operand)))))))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (if (null? operator)\n    \
    \    result\n        (do_algebra_helper (cdr operator) (cdr operand)\n       \
    \                    (match (car operator)\n                                 \
    \ [('+ (car operand) result)]\n                                  [('- (car operand)\
    \ result)]\n                                  [('* (car operand) result)]\n  \
    \                                [('// (car operand) result)]\n              \
    \                    [('** (car operand) result)]))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (match (car operator)\n        \
    \        ['+ (+ result (car operand))]\n                ['* (* result (car operand))]\n\
    \                ['- (- result (car operand))]\n                ['// (quotient\
    \ result (car operand))]\n                ['** (expt result (car operand))])))))\n",
  "  (let loop ([operator operator] [operand operand] [acc (car operand)])\n    (if\
    \ (null? operator)\n        acc\n        (loop (cdr operator) (cdr operand)\n\
    \              (case (car operator)\n                [(+) (+ acc (car operand))]\n\
    \                [(-) (- acc (car operand))]\n                [(*) (* acc (car\
    \ operand))]\n                [(//) (quotient acc (car operand))]\n          \
    \      [(**) (expt acc (car operand))])))))\n", "  (define (do_algebra_iter operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_iter\
    \ (cdr operator) (cdr operand)\n                         (cond\n             \
    \              ((equal? (car operator) '+) (+ result (car operand)))\n       \
    \                    ((equal? (car operator) '-) (- result (car operand)))\n \
    \                          ((equal? (car operator) '*) (* result (car operand)))\n\
    \                           ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                           ((equal? (car operator) '**) (expt result\
    \ (car operand)))))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (cond\n    [(empty? operator) (first operand)]\n    [else (do_algebra (rest operator)\
    \ (cons (eval (list (first operand) (first operator) (second operand))) (rest\
    \ (rest operand))))]))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (match (car operator)\n        \
    \        ['+ (+ result (car operand))]\n                ['* (* result (car operand))]\n\
    \                ['- (- result (car operand))]\n                ['// (quotient\
    \ result (car operand))]\n                ['** (expt result (car operand))])))))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (if (null? operator)\n        (car operand)\n       \
    \ (do_op (car operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (cond [(null? operator) result]\n\
    \          [else (loop (cdr operator) (cdr operand)\n                      (match\
    \ (car operator)\n                             [('+ ) (+ result (car operand))]\n\
    \                             [('- ) (- result (car operand))]\n             \
    \                [('* ) (* result (car operand))]\n                          \
    \   [('// ) (quotient result (car operand))]\n                             [('**\
    \ ) (expt result (car operand))]))])))\n", "  (cond\n    [(empty? operator) (first\
    \ operand)]\n    [else\n     (cond\n       [(equal? (first operator) '+)\n   \
    \     (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n     \
    \  [(equal? (first operator) '-)\n        (- (first operand) (do_algebra (rest\
    \ operator) (rest operand)))]\n       [(equal? (first operator) '*)\n        (*\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n       [(equal?\
    \ (first operator) '//)\n        (quotient (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n       [(equal? (first operator) '**)\n        (expt (first\
    \ operand) (do_algebra (rest operator) (rest operand)))]\n       [else (first\
    \ operand)])])\n  )\n", "  (define (do_op op1 op2 op)\n    (cond ((equal? op '+)\
    \ (+ op1 op2))\n          ((equal? op '-) (- op1 op2))\n          ((equal? op\
    \ '*) (* op1 op2))\n          ((equal? op '//) (quotient op1 op2))\n         \
    \ ((equal? op '**) (expt op1 op2))))\n  (define (do_algebra_helper operator operand)\n\
    \    (if (null? operator)\n        (car operand)\n        (do_op (car operand)\
    \ (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n  (do_algebra_helper\
    \ operator operand))\n", "  (let loop ([operator operator] [operand operand] [result\
    \ (car operand)])\n    (if (null? operator)\n        result\n        (loop (cdr\
    \ operator) (cdr operand)\n              (cond [(equal? (car operator) '+) (+\
    \ result (car operand))]\n                    [(equal? (car operator) '-) (- result\
    \ (car operand))]\n                    [(equal? (car operator) '*) (* result (car\
    \ operand))]\n                    [(equal? (car operator) '//) (quotient result\
    \ (car operand))]\n                    [(equal? (car operator) '**) (expt result\
    \ (car operand))])))))\n", "  (let ([op (car operator)]\n        [op1 (car operand)]\n\
    \        [op2 (cadr operand)])\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n \
    \     [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq?\
    \ op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)])))\n", "  (let\
    \ ([op (car operator)]\n        [op1 (car operand)]\n        [op2 (cadr operand)])\n\
    \    (cond [(equal? op '+) (+ op1 op2)]\n          [(equal? op '-) (- op1 op2)]\n\
    \          [(equal? op '*) (* op1 op2)]\n          [(equal? op '//) (quotient\
    \ op1 op2)]\n          [(equal? op '**) (expt op1 op2)])))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_ops ops)\n \
    \   (cond\n      [(empty? ops) 0]\n      [(empty? (rest ops)) (first ops)]\n \
    \     [else (do_op (first ops) (do_ops (rest ops)) (first operator))]))\n  (do_ops\
    \ operand))\n", "  (define (do_algebra_iter operator operand acc)\n    (cond\n\
    \      [(null? operator) (car operand)]\n      [(eq? (car operator) '+) (do_algebra_iter\
    \ (cdr operator) (cdr operand) (+ acc (car operand)))]\n      [(eq? (car operator)\
    \ '-) (do_algebra_iter (cdr operator) (cdr operand) (- acc (car operand)))]\n\
    \      [(eq? (car operator) '*) (do_algebra_iter (cdr operator) (cdr operand)\
    \ (* acc (car operand)))]\n      [(eq? (car operator) '//) (do_algebra_iter (cdr\
    \ operator) (cdr operand) (quotient acc (car operand)))]\n      [(eq? (car operator)\
    \ '**) (do_algebra_iter (cdr operator) (cdr operand) (expt acc (car operand)))]))\n\
    \  (do_algebra_iter operator operand 0))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond\n \
    \               [(equal? (car operator) '+) (+ result (car operand))]\n      \
    \          [(equal? (car operator) '-) (- result (car operand))]\n           \
    \     [(equal? (car operator) '*) (* result (car operand))]\n                [(equal?\
    \ (car operator) '//) (quotient result (car operand))]\n                [(equal?\
    \ (car operator) '**) (expt result (car operand))])))))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_op_list op_list\
    \ op_list2)\n    (cond\n      [(empty? op_list) op_list2]\n      [(empty? op_list2)\
    \ (do_op_list (rest op_list) (list (first op_list)))]\n      [else (do_op_list\
    \ (rest op_list) (list (do_op (first op_list2) (first op_list) (first op_list2))))]))\n\
    \  (first (do_op_list operator operand)))\n", "  (define (do_op op1 op2 op)\n\
    \    (cond ((equal? op '+) (+ op1 op2))\n          ((equal? op '-) (- op1 op2))\n\
    \          ((equal? op '*) (* op1 op2))\n          ((equal? op '//) (quotient\
    \ op1 op2))\n          ((equal? op '**) (expt op1 op2))))\n  (define (do_algebra_helper\
    \ operator operand)\n    (if (null? operator)\n        (car operand)\n       \
    \ (do_op (car operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
