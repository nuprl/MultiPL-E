language: rkt
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c)\n                                  (char-downcase\
    \ c)\n                                  (char-upcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpku0yybch.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpku0yybch.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string (char-upcase (string-ref s 0)))\n       \
    \             (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append (string (char-downcase (string-ref s 0)))\n             \
    \       (solve (substring s 1)))]\n    [else (string-append (string (string-ref\
    \ s 0))\n                         (solve (substring s 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:37:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:38:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:39:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (reverse-case s)\n\
    \      (reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcc_i7n03.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpcc_i7n03.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdwc2u9s.rkt:27:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdwc2u9s.rkt:28:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdwc2u9s.rkt:29:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdwc2u9s.rkt:30:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdwc2u9s.rkt:31:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdwc2u9s.rkt:32:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdwc2u9s.rkt:33:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjdwc2u9s.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpys91tubf.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpys91tubf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (reverse-case s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphdo589xx.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmphdo589xx.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (cond\n         [(char-alphabetic? c)\n          (string-append\
    \ (string (char-upcase c)) (solve (substring s 1)))]\n         [else\n       \
    \   (string-append (string (char-downcase c)) (solve (substring s 1)))]))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvq72zuce.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpvq72zuce.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string-ref s 0))\n              \
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append (string-ref s 0)\n                    (solve (substring s 1)))]\n\
    \    [else\n     (string-append (string-downcase (string-ref s 0))\n         \
    \           (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:33:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv_5sxxwk.rkt:35:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:36:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:38:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:39:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:40:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-any? s (string->list \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ))\n      (string-join (map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) (string->list s)))\n      (string-reverse s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpehgxings.rkt:16:7: string-contains-any?: unbound identifier\n \
    \ in: string-contains-any?\n  location...:\n   /tmp/tmpehgxings.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) '()]\n    [(char-alphabetic? (car\
    \ s))\n     (cons (char-upcase (car s)) (solve (cdr s)))]\n    [(char-numeric?\
    \ (car s))\n     (cons (car s) (solve (cdr s)))]\n    [else\n     (cons (char-downcase\
    \ (car s)) (solve (cdr s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else (string-append (string (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj9abxw5o.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj9abxw5o.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj9abxw5o.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj9abxw5o.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj9abxw5o.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj9abxw5o.rkt:38:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj9abxw5o.rkt:39:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj9abxw5o.rkt:40:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) s]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string (char-upcase (string-ref s 0)))\n       \
    \             (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append (string (char-downcase (string-ref s 0)))\n             \
    \       (solve (substring s 1)))]\n    [else (string-append (string (string-ref\
    \ s 0))\n                         (solve (substring s 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8b6zh7y.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp8b6zh7y.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8b6zh7y.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8b6zh7y.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp8b6zh7y.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8b6zh7y.rkt:37:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8b6zh7y.rkt:38:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp8b6zh7y.rkt:39:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) s]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append (first s) (solve (rest s)))]\n    [else\n  \
    \   (string-append (string-downcase (first s)) (solve (rest s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mtyw1sd.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1mtyw1sd.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mtyw1sd.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1mtyw1sd.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mtyw1sd.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1mtyw1sd.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1mtyw1sd.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1mtyw1sd.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append (first s) (solve (rest s)))]\n    [else\n  \
    \   (string-append (string-downcase (first s)) (solve (rest s)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwgxvv0_0.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwgxvv0_0.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwgxvv0_0.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwgxvv0_0.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwgxvv0_0.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwgxvv0_0.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwgxvv0_0.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwgxvv0_0.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_0mmpuaf.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp_0mmpuaf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string (string-ref s 0)))\n      \
    \                       (string-downcase (string (string-ref s 0))))\n       \
    \                  (string (string-ref s 0))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpffikmhz8.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpffikmhz8.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-only-digits? s)\n      (reverse s)\n\
    \      (reverse-case s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjbipmvc0.rkt:16:7: string-contains-only-digits?: unbound identifier\n\
    \  in: string-contains-only-digits?\n  location...:\n   /tmp/tmpjbipmvc0.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c) (char-downcase c) (char-upcase c))) s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0ii8d7nf.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp0ii8d7nf.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0up54hbn.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp0up54hbn.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (string-append\n         (if (char-alphabetic? c)\n        \
    \     (string-upcase (string c))\n             (string-downcase (string c)))\n\
    \         (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpblq0ke_t.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpblq0ke_t.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpys91tubf.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpys91tubf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (string-append (if (char-alphabetic? c)\n                  \
    \         (string-downcase (string-upcase (string c)))\n                     \
    \      (string c))\n                        (solve (substring s 1))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcwjs3sdq.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpcwjs3sdq.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) empty]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append (string (char-upcase (first s))) (solve (rest s)))]\n\
    \    [(char-numeric? (first s))\n     (string-append (string (first s)) (solve\
    \ (rest s)))]\n    [else\n     (string-append (string (char-downcase (first s)))\
    \ (solve (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (string-append (if (char-alphabetic? c)\n                  \
    \         (string-upcase (string c))\n                           (string-downcase\
    \ (string c)))\n                       (solve (substring s 1))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7ojg56bu.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp7ojg56bu.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map\n    \
    \   (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n           (char-downcase c)))\n       s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt_0v6xir.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt_0v6xir.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map\n \
    \      (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n           (char-downcase c)))\n       s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjru9vmt.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpnjru9vmt.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3967gwxv.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmp3967gwxv.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else (string-append\n           (string (string-ref\
    \ s 0))\n           (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq77bfu_a.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:37:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:38:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq77bfu_a.rkt:39:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:40:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:41:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq77bfu_a.rkt:42:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) '()]\n    [(char-alphabetic? (first\
    \ s))\n     (cons (char-upcase (first s)) (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (cons (first s) (solve (rest s)))]\n    [else (cons (char-downcase\
    \ (first s)) (solve (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vwx0v7v.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2vwx0v7v.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vwx0v7v.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2vwx0v7v.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vwx0v7v.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2vwx0v7v.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vwx0v7v.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2vwx0v7v.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) s]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple5xqn0a.rkt:29:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple5xqn0a.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmple5xqn0a.rkt:31:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmple5xqn0a.rkt:32:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple5xqn0a.rkt:33:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple5xqn0a.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple5xqn0a.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple5xqn0a.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8itxrzfz.rkt:16:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmp8itxrzfz.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n```\n\n### [Reverse the order of words in a\
    \ string](https://www.codewars.com/kata/reverse-the-order-of-words-in-a-string)\n\
    \n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpf1skrt6p.rkt:24:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      s\n      (string-append (solve\
    \ (substring s 1))\n                     (if (char-alphabetic? (string-ref s 0))\n\
    \                         (if (char-lower-case? (string-ref s 0))\n          \
    \                   (string-upcase (string (string-ref s 0)))\n              \
    \               (string-downcase (string (string-ref s 0))))\n               \
    \          (string (string-ref s 0))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpco5w3x9z.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpco5w3x9z.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      s\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3ac8ovjx.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp3ac8ovjx.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (string-upcase (string-ref s 0))\n         \
    \                (string-downcase (string-ref s 0))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiydf39dm.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpiydf39dm.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-upcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaauquxo6.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpaauquxo6.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:38:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:39:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:40:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:41:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:42:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:43:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-only-digits? s)\n      (reverse s)\n\
    \      (reverse-case s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjbipmvc0.rkt:16:7: string-contains-only-digits?: unbound identifier\n\
    \  in: string-contains-only-digits?\n  location...:\n   /tmp/tmpjbipmvc0.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map\n \
    \      (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n           (char-downcase c)))\n       s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjru9vmt.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpnjru9vmt.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (char->string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (char->string (string-ref s 0))\n      (solve (substring\
    \ s 1)))]\n    [else\n     (string-append\n      (char->string (char-downcase\
    \ (string-ref s 0)))\n      (solve (substring s 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_pj7rdjk.rkt:20:7: char->string: unbound identifier\n  in: char->string\n\
    \  location...:\n   /tmp/tmp_pj7rdjk.rkt:20:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (string-append\n         (if (char-alphabetic? c)\n        \
    \     (string-upcase (string c))\n             (string-downcase (string c)))\n\
    \         (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpblq0ke_t.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpblq0ke_t.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a #\\z)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-downcase c) (char-upcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6hylwxif.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6hylwxif.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-downcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgdcuwcy.rkt:30:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgdcuwcy.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmgdcuwcy.rkt:32:4\n\nstring-downcase: contract violation\n\
    \  expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgdcuwcy.rkt:33:4\n\nstring-upcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgdcuwcy.rkt:34:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgdcuwcy.rkt:35:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgdcuwcy.rkt:36:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmgdcuwcy.rkt:37:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz753axxo.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpz753axxo.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (\u03BB\
    \ (c) (if (char-alphabetic? c)\n                             (char-downcase c)\n\
    \                             (char-upcase c))) s)\n      (string-reverse s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5u8gy545.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp5u8gy545.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_0mmpuaf.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp_0mmpuaf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append\n      (char-upcase (first s))\n      (solve (rest\
    \ s)))]\n    [(char-numeric? (first s))\n     (string-append\n      (first s)\n\
    \      (solve (rest s)))]\n    [else\n     (string-append\n      (char-downcase\
    \ (first s))\n      (solve (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy6gi5dky.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy6gi5dky.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy6gi5dky.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy6gi5dky.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy6gi5dky.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy6gi5dky.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy6gi5dky.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy6gi5dky.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string-ref s 0))\n              \
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append (string-ref s 0)\n                    (solve (substring s 1)))]\n\
    \    [else\n     (string-append (string-downcase (string-ref s 0))\n         \
    \           (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:33:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv_5sxxwk.rkt:35:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:36:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:38:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:39:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_5sxxwk.rkt:40:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-append (string-upcase (string-ref s 0))\n\
    \                                   (string-downcase (substring s 1)))\n     \
    \               (solve (substring s 1)))]\n    [else (string-append (string-append\
    \ (string-ref s 0)\n                                        (string-upcase (substring\
    \ s 1)))\n                         (solve (substring s 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ajvyi6_.rkt:31:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ajvyi6_.rkt:32:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: #\\1\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ajvyi6_.rkt:33:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ajvyi6_.rkt:34:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ajvyi6_.rkt:35:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ajvyi6_.rkt:36:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ajvyi6_.rkt:37:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ajvyi6_.rkt:38:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-downcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-upcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else (string-append (string (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8u1oi8gj.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8u1oi8gj.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:38:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:39:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8u1oi8gj.rkt:40:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (\u03BB\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph86yl7z6.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmph86yl7z6.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_0mmpuaf.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp_0mmpuaf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu2m1j7_d.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpu2m1j7_d.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map\n \
    \      (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n           (char-downcase c)))\n       s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjru9vmt.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpnjru9vmt.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) empty]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append (string (char-upcase (first s))) (solve (rest s)))]\n\
    \    [(char-numeric? (first s))\n     (string-append (string (first s)) (solve\
    \ (rest s)))]\n    [else\n     (string-append (string (char-downcase (first s)))\
    \ (solve (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkuh66xgg.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpkuh66xgg.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string-ref s 0))\n               \
    \              (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnvg2qfiw.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpnvg2qfiw.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string-ref s 0))\n               \
    \              (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnvg2qfiw.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpnvg2qfiw.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:38:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:39:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:40:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:41:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:42:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:43:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0up54hbn.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp0up54hbn.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map\n    \
    \   (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n           (char-downcase c)))\n       s)\n      (string-reverse s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt_0v6xir.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt_0v6xir.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string (char-upcase (string-ref s 0)))\n       \
    \             (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append (string (char-downcase (string-ref s 0)))\n             \
    \       (solve (substring s 1)))]\n    [else (string-append (string (string-ref\
    \ s 0))\n                         (solve (substring s 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:37:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:38:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:39:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-append\n       (string (char-downcase\
    \ (string-ref s 0)))\n       (string (char-upcase (string-ref s 0))))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdw87e2qv.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdw87e2qv.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdw87e2qv.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdw87e2qv.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdw87e2qv.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdw87e2qv.rkt:39:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdw87e2qv.rkt:40:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdw87e2qv.rkt:41:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(string=? s \"\") \"\"]\n    [(string-contains?\
    \ s (regexp \"[a-zA-Z]\"))\n     (string-join\n      (map\n       (lambda (c)\n\
    \         (if (char-alphabetic? c)\n             (char-upcase c)\n           \
    \  (char-downcase c)))\n       (string->list s))\n      \"\")]\n    [else (string-reverse\
    \ s)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb7jqtwt3.rkt:27:11: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpb7jqtwt3.rkt:27:11\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      s\n      (string-append\n\
    \       (if (char-alphabetic? (string-ref s 0))\n           (if (char-lower-case?\
    \ (string-ref s 0))\n               (string-upcase (string (string-ref s 0)))\n\
    \               (string-downcase (string (string-ref s 0))))\n           (string\
    \ (string-ref s 0)))\n       (solve (substring s 1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpld6163cf.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpld6163cf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string-ref s 0))\n               \
    \              (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnvg2qfiw.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpnvg2qfiw.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_0mmpuaf.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp_0mmpuaf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkuh66xgg.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpkuh66xgg.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s \"a\")\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                      (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4priv3k8.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp4priv3k8.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (string-append (if (char-alphabetic?\
    \ (string-ref s 0))\n                                        (string-upcase (string-ref\
    \ s 0))\n                                        (string-downcase (string-ref\
    \ s 0)))\n                                    \"\"))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi_c1hh63.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpi_c1hh63.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-upcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaauquxo6.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpaauquxo6.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpys91tubf.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpys91tubf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (cond\n         [(char-alphabetic? c)\n          (string-append\
    \ (string (char-upcase c)) (solve (substring s 1)))]\n         [else\n       \
    \   (string-append (string (char-downcase c)) (solve (substring s 1)))]))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvq72zuce.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpvq72zuce.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append (string (sub1 (char->integer (first s)))) (solve\
    \ (rest s)))]\n    [else\n     (string-append (string (add1 (char->integer (first\
    \ s)))) (solve (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp92uohivy.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp92uohivy.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp92uohivy.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp92uohivy.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp92uohivy.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp92uohivy.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp92uohivy.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp92uohivy.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-downcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjejis_r9.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpjejis_r9.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\n\
    \       (if (char-alphabetic? (string-ref s 0))\n           (if (char-lower-case?\
    \ (string-ref s 0))\n               (string-upcase (string (string-ref s 0)))\n\
    \               (string-downcase (string (string-ref s 0))))\n           (string\
    \ (string-ref s 0)))\n       (solve (substring s 1)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0ruud0s5.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp0ruud0s5.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c) (char-downcase c) (char-upcase c))) s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0ii8d7nf.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp0ii8d7nf.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpglr7ylq9.rkt:30:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpglr7ylq9.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpglr7ylq9.rkt:32:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpglr7ylq9.rkt:33:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpglr7ylq9.rkt:34:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpglr7ylq9.rkt:35:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpglr7ylq9.rkt:36:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpglr7ylq9.rkt:37:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s (regexp \"[a-zA-Z]\"))\n   \
    \   (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n  \
    \                      (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprp2hioa8.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmprp2hioa8.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\n\
    \       (if (char-alphabetic? (string-ref s 0))\n           (string-upcase (string-ref\
    \ s 0))\n           (string-downcase (string-ref s 0)))\n       (solve (substring\
    \ s 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwprzk39i.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpwprzk39i.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      s\n      (let ([c (string-ref\
    \ s 0)])\n        (cond\n         [(char-alphabetic? c)\n          (string-append\
    \ (string (char-upcase c)) (solve (substring s 1)))]\n         [(char-numeric?\
    \ c)\n          (string-append (string (char-downcase c)) (solve (substring s\
    \ 1)))]\n         [else\n          (string-append (string c) (solve (substring\
    \ s 1)))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpden0v5lp.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpden0v5lp.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-upcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaauquxo6.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpaauquxo6.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string-ref s 0))\n               \
    \              (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnvg2qfiw.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpnvg2qfiw.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-pred s char-alphabetic?)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvc79g9dq.rkt:16:7: string-contains-pred: unbound identifier\n \
    \ in: string-contains-pred\n  location...:\n   /tmp/tmpvc79g9dq.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_0mmpuaf.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp_0mmpuaf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string (string-ref s 0)))\n      \
    \                       (string-downcase (string (string-ref s 0))))\n       \
    \                  (string (string-ref s 0))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpffikmhz8.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpffikmhz8.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-downcase c) (char-upcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjkpyxwr_.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjkpyxwr_.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-downcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-upcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else (string-append (string (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8u1oi8gj.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8u1oi8gj.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:38:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:39:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8u1oi8gj.rkt:40:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_0mmpuaf.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp_0mmpuaf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n</code>\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6egnep7e.rkt:30:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmp6egnep7e.rkt:30:0\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s \"a\")\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                      (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4priv3k8.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp4priv3k8.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-upcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq7rxg3z.rkt:28:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmq7rxg3z.rkt:29:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq7rxg3z.rkt:30:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq7rxg3z.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmq7rxg3z.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq7rxg3z.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq7rxg3z.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmq7rxg3z.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string-ref s 0))\n               \
    \              (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnvg2qfiw.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpnvg2qfiw.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu2m1j7_d.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpu2m1j7_d.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpys91tubf.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpys91tubf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpszcj7orr.rkt:16:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpszcj7orr.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append\n      (if (char-lower-case? (first s))\n         \
    \ (string-upcase (first s))\n          (string-downcase (first s)))\n      (solve\
    \ (rest s)))]\n    [else\n     (string-append (first s) (solve (rest s)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm21ck__r.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm21ck__r.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm21ck__r.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm21ck__r.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm21ck__r.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm21ck__r.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm21ck__r.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm21ck__r.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfhvb4dyc.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpfhvb4dyc.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) empty]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append (string (char-upcase (first s))) (solve (rest s)))]\n\
    \    [(char-numeric? (first s))\n     (string-append (string (first s)) (solve\
    \ (rest s)))]\n    [else (string-append (string (char-downcase (first s))) (solve\
    \ (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps_erbqfk.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps_erbqfk.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps_erbqfk.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps_erbqfk.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps_erbqfk.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps_erbqfk.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps_erbqfk.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps_erbqfk.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpys91tubf.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpys91tubf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (reverse-case s)\n\
    \      (reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcc_i7n03.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpcc_i7n03.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz753axxo.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpz753axxo.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-downcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-upcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else (string-append (string (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8u1oi8gj.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8u1oi8gj.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:38:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8u1oi8gj.rkt:39:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8u1oi8gj.rkt:40:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else (string-append\n           (string (string-ref\
    \ s 0))\n           (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal? (candidate\
    \ \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal?\
    \ (candidate \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\"\
    )\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal?\
    \ (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\"\
    )\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq77bfu_a.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:37:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:38:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq77bfu_a.rkt:39:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:40:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq77bfu_a.rkt:41:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq77bfu_a.rkt:42:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (sub1 (string-ref s 0)))\n      (solve (substring\
    \ s 1)))]\n    [else (string-append\n           (string (string-ref s 0))\n  \
    \         (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4t40bvl.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph4t40bvl.rkt:36:4\n\nsub1: contract violation\n  expected:\
    \ number?\n  given: #\\1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmph4t40bvl.rkt:37:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4t40bvl.rkt:38:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph4t40bvl.rkt:39:4\n\nsub1: contract violation\n  expected:\
    \ number?\n  given: #\\4\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmph4t40bvl.rkt:40:4\n\nsub1: contract\
    \ violation\n  expected: number?\n  given: #\\6\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph4t40bvl.rkt:41:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4t40bvl.rkt:42:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (if\
    \ (char-lower-case? c)\n                            (char-upcase c)\n        \
    \                    (char-downcase c))\n                        c))\n       \
    \           s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw86z6xge.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpw86z6xge.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfhvb4dyc.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpfhvb4dyc.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond [(empty? s) \"\"]\n        [(char-alphabetic? (string-ref\
    \ s 0))\n         (string-append (string (char-downcase (string-ref s 0)))\n \
    \                       (solve (substring s 1)))]\n        [(char-numeric? (string-ref\
    \ s 0))\n         (string-append (string (char-upcase (string-ref s 0)))\n   \
    \                     (solve (substring s 1)))]\n        [else (string-append\
    \ (string (string-ref s 0))\n                             (solve (substring s\
    \ 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9eu2ycn.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt9eu2ycn.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9eu2ycn.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9eu2ycn.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt9eu2ycn.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9eu2ycn.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9eu2ycn.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt9eu2ycn.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (string-append\
    \ (solve (substring s 1))\n                     (if (char-alphabetic? (string-ref\
    \ s 0))\n                         (if (char-lower-case? (string-ref s 0))\n  \
    \                           (string-upcase (string-ref s 0))\n               \
    \              (string-downcase (string-ref s 0)))\n                         (string-ref\
    \ s 0)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnvg2qfiw.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpnvg2qfiw.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) '()]\n    [(char-alphabetic? (car\
    \ s))\n     (cons (char-upcase (car s)) (solve (cdr s)))]\n    [(char-numeric?\
    \ (car s))\n     (cons (car s) (solve (cdr s)))]\n    [else\n     (cons (char-downcase\
    \ (car s)) (solve (cdr s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz753axxo.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpz753axxo.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdv2g3hmr.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpdv2g3hmr.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-upcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaauquxo6.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpaauquxo6.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      s\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-upcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpawzd7rx9.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpawzd7rx9.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkuh66xgg.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpkuh66xgg.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-downcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-upcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjavyje_m.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpjavyje_m.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-upcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaauquxo6.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpaauquxo6.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpys91tubf.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpys91tubf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (x)\n                    (if (char-alphabetic? x)\n                        (char-upcase\
    \ x)\n                        (char-downcase x)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc5mbmf76.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpc5mbmf76.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (x)\n                    (if (char-alphabetic? x)\n                        (char-upcase\
    \ x)\n                      (char-downcase x)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpycooz4b3.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpycooz4b3.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (if\
    \ (char-lower-case? c)\n                            (char-upcase c)\n        \
    \                    (char-downcase c))\n                        c))\n       \
    \           s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpndmbij28.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpndmbij28.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string (char-upcase (string-ref s 0)))\n       \
    \             (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append (string (char-downcase (string-ref s 0)))\n             \
    \       (solve (substring s 1)))]\n    [else (string-append (string (string-ref\
    \ s 0))\n                         (solve (substring s 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:37:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:38:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:39:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5j1f44z7.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp5j1f44z7.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (char-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else (string-append (char-downcase (string-ref\
    \ s 0)) (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a8x2ld0.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_a8x2ld0.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a8x2ld0.rkt:31:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a8x2ld0.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_a8x2ld0.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a8x2ld0.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_a8x2ld0.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_a8x2ld0.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (reverse-case s)\n\
    \      (reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcc_i7n03.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmpcc_i7n03.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_0mmpuaf.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp_0mmpuaf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-downcase c) (char-upcase c))) s)\n      (string-reverse\
    \ s)))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbd0diiz_.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpbd0diiz_.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n   \
    \ (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"\
    ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn_n7gte2.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpn_n7gte2.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) empty]\n    [(char-alphabetic? (first\
    \ s))\n     (string-append (string (char-upcase (first s))) (solve (rest s)))]\n\
    \    [(char-numeric? (first s))\n     (string-append (string (first s)) (solve\
    \ (rest s)))]\n    [else\n     (string-append (string (char-downcase (first s)))\
    \ (solve (rest s)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"AsDf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"1234\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"ab\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#a@C\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#AsdfW^45\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#6@2\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1fv9io_.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"#$a^D\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1fv9io_.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:38:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:39:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:40:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:41:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:42:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:43:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-any? s (regexp \"[a-zA-Z]\"))\n  \
    \    (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n \
    \                       (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4y936pb8.rkt:16:7: string-contains-any?: unbound identifier\n \
    \ in: string-contains-any?\n  location...:\n   /tmp/tmp4y936pb8.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-downcase c) (char-upcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjkpyxwr_.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjkpyxwr_.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039433
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-append\n       (string-append\n  \
    \      (string-append\n         (string-append\n          (string-append\n   \
    \        (string-append\n            (string-append\n             (string-append\n\
    \              (string-append\n               (string-append\n               \
    \ (string-append\n                 (string-append\n                  (string-append\n\
    \                   (string-append\n                    (string-append\n     \
    \                (string-append\n                      (string-append\n      \
    \                 (string-append\n                        (string-append\n   \
    \                      (string-append\n                          (string-append\n\
    \                           (string-append\n                            (string-append\n\
    \                             (string-append\n                              (string-append\n\
    \                               (string-append\n                             \
    \   (string-append\n                                 (string-append\n        \
    \                          (string-append\n                                  \
    \ (string-append\n                                    (string-append\n       \
    \                              (string-append\n                              \
    \        (string-append\n                                       (string-append\n\
    \                                        (string-append\n                    \
    \                     (string-append\n                                       \
    \   (string-append\n                                           (string-append\n\
    \                                            (string-append\n                \
    \                             (string-append\n                               \
    \               (string-append\n                                             \
    \  (string-append\n                                                (string-append\n\
    \                                                 (string-append\n           \
    \                                       (string-append\n                     \
    \                              (string-append\n                              \
    \                      (string-append\n                                      \
    \               (string-append\n                                             \
    \         (string-append\n                                                   \
    \    (string-append\n                                                        (string-append\n\
    \                                                         (string-append\n   \
    \                                                       (string-append\n     \
    \                                                      (string-append\n      \
    \                                                      (string-append\n      \
    \                                                       (string-append\n     \
    \                                                         (string-append\n   \
    \                                                            (string-append\n\
    \                                                                (string-append\n\
    \                                                                 (string-append\n\
    \                                                                  (string-append\n\
    \                                                                   (string-append\n\
    \                                                                    (string-append\n\
    \                                                                     (string-append\n\
    \                                                                      (string-append\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpm12pps9b.rkt:84:70: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 86\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5j1f44z7.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp5j1f44z7.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (x) (if (char-alphabetic? x) (char-downcase x) (char-upcase x))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmd367pry.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpmd367pry.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string (char-upcase (string-ref s 0)))\n       \
    \             (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n\
    \     (string-append (string (char-downcase (string-ref s 0)))\n             \
    \       (solve (substring s 1)))]\n    [else (string-append (string (string-ref\
    \ s 0))\n                         (solve (substring s 1)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:37:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx052h4_e.rkt:38:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx052h4_e.rkt:39:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:38:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:39:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:40:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:41:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:42:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:43:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (let ([c (string-ref\
    \ s 0)])\n        (if (char-alphabetic? c)\n            (string-append (string\
    \ (char-upcase c)) (solve (substring s 1)))\n            (string-append (string\
    \ c) (solve (substring s 1)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaauquxo6.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpaauquxo6.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-upcase (string-ref s 0))\n      (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\n\
    \      (string-ref s 0)\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string-downcase (string-ref s 0))\n      (solve (substring s 1)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ilvom0z.rkt:36:4\n\
    \nstring-upcase: contract violation\n  expected: string?\n  given: #\\A\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ilvom0z.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5ilvom0z.rkt:38:4\n\nstring-upcase: contract violation\n \
    \ expected: string?\n  given: #\\a\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ilvom0z.rkt:39:4\n\nstring-downcase:\
    \ contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ilvom0z.rkt:40:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ilvom0z.rkt:41:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ilvom0z.rkt:42:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ilvom0z.rkt:43:4\n\
    \nstring-downcase: contract violation\n  expected: string?\n  given: #\\#\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) (reverse s)]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string (char-upcase (string-ref s 0)))\n\
    \                    (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string (char-downcase (string-ref s 0)))\n                    (solve (substring\
    \ s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr7ruu0ip.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpr7ruu0ip.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr7ruu0ip.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr7ruu0ip.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpr7ruu0ip.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr7ruu0ip.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr7ruu0ip.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpr7ruu0ip.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) '()]\n    [(char-alphabetic? (car\
    \ s))\n     (cons (char-upcase (car s)) (solve (cdr s)))]\n    [(char-numeric?\
    \ (car s))\n     (cons (car s) (solve (cdr s)))]\n    [else\n     (cons (char-downcase\
    \ (car s)) (solve (cdr s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapq72c8x.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdv2g3hmr.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpdv2g3hmr.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-char? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-downcase\
    \ c)\n                        (char-upcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu_st9nvu.rkt:16:7: string-contains-char?: unbound identifier\n\
    \  in: string-contains-char?\n  location...:\n   /tmp/tmpu_st9nvu.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string (char-upcase (string-ref s 0)))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-downcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:38:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:39:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:40:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:41:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1dw4p5du.rkt:42:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1dw4p5du.rkt:43:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_0mmpuaf.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp_0mmpuaf.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-any? s #rx\"[a-zA-Z]\")\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n\
    \      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2emy_u16.rkt:16:7: string-contains-any?: unbound identifier\n \
    \ in: string-contains-any?\n  location...:\n   /tmp/tmp2emy_u16.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal?\
    \ (candidate \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\"\
    )\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate\
    \ \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\"\
    )\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate\
    \ \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmjscd6ry.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmpmjscd6ry.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (string-reverse (string-map (lambda (c)\n             \
    \                    (if (char-alphabetic? c)\n                              \
    \       (if (char-lower-case? c)\n                                         (char-upcase\
    \ c)\n                                         (char-downcase c))\n          \
    \                           c))\n                               s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n    (check-equal?\
    \ (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate \"1234\") \"4321\"\
    )\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal? (candidate\
    \ \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"#aSDFw^45\"\
    )\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal? (candidate\
    \ \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpopeld5uj.rkt:16:3: string-reverse: unbound identifier\n  in: string-reverse\n\
    \  location...:\n   /tmp/tmpopeld5uj.rkt:16:3\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqdauxt3x.rkt:17:7: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqdauxt3x.rkt:17:7\n"
  stdout: ''
  timestamp: 1660039431
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) '()]\n    [(char-alphabetic? (car\
    \ s))\n     (cons (char-upcase (car s)) (solve (cdr s)))]\n    [(char-numeric?\
    \ (car s))\n     (cons (car s) (solve (cdr s)))]\n    [else (cons (char-downcase\
    \ (car s)) (solve (cdr s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\n\
    \                         (solve (substring s 1)))\n          (string-append (string-downcase\
    \ (string-ref s 0))\n                         (solve (substring s 1))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
    \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
    \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
    \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\")\
    \ \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
    \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"\
    #CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp447_21w1.rkt:16:7: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp447_21w1.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 0
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (cond\n    [(empty? s) '()]\n    [(char-alphabetic? (car\
    \ s))\n     (cons (char-upcase (car s)) (solve (cdr s)))]\n    [(char-numeric?\
    \ (car s))\n     (cons (car s) (solve (cdr s)))]\n    [else (cons (char-downcase\
    \ (car s)) (solve (cdr s)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"AsDf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"1234\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"ab\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#a@C\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#AsdfW^45\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#6@2\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#$a^D\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgay10cuy.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"#ccc\"\n--------------------\n"
  stdout: ''
  timestamp: 1660039434
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-ci? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp24r2kj4h.rkt:16:7: string-contains-ci?: unbound identifier\n  in:\
    \ string-contains-ci?\n  location...:\n   /tmp/tmp24r2kj4h.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039432
- exit_code: 1
  program: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n;; otherwise keep it as\
    \ it is.\n;; If the string contains no letters, reverse the string.\n;; The function\
    \ should return the resulted string.\n;; Examples\n;; >>> (solve \"1234\")\n;;\
    \ \"4321\"\n;; >>> (solve \"ab\")\n;; \"AB\"\n;; >>> (solve \"#a@C\")\n;; \"#A@c\"\
    \n(define (solve s)\n  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solve))\n    (check-equal? (candidate \"AsDf\") \"aSdF\"\
    )\n    (check-equal? (candidate \"1234\") \"4321\")\n    (check-equal? (candidate\
    \ \"ab\") \"AB\")\n    (check-equal? (candidate \"#a@C\") \"#A@c\")\n    (check-equal?\
    \ (candidate \"#AsdfW^45\") \"#aSDFw^45\")\n    (check-equal? (candidate \"#6@2\"\
    ) \"2@6#\")\n    (check-equal? (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal?\
    \ (candidate \"#ccc\") \"#CCC\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8u8rl4g_.rkt:16:7: string-contains-letter?: unbound identifier\n\
    \  in: string-contains-letter?\n  location...:\n   /tmp/tmp8u8rl4g_.rkt:16:7\n"
  stdout: ''
  timestamp: 1660039431
