name: HumanEval_141_file_name_check
language: rkt
prompt: "#lang racket\n\n;; Create a function which takes a string representing a\
  \ file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
  \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
  \ the following conditions \n;; are met:\n;; - There should not be more than three\
  \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one\
  \ dot '.'\n;; - The substring before the dot should not be empty, and it starts\
  \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n;;\
  \ >>> (file_name_check \"example.txt\")\n;; \"Yes\"\n;; >>> (file_name_check \"\
  1example.dll\")\n;; \"No\"\n(define (file_name_check file_name)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
  \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
  \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
  )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
  \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\")\
  \ \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\"\
  ) \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n   \
  \ (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\"\
  )\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
  \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
  \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
  ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
  \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\
  \n(test-humaneval)"
completions: ["  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else\
    \ \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits str)\n\
    \    (cond\n      [(empty? str) 0]\n      [(char-numeric? (first str)) (+ 1 (count-digits\
    \ (rest str)))]\n      [else (count-digits (rest str))]))\n  (define (count-dots\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\.) (+\
    \ 1 (count-dots (rest str)))]\n      [else (count-dots (rest str))]))\n  (define\
    \ (is-valid-extension? str)\n    (cond\n      [(string=? str \"txt\") #t]\n  \
    \    [(string=? str \"exe\") #t]\n      [(string=? str \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is-valid-name? str)\n    (cond\n      [(empty? str) #f]\n\
    \      [(char-alphabetic? (first str)) #t]\n      [else #f]))\n  (cond\n    [(or\
    \ (= (count-digits file_name) 4)\n         (= (count-dots file_name) 0)\n    \
    \     (not (is-valid-extension? (substring file_name (+ 1 (string-index file_name\
    \ #\\.)))))\n         (not (is-valid-name? (substring file_name 0 (string-index\
    \ file_name #\\.))))]\n     \"No\")\n    [else \"Yes\"]))\n", "  (cond\n    [(and\
    \ (string-contains file_name #\\.)\n          (string-contains file_name #\\.)\n\
    \          (string-contains file_name #\\.)\n          (string-contains file_name\
    \ #\\.))\n     \"No\"]\n    [(and (string-contains file_name #\\.)\n         \
    \ (string-contains file_name #\\.)\n          (string-contains file_name #\\.))\n\
    \     \"No\"]\n    [(and (string-contains file_name #\\.)\n          (string-contains\
    \ file_name #\\.))\n     \"No\"]\n    [(string-contains file_name #\\.)\n    \
    \ \"Yes\"]\n    [else\n     \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (count-digits file_name)\n    (cond\n      [(empty? file_name)\
    \ 0]\n      [(char-numeric? (first file_name)) (+ 1 (count-digits (rest file_name)))]\n\
    \      [else (count-digits (rest file_name))]))\n  (define (count-dots file_name)\n\
    \    (cond\n      [(empty? file_name) 0]\n      [(char=? (first file_name) #\\\
    .) (+ 1 (count-dots (rest file_name)))]\n      [else (count-dots (rest file_name))]))\n\
    \  (define (check-before-dot file_name)\n    (cond\n      [(empty? file_name)\
    \ #f]\n      [(char=? (first file_name) #\\.) #t]\n      [(char-alphabetic? (first\
    \ file_name)) (check-before-dot (rest file_name))]\n      [else #f]))\n  (define\
    \ (check-after-dot file_name)\n    (cond\n      [(empty? file_name) #f]\n    \
    \  [(char=? (first file_name) #\\.) (check-after-dot (rest file_name))]\n    \
    \  [else (or (string=? file_name \"txt\")\n                (string=? file_name\
    \ \"exe\")\n                (string=? file_name \"dll\"))]))\n  (cond\n    [(and\
    \ (= (count-digits file_name) 3)\n          (= (count-dots file_name) 1)\n   \
    \       (check-before-dot file_name)\n          (check-after-dot file_name)) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (count-digits\
    \ file_name)\n    (if (empty? file_name)\n        0\n        (if (char-numeric?\
    \ (first file_name))\n            (+ 1 (count-digits (rest file_name)))\n    \
    \        (count-digits (rest file_name)))))\n  (define (count-dots file_name)\n\
    \    (if (empty? file_name)\n        0\n        (if (char=? (first file_name)\
    \ #\\.)\n            (+ 1 (count-dots (rest file_name)))\n            (count-dots\
    \ (rest file_name)))))\n  (define (is-valid-extension? file_name)\n    (if (empty?\
    \ file_name)\n        #f\n        (if (char=? (first file_name) #\\.)\n      \
    \      (if (member (substring file_name 1) '(\"txt\" \"exe\" \"dll\"))\n     \
    \           #t\n                #f)\n            (is-valid-extension? (rest file_name)))))\n\
    \  (define (is-valid-prefix? file_name)\n    (if (empty? file_name)\n        #f\n\
    \        (if (char=? (first file_name) #\\.)\n            #t\n            (if\
    \ (char-alphabetic? (first file_name))\n                (is-valid-prefix? (rest\
    \ file_name))\n                #f))))\n  (if (and (= (count-digits file_name)\
    \ 3)\n           (= (count-dots file_name) 1)\n           (is-valid-extension?\
    \ file_name)\n           (is-valid-prefix? file_name))\n      \"Yes\"\n      \"\
    No\"))\n", "  (define (is_valid_extension ext)\n    (or (= ext \"txt\") (= ext\
    \ \"exe\") (= ext \"dll\")))\n  (define (is_valid_name name)\n    (and (regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name)\n         (not (regexp-match? #rx\"[0-9]{4}\"\
    \ name))))\n  (define (is_valid_file_name file_name)\n    (let ((parts (string-split\
    \ file_name #rx\"\\.\")))\n      (and (= (length parts) 2)\n           (is_valid_name\
    \ (first parts))\n           (is_valid_extension (second parts)))))\n  (if (is_valid_file_name\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (count-digits str)\n\
    \    (cond ((null? str) 0)\n          ((char-numeric? (car str)) (+ 1 (count-digits\
    \ (cdr str))))\n          (else (count-digits (cdr str)))))\n  (define (count-dots\
    \ str)\n    (cond ((null? str) 0)\n          ((char=? (car str) #\\.) (+ 1 (count-dots\
    \ (cdr str))))\n          (else (count-dots (cdr str)))))\n  (define (is-valid-extension?\
    \ str)\n    (cond ((string=? str \"txt\") #t)\n          ((string=? str \"exe\"\
    ) #t)\n          ((string=? str \"dll\") #t)\n          (else #f)))\n  (define\
    \ (is-valid-prefix? str)\n    (and (not (string=? str \"\"))\n         (char-alphabetic?\
    \ (string-ref str 0))))\n  (define (split-file-name str)\n    (string-split str\
    \ #\\.)\n    (cond ((null? str) '())\n          ((char=? (car str) #\\.) (cons\
    \ (string-join (cdr str) #\\.) (split-file-name (cdr str))))\n          (else\
    \ (cons (string-join str #\\.) (split-file-name (cdr str))))))\n  (define (split-file-name\
    \ str)\n    (string-split str #\\.)\n    (cond ((null? str) '())\n          ((char=?\
    \ (car str) #\\.) (cons (string-join (cdr str) #\\.) (split-file-name (cdr str))))\n\
    \          (else (cons (string-join str #\\.) (split-file-name (cdr str))))))\n\
    \  (define (split-file-name str)\n    (string-split str #\\.)\n    (cond ((null?\
    \ str) '())\n          ((char=? (car str) #\\.) (cons (string-join (cdr str) #\\\
    .) (split-file-name (cdr str))))\n          (else (cons (string-join str #\\.)\
    \ (split-file-name (", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
