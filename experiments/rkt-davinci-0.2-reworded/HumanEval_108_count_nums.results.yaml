name: HumanEval_108_count_nums
language: rkt
results:
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else (+ (if\
    \ (> (sum_digits (first arr)) 0) 1 0)\n             (count_nums (rest arr)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbfgaamnq.rkt:16:21: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpbfgaamnq.rkt:16:21\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa1b6lg7x.rkt:17:13: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpa1b6lg7x.rkt:17:13\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxqysu4rf.rkt:17:13: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpxqysu4rf.rkt:17:13\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp50acnfw8.rkt:17:13: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmp50acnfw8.rkt:17:13\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo_8besol.rkt:17:13: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpo_8besol.rkt:17:13\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (cond\n       [(> (sum_digits (first arr)) 0)\n        (+ 1 (count_nums (rest\
    \ arr)))]\n       [else\n        (count_nums (rest arr))])]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n    (check-equal?\
    \ (candidate (list )) 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n  \
    \  (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate\
    \ (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100 98 -7 1\
    \ -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal?\
    \ (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0e9n1etn.rkt:18:12: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmp0e9n1etn.rkt:18:12\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbdjonxdf.rkt:17:13: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpbdjonxdf.rkt:17:13\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond [(empty? arr) 0]\n        [else\n    \
    \     (cond [(> (sum-digits (first arr)) 0)\n                (+ 1 (count_nums\
    \ (rest arr)))]\n               [else (count_nums (rest arr))])]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjm1yfj87.rkt:16:20: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpjm1yfj87.rkt:16:20\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (sum_digits (first arr))\n         (+ 1 (count_nums (rest arr)))\n    \
    \     (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp90pks9w.rkt:17:10: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpp90pks9w.rkt:17:10\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwrx6pyto.rkt:17:13: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpwrx6pyto.rkt:17:13\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else (+ (if\
    \ (> (sum_digits (first arr)) 0) 1 0)\n             (count_nums (rest arr)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkf1ktbgl.rkt:16:21: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpkf1ktbgl.rkt:16:21\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (cond\n       [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \       [else (count_nums (rest arr))])]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsit1w2y8.rkt:18:12: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpsit1w2y8.rkt:18:12\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (sum_digits (first arr))\n         (+ 1 (count_nums (rest arr)))\n    \
    \     (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvuck0zqz.rkt:17:10: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpvuck0zqz.rkt:17:10\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz6z4kxy6.rkt:17:13: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpz6z4kxy6.rkt:17:13\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (sum_digits (first arr))\n         (+ 1 (count_nums (rest arr)))\n    \
    \     (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptep9unqn.rkt:17:10: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmptep9unqn.rkt:17:10\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (cond\n       [(> (sum_digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \       [else (count_nums (rest arr))])]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpj6cvnjts.rkt:18:12: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpj6cvnjts.rkt:18:12\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (> (sum_digits (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpava2vtvf.rkt:17:13: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpava2vtvf.rkt:17:13\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (positive? (sum_digits (first arr)))\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprqmasgjx.rkt:17:21: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmprqmasgjx.rkt:17:21\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else (+ (if\
    \ (> (sum_digits (first arr)) 0) 1 0)\n             (count_nums (rest arr)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ -1 -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
    \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
    \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
    \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
    \ 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpucty402w.rkt:16:21: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpucty402w.rkt:16:21\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function count_nums which takes a list of integers\
    \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If\
    \ a number is negative, then its first signed digit will be negative:\n;; e.g.\
    \ -123 has signed digits -1, 2, and 3.\n;; >>> (count_nums (list ))\n;; 0\n;;\
    \ >>> (count_nums (list -1 11 -11))\n;; 1\n;; >>> (count_nums (list 1 1 2))\n\
    ;; 3\n(define (count_nums arr)\n  (cond\n    [(empty? arr) 0]\n    [else\n   \
    \  (if (positive? (sum_digits (first arr)))\n         (+ 1 (count_nums (rest arr)))\n\
    \         (count_nums (rest arr)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_nums))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list -1 -2 0)) 0)\n    (check-equal? (candidate\
    \ (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal? (candidate (list 1 6 9 -6 0 1 5))\
    \ 5)\n    (check-equal? (candidate (list 1 100 98 -7 1 -1)) 4)\n    (check-equal?\
    \ (candidate (list 12 23 34 -45 -56 0)) 5)\n    (check-equal? (candidate (list\
    \ 0 1)) 1)\n    (check-equal? (candidate (list 1)) 1)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq7ndzqxe.rkt:17:21: sum_digits: unbound identifier\n  in: sum_digits\n\
    \  location...:\n   /tmp/tmpq7ndzqxe.rkt:17:21\n"
  exit_code: 1
  status: Exception
