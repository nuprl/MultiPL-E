name: HumanEval_26_remove_duplicates
language: rkt
results:
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove_duplicates_iter numbers seen)\n    (cond\n     \
    \ [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates_iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd4vncek5.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove_duplicates-iter numbers seen-so-far)\n    (cond\
    \ [(empty? numbers) empty]\n          [(member (first numbers) seen-so-far)\n\
    \           (remove_duplicates-iter (rest numbers) seen-so-far)]\n          [else\
    \ (cons (first numbers)\n                      (remove_duplicates-iter (rest numbers)\n\
    \                                              (cons (first numbers) seen-so-far)))]))\n\
    \  (remove_duplicates-iter numbers empty))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate remove_duplicates))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))\n\
    \    (check-equal? (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5wm3hrb.rkt:24:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove_duplicates_iter numbers seen-so-far)\n    (cond\n\
    \      [(empty? numbers) seen-so-far]\n      [(member (first numbers) seen-so-far)\
    \ (remove_duplicates_iter (rest numbers) seen-so-far)]\n      [else (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen-so-far))]))\n  (reverse (remove_duplicates_iter\
    \ numbers empty)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate remove_duplicates))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal?\
    \ (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr8kssi4e.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-iter numbers seen)\n    (cond\n     \
    \ [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_ip3qfr.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-iter numbers result)\n    (cond\n   \
    \   [(empty? numbers) result]\n      [(member (first numbers) result) (remove-duplicates-iter\
    \ (rest numbers) result)]\n      [else (remove-duplicates-iter (rest numbers)\
    \ (append result (list (first numbers))))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_iy51fv.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-iter numbers seen-so-far)\n    (cond\
    \ [(empty? numbers) empty]\n          [(member (first numbers) seen-so-far)\n\
    \           (remove-duplicates-iter (rest numbers) seen-so-far)]\n          [else\
    \ (cons (first numbers)\n                      (remove-duplicates-iter (rest numbers)\n\
    \                                              (cons (first numbers) seen-so-far)))]))\n\
    \  (remove-duplicates-iter numbers empty))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate remove_duplicates))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))\n\
    \    (check-equal? (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr8ced_55.rkt:24:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove_duplicates_iter numbers seen)\n    (cond\n     \
    \ [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates_iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates_iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates_iter numbers\
    \ empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxldvo7ko.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove_duplicates-iter numbers seen)\n    (cond\n     \
    \ [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove_duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove_duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove_duplicates-iter numbers\
    \ empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu8ognixa.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (cond\n    [(empty? numbers) empty]\n    [(member (first numbers)\
    \ (rest numbers)) (remove_duplicates (rest numbers))]\n    [else (cons (first\
    \ numbers) (remove_duplicates (rest numbers)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 2 3 4)) (list\
    \ 1 2 3 4))\n    (check-equal? (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpefoarni3.rkt:20:4\n\
    actual:     '(1 2 4 3 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (let ([numbers (sort numbers <)])\n    (define (remove-duplicates-iter\
    \ numbers acc)\n      (if (null? numbers)\n          acc\n          (let ([first\
    \ (car numbers)]\n                [rest (cdr numbers)])\n            (if (null?\
    \ rest)\n                (cons first acc)\n                (if (= first (car rest))\n\
    \                    (remove-duplicates-iter (cdr rest) acc)\n               \
    \     (remove-duplicates-iter (cdr rest) (cons first acc)))))))\n    (reverse\
    \ (remove-duplicates-iter numbers '()))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate remove_duplicates))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))\n\
    \    (check-equal? (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpufxf6yof.rkt:27:4\n\
    actual:     '(1 3)\nexpected:   '(1 2 3 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpufxf6yof.rkt:28:4\nactual:\
    \     '(1 2 3 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-iter numbers seen)\n    (cond [(empty?\
    \ numbers) empty]\n          [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n          [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkql_sh1i.rkt:21:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove_duplicates-iter numbers result)\n    (cond\n   \
    \   [(empty? numbers) result]\n      [(member (first numbers) result) (remove_duplicates-iter\
    \ (rest numbers) result)]\n      [else (remove_duplicates-iter (rest numbers)\
    \ (append result (list (first numbers))))]))\n  (remove_duplicates-iter numbers\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvruz7jl3.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove_duplicates-iter numbers seen-so-far)\n    (cond\
    \ [(empty? numbers) empty]\n          [(member (first numbers) seen-so-far)\n\
    \           (remove_duplicates-iter (rest numbers) seen-so-far)]\n          [else\
    \ (cons (first numbers)\n                      (remove_duplicates-iter (rest numbers)\n\
    \                                              (cons (first numbers) seen-so-far)))]))\n\
    \  (remove_duplicates-iter numbers empty))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate remove_duplicates))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))\n\
    \    (check-equal? (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1p8ehys.rkt:24:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-iter numbers result)\n    (cond\n   \
    \   [(empty? numbers) result]\n      [(member (first numbers) result) (remove-duplicates-iter\
    \ (rest numbers) result)]\n      [else (remove-duplicates-iter (rest numbers)\
    \ (append result (list (first numbers))))]))\n  (remove-duplicates-iter numbers\
    \ (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_6rv1xyy.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-helper numbers seen)\n    (cond\n   \
    \   [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate remove_duplicates))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal?\
    \ (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbi8py661.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-helper numbers seen-so-far)\n    (cond\n\
    \      [(empty? numbers) seen-so-far]\n      [(member (first numbers) seen-so-far)\
    \ (remove-duplicates-helper (rest numbers) seen-so-far)]\n      [else (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen-so-far))]))\n  (reverse (remove-duplicates-helper\
    \ numbers empty)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate remove_duplicates))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal?\
    \ (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9y2jb9xg.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (cond\n    [(empty? numbers) empty]\n    [(member (first numbers)\
    \ (rest numbers)) (remove_duplicates (rest numbers))]\n    [else (cons (first\
    \ numbers) (remove_duplicates (rest numbers)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate remove_duplicates))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 2 3 4)) (list\
    \ 1 2 3 4))\n    (check-equal? (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjcjvopa0.rkt:20:4\n\
    actual:     '(1 2 4 3 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-helper numbers seen)\n    (cond\n   \
    \   [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-helper\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-helper\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-helper\
    \ numbers empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate remove_duplicates))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal?\
    \ (candidate (list 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_6z0jkw3.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-iter numbers seen)\n    (cond\n     \
    \ [(empty? numbers) '()]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8xt0g37u.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; From a list of integers, remove all elements that occur\
    \ more than once.\n;; Keep order of elements left the same as in the input.\n\
    ;; >>> (remove_duplicates (list 1 2 3 2 4))\n;; (list 1 3 4)\n(define (remove_duplicates\
    \ numbers)\n  (define (remove-duplicates-iter numbers seen)\n    (cond\n     \
    \ [(empty? numbers) empty]\n      [(member (first numbers) seen) (remove-duplicates-iter\
    \ (rest numbers) seen)]\n      [else (cons (first numbers) (remove-duplicates-iter\
    \ (rest numbers) (cons (first numbers) seen)))]))\n  (remove-duplicates-iter numbers\
    \ empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ remove_duplicates))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list\
    \ 1 2 3 2 4 3 5)) (list 1 4 5))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwb1zpr_.rkt:22:4\n\
    actual:     '(1 2 3 4 5)\nexpected:   '(1 4 5)\n--------------------\n"
  exit_code: 0
  status: Exception
