name: HumanEval_139_special_factorial
language: rkt
prompt: "#lang racket\n\n;; The Brazilian factorial is defined as:\n;; brazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\n;; where n > 0\n;; >>> (special_factorial 4)\n\
  ;; 288\n;; The function will receive an integer as input and should return the special\n\
  ;; factorial of this integer.\n(define (special_factorial n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate special_factorial))\n\
  \    (check-equal? (candidate 4) 288)\n    (check-equal? (candidate 5) 34560)\n\
  \    (check-equal? (candidate 7) 125411328000)\n    (check-equal? (candidate 1)\
  \ 1)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (zero? n)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (-\
    \ n 1)))))\n  (if (= n 0)\n      1\n      (* n (special_factorial (- n 1)) (factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (zero? n)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (define (special_factorial_iter n acc)\n    (if (= n 1)\n\
    \        acc\n        (special_factorial_iter (- n 1) (* acc n))))\n  (special_factorial_iter\
    \ n 1))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (define\
    \ (special_factorial_helper n acc)\n    (if (= n 1)\n        acc\n        (special_factorial_helper\
    \ (- n 1) (* acc n))))\n  (special_factorial_helper n 1))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (define (factorial n)\n    (if\
    \ (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n   \
    \   1\n      (* (factorial n) (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (define (factorial\
    \ n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (=\
    \ n 0)\n      1\n      (* (factorial n) (special_factorial (- n 1)))))\n", " \
    \ (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (zero? n)\n      1\n    \
    \  (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n\
    \ (special_factorial (- n 1)))))\n", "  (define (factorial n)\n    (if (= n 0)\n\
    \        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n    \
    \  (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n</code>\n", "  (if\
    \ (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n\
    \ 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (define (factorial\
    \ n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (=\
    \ n 0)\n      1\n      (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (define\
    \ (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n\
    \  (if (= n 0)\n      1\n      (* n (special_factorial (- n 1)) (factorial (-\
    \ n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (-\
    \ n 1)))))\n  (if (= n 0)\n      1\n      (* n (special_factorial (- n 1)) (factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (define (factorial\
    \ n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (=\
    \ n 0)\n      1\n      (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n\
    </code>\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (define\
    \ (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n\
    \  (if (= n 0)\n      1\n      (* n (special_factorial (- n 1)) (factorial (-\
    \ n 1)))))\n", "  (define (factorial n)\n    (if (= n 0)\n        1\n        (*\
    \ n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n      (* (factorial n) (special_factorial\
    \ (- n 1)))))\n", "  (define (factorial n)\n    (if (= n 0)\n        1\n     \
    \   (* n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n      (* n (special_factorial\
    \ (- n 1)) (factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (define (factorial n)\n    (if (= n 0)\n        1\n        (*\
    \ n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n      (* n (special_factorial\
    \ (- n 1)) (factorial (- n 1)))))\n", "  (define (factorial n)\n    (if (= n 0)\n\
    \        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n    \
    \  (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (define (factorial n)\n\
    \    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n\
    \      1\n      (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n</code>\n\
    I'm getting the following error:\n<code>special_factorial.rkt:9:0: application:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 4\n  arguments...:\n   1\n   #&lt;procedure:special_factorial&gt;\n \
    \  #&lt;procedure:factorial&gt;\n</code>\nI don't understand why I'm getting this\
    \ error. I'm using Racket.\n\n\nA:\n\nThe problem is that you're calling <code>special_factorial</code>\
    \ with three arguments, but it only takes one.\nYou need to call <code>factorial</code>\
    \ with the result of <code>(- n 1)</code> as an argument.\n<code>(define (special_factorial\
    \ n)\n  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial\
    \ (- n 1)))))\n  (if (= n 0)\n      1\n      (* n (special_factorial (- n 1))\
    \ (factorial (- n 1)))))\n</code>\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (define (fact n)\n    (if (= n 1)\n\
    \        1\n        (* n (fact (- n 1)))))\n  (if (= n 1)\n      1\n      (* n\
    \ (special_factorial (- n 1)) (fact (- n 1)))))\n", "  (if (= n 1)\n      1\n\
    \      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n     \
    \ (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n\
    \ (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (define\
    \ (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n\
    \  (if (= n 0)\n      1\n      (* (factorial n) (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (define (factorial n)\n    (if\
    \ (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n   \
    \   1\n      (* (factorial n) (special_factorial (- n 1)))))\n", "  (define (factorial\
    \ n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (=\
    \ n 0)\n      1\n      (* (factorial n) (special_factorial (- n 1)))))\n", " \
    \ (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (define (factorial n)\n    (if (= n\
    \ 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n\
    \      (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n</code>\nI'm getting\
    \ the following error:\n<code>application: not a procedure;\n expected a procedure\
    \ that can be applied to arguments\n  given: 0\n  arguments...:\n   [none]\n</code>\n\
    I'm not sure what I'm doing wrong.\n\n\nA:\n\nThe problem is that you're calling\
    \ <code>special_factorial</code> with <code>0</code> as the argument, and you're\
    \ not handling that case.\n", "  (define (factorial n)\n    (if (= n 0)\n    \
    \    1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n      (*\
    \ n (special_factorial (- n 1)) (factorial (- n 1)))))\n</code>\nI'm not sure\
    \ why it's not working. I'm getting the following error:\n<code>application: not\
    \ a procedure;\n expected a procedure that can be applied to arguments\n  given:\
    \ 1\n  arguments...:\n   1\n</code>\nI'm not sure why it's not working.\n\n\n\
    A:\n\nThe problem is that you're calling <code>special_factorial</code> recursively\
    \ with <code>n</code> as the first argument, and then multiplying it by <code>(factorial\
    \ (- n 1))</code>.  But <code>n</code> is an integer, not a procedure, so you\
    \ get the error you see.\nYou probably meant to call <code>special_factorial</code>\
    \ with <code>(- n 1)</code> as the first argument, and then multiply it by <code>(factorial\
    \ (- n 1))</code>.\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (define (factorial n)\n    (if\
    \ (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n   \
    \   1\n      (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n", "  (if\
    \ (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n\
    \ 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (define (factorial n)\n    (if (= n\
    \ 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n\
    \      (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n", "  (if (= n\
    \ 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (define (factorial n)\n    (if\
    \ (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n   \
    \   1\n      (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n", "  (if\
    \ (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n\
    \ 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n\
    \ 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n",
  "  (if (= n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (=\
    \ n 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (define (special_factorial_iter\
    \ n acc)\n    (if (= n 1)\n        acc\n        (special_factorial_iter (- n 1)\
    \ (* acc n))))\n  (special_factorial_iter n 1))\n", "  (if (= n 1)\n      1\n\
    \      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n     \
    \ (* n (special_factorial (- n 1)))))\n", "  (define (factorial n)\n    (if (=\
    \ n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n\
    \      (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n", "  (if (zero?\
    \ n)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (*\
    \ n (special_factorial (- n 1)))))\n", "  (define (factorial n)\n    (if (= n\
    \ 0)\n        1\n        (* n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n\
    \      (* n (special_factorial (- n 1)) (factorial (- n 1)))))\n", "  (if (= n\
    \ 1)\n      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n\
    \      1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n     \
    \ 1\n      (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n \
    \     (* n (special_factorial (- n 1)))))\n", "  (if (zero? n)\n      1\n    \
    \  (* n (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n\
    \ (special_factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n", "  (define (factorial n)\n    (if (= n 0)\n        1\n     \
    \   (* n (factorial (- n 1)))))\n  (if (= n 0)\n      1\n      (* n (special_factorial\
    \ (- n 1)) (factorial (- n 1)))))\n", "  (if (= n 1)\n      1\n      (* n (special_factorial\
    \ (- n 1)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
