name: HumanEval_158_find_max
language: rkt
results:
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (let loop ((words\
    \ words)\n             (max-word (car words))\n             (max-count (count-unique-chars\
    \ (car words))))\n    (cond ((null? words) max-word)\n          ((> (count-unique-chars\
    \ (car words)) max-count)\n           (loop (cdr words) (car words) (count-unique-chars\
    \ (car words))))\n          (else (loop (cdr words) max-word max-count)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpey4bwyb5.rkt:18:15: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmpey4bwyb5.rkt:18:15\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (count-unique\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-word\
    \ words)\n    (cond ((null? words) '())\n          ((null? (cdr words)) (car words))\n\
    \          (else (if (> (count-unique (car words))\n                      (count-unique\
    \ (cadr words)))\n                   (car words)\n                   (cadr words)))))\n\
    \  (max-word words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4x5ypnek.rkt:30:4\n\
    actual:     \"name\"\nexpected:   \"string\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4x5ypnek.rkt:32:4\nactual:\
    \     \"bb\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4x5ypnek.rkt:33:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4x5ypnek.rkt:34:4\nactual:\
    \     \"this\"\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4x5ypnek.rkt:35:4\nactual:\
    \     \"are\"\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4x5ypnek.rkt:36:4\nactual:\
    \     \"are\"\nexpected:   \"nation\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (count_unique\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-word\
    \ word1 word2)\n    (if (&gt; (count_unique word1) (count_unique word2))\n   \
    \     word1\n        word2))\n  (foldl max-unique-word (car words) (cdr words)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpctjeqfqo.rkt:13:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 22\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (count-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (find-max-helper\
    \ words max-word max-count)\n    (cond [(empty? words) max-word]\n          [else\
    \ (let* ([word (first words)]\n                       [count (count-chars word)])\n\
    \                  (if (> count max-count)\n                      (find-max-helper\
    \ (rest words) word count)\n                      (if (= count max-count)\n  \
    \                        (if (string<? word max-word)\n                      \
    \        (find-max-helper (rest words) word count)\n                         \
    \     (find-max-helper (rest words) max-word count))\n                       \
    \   (find-max-helper (rest words) max-word max-count))))]))\n  (find-max-helper\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (find_max-helper\
    \ words max-word max-count)\n    (cond\n      [(empty? words) max-word]\n    \
    \  [(> (length (unique-chars (first words))) max-count)\n       (find_max-helper\
    \ (rest words) (first words) (length (unique-chars (first words))))]\n      [else\
    \ (find_max-helper (rest words) max-word max-count)]))\n  (find_max-helper words\
    \ \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbm_dz1pm.rkt:17:19: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpbm_dz1pm.rkt:17:19\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (count-unique\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-word\
    \ words)\n    (cond ((null? words) '())\n          ((null? (cdr words)) (car words))\n\
    \          (else\n           (let ((first (car words))\n                 (second\
    \ (cadr words)))\n             (if (&gt; (count-unique first) (count-unique second))\n\
    \                 (max-unique-word (cons first (cddr words)))\n              \
    \   (max-unique-word (cons second (cddr words))))))))\n  (max-unique-word words))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa76g7k9c.rkt:13:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 26\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (unique-chars\
    \ word)\n    (remove-duplicates (string->list word)))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map unique-chars words)))\n  (define (max-unique-words\
    \ words)\n    (filter (lambda (word) (= (unique-chars word) (max-unique-chars\
    \ words))) words))\n  (apply min (max-unique-words words)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpydznvq73.rkt:27:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\n #\\a #\\m #\\e)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpydznvq73.rkt:28:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\n #\\a #\\m #\\e)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpydznvq73.rkt:29:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(#\\a)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpydznvq73.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\a #\\b #\\c)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpydznvq73.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpydznvq73.rkt:32:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\w #\\e)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpydznvq73.rkt:33:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\w #\\e)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpydznvq73.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\t #\\h #\\i #\\s)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpydznvq73.rkt:35:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\b)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpydznvq73.rkt:36:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (let loop ((words\
    \ words)\n             (max-word \"\")\n             (max-count 0))\n    (cond\
    \ ((null? words) max-word)\n          ((> (length (unique-chars (car words)))\
    \ max-count)\n           (loop (cdr words) (car words) (length (unique-chars (car\
    \ words)))))\n          (else (loop (cdr words) max-word max-count)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe1drviix.rkt:18:23: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpe1drviix.rkt:18:23\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (count-unique\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-word\
    \ words)\n    (if (null? (cdr words))\n        (car words)\n        (let ((first\
    \ (car words))\n              (rest (cdr words)))\n          (if (> (count-unique\
    \ first) (count-unique (max-word rest)))\n              first\n              (max-word\
    \ rest)))))\n  (max-word words))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzys7lyq.rkt:32:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzys7lyq.rkt:33:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzys7lyq.rkt:34:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzzys7lyq.rkt:36:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (unique-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-chars\
    \ words)\n    (apply max (map unique-chars words)))\n  (define (max-unique-words\
    \ words)\n    (filter (lambda (word) (= (unique-chars word) (max-unique-chars\
    \ words)))\n            words))\n  (apply min (max-unique-words words)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"string\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"aaaaaaa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:33:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"gonna\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:34:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"nation\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:35:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:36:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8tgqf26c.rkt:37:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (let loop ((words\
    \ words)\n             (max-word (car words))\n             (max-count (count-unique-chars\
    \ (car words))))\n    (cond ((null? words) max-word)\n          ((> (count-unique-chars\
    \ (car words)) max-count)\n           (loop (cdr words) (car words) (count-unique-chars\
    \ (car words))))\n          (else (loop (cdr words) max-word max-count)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph8h075qg.rkt:18:15: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmph8h075qg.rkt:18:15\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (count-unique-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (find-max-helper\
    \ words max-word max-count)\n    (cond ((null? words) max-word)\n          ((>\
    \ (count-unique-chars (car words)) max-count)\n           (find-max-helper (cdr\
    \ words) (car words) (count-unique-chars (car words))))\n          ((= (count-unique-chars\
    \ (car words)) max-count)\n           (if (< (car words) max-word)\n         \
    \      (find-max-helper (cdr words) (car words) (count-unique-chars (car words)))\n\
    \               (find-max-helper (cdr words) max-word max-count)))\n         \
    \ (else (find-max-helper (cdr words) max-word max-count))))\n  (find-max-helper\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynxplifn.rkt:33:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"enam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynxplifn.rkt:34:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynxplifn.rkt:35:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"cba\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynxplifn.rkt:36:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynxplifn.rkt:37:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"rock\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynxplifn.rkt:38:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"mad\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynxplifn.rkt:41:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (apply max (map\
    \ (lambda (word)\n                    (cons (length (remove-duplicates (string->list\
    \ word)))\n                          word))\n                  words)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:24:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:25:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:26:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 . \"aaaaaaa\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:27:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(3 . \"abc\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"play\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(2 . \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(2 . \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"this\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 . \"b\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvbumj4ny.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"play\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (count-unique\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-word\
    \ word1 word2)\n    (cond ((> (count-unique word1) (count-unique word2)) word1)\n\
    \          ((< (count-unique word1) (count-unique word2)) word2)\n          (else\
    \ (if (string<? word1 word2) word1 word2))))\n  (foldl max-unique-word \"\" words))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (apply max (map\
    \ (lambda (word)\n                    (cons (length (remove-duplicates (string->list\
    \ word)))\n                          word))\n                  words)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:24:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:25:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:26:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 . \"aaaaaaa\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:27:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(3 . \"abc\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"play\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(2 . \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(2 . \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"this\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 . \"b\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpij44wxv0.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"play\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (unique-chars\
    \ word)\n    (define (unique-chars-helper word seen)\n      (cond\n        [(empty?\
    \ word) seen]\n        [(member (first word) seen) (unique-chars-helper (rest\
    \ word) seen)]\n        [else (unique-chars-helper (rest word) (cons (first word)\
    \ seen))]))\n    (unique-chars-helper word '()))\n  (define (find-max-helper words\
    \ max-word max-count)\n    (cond\n      [(empty? words) max-word]\n      [(> (length\
    \ (unique-chars (first words))) max-count)\n       (find-max-helper (rest words)\
    \ (first words) (length (unique-chars (first words))))]\n      [(= (length (unique-chars\
    \ (first words))) max-count)\n       (cond\n         [(string<? (first words)\
    \ max-word)\n          (find-max-helper (rest words) (first words) (length (unique-chars\
    \ (first words))))]\n         [else (find-max-helper (rest words) max-word max-count)])]\n\
    \      [else (find-max-helper (rest words) max-word max-count)]))\n  (find-max-helper\
    \ words (first words) (length (unique-chars (first words)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jkuwae6.rkt:39:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9jkuwae6.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"name\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jkuwae6.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"aaaaaaa\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9jkuwae6.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abc\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jkuwae6.rkt:43:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"play\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9jkuwae6.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"we\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jkuwae6.rkt:45:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"we\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9jkuwae6.rkt:46:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"this\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9jkuwae6.rkt:47:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"b\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9jkuwae6.rkt:48:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (let ([max-word\
    \ (first words)]\n        [max-count (count-unique-chars (first words))])\n  \
    \  (for ([word (rest words)])\n      (let ([count (count-unique-chars word)])\n\
    \        (when (> count max-count)\n          (set! max-word word)\n         \
    \ (set! max-count count))))\n    max-word))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzlycmc8w.rkt:15:20: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmpzlycmc8w.rkt:15:20\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (unique-chars\
    \ word)\n    (remove-duplicates (string->list word)))\n  (define (max-unique-chars\
    \ word1 word2)\n    (if (> (length (unique-chars word1))\n           (length (unique-chars\
    \ word2)))\n        word1\n        word2))\n  (foldl max-unique-chars (car words)\
    \ (cdr words)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"\
    string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"\
    game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\"\
    )) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\"\
    )\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe2_wmyue.rkt:29:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe2_wmyue.rkt:32:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (unique-chars\
    \ word)\n    (set! word (string->list word))\n    (set! word (remove-duplicates\
    \ word))\n    (list->string word))\n  (define (max-unique-chars words)\n    (apply\
    \ max (map unique-chars words)))\n  (define (max-unique-chars-words words)\n \
    \   (filter (lambda (word)\n              (= (unique-chars word) (max-unique-chars\
    \ words)))\n            words))\n  (define (first-lex words)\n    (apply min words))\n\
    \  (first-lex (max-unique-chars-words words)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpofjdpusy.rkt:42:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; >>>\
    \ (find_max (list \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max\
    \ (list \"name\" \"enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\"\
    \ \"bb\" \"cc\"))\n;; \"aaaaaaa\"\n(define (find_max words)\n  (define (count-unique\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-word\
    \ word1 word2)\n    (cond ((> (count-unique word1) (count-unique word2)) word1)\n\
    \          ((< (count-unique word1) (count-unique word2)) word2)\n          (else\
    \ (if (string<? word1 word2) word1 word2))))\n  (foldl max-unique-word (car words)\
    \ (cdr words)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"\
    string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"\
    game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\"\
    )) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\"\
    )\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
