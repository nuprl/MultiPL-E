name: HumanEval_121_solution
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty list of integers, return the sum of\
  \ all of the odd elements that are in even positions.\n;; Examples\n;; >>> (solution\
  \ (list 5 8 7 1))\n;; 12\n;; >>> (solution (list 3 3 3 3 3))\n;; 9\n;; >>> (solution\
  \ (list 30 13 24 321))\n;; 0\n(define (solution lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
  \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
  \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n \
  \   (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
  \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
  \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest\
    \ lst))]\n    [(even? (first lst)) (+ (first lst) (solution (rest lst)))]))\n",
  "  (cond [(empty? lst) 0]\n        [(even? (second lst)) (+ (first lst) (solution\
    \ (rest (rest lst))))]\n        [else (solution (rest (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (+ (first lst) (solution (rest\
    \ lst)))]\n    [else (solution (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even? (first lst))\
    \ (first lst) + (solution (rest lst))]\n    [else (solution (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (solution (rest lst))\
    \ (first (rest lst)))]\n    [else (solution (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even? (first\
    \ lst)) (+ (first lst) (solution (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even? (first lst))\
    \ (+ (first lst) (solution (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (car lst)) (solution (cdr (cdr lst))) ]\n    [else (+ (car lst) (solution\
    \ (cdr (cdr lst))))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (solution (rest lst))]\n    [(even? (first lst)) (first lst) + (solution (rest\
    \ lst))]\n    [else (solution (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (solution (rest lst))]\n    [(even? (first lst)) (first\
    \ lst) + (solution (rest lst))]\n    [else (solution (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (remainder (length lst) 2)) (solution (rest\
    \ lst))]\n    [(odd? (first lst)) (+ (first lst) (solution (rest lst)))]\n   \
    \ [else (solution (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (solution (rest lst))]\n    [(odd? (first lst)) (+ (first lst)\
    \ (solution (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (car\
    \ lst)) (solution (cdr lst))]\n    [(odd? (car lst)) (+ (car lst) (solution (cdr\
    \ lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (solution\
    \ (cdr lst))]\n    [(odd? (car lst)) (+ (car lst) (solution (cdr lst)))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (solution (rest lst))]\n\
    \    [(even? (first lst)) (+ (first lst) (solution (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (solution (rest lst))]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(even? (first lst)) (solution (rest lst))]\n    [(odd? (first\
    \ lst)) (+ (first lst) (solution (rest lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(odd? (first lst)) (solution (rest lst))]\n    [(even? (first lst))\
    \ (+ (first lst) (solution (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(odd? (first lst)) (solution (rest lst))]\n    [(even? (first lst)) (+ (first\
    \ lst) (solution (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (solution (rest lst))]\n    [(odd? (first lst)) (+ (first lst)\
    \ (solution (rest lst)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
