name: HumanEval_59_largest_prime_factor
language: rkt
prompt: "#lang racket\n\n;; Return the largest prime factor of n. Assume n > 1 and\
  \ is not a prime.\n;; >>> (largest_prime_factor 13195)\n;; 29\n;; >>> (largest_prime_factor\
  \ 2048)\n;; 2\n(define (largest_prime_factor n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n\
  \    (check-equal? (candidate 15) 5)\n    (check-equal? (candidate 27) 3)\n    (check-equal?\
  \ (candidate 63) 7)\n    (check-equal? (candidate 330) 11)\n    (check-equal? (candidate\
  \ 13195) 29)\n))\n\n(test-humaneval)"
completions: ["  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n      \
    \  i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (prime? i)\n            (if (divides? i n)\n             \
    \   (largest_prime_factor-iter (/ n i) i)\n                (largest_prime_factor-iter\
    \ n (+ i 1)))\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((> i (sqrt\
    \ n)) #t)\n            ((zero? (modulo n i)) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((> i (sqrt n)) n)\n  \
    \        ((and (zero? (modulo n i)) (prime? i)) (iter i))\n          (else (iter\
    \ (+ i 1)))))\n  (iter 2))\n```\n\n### Problem 4\n\n```racket\n#lang racket\n",
  "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n        i\n       \
    \ (if (zero? (modulo n i))\n            (largest_prime_factor-iter (/ n i) i)\n\
    \            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (let loop ([n n] [d 2])\n    (cond [(= n d) d]\n          [(zero?\
    \ (modulo n d)) (loop (/ n d) d)]\n          [else (loop n (+ d 1))])))\n", " \
    \ (define (largest_prime_factor-iter n i)\n    (if (= n i)\n        n\n      \
    \  (if (integer? (/ n i))\n            (largest_prime_factor-iter (/ n i) i)\n\
    \            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime-helper n i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (prime-helper\
    \ n (- i 1)))))\n    (prime-helper n (floor (/ n 2))))\n  (define (largest-prime-factor-helper\
    \ n i)\n    (cond ((= i 1) 1)\n          ((and (= (remainder n i) 0) (prime? i))\
    \ i)\n          (else (largest-prime-factor-helper n (- i 1)))))\n  (largest-prime-factor-helper\
    \ n (floor (/ n 2))))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\
    \ [(= n i) i]\n          [(= 0 (modulo n i)) (largest_prime_factor-iter (/ n i)\
    \ i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (prime? i))\n        (largest_prime_factor-iter (/ n i) i)\n      \
    \  (if (prime? n) n (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= 0 (modulo n i)) (largest_prime_factor-iter (/ n i) i)]\n  \
    \    [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (prime? i)\n            (if (divides? i n)\n             \
    \   (largest_prime_factor-iter (/ n i) i)\n                (largest_prime_factor-iter\
    \ n (+ i 1)))\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (prime? i))\n        (largest_prime_factor-iter (/ n i) i)\n      \
    \  (if (= i n)\n            n\n            (largest_prime_factor-iter n (+ i 1)))))\n\
    \  (largest_prime_factor-iter n 2))\n", "  (cond\n    [(= n 2) 2]\n    [(= n 3)\
    \ 3]\n    [(= n 5) 5]\n    [(= n 7) 7]\n    [(= n 11) 11]\n    [(= n 13) 13]\n\
    \    [(= n 17) 17]\n    [(= n 19) 19]\n    [(= n 23) 23]\n    [(= n 29) 29]\n\
    \    [(= n 31) 31]\n    [(= n 37) 37]\n    [(= n 41) 41]\n    [(= n 43) 43]\n\
    \    [(= n 47) 47]\n    [(= n 53) 53]\n    [(= n 59) 59]\n    [(= n 61) 61]\n\
    \    [(= n 67) 67]\n    [(= n 71) 71]\n    [(= n 73) 73]\n    [(= n 79) 79]\n\
    \    [(= n 83) 83]\n    [(= n 89) 89]\n    [(= n 97) 97]\n    [(= n 101) 101]\n\
    \    [(= n 103) 103]\n    [(= n 107) 107]\n    [(= n 109) 109]\n    [(= n 113)\
    \ 113]\n    [(= n 127) 127]\n    [(= n 131) 131]\n    [(= n 137) 137]\n    [(=\
    \ n 139) 139]\n    [(= n 149) 149]\n    [(= n 151) 151]\n    [(= n 157) 157]\n\
    \    [(= n 163) 163]\n    [(= n 167) 167]\n    [(= n 173) 173]\n    [(= n 179)\
    \ 179]\n    [(= n 181) 181]\n    [(= n 191) 191]\n    [(= n 193) 193]\n    [(=\
    \ n 197) 197]\n    [(= n 199) 199]\n    [(= n 211) 211]\n    [(= n 223) 223]\n\
    \    [(= n 227) 227]\n    [(= n 229) 229]\n    [(= n 233) 233]\n    [(= n 239)\
    \ 239]\n    [(= n 241) 241]\n    [(= n 251) 251]\n    [(= n 257) 257]\n    [(=\
    \ n 263) 263]\n    [(="]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
