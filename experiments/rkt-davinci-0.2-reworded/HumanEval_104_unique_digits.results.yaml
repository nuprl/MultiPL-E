name: HumanEval_104_unique_digits
language: rkt
results:
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (define (has_even_digit?\
    \ n)\n    (cond ((= (remainder n 10) 0) #t)\n          ((= (remainder n 10) 2)\
    \ #t)\n          ((= (remainder n 10) 4) #t)\n          ((= (remainder n 10) 6)\
    \ #t)\n          ((= (remainder n 10) 8) #t)\n          (else (has_even_digit?\
    \ (quotient n 10)))))\n  (define (unique_digits_helper x acc)\n    (cond ((null?\
    \ x) acc)\n          ((has_even_digit? (car x)) (unique_digits_helper (cdr x)\
    \ acc))\n          (else (unique_digits_helper (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique_digits_helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxcjj30ib.rkt:30:4\n\
    actual:     '()\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxcjj30ib.rkt:32:4\nactual:\
    \     '()\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxcjj30ib.rkt:33:4\nactual:\
    \     '()\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (define (is_even_digit?\
    \ x)\n    (cond\n      [(= x 0) #t]\n      [(= x 2) #t]\n      [(= x 4) #t]\n\
    \      [(= x 6) #t]\n      [(= x 8) #t]\n      [else #f]))\n  (define (has_even_digit?\
    \ x)\n    (cond\n      [(= x 0) #f]\n      [(is_even_digit? (modulo x 10)) #t]\n\
    \      [else (has_even_digit? (quotient x 10))]))\n  (define (unique_digits_helper\
    \ x result)\n    (cond\n      [(empty? x) (sort result <)]\n      [(has_even_digit?\
    \ (first x)) (unique_digits_helper (rest x) result)]\n      [else (unique_digits_helper\
    \ (rest x) (append result (list (first x))))]))\n  (unique_digits_helper x (list)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (sort x <))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbfcasm77.rkt:19:4\n\
    actual:     '(1 15 33 1422)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbfcasm77.rkt:20:4\nactual:\
    \     '(10 152 323 1422)\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbfcasm77.rkt:21:4\nactual:\
    \     '(111 151 2033 12345)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbfcasm77.rkt:22:4\nactual:\
    \     '(31 103 135)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (sort (filter (lambda (x)\
    \ (not (even? (car x)))) (map (lambda (x) (modulo x 10)) x)) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbi7rjkqp.rkt:19:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbi7rjkqp.rkt:20:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbi7rjkqp.rkt:21:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbi7rjkqp.rkt:22:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: 5\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n\
    \    [(even? (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvlwvhazg.rkt:22:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvlwvhazg.rkt:23:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvlwvhazg.rkt:24:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvlwvhazg.rkt:25:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n\
    \    [(even? (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_4l1u7oj.rkt:22:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_4l1u7oj.rkt:23:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_4l1u7oj.rkt:24:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_4l1u7oj.rkt:25:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n\
    \    [(has-even-digit? (first x)) (unique_digits (rest x))]\n    [else (cons (first\
    \ x) (unique_digits (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpllc1t1yj.rkt:14:6: has-even-digit?: unbound identifier\n  in: has-even-digit?\n\
    \  location...:\n   /tmp/tmpllc1t1yj.rkt:14:6\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n\
    \    [(even? (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpepf3z5nr.rkt:22:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpepf3z5nr.rkt:23:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpepf3z5nr.rkt:24:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpepf3z5nr.rkt:25:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (filter (lambda (y) (not\
    \ (even? (remainder y 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpviiuna8h.rkt:19:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpviiuna8h.rkt:20:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpviiuna8h.rkt:21:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpviiuna8h.rkt:22:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n\
    \    [(even? (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkohhjsx7.rkt:22:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkohhjsx7.rkt:23:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkohhjsx7.rkt:24:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkohhjsx7.rkt:25:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond\n    [(null? x) '()]\n\
    \    [(even? (remainder (car x) 10)) (unique_digits (cdr x))]\n    [(even? (remainder\
    \ (car x) 100)) (unique_digits (cdr x))]\n    [(even? (remainder (car x) 1000))\
    \ (unique_digits (cdr x))]\n    [(even? (remainder (car x) 10000)) (unique_digits\
    \ (cdr x))]\n    [(even? (remainder (car x) 100000)) (unique_digits (cdr x))]\n\
    \    [(even? (remainder (car x) 1000000)) (unique_digits (cdr x))]\n    [(even?\
    \ (remainder (car x) 10000000)) (unique_digits (cdr x))]\n    [(even? (remainder\
    \ (car x) 100000000)) (unique_digits (cdr x))]\n    [(even? (remainder (car x)\
    \ 1000000000)) (unique_digits (cdr x))]\n    [else (cons (car x) (unique_digits\
    \ (cdr x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk98155uk.rkt:30:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk98155uk.rkt:31:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk98155uk.rkt:32:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk98155uk.rkt:33:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (define (has_even_digit?\
    \ n)\n    (cond\n      [(zero? n) false]\n      [(even? (remainder n 10)) true]\n\
    \      [else (has_even_digit? (quotient n 10))]))\n  (define (unique_digits_helper\
    \ x acc)\n    (cond\n      [(empty? x) (reverse acc)]\n      [(has_even_digit?\
    \ (first x)) (unique_digits_helper (rest x) acc)]\n      [else (unique_digits_helper\
    \ (rest x) (cons (first x) acc))]))\n  (unique_digits_helper x (list)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo7h1toxt.rkt:29:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo7h1toxt.rkt:32:4\nactual:\
    \     '(135 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (sort (filter (lambda (n)\
    \ (not (even-digit? n))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2m_179h3.rkt:12:34: even-digit?: unbound identifier\n  in: even-digit?\n\
    \  location...:\n   /tmp/tmp2m_179h3.rkt:12:34\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n\
    \    [(even? (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfwrzpqnp.rkt:22:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfwrzpqnp.rkt:23:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfwrzpqnp.rkt:24:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfwrzpqnp.rkt:25:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n\
    \    [(even? (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 10000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 100000))\
    \ (unique_digits (rest x))]\n    [(even? (remainder (first x) 1000000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 10000000)) (unique_digits (rest\
    \ x))]\n    [(even? (remainder (first x) 100000000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000000)) (unique_digits (rest x))]\n   \
    \ [else (cons (first x) (unique_digits (rest x)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3mkviwib.rkt:30:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3mkviwib.rkt:31:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3mkviwib.rkt:32:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3mkviwib.rkt:33:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n\
    \    [(even? (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfcoo1gqi.rkt:22:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfcoo1gqi.rkt:23:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfcoo1gqi.rkt:24:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfcoo1gqi.rkt:25:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (sort (filter (lambda (y)\
    \ (not (even? (modulo y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplf7zfi4s.rkt:20:4\n\
    actual:     '(323)\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplf7zfi4s.rkt:21:4\nactual:\
    \     '(111 151 2033 12345)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplf7zfi4s.rkt:22:4\nactual:\
    \     '(31 103 135)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (filter (lambda (n) (not\
    \ (even? (remainder n 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmteoydqh.rkt:19:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmteoydqh.rkt:20:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmteoydqh.rkt:21:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmteoydqh.rkt:22:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (cond [(empty? x) empty]\n\
    \        [(even? (remainder (first x) 10)) (unique_digits (rest x))]\n       \
    \ [(even? (remainder (first x) 100)) (unique_digits (rest x))]\n        [(even?\
    \ (remainder (first x) 1000)) (unique_digits (rest x))]\n        [(even? (remainder\
    \ (first x) 10000)) (unique_digits (rest x))]\n        [(even? (remainder (first\
    \ x) 100000)) (unique_digits (rest x))]\n        [(even? (remainder (first x)\
    \ 1000000)) (unique_digits (rest x))]\n        [(even? (remainder (first x) 10000000))\
    \ (unique_digits (rest x))]\n        [(even? (remainder (first x) 100000000))\
    \ (unique_digits (rest x))]\n        [(even? (remainder (first x) 1000000000))\
    \ (unique_digits (rest x))]\n        [else (cons (first x) (unique_digits (rest\
    \ x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx6zn2itr.rkt:29:4\n\
    actual:     '(15 33 1)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx6zn2itr.rkt:30:4\nactual:\
    \     '(323)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx6zn2itr.rkt:31:4\nactual:     '(12345\
    \ 2033 111 151)\nexpected:   '(111 151)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx6zn2itr.rkt:32:4\nactual:\
    \     '(135 103 31)\nexpected:   '(31 135)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits\
    \ (list 15 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323\
    \ 1422 10))\n;; (list )\n(define (unique_digits x)\n  (define (has_even_digit?\
    \ n)\n    (cond\n      [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n \
    \     [else (has_even_digit? (quotient n 10))]))\n  (define (unique_digits_helper\
    \ x acc)\n    (cond\n      [(empty? x) acc]\n      [(has_even_digit? (first x))\
    \ (unique_digits_helper (rest x) acc)]\n      [else (unique_digits_helper (rest\
    \ x) (cons (first x) acc))]))\n  (unique_digits_helper x '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpueyrsp5p.rkt:29:4\n\
    actual:     '(1 33 15)\nexpected:   '(1 15 33)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpueyrsp5p.rkt:31:4\nactual:\
    \     '(151 111)\nexpected:   '(111 151)\n--------------------\n"
  exit_code: 0
  status: Exception
