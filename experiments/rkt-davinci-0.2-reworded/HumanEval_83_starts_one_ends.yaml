name: HumanEval_83_starts_one_ends
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, return the count of the numbers\
  \ of n-digit\n;; positive integers that start or end with 1.\n(define (starts_one_ends\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
  \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal?\
  \ (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
  \ 5) 18000)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1)) (starts_one_ends (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(=\
    \ n 2) 3]\n    [else (+ (starts_one_ends (- n 1))\n             (starts_one_ends\
    \ (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1)) (starts_one_ends (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(=\
    \ n 2) 3]\n    [else (+ (starts_one_ends (- n 1))\n             (starts_one_ends\
    \ (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1)) (starts_one_ends (- n 2)))]))\n", "  (cond [(= n 1) 2]\n        [(=\
    \ n 2) 3]\n        [else (+ (starts_one_ends (- n 1))\n                 (starts_one_ends\
    \ (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1))\n             (starts_one_ends (- n 2)))]))\n", "  (cond\n    [(= n\
    \ 1) 2]\n    [(= n 2) 3]\n    [else\n     (+ (expt 10 (- n 1))\n        (* 2 (expt\
    \ 10 (- n 2))))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1)) (starts_one_ends (- n 2)))]))\n", "  (cond\n    [(=\
    \ n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends (- n 1)) (starts_one_ends\
    \ (- n 2)))]))\n", "  (if (= n 1)\n      2\n      (+ (expt 10 (- n 1))\n     \
    \    (expt 10 (- n 2)))))\n", "  (define (helper n)\n    (cond [(= n 1) 2]\n \
    \         [(= n 2) 3]\n          [else (+ (helper (- n 1)) (helper (- n 2)))]))\n\
    \  (helper n))\n</code>\n", "  (cond [(= n 1) 2]\n        [(= n 2) 3]\n      \
    \  [else (+ (starts_one_ends (- n 1))\n                 (starts_one_ends (- n\
    \ 2)))]))\n", "  (define (starts_one_ends-helper n i)\n    (cond [(= i n) 1]\n\
    \          [(= i 1) (+ 1 (starts_one_ends-helper n (+ i 1)))]\n          [else\
    \ (* 2 (starts_one_ends-helper n (+ i 1)))]))\n  (starts_one_ends-helper n 1))\n",
  "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends (- n 1))\
    \ (starts_one_ends (- n 2)))]))\n", "  (if (= n 1)\n      2\n      (+ (expt 10\
    \ (- n 1))\n         (expt 10 (- n 2)))))\n", "  (cond\n    [(= n 1) 2]\n    [(=\
    \ n 2) 3]\n    [else (+ (starts_one_ends (- n 1))\n             (starts_one_ends\
    \ (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1)) (starts_one_ends (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(=\
    \ n 2) 3]\n    [else (+ (starts_one_ends (- n 1))\n             (starts_one_ends\
    \ (- n 2)))]))\n", "  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+ (starts_one_ends\
    \ (- n 1)) (starts_one_ends (- n 2)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
