name: HumanEval_130_tri
language: rkt
results:
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond [(= n 1) 3]\n        [(= n 2) 2]\n      \
    \  [(= n 3) 8]\n        [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n\
    \    (check-equal? (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate\
    \ 4) (list 1 3 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0\
    \ 3.0 15.0))\n    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n\
    \    (check-equal? (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal?\
    \ (candidate 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate\
    \ 9) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedtgdsie.rkt:25:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedtgdsie.rkt:26:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedtgdsie.rkt:27:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedtgdsie.rkt:28:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedtgdsie.rkt:29:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedtgdsie.rkt:30:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedtgdsie.rkt:31:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpedtgdsie.rkt:32:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98xc0t4f.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98xc0t4f.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98xc0t4f.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98xc0t4f.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98xc0t4f.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98xc0t4f.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98xc0t4f.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98xc0t4f.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond ((= n 1) 3)\n        ((= n 2) 2)\n      \
    \  ((= n 3) 8)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n\
    \    (check-equal? (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate\
    \ 4) (list 1 3 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0\
    \ 3.0 15.0))\n    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n\
    \    (check-equal? (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal?\
    \ (candidate 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate\
    \ 9) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfs3_fkc.rkt:25:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfs3_fkc.rkt:26:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfs3_fkc.rkt:27:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfs3_fkc.rkt:28:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfs3_fkc.rkt:29:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfs3_fkc.rkt:30:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfs3_fkc.rkt:31:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfs3_fkc.rkt:32:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdy0qgwwi.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdy0qgwwi.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdy0qgwwi.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdy0qgwwi.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdy0qgwwi.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdy0qgwwi.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdy0qgwwi.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdy0qgwwi.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_vtrowt.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_vtrowt.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_vtrowt.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_vtrowt.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_vtrowt.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_vtrowt.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_vtrowt.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_vtrowt.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5z9gd0e1.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5z9gd0e1.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5z9gd0e1.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5z9gd0e1.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5z9gd0e1.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5z9gd0e1.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5z9gd0e1.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5z9gd0e1.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1aq7mkzj.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1aq7mkzj.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1aq7mkzj.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1aq7mkzj.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1aq7mkzj.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1aq7mkzj.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1aq7mkzj.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1aq7mkzj.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd1yefj6.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd1yefj6.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd1yefj6.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd1yefj6.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd1yefj6.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd1yefj6.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd1yefj6.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgd1yefj6.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeh2t2zbr.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeh2t2zbr.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeh2t2zbr.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeh2t2zbr.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeh2t2zbr.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeh2t2zbr.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeh2t2zbr.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeh2t2zbr.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewsoom2t.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewsoom2t.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewsoom2t.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewsoom2t.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewsoom2t.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewsoom2t.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewsoom2t.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewsoom2t.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n```\n\n\
    ## Problem 3\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate tri))\n    (check-equal? (candidate 3) (list 1 3 2.0\
    \ 8.0))\n    (check-equal? (candidate 4) (list 1 3 2.0 8.0 3.0))\n    (check-equal?\
    \ (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n    (check-equal? (candidate 6)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal? (candidate 7) (list 1 3\
    \ 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate 8) (list 1 3 2.0 8.0\
    \ 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9) (list 1 3 2.0 8.0 3.0\
    \ 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate 20) (list 1 3 2.0 8.0\
    \ 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0 9.0 99.0 10.0 120.0 11.0))\n\
    \    (check-equal? (candidate 0) (list 1))\n    (check-equal? (candidate 1) (list\
    \ 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvuvlw0d_.rkt:22:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (if (= n 1) 3\n      (if (= n 2) 2\n          (if\
    \ (= n 3) 8\n              (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n\
    \    (check-equal? (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate\
    \ 4) (list 1 3 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0\
    \ 3.0 15.0))\n    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n\
    \    (check-equal? (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal?\
    \ (candidate 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate\
    \ 9) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe5i2xz0k.rkt:25:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe5i2xz0k.rkt:26:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe5i2xz0k.rkt:27:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe5i2xz0k.rkt:28:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe5i2xz0k.rkt:29:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe5i2xz0k.rkt:30:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe5i2xz0k.rkt:31:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe5i2xz0k.rkt:32:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxiznm7i7.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxiznm7i7.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxiznm7i7.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxiznm7i7.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxiznm7i7.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxiznm7i7.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxiznm7i7.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxiznm7i7.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmporojlxnk.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmporojlxnk.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmporojlxnk.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmporojlxnk.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmporojlxnk.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmporojlxnk.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmporojlxnk.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmporojlxnk.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcua2lp4p.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcua2lp4p.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcua2lp4p.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcua2lp4p.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcua2lp4p.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcua2lp4p.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcua2lp4p.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcua2lp4p.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ed5g2d7.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ed5g2d7.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ed5g2d7.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ed5g2d7.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ed5g2d7.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ed5g2d7.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ed5g2d7.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ed5g2d7.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond ((= n 1) 3)\n        ((= n 2) 2)\n      \
    \  ((= n 3) 8)\n        (else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n\
    \    (check-equal? (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate\
    \ 4) (list 1 3 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0\
    \ 3.0 15.0))\n    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n\
    \    (check-equal? (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal?\
    \ (candidate 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate\
    \ 9) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphocwkmk1.rkt:25:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphocwkmk1.rkt:26:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphocwkmk1.rkt:27:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphocwkmk1.rkt:28:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphocwkmk1.rkt:29:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphocwkmk1.rkt:30:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphocwkmk1.rkt:31:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphocwkmk1.rkt:32:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp27780zw5.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp27780zw5.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp27780zw5.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp27780zw5.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp27780zw5.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp27780zw5.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp27780zw5.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp27780zw5.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ahnn8r3.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ahnn8r3.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ahnn8r3.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ahnn8r3.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ahnn8r3.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ahnn8r3.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ahnn8r3.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ahnn8r3.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n;; the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n;; Tribonacci sequence is defined by the recurrence:\n\
    ;; >>> (tri 1)\n;; 3\n;; >>> (tri 2)\n;; 2\n;; >>> (tri 4)\n;; 3\n;; >>> (tri\
    \ 3)\n;; 8\n(define (tri n)\n  (cond\n    [(= n 1) 3]\n    [(= n 2) 2]\n    [(=\
    \ n 3) 8]\n    [else (+ (tri (- n 1)) (tri (- n 2)) (tri (- n 3)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tri))\n    (check-equal?\
    \ (candidate 3) (list 1 3 2.0 8.0))\n    (check-equal? (candidate 4) (list 1 3\
    \ 2.0 8.0 3.0))\n    (check-equal? (candidate 5) (list 1 3 2.0 8.0 3.0 15.0))\n\
    \    (check-equal? (candidate 6) (list 1 3 2.0 8.0 3.0 15.0 4.0))\n    (check-equal?\
    \ (candidate 7) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0))\n    (check-equal? (candidate\
    \ 8) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0))\n    (check-equal? (candidate 9)\
    \ (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0))\n    (check-equal? (candidate\
    \ 20) (list 1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0 6.0 48.0 7.0 63.0 8.0 80.0\
    \ 9.0 99.0 10.0 120.0 11.0))\n    (check-equal? (candidate 0) (list 1))\n    (check-equal?\
    \ (candidate 1) (list 1 3))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xp0hrp4.rkt:26:4\n\
    actual:     8\nexpected:   '(1 3 2.0 8.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xp0hrp4.rkt:27:4\nactual:\
    \     13\nexpected:   '(1 3 2.0 8.0 3.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xp0hrp4.rkt:28:4\nactual:\
    \     23\nexpected:   '(1 3 2.0 8.0 3.0 15.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xp0hrp4.rkt:29:4\nactual:\
    \     44\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xp0hrp4.rkt:30:4\nactual:\
    \     80\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xp0hrp4.rkt:31:4\n\
    actual:     147\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xp0hrp4.rkt:32:4\n\
    actual:     271\nexpected:   '(1 3 2.0 8.0 3.0 15.0 4.0 24.0 5.0 35.0)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xp0hrp4.rkt:33:4\n\
    actual:     220685\nexpected:\n  '(1\n  3\n  2.0\n  8.0\n  3.0\n  15.0\n  4.0\n\
    \  24.0\n  5.0\n  35.0\n  6.0\n  48.0\n  7.0\n  63.0\n  8.0\n  80.0\n  9.0\n \
    \ 99.0\n  10.0\n  120.0\n  11.0)\n--------------------\n"
  exit_code: -1
  status: Timeout
