name: HumanEval_140_fix_spaces
language: rkt
prompt: "#lang racket\n\n;; Given a string text, replace all spaces in it with underscores,\
  \ \n;; and if a string has more than 2 consecutive spaces, \n;; then replace all\
  \ consecutive spaces with - \n;; >>> (fix_spaces \" Example\")\n;; \"Example\"\n\
  ;; >>> (fix_spaces \" Example 1\")\n;; \"Example_1\"\n;; >>> (fix_spaces \" Example\
  \ 2\")\n;; \"_Example_2\"\n;; >>> (fix_spaces \" Example 3\")\n;; \"_Example-3\"\
  \n(define (fix_spaces text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fix_spaces))\n\
  \    (check-equal? (candidate \"Example\") \"Example\")\n    (check-equal? (candidate\
  \ \"Mudasir Hanif \") \"Mudasir_Hanif_\")\n    (check-equal? (candidate \"Yellow\
  \ Yellow  Dirty  Fellow\") \"Yellow_Yellow__Dirty__Fellow\")\n    (check-equal?\
  \ (candidate \"Exa   mple\") \"Exa-mple\")\n    (check-equal? (candidate \"   Exa\
  \ 1 2 2 mple\") \"-Exa_1_2_2_mple\")\n))\n\n(test-humaneval)"
completions: ["  (regexp-replace* #rx\" +\" text (lambda (m)\n                   \
    \               (if (string=? (regexp-match #rx\" +\" m) \" \")\n            \
    \                          \"_\"\n                                      \"-\"\
    ))))\n", "  (define (fix_spaces_helper text acc)\n    (cond\n      [(empty? text)\
    \ (reverse acc)]\n      [(char=? (first text) #\\space)\n       (if (char=? (second\
    \ text) #\\space)\n           (fix_spaces_helper (rest (rest text)) (cons #\\\
    - acc))\n           (fix_spaces_helper (rest text) (cons #\\_ acc)))]\n      [else\
    \ (fix_spaces_helper (rest text) (cons (first text) acc))]))\n  (fix_spaces_helper\
    \ text '()))\n", "  (define (fix_spaces_helper text count)\n    (cond\n      [(empty?\
    \ text) (if (= count 2) \"-\" \"_\")]\n      [(char=? (first text) #\\space)\n\
    \       (string-append\n        (if (= count 2) \"-\" \"_\")\n        (fix_spaces_helper\
    \ (rest text) (+ count 1)))]\n      [else\n       (string-append\n        (string\
    \ (first text))\n        (fix_spaces_helper (rest text) 0))]))\n  (fix_spaces_helper\
    \ text 0))\n", "  (define (fix_spaces_helper text count)\n    (cond\n      [(empty?\
    \ text) '()]\n      [(char=? (first text) #\\space)\n       (if (> count 2)\n\
    \           (cons #\\- (fix_spaces_helper (rest text) 0))\n         (cons #\\\
    _ (fix_spaces_helper (rest text) (+ count 1))))]\n      [else (cons (first text)\
    \ (fix_spaces_helper (rest text) 0))]))\n  (list->string (fix_spaces_helper (string->list\
    \ text) 0)))\n", "  (define (fix_spaces-helper text count)\n    (cond ((empty?\
    \ text) \"\")\n          ((char=? (first text) #\\space)\n           (if (> count\
    \ 2)\n               (string-append (fix_spaces-helper (rest text) (add1 count))\
    \ \"-\")\n               (string-append (fix_spaces-helper (rest text) (add1 count))\
    \ \"_\")))\n          (else (string-append (fix_spaces-helper (rest text) 0) (string\
    \ (first text))))))\n  (fix_spaces-helper text 0))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(char=? (first text) #\\space)\n     (string-append \"_\"\
    \ (fix_spaces (rest text)))]\n    [(char=? (first text) #\\_)\n     (string-append\
    \ \"-\" (fix_spaces (rest text)))]\n    [else\n     (string-append (string (first\
    \ text)) (fix_spaces (rest text)))]))\n", "  (define (fix_spaces_helper text count)\n\
    \    (cond\n      [(empty? text) \"\"]\n      [(equal? (first text) #\\space)\n\
    \       (cond\n         [(> count 2) (string-append \"_\" (fix_spaces_helper (rest\
    \ text) 0))]\n         [else (string-append \"-\" (fix_spaces_helper (rest text)\
    \ (+ count 1)))])]\n      [else (string-append (string (first text)) (fix_spaces_helper\
    \ (rest text) 0))]))\n  (fix_spaces_helper text 0))\n", "  (define (fix_spaces_helper\
    \ text count)\n    (cond\n      [(empty? text) empty]\n      [(char=? (first text)\
    \ #\\ )\n       (cond\n         [(= count 2) (cons #\\- (fix_spaces_helper (rest\
    \ text) 0))]\n         [else (cons #\\_ (fix_spaces_helper (rest text) (+ count\
    \ 1)))])]\n      [else (cons (first text) (fix_spaces_helper (rest text) 0))]))\n\
    \  (fix_spaces_helper text 0))\n", "  (cond\n    [(empty? text) empty]\n    [(string=?\
    \ (first text) \" \")\n     (string-append \"_\" (fix_spaces (rest text)))]\n\
    \    [(string=? (first text) \" \")\n     (string-append \"-\" (fix_spaces (rest\
    \ text)))]\n    [else\n     (string-append (first text) (fix_spaces (rest text)))]))\n",
  "  (define (fix_spaces-iter text count)\n    (cond\n      [(empty? text) empty]\n\
    \      [(char=? (first text) #\\space)\n       (if (> count 2)\n           (string-append\
    \ \"_\" (fix_spaces-iter (rest text) (+ count 1)))\n           (string-append\
    \ \"-\" (fix_spaces-iter (rest text) (+ count 1))))]\n      [else (string-append\
    \ (string (first text))\n                           (fix_spaces-iter (rest text)\
    \ 0))]))\n  (fix_spaces-iter text 0))\n", "  (define (fix_spaces_helper text count)\n\
    \    (if (string-empty? text)\n        (if (= count 2)\n            \"_\"\n  \
    \          \"\")\n        (if (string=? (string-take text 1) \" \")\n        \
    \    (if (= count 2)\n                (string-append \"_\" (fix_spaces_helper\
    \ (string-drop text 1) 0))\n                (fix_spaces_helper (string-drop text\
    \ 1) (+ count 1)))\n            (if (= count 2)\n                (string-append\
    \ \"-\" (fix_spaces_helper (string-drop text 1) 0))\n                (string-append\
    \ (string-take text 1) (fix_spaces_helper (string-drop text 1) 0))))))\n  (fix_spaces_helper\
    \ text 0))\n", "  (regexp-replace* #rx\" +\" text \"_\"))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(string=? (first text) \" \")\n     (string-append \"_\"\
    \ (fix_spaces (rest text)))]\n    [(string=? (first text) \" \")\n     (string-append\
    \ \"-\" (fix_spaces (rest text)))]\n    [else\n     (string-append (first text)\
    \ (fix_spaces (rest text)))]))\n", "  (define (fix_spaces-helper text count)\n\
    \    (cond\n      [(empty? text) empty]\n      [(char=? (first text) #\\space)\n\
    \       (if (> count 2)\n           (cons #\\- (fix_spaces-helper (rest text)\
    \ 0))\n           (cons #\\_ (fix_spaces-helper (rest text) (+ count 1))))]\n\
    \      [else (cons (first text) (fix_spaces-helper (rest text) 0))]))\n  (fix_spaces-helper\
    \ text 0))\n", "  (define (fix_spaces_helper text count)\n    (cond\n      [(empty?\
    \ text) (if (= count 2) \"-\" \"\" )]\n      [(char=? (first text) #\\space)\n\
    \       (if (= count 2)\n           (string-append \"-\" (fix_spaces_helper (rest\
    \ text) 0))\n           (fix_spaces_helper (rest text) (+ count 1)))]\n      [else\
    \ (string-append (string (first text))\n                           (fix_spaces_helper\
    \ (rest text) 0))]))\n  (fix_spaces_helper text 0))\n", "  (define (fix_spaces_helper\
    \ text count)\n    (cond ((empty? text) \"\")\n          ((char=? (first text)\
    \ #\\space)\n           (if (> count 2)\n               (string-append \"_\" (fix_spaces_helper\
    \ (rest text) 0))\n               (string-append \"-\" (fix_spaces_helper (rest\
    \ text) (+ count 1)))))\n          (else (string-append (string (first text))\
    \ (fix_spaces_helper (rest text) 0)))))\n  (fix_spaces_helper text 0))\n", " \
    \ (define (fix_spaces_helper text count)\n    (cond\n      [(empty? text) \"\"\
    ]\n      [(char=? (first text) #\\space)\n       (if (> count 2)\n           (string-append\
    \ \"_\" (fix_spaces_helper (rest text) (+ count 1)))\n           (string-append\
    \ \"-\" (fix_spaces_helper (rest text) (+ count 1))))]\n      [else (string-append\
    \ (string (first text)) (fix_spaces_helper (rest text) 0))]))\n  (fix_spaces_helper\
    \ text 0))\n", "  (define (fix_spaces-iter text count)\n    (cond [(empty? text)\
    \ empty]\n          [(char=? (first text) #\\ )\n           (if (> count 2)\n\
    \               (string-append \"_\" (fix_spaces-iter (rest text) 0))\n      \
    \         (string-append \"-\" (fix_spaces-iter (rest text) (+ count 1))))]\n\
    \          [else (string-append (string (first text)) (fix_spaces-iter (rest text)\
    \ 0))]))\n  (fix_spaces-iter text 0))\n", "  (define (fix_spaces_helper text acc)\n\
    \    (cond\n      [(empty? text) (reverse acc)]\n      [(char=? (first text) #\\\
    space)\n       (cond\n         [(char=? (second text) #\\space)\n          (fix_spaces_helper\
    \ (rest (rest text)) (cons #\\- acc))]\n         [else\n          (fix_spaces_helper\
    \ (rest text) (cons #\\_ acc))])]\n      [else\n       (fix_spaces_helper (rest\
    \ text) (cons (first text) acc))]))\n  (fix_spaces_helper text '()))\n", "  (define\
    \ (fix_spaces-iter text result)\n    (cond\n      [(empty? text) result]\n   \
    \   [(char=? (first text) #\\space)\n       (cond\n         [(char=? (first (rest\
    \ text)) #\\space)\n          (fix_spaces-iter (rest (rest text)) (string-append\
    \ result \"-\") ) ]\n         [else\n          (fix_spaces-iter (rest text) (string-append\
    \ result \"_\") ) ] )]\n      [else\n       (fix_spaces-iter (rest text) (string-append\
    \ result (string (first text))) ) ]))\n  (fix_spaces-iter text \"\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
