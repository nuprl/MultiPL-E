name: HumanEval_34_unique
language: rkt
results:
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (list (first l))]\n  \
    \  [else\n     (define f (first l))\n     (define r (unique (rest l)))\n     (if\
    \ (member f r)\n         r\n         (cons f r))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate unique))\n    (check-equal? (candidate\
    \ (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpysogblw1.rkt:22:4\n\
    actual:     '(5 2 3 9 0 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort (remove-duplicates l) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique))\n    (check-equal? (candidate (list 5 3 5 2\
    \ 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (list (first l))]\n  \
    \  [else\n     (let ([f (first l)]\n           [r (rest l)])\n       (if (member\
    \ f r)\n           (unique r)\n           (cons f (unique r))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n   \
    \ (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcvsycctc.rkt:22:4\n\
    actual:     '(5 2 3 9 0 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort l <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique))\n    (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123))\
    \ (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkenhv4g.rkt:14:4\n\
    actual:     '(0 2 3 3 3 5 5 9 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (list (first l))]\n  \
    \  [else\n     (cond\n       [(member (first l) (rest l)) (unique (rest l))]\n\
    \       [else (cons (first l) (unique (rest l)))])]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate unique))\n    (check-equal? (candidate\
    \ (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmrkydsd7.rkt:20:4\n\
    actual:     '(5 2 3 9 0 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort l <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique))\n    (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123))\
    \ (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqk7_7jei.rkt:14:4\n\
    actual:     '(0 2 3 3 3 5 5 9 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort (remove-duplicates l) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique))\n    (check-equal? (candidate (list 5 3 5 2\
    \ 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort l <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique))\n    (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123))\
    \ (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuckys6p.rkt:14:4\n\
    actual:     '(0 2 3 3 3 5 5 9 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort (remove-duplicates l) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique))\n    (check-equal? (candidate (list 5 3 5 2\
    \ 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (cond\n    [(empty? l) empty]\n    [(member (first l) (rest l)) (unique (rest\
    \ l))]\n    [else (cons (first l) (unique (rest l)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique))\n    (check-equal?\
    \ (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0w06x5d7.rkt:17:4\n\
    actual:     '(5 2 3 9 0 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort l <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique))\n    (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123))\
    \ (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpioph5zyt.rkt:14:4\n\
    actual:     '(0 2 3 3 3 5 5 9 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort l #&lt;)\n  (cond\n    [(null? l) '()]\n    [(member (car l) (cdr l))\
    \ (unique (cdr l))]\n    [else (cons (car l) (unique (cdr l)))]))\n</code>\nI'm\
    \ not sure why this doesn't work. I'm using DrRacket.\n\n\nA:\n\nYou're not using\
    \ <code>sort</code> correctly. It doesn't modify the list, it returns a new sorted\
    \ list.\n<code>(define (unique l)\n  (cond\n    [(null? l) '()]\n    [(member\
    \ (car l) (cdr l)) (unique (cdr l))]\n    [else (cons (car l) (unique (cdr l)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique))\n\
    \    (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphihg0qw3.rkt:6:0: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 12\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (list (first l))]\n  \
    \  [else\n     (cond\n       [(member (first l) (rest l)) (unique (rest l))]\n\
    \       [else (cons (first l) (unique (rest l)))])]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate unique))\n    (check-equal? (candidate\
    \ (list 5 3 5 2 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2omcej_a.rkt:20:4\n\
    actual:     '(5 2 3 9 0 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort (remove-duplicates l) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique))\n    (check-equal? (candidate (list 5 3 5 2\
    \ 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort (remove-duplicates l) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique))\n    (check-equal? (candidate (list 5 3 5 2\
    \ 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort (remove-duplicates l) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique))\n    (check-equal? (candidate (list 5 3 5 2\
    \ 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort (remove-duplicates l) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique))\n    (check-equal? (candidate (list 5 3 5 2\
    \ 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort l <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique))\n    (check-equal? (candidate (list 5 3 5 2 3 3 9 0 123))\
    \ (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps0cuhn0u.rkt:14:4\n\
    actual:     '(0 2 3 3 3 5 5 9 123)\nexpected:   '(0 2 3 5 9 123)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort (remove-duplicates l) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique))\n    (check-equal? (candidate (list 5 3 5 2\
    \ 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return sorted unique elements in a list\n;; >>> (unique\
    \ (list 5 3 5 2 3 3 9 0 123))\n;; (list 0 2 3 5 9 123)\n(define (unique l)\n \
    \ (sort (remove-duplicates l) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique))\n    (check-equal? (candidate (list 5 3 5 2\
    \ 3 3 9 0 123)) (list 0 2 3 5 9 123))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
