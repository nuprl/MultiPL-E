name: HumanEval_83_starts_one_ends
language: rkt
results:
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1)) (starts_one_ends (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate\
    \ 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
    \ 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj5hk4o2w.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj5hk4o2w.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj5hk4o2w.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj5hk4o2w.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj5hk4o2w.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1))\n             (starts_one_ends (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
    \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n   \
    \ (check-equal? (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n  \
    \  (check-equal? (candidate 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ln446cm.rkt:17:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9ln446cm.rkt:18:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9ln446cm.rkt:19:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9ln446cm.rkt:20:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ln446cm.rkt:21:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1)) (starts_one_ends (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate\
    \ 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
    \ 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4oggzg19.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4oggzg19.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4oggzg19.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4oggzg19.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4oggzg19.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1))\n             (starts_one_ends (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
    \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n   \
    \ (check-equal? (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n  \
    \  (check-equal? (candidate 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkpdlq5w0.rkt:17:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkpdlq5w0.rkt:18:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpkpdlq5w0.rkt:19:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkpdlq5w0.rkt:20:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkpdlq5w0.rkt:21:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1)) (starts_one_ends (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate\
    \ 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
    \ 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvwjz44qd.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvwjz44qd.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvwjz44qd.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvwjz44qd.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvwjz44qd.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond [(= n 1) 2]\n        [(= n 2) 3]\n        [else\
    \ (+ (starts_one_ends (- n 1))\n                 (starts_one_ends (- n 2)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
    \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n   \
    \ (check-equal? (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n  \
    \  (check-equal? (candidate 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppwe6m73y.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppwe6m73y.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmppwe6m73y.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppwe6m73y.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppwe6m73y.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1))\n             (starts_one_ends (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
    \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n   \
    \ (check-equal? (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n  \
    \  (check-equal? (candidate 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq1dfnziz.rkt:17:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq1dfnziz.rkt:18:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpq1dfnziz.rkt:19:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq1dfnziz.rkt:20:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq1dfnziz.rkt:21:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else\n\
    \     (+ (expt 10 (- n 1))\n        (* 2 (expt 10 (- n 2))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate\
    \ 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
    \ 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5fcqoslw.rkt:18:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5fcqoslw.rkt:19:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp5fcqoslw.rkt:20:4\nactual:     120\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5fcqoslw.rkt:21:4\nactual:     1200\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5fcqoslw.rkt:22:4\n\
    actual:     12000\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1)) (starts_one_ends (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate\
    \ 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
    \ 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu42i40ur.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu42i40ur.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpu42i40ur.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpu42i40ur.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu42i40ur.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1)) (starts_one_ends (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate\
    \ 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
    \ 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb2kd_c0h.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb2kd_c0h.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb2kd_c0h.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb2kd_c0h.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb2kd_c0h.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (if (= n 1)\n      2\n      (+ (expt 10 (- n 1))\n  \
    \       (expt 10 (- n 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate starts_one_ends))\n    (check-equal? (candidate 1) 1)\n\
    \    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate 3) 180)\n \
    \   (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate 5) 18000)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf3p0j1hw.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf3p0j1hw.rkt:17:4\nactual:     11\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpf3p0j1hw.rkt:18:4\nactual:     110\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf3p0j1hw.rkt:19:4\nactual:     1100\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf3p0j1hw.rkt:20:4\n\
    actual:     11000\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (define (helper n)\n    (cond [(= n 1) 2]\n         \
    \ [(= n 2) 3]\n          [else (+ (helper (- n 1)) (helper (- n 2)))]))\n  (helper\
    \ n))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate starts_one_ends))\n    (check-equal? (candidate 1) 1)\n    (check-equal?\
    \ (candidate 2) 18)\n    (check-equal? (candidate 3) 180)\n    (check-equal? (candidate\
    \ 4) 1800)\n    (check-equal? (candidate 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnorrx8q7.rkt:11:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpnorrx8q7.rkt:11:0\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond [(= n 1) 2]\n        [(= n 2) 3]\n        [else\
    \ (+ (starts_one_ends (- n 1))\n                 (starts_one_ends (- n 2)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
    \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n   \
    \ (check-equal? (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n  \
    \  (check-equal? (candidate 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr0pztk5e.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpr0pztk5e.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpr0pztk5e.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpr0pztk5e.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr0pztk5e.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (define (starts_one_ends-helper n i)\n    (cond [(= i\
    \ n) 1]\n          [(= i 1) (+ 1 (starts_one_ends-helper n (+ i 1)))]\n      \
    \    [else (* 2 (starts_one_ends-helper n (+ i 1)))]))\n  (starts_one_ends-helper\
    \ n 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ starts_one_ends))\n    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate\
    \ 2) 18)\n    (check-equal? (candidate 3) 180)\n    (check-equal? (candidate 4)\
    \ 1800)\n    (check-equal? (candidate 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprgitw2lz.rkt:18:4\n\
    actual:     2\nexpected:   18\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprgitw2lz.rkt:19:4\nactual:     3\n\
    expected:   180\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprgitw2lz.rkt:20:4\nactual:     5\nexpected:\
    \   1800\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprgitw2lz.rkt:21:4\nactual:     9\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1)) (starts_one_ends (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate\
    \ 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
    \ 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9p09pkoz.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9p09pkoz.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9p09pkoz.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9p09pkoz.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9p09pkoz.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (if (= n 1)\n      2\n      (+ (expt 10 (- n 1))\n  \
    \       (expt 10 (- n 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate starts_one_ends))\n    (check-equal? (candidate 1) 1)\n\
    \    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate 3) 180)\n \
    \   (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate 5) 18000)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ft58w9t.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3ft58w9t.rkt:17:4\nactual:     11\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3ft58w9t.rkt:18:4\nactual:     110\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3ft58w9t.rkt:19:4\nactual:     1100\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ft58w9t.rkt:20:4\n\
    actual:     11000\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1))\n             (starts_one_ends (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
    \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n   \
    \ (check-equal? (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n  \
    \  (check-equal? (candidate 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyo53lptn.rkt:17:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyo53lptn.rkt:18:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyo53lptn.rkt:19:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyo53lptn.rkt:20:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyo53lptn.rkt:21:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1)) (starts_one_ends (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate\
    \ 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
    \ 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpocqwvgx4.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpocqwvgx4.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpocqwvgx4.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpocqwvgx4.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpocqwvgx4.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1))\n             (starts_one_ends (- n 2)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n\
    \    (check-equal? (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n   \
    \ (check-equal? (candidate 3) 180)\n    (check-equal? (candidate 4) 1800)\n  \
    \  (check-equal? (candidate 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpszchakk2.rkt:17:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpszchakk2.rkt:18:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpszchakk2.rkt:19:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpszchakk2.rkt:20:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpszchakk2.rkt:21:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a positive integer n, return the count of the\
    \ numbers of n-digit\n;; positive integers that start or end with 1.\n(define\
    \ (starts_one_ends n)\n  (cond\n    [(= n 1) 2]\n    [(= n 2) 3]\n    [else (+\
    \ (starts_one_ends (- n 1)) (starts_one_ends (- n 2)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate starts_one_ends))\n    (check-equal?\
    \ (candidate 1) 1)\n    (check-equal? (candidate 2) 18)\n    (check-equal? (candidate\
    \ 3) 180)\n    (check-equal? (candidate 4) 1800)\n    (check-equal? (candidate\
    \ 5) 18000)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp87a4uuph.rkt:16:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp87a4uuph.rkt:17:4\nactual:     3\n\
    expected:   18\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp87a4uuph.rkt:18:4\nactual:     5\nexpected:\
    \   180\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp87a4uuph.rkt:19:4\nactual:     8\nexpected:   1800\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp87a4uuph.rkt:20:4\n\
    actual:     13\nexpected:   18000\n--------------------\n"
  exit_code: 0
  status: Exception
