name: HumanEval_47_median
language: rkt
results:
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnsti31r7.rkt:21:4\n\
    actual:     5/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnsti31r7.rkt:22:4\nactual:     10\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnsti31r7.rkt:23:4\nactual:     5/2\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnsti31r7.rkt:24:4\nactual:     5/2\nexpected:   5.5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnsti31r7.rkt:25:4\n\
    actual:     7/2\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n \
    \   (cond\n      [(empty? l) (list x)]\n      [(> x (first l)) (cons (first l)\
    \ (insert x (rest l)))]\n      [else (cons x l)]))\n  (define (middle l)\n   \
    \ (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [else\
    \ (middle (rest l))]))\n  (define (middle-two l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (first\
    \ l)]\n      [else (middle-two (rest l))]))\n  (cond\n    [(empty? l) 0]\n   \
    \ [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l))) (first l)]\n  \
    \  [(empty? (rest (rest (rest l)))) (/ (+ (first l) (first (rest l))) 2)]\n  \
    \  [else (/ (+ (middle-two (sort l)) (middle (sort l))) 2)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_4u5dtw.rkt:41:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpt_4u5dtw.rkt:42:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpt_4u5dtw.rkt:44:4\nactual:     6\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpt_4u5dtw.rkt:45:4\nactual:     9\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpekwuv6eb.rkt:21:4\n\
    actual:     5/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpekwuv6eb.rkt:22:4\nactual:     10\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpekwuv6eb.rkt:23:4\nactual:     5/2\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpekwuv6eb.rkt:24:4\nactual:     5/2\nexpected:   5.5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpekwuv6eb.rkt:25:4\n\
    actual:     7/2\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ empty]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest\
    \ l))]))\n  (define (median-helper2 l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) empty]\n      [else (median-helper2 (rest l))]))\n \
    \ (define (median-helper3 l)\n    (cond\n      [(empty? l) empty]\n      [(empty?\
    \ (rest l)) empty]\n      [(empty? (rest (rest l))) (first (rest l))]\n      [else\
    \ (median-helper3 (rest l))]))\n  (if (empty? l)\n      empty\n      (if (empty?\
    \ (rest l))\n          (first l)\n          (if (empty? (rest (rest l)))\n   \
    \           (first l)\n              (if (empty? (rest (rest (rest l))))\n   \
    \               (/ (+ (median-helper l) (median-helper2 l)) 2)\n             \
    \     (/ (+ (median-helper l) (median-helper3 l)) 2))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp24w73en2.rkt:40:4\n\
    actual:     5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp24w73en2.rkt:41:4\nactual:     20\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp24w73en2.rkt:43:4\nactual:     6\nexpected:\
    \   5.5\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l n)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n\
    \      [else (median-helper (rest l) (- n 1))]))\n  (median-helper l (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1kv0cp2p.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1kv0cp2p.rkt:23:4\nactual:     15\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1kv0cp2p.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1kv0cp2p.rkt:26:4\nactual:     9/2\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n \
    \   (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n \
    \     [else (cons (first l) (insert x (rest l)))]))\n  (define (length l)\n  \
    \  (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest l)))]))\n  (define\
    \ (nth n l)\n    (cond\n      [(= n 0) (first l)]\n      [else (nth (- n 1) (rest\
    \ l))]))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (odd? n)\n\
    \    (not (even? n)))\n  (define (half n)\n    (/ n 2))\n  (define (nth-from-end\
    \ n l)\n    (nth (- (length l) n) l))\n  (cond\n    [(empty? l) 0]\n    [(even?\
    \ (length l))\n     (/ (+ (nth (half (length l)) (sort l))\n           (nth-from-end\
    \ (half (length l)) (sort l)))\n        2)]\n    [(odd? (length l))\n     (nth\
    \ (half (length l)) (sort l))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy1kwzvw_.rkt:48:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy1kwzvw_.rkt:49:4\nactual:     10\nexpected:   8.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy1kwzvw_.rkt:50:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy1kwzvw_.rkt:51:4\nactual:     6\nexpected:   5.5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy1kwzvw_.rkt:52:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (sorted-list l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert-sorted (first l) (sorted-list (rest l)))]))\n  (define (insert-sorted\
    \ n l)\n    (cond\n      [(empty? l) (list n)]\n      [(< n (first l)) (cons n\
    \ l)]\n      [else (cons (first l) (insert-sorted n (rest l)))]))\n  (define (middle\
    \ l)\n    (if (empty? (rest l))\n        (first l)\n        (/ (+ (first l) (first\
    \ (rest l))) 2)))\n  (if (empty? l)\n      0\n      (middle (sorted-list l))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpve6q7uek.rkt:31:4\n\
    actual:     3/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpve6q7uek.rkt:32:4\nactual:     -3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpve6q7uek.rkt:34:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpve6q7uek.rkt:35:4\nactual:     3/2\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l n)\n    (cond\n      [(= n 1) (first\
    \ l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l) (- n 1))]))\n  (median-helper (sort l <) (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpacjxrkfc.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpacjxrkfc.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpacjxrkfc.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpacjxrkfc.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n\
    \        (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length\
    \ l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4olg5zsy.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4olg5zsy.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4olg5zsy.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposic38ys.rkt:21:4\n\
    actual:     5/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmposic38ys.rkt:22:4\nactual:     10\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmposic38ys.rkt:23:4\nactual:     5/2\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmposic38ys.rkt:24:4\nactual:     5/2\nexpected:   5.5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposic38ys.rkt:25:4\n\
    actual:     7/2\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv7bfao9z.rkt:21:4\n\
    actual:     5/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv7bfao9z.rkt:22:4\nactual:     10\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpv7bfao9z.rkt:23:4\nactual:     5/2\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpv7bfao9z.rkt:24:4\nactual:     5/2\nexpected:   5.5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv7bfao9z.rkt:25:4\n\
    actual:     7/2\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [else (median-helper (rest l))]))\n\
    \  (/ (+ (median-helper l) (median-helper (sort < l))) 2))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsd3a9hh.rkt:20:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsd3a9hh.rkt:21:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsd3a9hh.rkt:22:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsd3a9hh.rkt:23:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsd3a9hh.rkt:24:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else\n       (define mid (/\
    \ (length l) 2))\n       (define (median-helper-helper l)\n         (cond\n  \
    \         [(empty? l) 0]\n           [(= (length l) mid) (first l)]\n        \
    \   [else (median-helper-helper (rest l))]))\n       (median-helper-helper l)]))\n\
    \  (define (median-helper-helper l)\n    (cond\n      [(empty? l) 0]\n      [(empty?\
    \ (rest l)) (first l)]\n      [else\n       (define mid (/ (length l) 2))\n  \
    \     (define (median-helper-helper-helper l)\n         (cond\n           [(empty?\
    \ l) 0]\n           [(= (length l) mid) (first l)]\n           [else (median-helper-helper-helper\
    \ (rest l))]))\n       (median-helper-helper-helper l)]))\n  (define (median-helper-helper-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else\n       (define mid (/ (length l) 2))\n       (define (median-helper-helper-helper-helper\
    \ l)\n         (cond\n           [(empty? l) 0]\n           [(= (length l) mid)\
    \ (first l)]\n           [else (median-helper-helper-helper-helper (rest l))]))\n\
    \       (median-helper-helper-helper-helper l)]))\n  (define (median-helper-helper-helper-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [else\n       (define mid (/ (length l) 2))\n       (define (median-helper-helper-helper-helper-helper\
    \ l)\n        \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpthp4soov.rkt:51:7: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 53\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eet2uwq.rkt:21:4\n\
    actual:     5/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2eet2uwq.rkt:22:4\nactual:     10\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2eet2uwq.rkt:23:4\nactual:     5/2\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2eet2uwq.rkt:24:4\nactual:     5/2\nexpected:   5.5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eet2uwq.rkt:25:4\n\
    actual:     7/2\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(empty? (rest l)) (first l)]\n      [else (median-helper (rest l))]))\n\
    \  (/ (median-helper l) 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprj4idio6.rkt:21:4\n\
    actual:     5/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprj4idio6.rkt:22:4\nactual:     10\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprj4idio6.rkt:23:4\nactual:     5/2\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprj4idio6.rkt:24:4\nactual:     5/2\nexpected:   5.5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprj4idio6.rkt:25:4\n\
    actual:     7/2\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l)\
    \ 0]\n      [(= (length l) 1) (first l)]\n      [(= (length l) 2) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest (rest l)))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjsdpfupu.rkt:22:4\n\
    actual:     5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjsdpfupu.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjsdpfupu.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjsdpfupu.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-iter l n)\n    (if (zero? n)\n        (error\
    \ \"median: empty list\")\n        (if (= n 1)\n            (car l)\n        \
    \    (let ((n2 (quotient n 2)))\n              (if (odd? n)\n                \
    \  (median-iter (cdr l) (- n 1))\n                  (let ((m1 (median-iter l n2))\n\
    \                        (m2 (median-iter (cdr l) n2)))\n                    (/\
    \ (+ m1 m2) 2.0)))))))\n  (median-iter l (length l)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphurvddnv.rkt:27:4\n\
    actual:     2.25\nexpected:   3\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphurvddnv.rkt:28:4\nactual:\
    \     254.0\nexpected:   8.0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphurvddnv.rkt:31:4\nactual:     7.5\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n\
    \      [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n\
    \      [else (cons (first l) (insert x (rest l)))]))\n  (define (length l)\n \
    \   (cond\n      [(empty? l) 0]\n      [else (+ 1 (length (rest l)))]))\n  (define\
    \ (nth l n)\n    (cond\n      [(empty? l) empty]\n      [(= n 0) (first l)]\n\
    \      [else (nth (rest l) (- n 1))]))\n  (define (half l)\n    (quotient (length\
    \ l) 2))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define (average\
    \ x y)\n    (/ (+ x y) 2))\n  (cond\n    [(empty? l) empty]\n    [(even? (length\
    \ l))\n     (average (nth (sort-list l) (half l))\n              (nth (sort-list\
    \ l) (- (half l) 1)))]\n    [else (nth (sort-list l) (half l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptr83iw4r.rkt:46:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptr83iw4r.rkt:48:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (sort l)\n    (cond\n      [(null? l) '()]\n   \
    \   [else (insert (car l) (sort (cdr l)))]))\n  (define (insert n l)\n    (cond\n\
    \      [(null? l) (list n)]\n      [(<= n (car l)) (cons n l)]\n      [else (cons\
    \ (car l) (insert n (cdr l)))]))\n  (define (length l)\n    (cond\n      [(null?\
    \ l) 0]\n      [else (+ 1 (length (cdr l)))]))\n  (define (nth n l)\n    (cond\n\
    \      [(= n 0) (car l)]\n      [else (nth (- n 1) (cdr l))]))\n  (define (nth-from-end\
    \ n l)\n    (cond\n      [(= n 0) (car l)]\n      [else (nth-from-end (- n 1)\
    \ (cdr (reverse l)))]))\n  (define (reverse l)\n    (cond\n      [(null? l) '()]\n\
    \      [else (append (reverse (cdr l)) (list (car l)))]))\n  (define (append l1\
    \ l2)\n    (cond\n      [(null? l1) l2]\n      [else (cons (car l1) (append (cdr\
    \ l1) l2))]))\n  (define (half-length l)\n    (quotient (length l) 2))\n  (cond\n\
    \    [(null? l) 0]\n    [(= (length l) 1) (car l)]\n    [(= (length l) 2) (/ (+\
    \ (car l) (cadr l)) 2)]\n    [(odd? (length l)) (nth (half-length l) (sort l))]\n\
    \    [else (/ (+ (nth (half-length l) (sort l)) (nth-from-end (half-length l)\
    \ (sort l))) 2)]))\n```\n\n## Problem 4\n\n```racket\n#lang racket\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiztvahis.rkt:48:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
    (define (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n  \
    \        [(empty? (rest l)) (first l)]\n          [else (median-helper (rest l))]))\n\
    \  (/ (+ (median-helper l) (median-helper (sort < l))) 2))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8wggrle.rkt:20:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8wggrle.rkt:21:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8wggrle.rkt:22:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8wggrle.rkt:23:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps8wggrle.rkt:24:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  exit_code: 0
  status: Exception
