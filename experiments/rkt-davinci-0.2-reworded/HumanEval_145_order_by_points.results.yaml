name: HumanEval_145_order_by_points
language: rkt
results:
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgib3qi1f.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpgib3qi1f.rkt:15:14\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzdgr_8o6.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzdgr_8o6.rkt:15:14\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (if (= (sum-digits a) (sum-digits b))\n                   (< (index-of\
    \ nums a) (index-of nums b))\n                   (< (sum-digits a) (sum-digits\
    \ b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb2fjq2bv.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpb2fjq2bv.rkt:14:23\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (if (= a-sum b-sum)\n                     (< (index nums\
    \ a) (index nums b))\n                     (< a-sum b-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpswvvdhoy.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpswvvdhoy.rkt:14:29\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0m2jyo9p.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0m2jyo9p.rkt:15:14\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (or (< (sum-digits x) (sum-digits y))\n                   (and\
    \ (= (sum-digits x) (sum-digits y))\n                        (< (index-of x nums)\
    \ (index-of y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf5ikfwq4.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpf5ikfwq4.rkt:14:23\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo3fll76t.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo3fll76t.rkt:15:14\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc77lyekv.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpc77lyekv.rkt:14:19\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzlc2s1er.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzlc2s1er.rkt:15:14\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (let\
    \ ([x-sum (sum-digits x)]\n                            [y-sum (sum-digits y)])\n\
    \                        (cond [(< x-sum y-sum) #t]\n                        \
    \      [(> x-sum y-sum) #f]\n                              [else (< (index-of\
    \ nums x) (index-of nums y))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfaosmka6.rkt:13:36: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpfaosmka6.rkt:13:36\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbc4g0u0x.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbc4g0u0x.rkt:14:29\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits\
    \ b)))\n                 (if (= a-sum b-sum)\n                     (< (index-of\
    \ nums a) (index-of nums b))\n                     (< a-sum b-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy9reci5x.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpy9reci5x.rkt:14:29\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpog_bzujb.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpog_bzujb.rkt:14:29\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (x) (cons\
    \ x (sum-digits x))) nums)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3ad48rq_.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3ad48rq_.rkt:13:34\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits\
    \ y)])\n            (cond [(< x-sum y-sum) #t]\n                  [(> x-sum y-sum)\
    \ #f]\n                  [else (< (index-of nums x) (index-of nums y))])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv_7abjvq.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpv_7abjvq.rkt:15:24\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd2h6pwg3.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpd2h6pwg3.rkt:14:19\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(> a-sum b-sum) #t]\n    \
    \               [(< a-sum b-sum) #f]\n                   [else (< (index-of nums\
    \ a) (index-of nums b))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnngh5ud9.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnngh5ud9.rkt:14:29\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (if (= (sum-digits x) (sum-digits y))\n                   (< (index\
    \ nums x) (index nums y))\n                   (< (sum-digits x) (sum-digits y))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpj728r5hn.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpj728r5hn.rkt:14:23\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y) (or\
    \ (< (sum-digits x) (sum-digits y))\n                               (and (= (sum-digits\
    \ x) (sum-digits y))\n                                    (< x y))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsciazwtn.rkt:13:35: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpsciazwtn.rkt:13:35\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_jz12i_2.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp_jz12i_2.rkt:15:14\n"
  exit_code: 1
  status: Exception
