language: rkt
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (if (= (sum-digits a) (sum-digits b))\n                   (< (index-of\
    \ nums a) (index-of nums b))\n                   (< (sum-digits a) (sum-digits\
    \ b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbxgfo3x7.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbxgfo3x7.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (if (= a-sum b-sum)\n                     (< (index nums\
    \ a) (index nums b))\n                     (< a-sum b-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu82wj41m.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu82wj41m.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (or (< (sum-digits x) (sum-digits y))\n                   (and\
    \ (= (sum-digits x) (sum-digits y))\n                        (< (index-of x nums)\
    \ (index-of y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg79i68gf.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpg79i68gf.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxgx0bwqa.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxgx0bwqa.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (let\
    \ ([x-sum (sum-digits x)]\n                            [y-sum (sum-digits y)])\n\
    \                        (cond [(< x-sum y-sum) #t]\n                        \
    \      [(> x-sum y-sum) #f]\n                              [else (< (index-of\
    \ nums x) (index-of nums y))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp97iss6d_.rkt:13:36: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp97iss6d_.rkt:13:36\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp440ny4yi.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp440ny4yi.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits\
    \ b)))\n                 (if (= a-sum b-sum)\n                     (< (index-of\
    \ nums a) (index-of nums b))\n                     (< a-sum b-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3ordftvt.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3ordftvt.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo6686kdq.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo6686kdq.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (x) (cons\
    \ x (sum-digits x))) nums)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmsz76nb1.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpmsz76nb1.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits\
    \ y)])\n            (cond [(< x-sum y-sum) #t]\n                  [(> x-sum y-sum)\
    \ #f]\n                  [else (< (index-of nums x) (index-of nums y))])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyzqp5z9h.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpyzqp5z9h.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(> a-sum b-sum) #t]\n    \
    \               [(< a-sum b-sum) #f]\n                   [else (< (index-of nums\
    \ a) (index-of nums b))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu2ukltc_.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu2ukltc_.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (if (= (sum-digits x) (sum-digits y))\n                   (< (index\
    \ nums x) (index nums y))\n                   (< (sum-digits x) (sum-digits y))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2kzozv1_.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp2kzozv1_.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y) (or\
    \ (< (sum-digits x) (sum-digits y))\n                               (and (= (sum-digits\
    \ x) (sum-digits y))\n                                    (< x y))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpav9erquj.rkt:13:35: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpav9erquj.rkt:13:35\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(> a-sum b-sum) #t]\n    \
    \               [(< a-sum b-sum) #f]\n                   [else (< a b)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvutabt7k.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpvutabt7k.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (x) (cons\
    \ x (sum-digits x))) nums)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmsz76nb1.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpmsz76nb1.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (let ((x-sum (sum-digits x))\n                (y-sum (sum-digits\
    \ y)))\n            (if (= x-sum y-sum)\n                (< (index nums x) (index\
    \ nums y))\n                (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy7sc97c7.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpy7sc97c7.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (cond\n            [(= (sum-digits x) (sum-digits y))\n   \
    \          (< (index-of x nums) (index-of y nums))]\n            [(< (sum-digits\
    \ x) (sum-digits y))\n             #t]\n            [else\n             #f]))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_j3a04or.rkt:16:17: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp_j3a04or.rkt:16:17\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (let ([a-sum (sum-digits a)]\n                [b-sum (sum-digits\
    \ b)])\n            (cond\n              [(< a-sum b-sum) #t]\n              [(>\
    \ a-sum b-sum) #f]\n              [(< a b) #t]\n              [(> a b) #f])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqi_8b14_.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqi_8b14_.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y) (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpatydt1dp.rkt:13:31: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpatydt1dp.rkt:13:31\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo6686kdq.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo6686kdq.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (or (< (sum-digits x) (sum-digits y))\n              (and (=\
    \ (sum-digits x) (sum-digits y))\n                   (< (index-of x nums) (index-of\
    \ y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjsegy4g2.rkt:15:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpjsegy4g2.rkt:15:18\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (let ([a-sum (sum-digits a)]\n                [b-sum (sum-digits\
    \ b)])\n            (cond\n              [(< a-sum b-sum) #t]\n              [(>\
    \ a-sum b-sum) #f]\n              [(< (index-of nums a) (index-of nums b)) #t]\n\
    \              [else #f])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxfteswh6.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxfteswh6.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond [(< x-sum y-sum) #t]\n                       [(>\
    \ x-sum y-sum) #f]\n                       [(< x y) #t]\n                    \
    \   [(> x y) #f]\n                       [else #f])))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqjrg9v2w.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqjrg9v2w.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ x nums) (index-of y nums))\n                     (< x-sum y-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4zak45gy.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4zak45gy.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n\
    \               (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits\
    \ b)))\n                 (cond\n                   [(> a-sum b-sum) #t]\n    \
    \               [(< a-sum b-sum) #f]\n                   [else (< (index-of nums\
    \ a) (index-of nums b))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpztk3c6k9.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpztk3c6k9.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (or (< (sum-digits x) (sum-digits y))\n                   (and\
    \ (= (sum-digits x) (sum-digits y))\n                        (< (index-of x nums)\
    \ (index-of y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpomc8f21t.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpomc8f21t.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits\
    \ y)])\n            (if (= x-sum y-sum)\n                (< (index-of nums x)\
    \ (index-of nums y))\n                (< x-sum y-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpub7p916a.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpub7p916a.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (x) (cons\
    \ x (sum-digits x))) nums)\n        (lambda (x y) (or (< (cdr x) (cdr y))\n  \
    \                        (and (= (cdr x) (cdr y))\n                          \
    \     (< (car x) (car y)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa8sgvbq7.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpa8sgvbq7.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (and (not (= (sum-digits x) (sum-digits y)))\n               \
    \     (< (sum-digits x) (sum-digits y))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0gvlnqgh.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0gvlnqgh.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxgx0bwqa.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxgx0bwqa.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwchk3bgs.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpwchk3bgs.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (if (= (sum-digits x) (sum-digits y))\n                   (< (index-of\
    \ x nums) (index-of y nums))\n                   (< (sum-digits x) (sum-digits\
    \ y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7zei53mh.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7zei53mh.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwchk3bgs.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpwchk3bgs.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxgx0bwqa.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxgx0bwqa.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(< x-sum y-sum) #t]\n    \
    \               [(> x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr7n929ok.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpr7n929ok.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ nums x) (index-of nums y))\n                     (< x-sum y-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpms11rhe3.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpms11rhe3.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (or (< (sum-digits x) (sum-digits y))\n                   (and\
    \ (= (sum-digits x) (sum-digits y))\n                        (< (index-of x nums)\
    \ (index-of y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpomc8f21t.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpomc8f21t.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((< x-sum y-sum) #t)\n                       ((>\
    \ x-sum y-sum) #f)\n                       (else (< (index-of nums x) (index-of\
    \ nums y))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplegzrj5m.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmplegzrj5m.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   [(< x-sum y-sum) #t]\n    \
    \               [(> x-sum y-sum) #f]\n                   [else (< (index-of nums\
    \ x) (index-of nums y))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0qslg6wf.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0qslg6wf.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (x) (cons\
    \ x (sum-digits x))) nums)\n        (lambda (x y)\n          (cond\n         \
    \   [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x) (cdr y)) #f]\n         \
    \   [else (< (car x) (car y))]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpthb6i051.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpthb6i051.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits\
    \ b)))\n                 (cond\n                   ((> a-sum b-sum) #t)\n    \
    \               ((< a-sum b-sum) #f)\n                   (else (< a b)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkq7oxsbp.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkq7oxsbp.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (or (< (sum-digits x) (sum-digits y))\n                   (and\
    \ (= (sum-digits x) (sum-digits y))\n                        (< (index-of x nums)\
    \ (index-of y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg79i68gf.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpg79i68gf.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (if (= (sum-digits a) (sum-digits b))\n                   (< (index-of\
    \ a nums) (index-of b nums))\n                   (< (sum-digits a) (sum-digits\
    \ b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsk7r14bx.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpsk7r14bx.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(> a-sum b-sum) #t]\n    \
    \               [(< a-sum b-sum) #f]\n                   [else (< a b)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvutabt7k.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpvutabt7k.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (or (< (sum-digits x) (sum-digits y))\n                   (and\
    \ (= (sum-digits x) (sum-digits y))\n                        (< (index-of x nums)\
    \ (index-of y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpomc8f21t.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpomc8f21t.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (n) (list\
    \ n (sum-digits n))) nums)\n        (lambda (n1 n2)\n          (cond\n       \
    \     [(< (cadr n1) (cadr n2)) #t]\n            [(> (cadr n1) (cadr n2)) #f]\n\
    \            [else (< (car n1) (car n2))]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpossx_mv2.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpossx_mv2.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((> x-sum y-sum) #t)\n                       ((<\
    \ x-sum y-sum) #f)\n                       (else (< (index-of x nums) (index-of\
    \ y nums))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8dy8p0fe.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp8dy8p0fe.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqc1g3y3r.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqc1g3y3r.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp440ny4yi.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp440ny4yi.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (let ((x-sum (sum-digits x))\n                (y-sum (sum-digits\
    \ y)))\n            (if (= x-sum y-sum)\n                (< (index-of nums x)\
    \ (index-of nums y))\n                (< x-sum y-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaspc1p6i.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpaspc1p6i.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (cond\n                 [(< (sum-digits a) (sum-digits b)) #t]\n\
    \                 [(> (sum-digits a) (sum-digits b)) #f]\n                 [else\
    \ (< (index-of a nums) (index-of b nums))]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprqiyv63q.rkt:15:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprqiyv63q.rkt:15:22\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo6686kdq.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo6686kdq.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (n) (cons\
    \ n (sum-digits n))) nums)\n        (lambda (x y) (or (< (cdr x) (cdr y))\n  \
    \                        (and (= (cdr x) (cdr y))\n                          \
    \     (< (car x) (car y)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcgqkdm2c.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpcgqkdm2c.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(= x-sum y-sum)\n        \
    \            (< (index nums x) (index nums y))]\n                   [(< x-sum\
    \ y-sum)\n                    #t]\n                   [else\n                \
    \    #f])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7kz7u5us.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7kz7u5us.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0uqntx4l.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0uqntx4l.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   ((> x-sum y-sum) #t)\n    \
    \               ((< x-sum y-sum) #f)\n                   (else (< x y)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq3ncd7rj.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpq3ncd7rj.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((< x-sum y-sum) #t)\n                       ((>\
    \ x-sum y-sum) #f)\n                       (else (< (index-of nums x) (index-of\
    \ nums y))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplegzrj5m.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmplegzrj5m.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits\
    \ b)))\n                 (cond ((> a-sum b-sum) #t)\n                       ((<\
    \ a-sum b-sum) #f)\n                       (else (< (index-of nums a) (index-of\
    \ nums b))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfsnw53l4.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpfsnw53l4.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (or\
    \ (and (zero? (modulo x 10)) (not (zero? (modulo y 10))))\n                  \
    \         (and (zero? (modulo y 10)) (not (zero? (modulo x 10))))\n          \
    \                 (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n        \
    \                   (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n      \
    \                     (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n    \
    \                       (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n  \
    \                         (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n\
    \                           (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n\
    \                           (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n\
    \                           (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n\
    \                           (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n\
    \                           (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n\
    \                           (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10)) (zero? (modulo x 10)))\n\
    \                           (and (zero? (modulo x 10)) (zero? (modulo y 10)))\n\
    \                           (and (zero? (modulo y 10))\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp9po6sgay.rkt:34:27: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 35\n  context...:\n\
    \   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (if (= (sum-digits a) (sum-digits b))\n                   (< (index-of\
    \ nums a) (index-of nums b))\n                   (< (sum-digits a) (sum-digits\
    \ b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbxgfo3x7.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbxgfo3x7.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqc1g3y3r.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqc1g3y3r.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index nums\
    \ x) (index nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo8386kc7.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo8386kc7.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (if (= (sum-digits x) (sum-digits y))\n                   (< (index-of\
    \ x nums) (index-of y nums))\n                   (< (sum-digits x) (sum-digits\
    \ y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp_twp7th.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp_twp7th.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   ((> x-sum y-sum) #t)\n    \
    \               ((< x-sum y-sum) #f)\n                   ((> x y) #t)\n      \
    \             ((< x y) #f)\n                   (else #f))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps04a4bol.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmps04a4bol.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (if (= (sum-digits x) (sum-digits y))\n                   (< (index-of\
    \ nums x) (index-of nums y))\n                   (< (sum-digits x) (sum-digits\
    \ y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprjfjogs9.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprjfjogs9.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits\
    \ b)))\n                 (cond\n                   [(> a-sum b-sum) #t]\n    \
    \               [(< a-sum b-sum) #f]\n                   [else (< a b)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvmueua5l.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpvmueua5l.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (x) (cons\
    \ x (sum-digits x))) nums)\n        (lambda (x y)\n          (cond\n         \
    \   [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x) (cdr y)) #f]\n         \
    \   [else (< (car x) (car y))]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpthb6i051.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpthb6i051.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond [(< x-sum y-sum) #t]\n                       [(>\
    \ x-sum y-sum) #f]\n                       [(< (index-of x nums) (index-of y nums))\
    \ #t]\n                       [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgzq3ie84.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpgzq3ie84.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo6686kdq.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo6686kdq.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (let ([a-sum (sum-digits a)]\n                [b-sum (sum-digits\
    \ b)])\n            (cond\n              [(> a-sum b-sum) #t]\n              [(<\
    \ a-sum b-sum) #f]\n              [else (< (index-of a nums) (index-of b nums))])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuzcfkbb2.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpuzcfkbb2.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index nums\
    \ x) (index nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo8386kc7.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo8386kc7.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((> x-sum y-sum) #t)\n                       ((<\
    \ x-sum y-sum) #f)\n                       (else (< (index-of nums x) (index-of\
    \ nums y))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpruzbf28d.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpruzbf28d.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (n1 n2)\n\
    \               (< (sum-digits n1) (sum-digits n2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7w09t5uj.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7w09t5uj.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((> x-sum y-sum) #t)\n                       ((<\
    \ x-sum y-sum) #f)\n                       (else (< (index nums x) (index nums\
    \ y))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplxvppmcv.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmplxvppmcv.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxgx0bwqa.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxgx0bwqa.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpli9p76tj.rkt:13:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpli9p76tj.rkt:13:26\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (x) (list\
    \ x (sum-digits x))) nums)\n        (lambda (x y)\n          (cond\n         \
    \   [(< (cadr x) (cadr y)) #t]\n            [(> (cadr x) (cadr y)) #f]\n     \
    \       [else (< (car x) (car y))]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqu01q2wp.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqu01q2wp.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (if (= (sum-digits x) (sum-digits y))\n                   (< (index\
    \ nums x) (index nums y))\n                   (< (sum-digits x) (sum-digits y))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2kzozv1_.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp2kzozv1_.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (if (= (sum-digits a) (sum-digits b))\n                   (< (index-of\
    \ nums a) (index-of nums b))\n                   (< (sum-digits a) (sum-digits\
    \ b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbxgfo3x7.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbxgfo3x7.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond [(< x-sum y-sum) #t]\n                       [(>\
    \ x-sum y-sum) #f]\n                       [(< (index-of nums x) (index-of nums\
    \ y)) #t]\n                       [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvr2eo03r.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpvr2eo03r.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxgx0bwqa.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxgx0bwqa.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (x) (cons\
    \ x (sum-digits x))) nums)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmsz76nb1.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpmsz76nb1.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (cond\n                 [(> (sum-digits a) (sum-digits b)) #t]\n\
    \                 [(< (sum-digits a) (sum-digits b)) #f]\n                 [else\
    \ (< (index-of nums a) (index-of nums b))]))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp840mudd5.rkt:15:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp840mudd5.rkt:15:22\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n\
    \               (if (= (sum-digits a) (sum-digits b))\n                   (< (index-of\
    \ nums a) (index-of nums b))\n                   (< (sum-digits a) (sum-digits\
    \ b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnleofjhz.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnleofjhz.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index nums\
    \ x) (index nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp312b953t.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp312b953t.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ nums x) (index-of nums y))\n                     (< x-sum y-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdrjn_8g6.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdrjn_8g6.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (n1 n2)\n          (< (sum-digits n1) (sum-digits n2)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbmao0vqk.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbmao0vqk.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (or (< (sum-digits x) (sum-digits y))\n                   (and\
    \ (= (sum-digits x) (sum-digits y))\n                        (< (index-of x nums)\
    \ (index-of y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpomc8f21t.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpomc8f21t.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (or\
    \ (< (sum-digits x) (sum-digits y))\n                           (and (= (sum-digits\
    \ x) (sum-digits y))\n                                (< (index-of x nums) (index-of\
    \ y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm2g7pm_q.rkt:13:30: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpm2g7pm_q.rkt:13:30\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo6686kdq.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo6686kdq.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(< x-sum y-sum) #t]\n    \
    \               [(> x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr7n929ok.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpr7n929ok.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((> x-sum y-sum) #t)\n                       ((<\
    \ x-sum y-sum) #f)\n                       (else (< (index-of x nums) (index-of\
    \ y nums))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8dy8p0fe.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp8dy8p0fe.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((> x-sum y-sum) #t)\n                       ((<\
    \ x-sum y-sum) #f)\n                       (else (< (index-of nums x) (index-of\
    \ nums y))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpruzbf28d.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpruzbf28d.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpli9p76tj.rkt:13:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpli9p76tj.rkt:13:26\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp440ny4yi.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp440ny4yi.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ nums x) (index-of nums y))\n                     (< x-sum y-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpms11rhe3.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpms11rhe3.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (a b)\n          (let ((a-sum (sum-digits a))\n                (b-sum (sum-digits\
    \ b)))\n            (cond\n              [(> a-sum b-sum) #t]\n              [(<\
    \ a-sum b-sum) #f]\n              [else (< (index-of nums a) (index-of nums b))])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8_ejp4_c.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp8_ejp4_c.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwchk3bgs.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpwchk3bgs.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits\
    \ y)])\n            (cond\n              [(> x-sum y-sum) #t]\n              [(<\
    \ x-sum y-sum) #f]\n              [else (< (index-of nums x) (index-of nums y))])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5vi8datg.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5vi8datg.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (if (= (sum-digits x) (sum-digits y))\n                   (< (index-of\
    \ x nums) (index-of y nums))\n                   (< (sum-digits x) (sum-digits\
    \ y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7zei53mh.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7zei53mh.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(< a-sum b-sum) #t]\n    \
    \               [(> a-sum b-sum) #f]\n                   [else (< a b)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcruuc_91.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpcruuc_91.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (or (< (sum-digits x) (sum-digits y))\n              (and (=\
    \ (sum-digits x) (sum-digits y))\n                   (< (index-of x nums) (index-of\
    \ y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjsegy4g2.rkt:15:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpjsegy4g2.rkt:15:18\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0uqntx4l.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0uqntx4l.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (if (> x y) #t\
    \ #f)])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9kgjvxv1.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9kgjvxv1.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   ((> x-sum y-sum) #t)\n    \
    \               ((< x-sum y-sum) #f)\n                   ((> x y) #t)\n      \
    \             ((< x y) #f)\n                   (else #f))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps04a4bol.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmps04a4bol.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((> x-sum y-sum) #t)\n                       ((<\
    \ x-sum y-sum) #f)\n                       (else (< (index-of nums x) (index-of\
    \ nums y))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpruzbf28d.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpruzbf28d.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (if (= a-sum b-sum)\n                     (< (index-of\
    \ nums a) (index-of nums b))\n                     (< a-sum b-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4izfdtih.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4izfdtih.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(< x-sum y-sum) #t]\n    \
    \               [(> x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr7n929ok.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpr7n929ok.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits\
    \ y)])\n            (if (= x-sum y-sum)\n                (< (index nums x) (index\
    \ nums y))\n                (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5zm0tc5w.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5zm0tc5w.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort (map (lambda (n) (cons\
    \ n (sum-digits n))) nums)\n        (lambda (a b) (or (< (cdr a) (cdr b))\n  \
    \                        (and (= (cdr a) (cdr b))\n                          \
    \     (< (car a) (car b)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppt3_tgi9.rkt:13:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmppt3_tgi9.rkt:13:34\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   [(< x-sum y-sum) #t]\n    \
    \               [(> x-sum y-sum) #f]\n                   [else (< (index-of nums\
    \ x) (index-of nums y))])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0qslg6wf.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0qslg6wf.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (if\
    \ (= (sum-digits x) (sum-digits y))\n                          (< (index-of x\
    \ nums) (index-of y nums))\n                          (< (sum-digits x) (sum-digits\
    \ y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyyvpm0vw.rkt:13:30: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpyyvpm0vw.rkt:13:30\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits\
    \ y)])\n            (if (= x-sum y-sum)\n                (< (index-of x nums)\
    \ (index-of y nums))\n                (< x-sum y-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptqp31yhl.rkt:15:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmptqp31yhl.rkt:15:24\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   ((> x-sum y-sum) #t)\n    \
    \               ((< x-sum y-sum) #f)\n                   ((> (list-ref nums x)\
    \ (list-ref nums y)) #t)\n                   ((< (list-ref nums x) (list-ref nums\
    \ y)) #f)\n                   (else #f))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9fkboth4.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9fkboth4.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (if (= (sum-digits x) (sum-digits y))\n                   (< (index-of\
    \ x nums) (index-of y nums))\n                   (< (sum-digits x) (sum-digits\
    \ y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp_twp7th.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp_twp7th.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(< a-sum b-sum) #t]\n    \
    \               [(> a-sum b-sum) #f]\n                   [else (< a b)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcruuc_91.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpcruuc_91.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   [(> x-sum y-sum) #t]\n    \
    \               [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp440ny4yi.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp440ny4yi.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpli9p76tj.rkt:13:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpli9p76tj.rkt:13:26\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits\
    \ b)))\n                 (cond ((< a-sum b-sum) #t)\n                       ((>\
    \ a-sum b-sum) #f)\n                       ((< a b) #t)\n                    \
    \   ((> a b) #f)\n                       (else #f))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz6nykcce.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpz6nykcce.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (or (< (sum-digits x) (sum-digits y))\n                   (and\
    \ (= (sum-digits x) (sum-digits y))\n                        (< (index-of x nums)\
    \ (index-of y nums)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpomc8f21t.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpomc8f21t.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   ((> x-sum y-sum) #t)\n    \
    \               ((< x-sum y-sum) #f)\n                   (else (< (index-of nums\
    \ x) (index-of nums y))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3xt7ckz5.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3xt7ckz5.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ nums x) (index-of nums y))\n                     (< x-sum y-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdrjn_8g6.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdrjn_8g6.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y) (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpatydt1dp.rkt:13:31: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpatydt1dp.rkt:13:31\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(< a-sum b-sum) #t]\n    \
    \               [(> a-sum b-sum) #f]\n                   [else (< a b)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcruuc_91.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpcruuc_91.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (cond\n                   [(< a-sum b-sum) #t]\n    \
    \               [(> a-sum b-sum) #f]\n                   [else (< a b)])))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcruuc_91.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpcruuc_91.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (if (= (sum-digits a) (sum-digits b))\n                   (< (index-of\
    \ a nums) (index-of b nums))\n                   (< (sum-digits a) (sum-digits\
    \ b))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsk7r14bx.rkt:14:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpsk7r14bx.rkt:14:23\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ((a-sum (sum-digits a))\n                     (b-sum (sum-digits\
    \ b)))\n                 (if (= a-sum b-sum)\n                     (< (index-of\
    \ nums a) (index-of nums b))\n                     (< a-sum b-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3ordftvt.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3ordftvt.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (cond\n                   [(< x-sum y-sum) #t]\n    \
    \               [(> x-sum y-sum) #f]\n                   [(< x y) #t]\n      \
    \             [(> x y) #f]\n                   [else #f])))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpirgg72zu.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpirgg72zu.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums #:key (lambda (x)\
    \ (sum-digits x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbw_64u1l.rkt:13:32: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbw_64u1l.rkt:13:32\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpli9p76tj.rkt:13:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpli9p76tj.rkt:13:26\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond ((> x-sum y-sum) #t)\n                       ((<\
    \ x-sum y-sum) #f)\n                       (else (< (index-of x nums) (index-of\
    \ y nums))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz5mwph6t.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpz5mwph6t.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ nums x) (index-of nums y))\n                     (< x-sum y-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpms11rhe3.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpms11rhe3.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ x nums) (index-of y nums))\n                     (< x-sum y-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4zak45gy.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4zak45gy.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (if (= a-sum b-sum)\n                     (< (index-of\
    \ a nums) (index-of b nums))\n                     (< a-sum b-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2ee17nm8.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp2ee17nm8.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index nums\
    \ x) (index nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo8386kc7.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo8386kc7.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwchk3bgs.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpwchk3bgs.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039674
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (if (= a-sum b-sum)\n                     (< (index-of\
    \ nums a) (index-of nums b))\n                     (< a-sum b-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4izfdtih.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4izfdtih.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (let ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits\
    \ y)])\n                 (if (= x-sum y-sum)\n                     (< (index-of\
    \ x nums) (index-of y nums))\n                     (< x-sum y-sum))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4wjff61q.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4wjff61q.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y) (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpli9p76tj.rkt:13:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpli9p76tj.rkt:13:26\n"
  stdout: ''
  timestamp: 1660039675
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzyhqnzhf.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzyhqnzhf.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (a b)\n\
    \               (let ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits\
    \ b)])\n                 (if (= a-sum b-sum)\n                     (< (index nums\
    \ a) (index nums b))\n                     (< a-sum b-sum))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu82wj41m.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu82wj41m.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums\n        (lambda\
    \ (x y)\n          (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxzet89yr.rkt:15:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxzet89yr.rkt:15:14\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjrzuoui.rkt:14:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjrzuoui.rkt:14:19\n"
  stdout: ''
  timestamp: 1660039673
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> (order_by_points (list\
    \ 1 11 -1 -11 -12))\n;; (list -1 -11 1 -12 11)\n;; >>> (order_by_points (list\
    \ ))\n;; (list )\n(define (order_by_points nums)\n  (sort nums (lambda (x y)\n\
    \               (let ((x-sum (sum-digits x))\n                     (y-sum (sum-digits\
    \ y)))\n                 (cond\n                   ((> x-sum y-sum) #t)\n    \
    \               ((< x-sum y-sum) #f)\n                   (else (< (index-of x\
    \ nums) (index-of y nums))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxae1f9m8.rkt:14:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxae1f9m8.rkt:14:29\n"
  stdout: ''
  timestamp: 1660039676
