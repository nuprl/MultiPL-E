name: HumanEval_138_is_equal_to_sum_even
language: rkt
prompt: "#lang racket\n\n;; Evaluate whether the given number n can be written as\
  \ the sum of exactly 4 positive even numbers\n;; Example\n;; >>> (is_equal_to_sum_even\
  \ 4)\n;; #f\n;; >>> (is_equal_to_sum_even 6)\n;; #f\n;; >>> (is_equal_to_sum_even\
  \ 8)\n;; #t\n(define (is_equal_to_sum_even n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n\
  \    (check-equal? (candidate 4) #f)\n    (check-equal? (candidate 6) #f)\n    (check-equal?\
  \ (candidate 8) #t)\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate\
  \ 11) #f)\n    (check-equal? (candidate 12) #t)\n    (check-equal? (candidate 13)\
  \ #f)\n    (check-equal? (candidate 16) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even (-\
    \ n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n\
    \    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum)\
    \ #f]\n      [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (if (= n 0)\n  \
    \    #t\n      (if (even? n)\n          (is_equal_to_sum_even (- n 2))\n     \
    \     #f)))\n", "  (define (is_equal_to_sum_even_helper n sum count)\n    (cond\n\
    \      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_helper\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_helper\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(=\
    \ i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_helper\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_helper n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n i) #t)\n          ((= n (+ i (* 2 i))) #t)\n         \
    \ ((= n (+ i (* 2 i) (* 2 (+ i 1)))) #t)\n          ((= n (+ i (* 2 i) (* 2 (+\
    \ i 1)) (* 2 (+ i 2)))) #t)\n          ((= n (+ i (* 2 i) (* 2 (+ i 1)) (* 2 (+\
    \ i 2)) (* 2 (+ i 3)))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i\
    \ 1)))))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(< n (* 4 i)) #f]\n      [else\
    \ (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i n) #t]\n    \
    \  [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= n i) #f]\n     \
    \ [else (or (is_equal_to_sum_even_iter (- n i) (+ i 2))\n                (is_equal_to_sum_even_iter\
    \ n (+ i 2)))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i count)\n    (cond\n    \
    \  [(= count 4) #t]\n      [(= n 0) #f]\n      [(= i 0) #f]\n      [(= (remainder\
    \ n i) 0) (is_equal_to_sum_even_iter (- n i) (- i 2) (+ count 1))]\n      [else\
    \ (is_equal_to_sum_even_iter n (- i 2) count)]))\n  (is_equal_to_sum_even_iter\
    \ n n 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum) #f]\n \
    \     [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum) #f]\n \
    \     [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(< n sum) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_helper n sum count)\n    (cond ((= n sum) (= count 4))\n\
    \          ((> n sum) (is_equal_to_sum_even_helper n (+ sum 2) (+ count 1)))\n\
    \          ((< n sum) #f)))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n          ((= i n)\
    \ #f)\n          ((= n (+ i (* 2 i))) #t)\n          (else (is_equal_to_sum_even-iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n 2))\n          ((= i n) #t)\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n    \
    \  [(= i 0) #f]\n      [(= n (* i 2)) #t]\n      [else (or (is_equal_to_sum_even-iter\
    \ (- n (* i 2)) (- i 1))\n                (is_equal_to_sum_even-iter n (- i 1)))]))\n\
    \  (is_equal_to_sum_even-iter n (/ n 2)))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (if (<= i n)\n   \
    \     (if (= n (* i 4))\n            #t\n            (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n        #f))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even-iter n sum count)\n    (cond ((= count 4) (= n sum))\n\
    \          ((= n sum) #t)\n          ((= n (+ sum 2)) #t)\n          ((&gt; n\
    \ (+ sum 2)) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1)))\n          (else\
    \ #f)))\n  (is_equal_to_sum_even-iter n 0 0))\n</code>\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= n sum) (= count 4))\n          ((> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1)))\n          (else #f)))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          ((= n (+ i (* 2 i))) #t)\n          (else (is_equal_to_sum_even_iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n (+ i (*\
    \ 2 (+ i (* 2 (+ i (* 2 (+ i (* 2 i))))))))) #t)\n          (else (is_equal_to_sum_even-iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n (+ i (*\
    \ 2 i))) #t)\n          (else (is_equal_to_sum_even_iter n (+ i 2)))))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum) #f]\n   \
    \   [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ n (+ (* 2 i) (* 2 (+ i 1)) (* 2 (+ i 2)) (* 2 (+ i 3)))) #t]\n      [(> n (+\
    \ (* 2 i) (* 2 (+ i 1)) (* 2 (+ i 2)) (* 2 (+ i 3)))) (is_equal_to_sum_even_iter\
    \ n (+ i 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n i acc)\n    (cond\n      [(= i 0) (if (= n acc)\
    \ #t #f)]\n      [(even? i) (is_equal_to_sum_even_iter n (- i 1) (+ acc i))]\n\
    \      [else (is_equal_to_sum_even_iter n (- i 1) acc)]))\n  (is_equal_to_sum_even_iter\
    \ n n 0))\n", "  (cond\n    [(= n 0) #t]\n    [(< n 0) #f]\n    [else (or (is_equal_to_sum_even\
    \ (- n 2))\n              (is_equal_to_sum_even (- n 4))\n              (is_equal_to_sum_even\
    \ (- n 6))\n              (is_equal_to_sum_even (- n 8)))]))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n (* i 4)) #t]\n      [(> n (* i 4)) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (cond\n\
    \    [(= n 0) #t]\n    [(= n 2) #f]\n    [(= n 4) #t]\n    [(= n 6) #f]\n    [(=\
    \ n 8) #t]\n    [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n\
    \ 16) #t]\n    [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n\
    \ 24) #t]\n    [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n\
    \ 32) #t]\n    [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n\
    \ 40) #t]\n    [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n\
    \ 48) #t]\n    [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n\
    \ 56) #t]\n    [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n\
    \ 64) #t]\n    [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n\
    \ 72) #t]\n    [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n\
    \ 80) #t]\n    [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n\
    \ 88) #t]\n    [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n\
    \ 96) #t]\n    [(= n 98) #f]\n    [(= n 100) #", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          ((= n i) #f)\n          ((< n i) #f)\n          (else\
    \ (or (is_equal_to_sum_even_iter (- n i) (+ i 2))\n                    (is_equal_to_sum_even_iter\
    \ n (+ i 2))))))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= n sum) (= count 4))\n          ((< n sum) #f)\n\
    \          ((< count 4) (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1)))\n\
    \          (else (is_equal_to_sum_even_iter n (+ sum 2) count))))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i sum)\n    (cond\n    \
    \  [(= i n) #f]\n      [(= sum n) #t]\n      [(= sum (+ sum i)) (is_equal_to_sum_even_iter\
    \ n (+ i 2) sum)]\n      [else (is_equal_to_sum_even_iter n (+ i 2) (+ sum i))]))\n\
    \  (is_equal_to_sum_even_iter n 2 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(= n (+ sum 2)) #t]\n      [else (is_equal_to_sum_even_iter n (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n count)\n    (cond\n      [(= n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n\
    \      [(= n 2) #f]\n      [else (is_equal_to_sum_even_iter (- n 2) (+ count 1))]))\n\
    \  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((even? i) (or\
    \ (is_equal_to_sum_even_iter (- n i) (+ i 2))\n                         (is_equal_to_sum_even_iter\
    \ n (+ i 2))))\n          (else (is_equal_to_sum_even_iter n (+ i 2)))))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even-iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (if (= n 0)\n  \
    \    #t\n      (if (= (remainder n 2) 0)\n          (is_equal_to_sum_even (- n\
    \ 2))\n          #f)))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n\
    \      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n    \
    \  [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (helper n sum count)\n    (cond\n      [(= n sum) (= count\
    \ 4)]\n      [(> n sum) (helper n (+ sum 2) (+ count 1))]\n      [else #f]))\n\
    \  (helper n 0 0))\n", "  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even\
    \ (- n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even-iter n i)\n\
    \    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n i) #f)\n    \
    \      ((= n (+ i i)) #t)\n          ((= n (+ i i i)) #t)\n          ((= n (+\
    \ i i i i)) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum)\n    (cond\n      [(= n sum) #t]\n      [(> n sum) #f]\n      [else (is_equal_to_sum_even_helper\
    \ n (+ sum 2))]))\n  (is_equal_to_sum_even_helper n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (iter i)\n\
    \    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= i (+ 2 2 2 2)) #t]\n\
    \      [else (and (iter (+ i 2)) (iter (- i 2)))]))\n  (iter 0))\n", "  (define\
    \ (is_equal_to_sum_even_helper n sum count)\n    (cond\n      [(= count 4) (=\
    \ n sum)]\n      [(> n sum) (is_equal_to_sum_even_helper n (+ sum 2) (+ count\
    \ 1))]\n      [else #f]))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n sum count)\n    (cond\n      [(= count 4) (= n\
    \ sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even_iter n (+\
    \ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 0 0))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n 0) #t]\n    \
    \  [(= i 0) #f]\n      [(= n (* 2 i)) #t]\n      [(> n (* 2 i)) (is_equal_to_sum_even_iter\
    \ (- n (* 2 i)) (- i 1))]\n      [else (is_equal_to_sum_even_iter n (- i 1))]))\n\
    \  (is_equal_to_sum_even_iter n (/ n 2)))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n (+ i (*\
    \ 2 i))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (helper n i)\n    (cond\n      [(= i n) #t]\n      [(=\
    \ i 0) (helper n (+ i 2))]\n      [(= i (- n 2)) #f]\n      [else (or (helper\
    \ (- n i) (+ i 2)) (helper n (+ i 2)))]))\n  (helper n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= n i) #f)\n          ((< n i) #f)\n          (else\
    \ (or (is_equal_to_sum_even-iter (- n i) (+ i 2))\n                   (is_equal_to_sum_even-iter\
    \ n (+ i 2))))))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i 0) #f)\n          ((= n (* i 2)) #t)\n          (else (is_equal_to_sum_even_iter\
    \ (- n (* i 2)) (- i 1)))))\n  (is_equal_to_sum_even_iter n (/ n 2)))\n", "  (define\
    \ (is_equal_to_sum_even-iter n count)\n    (cond\n      [(= n 0) (= count 4)]\n\
    \      [(= count 4) (= n 0)]\n      [(= n 2) #f]\n      [else (is_equal_to_sum_even-iter\
    \ (- n 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(= n (+ sum 2)) #t]\n      [else (is_equal_to_sum_even_iter n (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(> n sum) #f]\n      [(= n sum) (= count 4)]\n\
    \      [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (if (= n 0)\n      #t\n      (if (even? n)\n          (is_equal_to_sum_even\
    \ (- n 2))\n          #f)))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n\
    \    (cond ((= n sum) (= count 4))\n          ((= count 4) #f)\n          ((=\
    \ sum n) #f)\n          ((= sum 0) (is_equal_to_sum_even_iter n (+ sum 2) (+ count\
    \ 1)))\n          ((= count 0) (is_equal_to_sum_even_iter n (+ sum 2) (+ count\
    \ 1)))\n          (else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1)))))\n\
    \  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i 0) #f]\n      [(= n (* i 2)) #t]\n      [else (is_equal_to_sum_even_iter\
    \ (- n (* i 2)) (- i 1))]))\n  (is_equal_to_sum_even_iter n n))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n (* i 4)) #t]\n     \
    \ [(> n (* i 4)) #f]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n \
    \ (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter n\
    \ i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((and (even? i)\
    \ (is_equal_to_sum_even_iter (- n i) (+ i 2))) #t)\n          (else (is_equal_to_sum_even_iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i (+ n 2)) #f)\n          ((= i\
    \ (+ n 4)) #f)\n          ((= i (+ n 6)) #f)\n          ((= i (+ n 8)) #f)\n \
    \         (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (cond\n    [(= n 4) #f]\n    [(= n 6) #f]\n    [(= n 8) #t]\n \
    \   [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n 16) #t]\n \
    \   [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n 24) #t]\n \
    \   [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n 32) #t]\n \
    \   [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n 40) #t]\n \
    \   [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n 48) #t]\n \
    \   [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n 56) #t]\n \
    \   [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n 64) #t]\n \
    \   [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n 72) #t]\n \
    \   [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n 80) #t]\n \
    \   [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n 88) #t]\n \
    \   [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n 96) #t]\n \
    \   [(= n 98) #f]\n    [(= n 100) #t]\n    [(= n 102) #f]\n    [(= n 104) #",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n (* 4 i)) #t]\n\
    \      [(> n (* 4 i)) (is_equal_to_sum_even-iter n (+ i 2))]\n      [else #f]))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          ((= n (+ i (* 2 i))) #t)\n          (else (is_equal_to_sum_even-iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_helper\
    \ n count)\n    (cond\n      [(= count 4) (= n 0)]\n      [(= (remainder n 2)\
    \ 0) (is_equal_to_sum_even_helper (- n 2) (+ count 1))]\n      [else (is_equal_to_sum_even_helper\
    \ n (+ count 1))]))\n  (is_equal_to_sum_even_helper n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (if (= i 0)\n        #f\n        (if (= n (* 2 i))\n            #t\n\
    \            (is_equal_to_sum_even_iter n (- i 1)))))\n  (is_equal_to_sum_even_iter\
    \ n (/ n 2)))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n    \
    \  [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n     \
    \ [(= n i) #f]\n      [else (or (is_equal_to_sum_even-iter n (+ i 2))\n      \
    \          (is_equal_to_sum_even-iter (- n i) (+ i 2)))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond [(=\
    \ count 4) (= n sum)]\n          [(= n sum) #t]\n          [(= n (+ sum 2)) #t]\n\
    \          [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (let loop ([i 1] [j 1] [k 1] [l 1])\n    (cond\n      [(= n (+\
    \ (* 2 i) (* 2 j) (* 2 k) (* 2 l))) #t]\n      [(> i n) #f]\n      [(> j n) (loop\
    \ (+ i 1) 1 1 1)]\n      [(> k n) (loop i (+ j 1) 1 1)]\n      [(> l n) (loop\
    \ i j (+ k 1) 1)]\n      [else (loop i j k (+ l 1))])))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n (+ i (*\
    \ 2 i))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= n (+ (*\
    \ i 2) (* (+ i 2) 2) (* (+ i 4) 2) (* (+ i 6) 2))) #t)\n          ((= i (- n 2))\
    \ #f)\n          (else (is_equal_to_sum_even_iter n (+ i 2)))))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= i n) #t)\n\
    \          ((= i (+ n 2)) #f)\n          ((= i (+ n 4)) #f)\n          ((= i (+\
    \ n 6)) #f)\n          ((= i (+ n 8)) #f)\n          (else (is_equal_to_sum_even_iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n i) #t]\n      [(= n (+ i (* 2 2))) #t]\n      [(=\
    \ n (+ i (* 2 2) (* 2 2))) #t]\n      [(= n (+ i (* 2 2) (* 2 2) (* 2 2))) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_helper n i)\n    (cond\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even_helper n (+ i 2))]\n      [(=\
    \ i n) #t]\n      [else (or (is_equal_to_sum_even_helper (- n i) (+ i 2))\n  \
    \              (is_equal_to_sum_even_helper n (+ i 2)))]))\n  (is_equal_to_sum_even_helper\
    \ n 0))\n", "  (define (is_equal_to_sum_even_helper n sum)\n    (cond\n      [(=\
    \ n sum) #t]\n      [(< n sum) #f]\n      [else (is_equal_to_sum_even_helper n\
    \ (+ sum 2))]))\n  (is_equal_to_sum_even_helper n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= n (+ i (sum-even (- n i)))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= i 0) #f)\n          ((= n (* i 2)) #t)\n          (else\
    \ (is_equal_to_sum_even_iter (- n (* i 2)) (- i 1)))))\n  (is_equal_to_sum_even_iter\
    \ n (/ n 2)))\n", "  (let loop ([i 0] [j 0] [k 0] [l 0])\n    (cond [(= (+ (*\
    \ 2 i) (* 2 j) (* 2 k) (* 2 l)) n) #t]\n          [(= i n) #f]\n          [(=\
    \ j n) (loop (+ i 1) 0 0 0)]\n          [(= k n) (loop i (+ j 1) 0 0)]\n     \
    \     [(= l n) (loop i j (+ k 1) 0)]\n          [else (loop i j k (+ l 1))])))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= n (* i 4)) #t)\n     \
    \     ((> n (* i 4)) (is_equal_to_sum_even_iter n (+ i 2)))\n          (else #f)))\n\
    \  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_helper\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_helper\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_helper n i)\n    (cond\n      [(=\
    \ n 0) #t]\n      [(= i n) #f]\n      [(= 0 (modulo n i)) (is_equal_to_sum_even_helper\
    \ (- n i) (+ i 2))]\n      [else (is_equal_to_sum_even_helper n (+ i 2))]))\n\
    \  (is_equal_to_sum_even_helper n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i\
    \ i i)) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i 0) #f]\n      [(= n i) #f]\n      [(= n (- n i)) #f]\n \
    \     [(= n (+ n i)) #f]\n      [(= n (+ n (* 2 i))) #f]\n      [(= n (+ n (*\
    \ 3 i))) #f]\n      [(= n (+ n (* 4 i))) #f]\n      [(= n (+ n (* 5 i))) #f]\n\
    \      [(= n (+ n (* 6 i))) #f]\n      [(= n (+ n (* 7 i))) #f]\n      [(= n (+\
    \ n (* 8 i))) #f]\n      [(= n (+ n (* 9 i))) #f]\n      [(= n (+ n (* 10 i)))\
    \ #f]\n      [(= n (+ n (* 11 i))) #f]\n      [(= n (+ n (* 12 i))) #f]\n    \
    \  [(= n (+ n (* 13 i))) #f]\n      [(= n (+ n (* 14 i))) #f]\n      [(= n (+\
    \ n (* 15 i))) #f]\n      [(= n (+ n (* 16 i))) #f]\n      [(= n (+ n (* 17 i)))\
    \ #f]\n      [(= n (+ n (* 18 i))) #f]\n      [(= n (+ n (* 19 i))) #f]\n    \
    \  [(= n (+ n (* 20 i))) #f]\n      [(= n (+ n (* 21 i))) #f]\n      [(= n (+\
    \ n (* 22 i))) #f]\n      [(= n (+ n (* 23 i))) #f]\n      [(= n (+ n (* 24 i)))\
    \ #f]\n      [(= n (+ n (* 25 i))) #f]\n      [(= n (+ n (* 26 i))) #f]\n    \
    \  [(= n (+ n (* 27 i))) #f]\n      [(= n (+ n (* 28 i))) #f]\n      [(= n (+\
    \ n (* 29 i))) #f]\n      [(= n (+ n (* 30 i))) #f]\n      [(= n (+ n (* 31 i)))\
    \ #f]\n      [(= n (+ n (* 32 i))) #f]\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even_iter n sum count)\n    (cond ((= count 4) (= n sum))\n\
    \          ((= n sum) #t)\n          ((= n (+ sum 2)) #t)\n          ((= n (+\
    \ sum 4)) #t)\n          ((= n (+ sum 6)) #t)\n          ((= n (+ sum 8)) #t)\n\
    \          ((= n (+ sum 10)) #t)\n          ((= n (+ sum 12)) #t)\n          ((=\
    \ n (+ sum 14)) #t)\n          ((= n (+ sum 16)) #t)\n          ((= n (+ sum 18))\
    \ #t)\n          ((= n (+ sum 20)) #t)\n          ((= n (+ sum 22)) #t)\n    \
    \      ((= n (+ sum 24)) #t)\n          ((= n (+ sum 26)) #t)\n          ((= n\
    \ (+ sum 28)) #t)\n          ((= n (+ sum 30)) #t)\n          ((= n (+ sum 32))\
    \ #t)\n          ((= n (+ sum 34)) #t)\n          ((= n (+ sum 36)) #t)\n    \
    \      ((= n (+ sum 38)) #t)\n          ((= n (+ sum 40)) #t)\n          ((= n\
    \ (+ sum 42)) #t)\n          ((= n (+ sum 44)) #t)\n          ((= n (+ sum 46))\
    \ #t)\n          ((= n (+ sum 48)) #t)\n          ((= n (+ sum 50)) #t)\n    \
    \      ((= n (+ sum 52)) #t)\n          ((= n (+ sum 54)) #t)\n          ((= n\
    \ (+ sum 56)) #t)\n          ((= n (+ sum 58)) #t)\n          ((= n (+ sum 60))\
    \ #t)\n          ((= n (+ sum 62)) #t)\n          ((= n (+ sum 64)) #t)\n    \
    \      ((= n (+ sum 66)) #t)\n          ((= n (+ sum 68)) #t)\n          ((= n\
    \ (+ sum 70)) #t)\n          ((= n (+ sum 72)) #t)\n          ((= n (+ sum 74))\
    \ #t)\n          ((= n (+ sum 76)) #t)\n          ((= n (+ sum 78)) #t)\n", " \
    \ (define (is_equal_to_sum_even-iter n i sum)\n    (cond\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ i 2) (+ sum i))]\n      [else\
    \ #f]))\n  (is_equal_to_sum_even-iter n 2 2))\n", "  (define (is_equal_to_sum_even_helper\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_helper\
    \ n (+ i 2)))\n          ((= i (- n 2)) #f)\n          (else (or (is_equal_to_sum_even_helper\
    \ (- n i) (+ i 2))\n                    (is_equal_to_sum_even_helper n (+ i 2))))))\n\
    \  (is_equal_to_sum_even_helper n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [(= n (+ i (sum-even-numbers n))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (if (= n 0)\n    \
    \    #t\n        (if (= i 0)\n            #f\n            (if (even? i)\n    \
    \            (or (is_equal_to_sum_even_iter (- n i) (- i 2))\n               \
    \     (is_equal_to_sum_even_iter n (- i 2)))\n                (is_equal_to_sum_even_iter\
    \ n (- i 2))))))\n  (is_equal_to_sum_even_iter n n))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond ((=\
    \ count 4) (= n sum))\n          ((= n sum) #t)\n          ((&gt; n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1)))\n          (else #f)))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n</code>\nI have tried to solve this problem in Racket. I am not sure\
    \ if this is the right way to do it. I am not sure if I am using the right approach.\
    \ I am not sure if I am using the right language. I am not sure if I am using\
    \ the right tools. I am not sure if I am using the right mindset. I am not sure\
    \ if I am using the right brain. I am not sure if I am using the right body. I\
    \ am not sure if I am using the right soul. I am not sure if I am using the right\
    \ life. I am not sure if I am using the right universe. I am not sure if I am\
    \ using the right everything. I am not sure if I am using the right nothing. I\
    \ am not sure if I am using the right. I am not sure if I am using the. I am not\
    \ sure if I am using. I am not sure if I am. I am not sure if I. I am not sure\
    \ if. I am not sure. I am not. I am. I. I. I. I. I. I. I. I. I. I. I. I. I. I.\
    \ I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I.\
    \ I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I.\
    \ I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I. I.\
    \ I. I. I", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter n (+\
    \ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 0 0))\n",
  "  (define (is_equal_to_sum_even_helper n sum count)\n    (cond\n      [(= n sum)\
    \ (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_helper n (+ sum 2) (+ count\
    \ 1))]\n      [else #f]))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n sum count)\n    (cond ((= count 4) (= n sum))\n\
    \          ((= n sum) #t)\n          ((< n sum) #f)\n          (else (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1)))))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n sum count)\n    (cond ((= count 4) (= n sum))\n\
    \          ((= n sum) #t)\n          ((&gt; n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1)))\n          (else #f)))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n</code>\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n\
    \      [(= n (* i 4)) #t]\n      [(> n (* i 4)) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n a b c d)\n    (cond\n    \
    \  [(= n (+ a b c d)) #t]\n      [(> n (+ a b c d)) (is_equal_to_sum_even-iter\
    \ n (+ a 2) (+ b 2) (+ c 2) (+ d 2))]\n      [else #f]))\n  (is_equal_to_sum_even-iter\
    \ n 2 2 2 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n    \
    \  [(= n 0) #t]\n      [(= i 0) #f]\n      [(= n (* i 2)) #t]\n      [else (is_equal_to_sum_even_iter\
    \ (- n (* i 2)) (- i 1))]))\n  (is_equal_to_sum_even_iter n (/ n 2)))\n", "  (define\
    \ (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= n\
    \ i) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (cond\n    [(= n 0)\
    \ #t]\n    [(= n 2) #f]\n    [(= n 4) #t]\n    [(= n 6) #f]\n    [(= n 8) #t]\n\
    \    [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n 16) #t]\n\
    \    [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n 24) #t]\n\
    \    [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n 32) #t]\n\
    \    [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n 40) #t]\n\
    \    [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n 48) #t]\n\
    \    [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n 56) #t]\n\
    \    [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n 64) #t]\n\
    \    [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n 72) #t]\n\
    \    [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n 80) #t]\n\
    \    [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n 88) #t]\n\
    \    [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n 96) #t]\n\
    \    [(= n 98) #f]\n    [(= n 100) #", "  (define (is_equal_to_sum_even-iter n\
    \ i j k l)\n    (cond\n      [(= n (+ i j k l)) #t]\n      [(> n (+ i j k l))\
    \ (is_equal_to_sum_even-iter n (+ i 2) (+ j 2) (+ k 2) (+ l 2))]\n      [else\
    \ #f]))\n  (is_equal_to_sum_even-iter n 2 2 2 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n acc)\n    (cond\n      [(= n 0) (and (equal? acc 4) #t)]\n      [(= n 2) (and\
    \ (equal? acc 3) #t)]\n      [(= n 4) (and (equal? acc 2) #t)]\n      [(= n 6)\
    \ (and (equal? acc 1) #t)]\n      [(= n 8) (and (equal? acc 0) #t)]\n      [else\
    \ (is_equal_to_sum_even_iter (- n 2) (+ acc 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i count)\n    (cond\n    \
    \  [(= count 4) #t]\n      [(= n (+ i (is_equal_to_sum_even_iter n (+ i 2) (+\
    \ count 1)))) #t]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 2 0))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i n) #t]\n    \
    \  [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= i n) #t]\n     \
    \ [else (or (is_equal_to_sum_even_iter n (+ i 2))\n                (is_equal_to_sum_even_iter\
    \ (- n i) 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (helper n sum count)\n    (cond\n      [(= count 4) (=\
    \ n sum)]\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n 1) #f]\n    \
    \  [(= n 2) #f]\n      [(= n 3) #f]\n      [(= n 4) #f]\n      [(= n 5) #f]\n\
    \      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #t]\n      [(= n 9) #f]\n\
    \      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #t]\n      [(= n 13)\
    \ #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #t]\n      [(=\
    \ n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #t]\n \
    \     [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24)\
    \ #t]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(=\
    \ n 28) #t]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n \
    \     [(= n 32) #t]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35)\
    \ #f]\n      [(= n 36) #t]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(=\
    \ n 39) #f]\n      [(= n 40) #t]\n      [(= n 41) #f]\n      [(= n 42) #f]\n \
    \     [(= n 43) #f]\n      [(= n 44) #t]\n      [(= n 45) #f]\n      [(= n 46)\
    \ #f]\n      [(= n 47", "  (define (is_equal_to_sum_even_iter n sum count)\n \
    \   (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum)\
    \ #f]\n      [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i 0) #f)\n          ((= n i) #t)\n          ((< n i) #f)\n    \
    \      (else (or (is_equal_to_sum_even-iter (- n i) i)\n                    (is_equal_to_sum_even-iter\
    \ n (- i 2))))))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n (+ i (*\
    \ 2 i))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ (* i 4)) #t]\n      [(> n (* i 4)) (is_equal_to_sum_even_iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= i 0) #f)\n          ((= n (* i 2)) #t)\n          (else\
    \ (is_equal_to_sum_even_iter (- n (* i 2)) (- i 1)))))\n  (is_equal_to_sum_even_iter\
    \ n (/ n 2)))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n    \
    \  [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter n (+ i\
    \ 2))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          ((= n (+ i (* 2 i))) #t)\n          (else (is_equal_to_sum_even-iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(< n sum) #f]\n      [else (is_equal_to_sum_even-iter n (+ sum 2) (+ count\
    \ 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n 2))\n          ((= i n) #t)\n", "  (define (is_equal_to_sum_even_iter n i)\n\
    \    (cond\n      [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even_iter n sum count)\n    (cond\n      [(= n sum) (= count\
    \ 4)]\n      [(< n sum) #f]\n      [else (or (is_equal_to_sum_even_iter n (+ sum\
    \ 2) (+ count 1))\n                (is_equal_to_sum_even_iter n sum count))]))\n\
    \  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even_iter (- n i) 2))) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= n (+\
    \ i (sum-of-evens n))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n\
    \  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(< n sum) #f]\n\
    \      [else (or (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))\n       \
    \         (is_equal_to_sum_even_iter n sum count))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (cond\n    [(= n 0) #t]\n    [(< n 0) #f]\n    [else (or (is_equal_to_sum_even\
    \ (- n 2))\n              (is_equal_to_sum_even (- n 4))\n              (is_equal_to_sum_even\
    \ (- n 6))\n              (is_equal_to_sum_even (- n 8)))]))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ (* i 4)) #t]\n      [(> n (* i 4)) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((= n sum) #t)\n\
    \          ((= n 0) #f)\n          ((= n 1) #f)\n          ((= n 2) #f)\n    \
    \      ((= n 3) #f)\n          ((= n 4) #f)\n          ((= n 5) #f)\n        \
    \  ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #t)\n          ((=\
    \ n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n\
    \ 12) #t)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15)\
    \ #f)\n          ((= n 16) #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n\
    \          ((= n 19) #f)\n          ((= n 20) #t)\n          ((= n 21) #f)\n \
    \         ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #t)\n  \
    \        ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n   \
    \       ((= n 28) #t)\n          ((= n 29) #f)\n          ((= n 30) #f)\n    \
    \      ((= n 31) #f)\n          ((= n 32) #t)\n          ((= n 33) #f)\n     \
    \     ((= n 34) #f)\n          ((= n 35) #f)\n          ((= n 36) #t)\n      \
    \    ((= n 37) #f)\n          ((= n 38) #f)\n          ((= n 39) #f)\n       \
    \   ((= n 40) #t)\n          ((= n 41) #f)\n          ((= n 42) #f)\n        \
    \  ((= n 43) #f)\n          ((= n 44) #t)\n          ((= n 45) #f)\n         \
    \ ((= n 46) #f", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(= n (+ sum 2)) #t]\n\
    \      [else (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ n 0) #t]\n      [(= i 0) #f]\n      [(= n i) #f]\n      [(= n (+ i (* 2 i)))\
    \ #t]\n      [else (is_equal_to_sum_even_iter n (- i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n n))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= i n)\
    \ #t]\n      [else (or (is_equal_to_sum_even_iter n (+ i 2)) (is_equal_to_sum_even_iter\
    \ (- n i) 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_helper\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(> i n) #f]\n      [else (or (is_equal_to_sum_even_helper\
    \ n (+ i 2))\n                (is_equal_to_sum_even_helper n (+ i 4))\n      \
    \          (is_equal_to_sum_even_helper n (+ i 6))\n                (is_equal_to_sum_even_helper\
    \ n (+ i 8)))]))\n  (is_equal_to_sum_even_helper n 0))\n", "  (define (helper\
    \ n i)\n    (cond\n      [(= i 0) #f]\n      [(= n 0) #t]\n      [(= n i) #t]\n\
    \      [(> n i) (or (helper (- n i) (+ i 2)) (helper n (+ i 2)))]\n      [else\
    \ #f]))\n  (helper n 2))\n", "  (define (is_equal_to_sum_even_helper n sum count)\n\
    \    (cond\n      [(= count 4) (= n sum)]\n      [(even? n) (is_equal_to_sum_even_helper\
    \ n (+ sum n) (+ count 1))]\n      [else (is_equal_to_sum_even_helper (- n 1)\
    \ sum count)]))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i (+ n 2)) #f)\n          ((= i\
    \ (+ n 4)) #f)\n          ((= i (+ n 6)) #f)\n          ((= i (+ n 8)) #f)\n \
    \         (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_helper n sum count)\n    (cond\n\
    \      [(= n sum) (= count 4)]\n      [(> n sum) #f]\n      [else (is_equal_to_sum_even_helper\
    \ n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= i\
    \ 0) (is_equal_to_sum_even-iter n 2)]\n      [(= (modulo n i) 0) (is_equal_to_sum_even-iter\
    \ (- n i) 2)]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond ((=\
    \ n sum) (= count 4))\n          ((> n sum) (is_equal_to_sum_even-iter n (+ sum\
    \ 2) (+ count 1)))\n          (else #f)))\n  (is_equal_to_sum_even-iter n 0 0))\n",
  "  (define (is_equal_to_sum_even_helper n sum count)\n    (cond\n      [(= n sum)\
    \ (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_helper n (+ sum 2) (+ count\
    \ 1))]\n      [else #f]))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n sum count)\n    (cond\n      [(= count 4) (= n\
    \ sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even_iter n (+\
    \ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 0 0))\n",
  "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond ((= count 4) (= n\
    \ sum))\n          ((= n sum) #t)\n          ((< n sum) #f)\n          (else (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1)))))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i n) #t]\n      [(= i\
    \ 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even_iter\
    \ (- n i) 2))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i sum)\n    (cond\n      [(=\
    \ i 4) (= n sum)]\n      [(= n sum) #t]\n      [(= n (+ sum (* 2 i))) #t]\n  \
    \    [else (is_equal_to_sum_even_iter n (+ i 1) (+ sum (* 2 i)))]))\n  (is_equal_to_sum_even_iter\
    \ n 1 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(=\
    \ n (* i 4)) #t]\n      [(> n (* i 4)) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even_helper n (+ sum 2) (+ count 1))]\n   \
    \   [else #f]))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((even? n) (is_equal_to_sum_even_iter\
    \ n (+ sum n) (+ count 1)))\n          (else (is_equal_to_sum_even_iter n sum\
    \ count))))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n 2)]\n      [(= (remainder i 2) 0) (is_equal_to_sum_even_iter (- n i) 0)]\n\
    \      [else (is_equal_to_sum_even_iter n (+ i 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_helper n i)\n    (cond\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even_helper n (+ i 2))]\n      [else\
    \ (or (is_equal_to_sum_even_helper (- n i) (+ i 2))\n                (is_equal_to_sum_even_helper\
    \ n (+ i 2)))]))\n  (is_equal_to_sum_even_helper n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(even? n) (is_equal_to_sum_even_iter\
    \ n (+ sum n) (+ count 1))]\n      [else (is_equal_to_sum_even_iter n sum count)]))\n\
    \  (is_equal_to_sum_even_iter n 0 0))\n", "  (letrec ([even? (lambda (n) (= (remainder\
    \ n 2) 0))]\n           [sum-even (lambda (n)\n                       (if (even?\
    \ n)\n                           (if (= n 4)\n                               #t\n\
    \                               (sum-even (- n 4)))\n                        \
    \   #f))])\n    (sum-even n)))\n", "  (define (is_equal_to_sum_even_iter n i)\n\
    \    (cond\n      [(= n 0) #t]\n      [(= i 0) #f]\n      [(= n (* i 2)) #t]\n\
    \      [else (or (is_equal_to_sum_even_iter (- n (* i 2)) (- i 1))\n         \
    \       (is_equal_to_sum_even_iter n (- i 1)))]))\n  (is_equal_to_sum_even_iter\
    \ n (/ n 2)))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= i\
    \ n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter n (+ i 2)))\n        \
    \  ((= n i) #f)\n          ((&gt; n i) (is_equal_to_sum_even_iter n (+ i 2)))\n\
    \          ((&lt; n i) #f)))\n  (is_equal_to_sum_even_iter n 0))\n</code>\nI'm\
    \ not sure if this is the best way to do it, but it works.\n\n\nA:\n\nYour solution\
    \ is correct, but it's not very efficient.\nA better solution would be to use\
    \ a helper function that takes a list of numbers and a target number, and returns\
    \ a list of all the ways to add up the numbers in the list to get the target number.\n\
    <code>(define (sum-to-target lst target)\n  (cond\n    [(empty? lst) empty]\n\
    \    [(= target (first lst)) (list (list (first lst)))]\n    [(&gt; target (first\
    \ lst))\n     (append (map (lambda (x) (cons (first lst) x))\n               \
    \    (sum-to-target (rest lst) (- target (first lst))))\n             (sum-to-target\
    \ (rest lst) target))]\n    [else (sum-to-target (rest lst) target)]))\n</code>\n\
    Then you can use this function to solve your problem:\n<code>(define (is-equal-to-sum-even\
    \ n)\n  (not (empty? (sum-to-target (build-list n add1) n))))\n</code>\n", " \
    \ (define (is_equal_to_sum_even_iter n acc)\n    (cond\n      [(= n 0) (and (not\
    \ (null? acc)) (= (length acc) 4))]\n      [(= n 2) (and (not (null? acc)) (=\
    \ (length acc) 4))]\n      [(= n 4) (and (not (null? acc)) (= (length acc) 4))]\n\
    \      [(= n 6) (and (not (null? acc)) (= (length acc) 4))]\n      [(= n 8) (and\
    \ (not (null? acc)) (= (length acc) 4))]\n      [(= n 10) (and (not (null? acc))\
    \ (= (length acc) 4))]\n      [(= n 12) (and (not (null? acc)) (= (length acc)\
    \ 4))]\n      [(= n 14) (and (not (null? acc)) (= (length acc) 4))]\n      [(=\
    \ n 16) (and (not (null? acc)) (= (length acc) 4))]\n      [(= n 18) (and (not\
    \ (null? acc)) (= (length acc) 4))]\n      [(= n 20) (and (not (null? acc)) (=\
    \ (length acc) 4))]\n      [(= n 22) (and (not (null? acc)) (= (length acc) 4))]\n\
    \      [(= n 24) (and (not (null? acc)) (= (length acc) 4))]\n      [(= n 26)\
    \ (and (not (null? acc)) (= (length acc) 4))]\n      [(= n 28) (and (not (null?\
    \ acc)) (= (length acc) 4))]\n      [(= n 30) (and (not (null? acc)) (= (length\
    \ acc) 4))]\n      [(= n 32) (and (not (null? acc)) (= (length acc) 4))]\n   \
    \   [(= n 34) (and (not (null? acc)) (= (length acc) 4))]\n      [(= n 36) (and\
    \ (not (null? acc)) (= (length acc) 4))]\n      [(= n 38) (and (not (null? acc))\
    \ (= (length acc) 4))]\n      [(= n 40) (and", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n (+ i (*\
    \ 2 i))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+\
    \ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n",
  "  (define (is_equal_to_sum_even_helper n count)\n    (cond\n      [(= n 0) (= count\
    \ 4)]\n      [(= count 4) #f]\n      [(even? n) (is_equal_to_sum_even_helper (-\
    \ n 2) (+ count 1))]\n      [else (is_equal_to_sum_even_helper (- n 1) count)]))\n\
    \  (is_equal_to_sum_even_helper n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ (* i 4)) #t]\n      [(> n (* i 4)) (is_equal_to_sum_even_iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(< n sum) #f]\n      [else (is_equal_to_sum_even_helper n (+ sum 2) (+\
    \ count 1))]))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (cond\n    [(= n\
    \ 0) #t]\n    [(< n 0) #f]\n    [else (or (is_equal_to_sum_even (- n 2))\n   \
    \           (is_equal_to_sum_even (- n 4))\n              (is_equal_to_sum_even\
    \ (- n 6))\n              (is_equal_to_sum_even (- n 8)))]))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n 2)]\n      [(= (remainder i 2) 0) (is_equal_to_sum_even_iter (- n i) 0)]\n\
    \      [else (is_equal_to_sum_even_iter n (+ i 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((even? n) (is_equal_to_sum_even_iter\
    \ n (+ sum n) (+ count 1)))\n          (else (is_equal_to_sum_even_iter (- n 1)\
    \ sum count))))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ i 2) 0) (is_equal_to_sum_even_iter (- n i) (- i 2))]\n      [else (is_equal_to_sum_even_iter\
    \ n (- i 2))]))\n  (is_equal_to_sum_even_iter n n))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n 2)]\n      [(= i 1) (is_equal_to_sum_even-iter n 4)]\n      [(= i 2) (is_equal_to_sum_even-iter\
    \ n 6)]\n      [(= i 3) (is_equal_to_sum_even-iter n 8)]\n      [(= i 4) (is_equal_to_sum_even-iter\
    \ n 10)]\n      [(= i 5) (is_equal_to_sum_even-iter n 12)]\n      [(= i 6) (is_equal_to_sum_even-iter\
    \ n 14)]\n      [(= i 7) (is_equal_to_sum_even-iter n 16)]\n      [(= i 8) (is_equal_to_sum_even-iter\
    \ n 18)]\n      [(= i 9) (is_equal_to_sum_even-iter n 20)]\n      [(= i 10) (is_equal_to_sum_even-iter\
    \ n 22)]\n      [(= i 11) (is_equal_to_sum_even-iter n 24)]\n      [(= i 12) (is_equal_to_sum_even-iter\
    \ n 26)]\n      [(= i 13) (is_equal_to_sum_even-iter n 28)]\n      [(= i 14) (is_equal_to_sum_even-iter\
    \ n 30)]\n      [(= i 15) (is_equal_to_sum_even-iter n 32)]\n      [(= i 16) (is_equal_to_sum_even-iter\
    \ n 34)]\n      [(= i 17) (is_equal_to_sum_even-iter n 36)]\n      [(= i 18) (is_equal_to_sum_even-iter\
    \ n 38)]\n      [(= i 19) (is_equal_to_sum_even-iter n 40)]\n      [(= i 20) (is_equal_to_sum_even-iter\
    \ n 42)]\n      [(= i 21) (is_equal_to_sum_even", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((= n sum) #t)\n\
    \          ((= n (+ sum 2)) #t)\n          ((= n (+ sum 4)) #t)\n          ((=\
    \ n (+ sum 6)) #t)\n          ((= n (+ sum 8)) #t)\n          ((= n (+ sum 10))\
    \ #t)\n          ((= n (+ sum 12)) #t)\n          ((= n (+ sum 14)) #t)\n    \
    \      ((= n (+ sum 16)) #t)\n          ((= n (+ sum 18)) #t)\n          ((= n\
    \ (+ sum 20)) #t)\n          ((= n (+ sum 22)) #t)\n          ((= n (+ sum 24))\
    \ #t)\n          ((= n (+ sum 26)) #t)\n          ((= n (+ sum 28)) #t)\n    \
    \      ((= n (+ sum 30)) #t)\n          ((= n (+ sum 32)) #t)\n          ((= n\
    \ (+ sum 34)) #t)\n          ((= n (+ sum 36)) #t)\n          ((= n (+ sum 38))\
    \ #t)\n          ((= n (+ sum 40)) #t)\n          ((= n (+ sum 42)) #t)\n    \
    \      ((= n (+ sum 44)) #t)\n          ((= n (+ sum 46)) #t)\n          ((= n\
    \ (+ sum 48)) #t)\n          ((= n (+ sum 50)) #t)\n          ((= n (+ sum 52))\
    \ #t)\n          ((= n (+ sum 54)) #t)\n          ((= n (+ sum 56)) #t)\n    \
    \      ((= n (+ sum 58)) #t)\n          ((= n (+ sum 60)) #t)\n          ((= n\
    \ (+ sum 62)) #t)\n          ((= n (+ sum 64)) #t)\n          ((= n (+ sum 66))\
    \ #t)\n          ((= n (+ sum 68)) #t)\n          ((= n (+ sum 70)) #t)\n    \
    \      ((= n (+ sum 72)) #t)\n          ((= n (+ sum 74)) #t)\n          ((= n\
    \ (+ sum 76)) #t)\n          ((= n (+ sum 78)) #t)\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n          ((= i n)\
    \ #f)\n          ((= n (+ i (* 2 i))) #t)\n          (else (is_equal_to_sum_even-iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n i) #f)\n\
    \          ((= n (+ i (* 2 i))) #t)\n          (else (is_equal_to_sum_even_iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i 0) #f]\n      [(= n (* i 2))\
    \ #t]\n      [else (is_equal_to_sum_even-iter (- n (* i 2)) (- i 1))]))\n  (is_equal_to_sum_even-iter\
    \ n (quotient n 2)))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\
    \ ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter n (+ i 2)))\n  \
    \        ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter n (+ i 2)))\n\
    \          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter n (+ i\
    \ 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          (else #f)))\n  (is_equal_to_sum_even_iter n 0))\n", " \
    \ (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n   \
    \   [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(even? n) (is_equal_to_sum_even-iter\
    \ n (+ sum n) (+ count 1))]\n      [else (is_equal_to_sum_even-iter n sum count)]))\n\
    \  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i acc)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2) acc)]\n      [(= (+ i acc) n) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2) (+ i acc))]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (cond\n\
    \    [(= n 0) #t]\n    [(< n 0) #f]\n    [else (or (is_equal_to_sum_even (- n\
    \ 2))\n              (is_equal_to_sum_even (- n 4))\n              (is_equal_to_sum_even\
    \ (- n 6))\n              (is_equal_to_sum_even (- n 8)))]))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          ((= n (+ i (*\
    \ 2 i))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (cond\n    [(= n 0) #t]\n    [(= n 2) #f]\n    [(= n 4) #t]\n \
    \   [(= n 6) #f]\n    [(= n 8) #t]\n    [(= n 10) #f]\n    [(= n 12) #t]\n   \
    \ [(= n 14) #f]\n    [(= n 16) #t]\n    [(= n 18) #f]\n    [(= n 20) #t]\n   \
    \ [(= n 22) #f]\n    [(= n 24) #t]\n    [(= n 26) #f]\n    [(= n 28) #t]\n   \
    \ [(= n 30) #f]\n    [(= n 32) #t]\n    [(= n 34) #f]\n    [(= n 36) #t]\n   \
    \ [(= n 38) #f]\n    [(= n 40) #t]\n    [(= n 42) #f]\n    [(= n 44) #t]\n   \
    \ [(= n 46) #f]\n    [(= n 48) #t]\n    [(= n 50) #f]\n    [(= n 52) #t]\n   \
    \ [(= n 54) #f]\n    [(= n 56) #t]\n    [(= n 58) #f]\n    [(= n 60) #t]\n   \
    \ [(= n 62) #f]\n    [(= n 64) #t]\n    [(= n 66) #f]\n    [(= n 68) #t]\n   \
    \ [(= n 70) #f]\n    [(= n 72) #t]\n    [(= n 74) #f]\n    [(= n 76) #t]\n   \
    \ [(= n 78) #f]\n    [(= n 80) #t]\n    [(= n 82) #f]\n    [(= n 84) #t]\n   \
    \ [(= n 86) #f]\n    [(= n 88) #t]\n    [(= n 90) #f]\n    [(= n 92) #t]\n   \
    \ [(= n 94) #f]\n    [(= n 96) #t]\n    [(= n 98) #f]\n    [(= n 100) #", "  (define\
    \ (is_equal_to_sum_even_iter n count)\n    (cond\n      [(= n 0) (= count 4)]\n\
    \      [(= n 2) (= count 3)]\n      [(= n 4) (= count 2)]\n      [(= n 6) (= count\
    \ 1)]\n      [(= n 8) (= count 0)]\n      [else (or (is_equal_to_sum_even_iter\
    \ (- n 2) (+ count 1))\n                (is_equal_to_sum_even_iter (- n 4) (+\
    \ count 1))\n                (is_equal_to_sum_even_iter (- n 6) (+ count 1))\n\
    \                (is_equal_to_sum_even_iter (- n 8) (+ count 1)))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (helper n i)\n    (cond\n      [(= i n) #t]\n      [(=\
    \ i 0) (helper n (+ i 2))]\n      [(= i (- n i)) (helper n (+ i 2))]\n      [else\
    \ (or (helper n (+ i 2)) (helper (- n i) 2))]))\n  (helper n 2))\n", "  (define\
    \ (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= count 4) (= n\
    \ sum)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (cond\n    [(=\
    \ n 0) #t]\n    [(= n 2) #f]\n    [(= n 4) #t]\n    [(= n 6) #f]\n    [(= n 8)\
    \ #t]\n    [(= n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n 16)\
    \ #t]\n    [(= n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n 24)\
    \ #t]\n    [(= n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n 32)\
    \ #t]\n    [(= n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n 40)\
    \ #t]\n    [(= n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n 48)\
    \ #t]\n    [(= n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n 56)\
    \ #t]\n    [(= n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n 64)\
    \ #t]\n    [(= n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n 72)\
    \ #t]\n    [(= n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n 80)\
    \ #t]\n    [(= n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n 88)\
    \ #t]\n    [(= n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n 96)\
    \ #t]\n    [(= n 98) #f]\n    [(= n 100) #", "  (define (is_equal_to_sum_even_iter\
    \ n i sum)\n    (cond\n      [(= sum n) #t]\n      [(> sum n) #f]\n      [(= i\
    \ n) #f]\n      [else (or (is_equal_to_sum_even_iter n (+ i 2) (+ sum i))\n  \
    \              (is_equal_to_sum_even_iter n (+ i 2) sum))]))\n  (is_equal_to_sum_even_iter\
    \ n 2 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum) #f]\n \
    \     [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(< n sum) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= i\
    \ 0) #f]\n      [(= n i) #f]\n      [(is_equal_to_sum_even_iter (- n i) (- i 2))\
    \ #t]\n      [else (is_equal_to_sum_even_iter n (- i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n n))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (cond\n    [(= n 0) #t]\n    [(< n 0) #f]\n    [else (or (is_equal_to_sum_even\
    \ (- n 2))\n              (is_equal_to_sum_even (- n 4))\n              (is_equal_to_sum_even\
    \ (- n 6))\n              (is_equal_to_sum_even (- n 8)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
