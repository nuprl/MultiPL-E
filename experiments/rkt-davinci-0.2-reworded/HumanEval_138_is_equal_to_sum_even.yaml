name: HumanEval_138_is_equal_to_sum_even
language: rkt
prompt: "#lang racket\n\n;; Evaluate whether the given number n can be written as\
  \ the sum of exactly 4 positive even numbers\n;; Example\n;; >>> (is_equal_to_sum_even\
  \ 4)\n;; #f\n;; >>> (is_equal_to_sum_even 6)\n;; #f\n;; >>> (is_equal_to_sum_even\
  \ 8)\n;; #t\n(define (is_equal_to_sum_even n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n\
  \    (check-equal? (candidate 4) #f)\n    (check-equal? (candidate 6) #f)\n    (check-equal?\
  \ (candidate 8) #t)\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate\
  \ 11) #f)\n    (check-equal? (candidate 12) #t)\n    (check-equal? (candidate 13)\
  \ #f)\n    (check-equal? (candidate 16) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even (-\
    \ n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n\
    \    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum)\
    \ #f]\n      [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (if (= n 0)\n  \
    \    #t\n      (if (even? n)\n          (is_equal_to_sum_even (- n 2))\n     \
    \     #f)))\n", "  (define (is_equal_to_sum_even_helper n sum count)\n    (cond\n\
    \      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_helper\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_helper\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(> n (* 4 i)) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define\
    \ (is_equal_to_sum_even_helper n i)\n    (cond\n      [(= n 0) #t]\n      [(=\
    \ i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_helper\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_helper n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n i) #t)\n          ((= n (+ i (* 2 i))) #t)\n         \
    \ ((= n (+ i (* 2 i) (* 2 (+ i 1)))) #t)\n          ((= n (+ i (* 2 i) (* 2 (+\
    \ i 1)) (* 2 (+ i 2)))) #t)\n          ((= n (+ i (* 2 i) (* 2 (+ i 1)) (* 2 (+\
    \ i 2)) (* 2 (+ i 3)))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i\
    \ 1)))))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n (* 4 i)) #t]\n      [(< n (* 4 i)) #f]\n      [else\
    \ (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i n) #t]\n    \
    \  [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= n i) #f]\n     \
    \ [else (or (is_equal_to_sum_even_iter (- n i) (+ i 2))\n                (is_equal_to_sum_even_iter\
    \ n (+ i 2)))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i count)\n    (cond\n    \
    \  [(= count 4) #t]\n      [(= n 0) #f]\n      [(= i 0) #f]\n      [(= (remainder\
    \ n i) 0) (is_equal_to_sum_even_iter (- n i) (- i 2) (+ count 1))]\n      [else\
    \ (is_equal_to_sum_even_iter n (- i 2) count)]))\n  (is_equal_to_sum_even_iter\
    \ n n 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum) #f]\n \
    \     [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum) #f]\n \
    \     [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(< n sum) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_helper n sum count)\n    (cond ((= n sum) (= count 4))\n\
    \          ((> n sum) (is_equal_to_sum_even_helper n (+ sum 2) (+ count 1)))\n\
    \          ((< n sum) #f)))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n          ((= i n)\
    \ #f)\n          ((= n (+ i (* 2 i))) #t)\n          (else (is_equal_to_sum_even-iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (*\
    \ 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
