name: HumanEval_104_unique_digits
language: rkt
prompt: "#lang racket\n\n;; Given a list of positive integers x. return a sorted list\
  \ of all \n;; elements that hasn't any even digit.\n;; Note: Returned list should\
  \ be sorted in increasing order.\n;; For example:\n;; >>> (unique_digits (list 15\
  \ 33 1422 1))\n;; (list 1 15 33)\n;; >>> (unique_digits (list 152 323 1422 10))\n\
  ;; (list )\n(define (unique_digits x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
  \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
  \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
  \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103\
  \ 31)) (list 31 135))\n))\n\n(test-humaneval)"
completions: ["  (define (has_even_digit? n)\n    (cond ((= (remainder n 10) 0) #t)\n\
    \          ((= (remainder n 10) 2) #t)\n          ((= (remainder n 10) 4) #t)\n\
    \          ((= (remainder n 10) 6) #t)\n          ((= (remainder n 10) 8) #t)\n\
    \          (else (has_even_digit? (quotient n 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (cond ((null? x) acc)\n          ((has_even_digit? (car x)) (unique_digits_helper\
    \ (cdr x) acc))\n          (else (unique_digits_helper (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique_digits_helper x '()) <))\n", "  (define (is_even_digit? x)\n\
    \    (cond\n      [(= x 0) #t]\n      [(= x 2) #t]\n      [(= x 4) #t]\n     \
    \ [(= x 6) #t]\n      [(= x 8) #t]\n      [else #f]))\n  (define (has_even_digit?\
    \ x)\n    (cond\n      [(= x 0) #f]\n      [(is_even_digit? (modulo x 10)) #t]\n\
    \      [else (has_even_digit? (quotient x 10))]))\n  (define (unique_digits_helper\
    \ x result)\n    (cond\n      [(empty? x) (sort result <)]\n      [(has_even_digit?\
    \ (first x)) (unique_digits_helper (rest x) result)]\n      [else (unique_digits_helper\
    \ (rest x) (append result (list (first x))))]))\n  (unique_digits_helper x (list)))\n",
  "  (sort x <))\n", "  (sort (filter (lambda (x) (not (even? (car x)))) (map (lambda\
    \ (x) (modulo x 10)) x)) <))\n", "  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n", "  (cond\n    [(empty? x) empty]\n    [(even? (first x)) (unique_digits\
    \ (rest x))]\n    [else (cons (first x) (unique_digits (rest x)))]))\n", "  (cond\n\
    \    [(empty? x) empty]\n    [(has-even-digit? (first x)) (unique_digits (rest\
    \ x))]\n    [else (cons (first x) (unique_digits (rest x)))]))\n", "  (cond\n\
    \    [(empty? x) empty]\n    [(even? (first x)) (unique_digits (rest x))]\n  \
    \  [else (cons (first x) (unique_digits (rest x)))]))\n", "  (filter (lambda (y)\
    \ (not (even? (remainder y 10)))) x))\n", "  (cond\n    [(empty? x) empty]\n \
    \   [(even? (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n", "  (cond\n    [(null? x) '()]\n    [(even? (remainder (car\
    \ x) 10)) (unique_digits (cdr x))]\n    [(even? (remainder (car x) 100)) (unique_digits\
    \ (cdr x))]\n    [(even? (remainder (car x) 1000)) (unique_digits (cdr x))]\n\
    \    [(even? (remainder (car x) 10000)) (unique_digits (cdr x))]\n    [(even?\
    \ (remainder (car x) 100000)) (unique_digits (cdr x))]\n    [(even? (remainder\
    \ (car x) 1000000)) (unique_digits (cdr x))]\n    [(even? (remainder (car x) 10000000))\
    \ (unique_digits (cdr x))]\n    [(even? (remainder (car x) 100000000)) (unique_digits\
    \ (cdr x))]\n    [(even? (remainder (car x) 1000000000)) (unique_digits (cdr x))]\n\
    \    [else (cons (car x) (unique_digits (cdr x)))]))\n", "  (define (has_even_digit?\
    \ n)\n    (cond\n      [(zero? n) false]\n      [(even? (remainder n 10)) true]\n\
    \      [else (has_even_digit? (quotient n 10))]))\n  (define (unique_digits_helper\
    \ x acc)\n    (cond\n      [(empty? x) (reverse acc)]\n      [(has_even_digit?\
    \ (first x)) (unique_digits_helper (rest x) acc)]\n      [else (unique_digits_helper\
    \ (rest x) (cons (first x) acc))]))\n  (unique_digits_helper x (list)))\n", " \
    \ (sort (filter (lambda (n) (not (even-digit? n))) x) <))\n", "  (cond\n    [(empty?\
    \ x) empty]\n    [(even? (first x)) (unique_digits (rest x))]\n    [else (cons\
    \ (first x) (unique_digits (rest x)))]))\n", "  (cond\n    [(empty? x) empty]\n\
    \    [(even? (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 10000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 100000))\
    \ (unique_digits (rest x))]\n    [(even? (remainder (first x) 1000000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 10000000)) (unique_digits (rest\
    \ x))]\n    [(even? (remainder (first x) 100000000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000000)) (unique_digits (rest x))]\n   \
    \ [else (cons (first x) (unique_digits (rest x)))]))\n", "  (cond\n    [(empty?\
    \ x) empty]\n    [(even? (first x)) (unique_digits (rest x))]\n    [else (cons\
    \ (first x) (unique_digits (rest x)))]))\n", "  (sort (filter (lambda (y) (not\
    \ (even? (modulo y 10)))) x) <))\n", "  (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x))\n", "  (cond [(empty? x) empty]\n        [(even? (remainder (first\
    \ x) 10)) (unique_digits (rest x))]\n        [(even? (remainder (first x) 100))\
    \ (unique_digits (rest x))]\n        [(even? (remainder (first x) 1000)) (unique_digits\
    \ (rest x))]\n        [(even? (remainder (first x) 10000)) (unique_digits (rest\
    \ x))]\n        [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \        [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n  \
    \      [(even? (remainder (first x) 10000000)) (unique_digits (rest x))]\n   \
    \     [(even? (remainder (first x) 100000000)) (unique_digits (rest x))]\n   \
    \     [(even? (remainder (first x) 1000000000)) (unique_digits (rest x))]\n  \
    \      [else (cons (first x) (unique_digits (rest x)))]))\n", "  (define (has_even_digit?\
    \ n)\n    (cond\n      [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n \
    \     [else (has_even_digit? (quotient n 10))]))\n  (define (unique_digits_helper\
    \ x acc)\n    (cond\n      [(empty? x) acc]\n      [(has_even_digit? (first x))\
    \ (unique_digits_helper (rest x) acc)]\n      [else (unique_digits_helper (rest\
    \ x) (cons (first x) acc))]))\n  (unique_digits_helper x '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
