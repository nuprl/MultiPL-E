name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> (mean_absolute_deviation\
  \ (list 1.0 2.0 3.0 4.0))\n;; 1.0\n(define (mean_absolute_deviation numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute_difference number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute_differences numbers)\n    (map absolute_difference numbers))\n\
    \  (/ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (abs-diff-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map abs-diff-from-mean\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute-difference x)\n    (if (< x\
    \ (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean numbers))))\n\
    \  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n", "  (define\
    \ (average numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute\
    \ x)\n    (if (< x 0) (- x) x))\n  (define (deviation x)\n    (absolute (- x (average\
    \ numbers))))\n  (define (deviations numbers)\n    (map deviation numbers))\n\
    \  (define (average-deviations numbers)\n    (average (deviations numbers)))\n\
    \  (average-deviations numbers))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (cond ((null? numbers) (/ sum count))\n          (else\
    \ (mean_absolute_deviation_iter (cdr numbers)\n                              \
    \                (+ sum (abs (- (car numbers) (/ sum count))))\n             \
    \                                 (+ count 1)))))\n  (mean_absolute_deviation_iter\
    \ numbers 0 0))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-difference-from-mean number)\n    (abs (- number\
    \ (mean numbers))))\n  (define (absolute-differences-from-mean numbers)\n    (map\
    \ absolute-difference-from-mean numbers))\n  (define (average numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean\
    \ numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (abs-diff x)\n    (if (&lt; x (mean\
    \ numbers))\n        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-differences\
    \ numbers)\n    (map abs-diff numbers))\n  (mean (absolute-differences numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference numbers))\
    \ (length numbers)))\n", "  (define (abs-diff x)\n    (if (< x (mean numbers))\n\
    \        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences numbers)\n    (map absolute-difference numbers))\n\
    \  (/ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (define\
    \ (abs-diff x)\n    (if (< x (mean numbers))\n        (- (mean numbers) x)\n \
    \       (- x (mean numbers))))\n  (define (abs-diffs numbers)\n    (if (null?\
    \ numbers)\n        '()\n        (cons (abs-diff (car numbers))\n            \
    \  (abs-diffs (cdr numbers)))))\n  (mean (abs-diffs numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences\
    \ numbers)\n    (map absolute-difference numbers))\n  (/ (apply + (absolute-differences\
    \ numbers)) (length numbers)))\n", "  (define (abs-diff x)\n    (abs (- x (mean\
    \ numbers))))\n  (mean (map abs-diff numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (mean-absolute-differences\
    \ numbers)\n    (apply + (map absolute-difference-from-mean numbers)))\n  (/ (mean-absolute-differences\
    \ numbers) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference x)\n    (if (&lt; x (mean\
    \ numbers))\n        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (/\
    \ (apply + (map absolute-difference numbers)) (length numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ x)\n    (abs (- x (mean numbers))))\n  (define (mean-absolute-differences numbers)\n\
    \    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (mean-absolute-differences numbers)) (length numbers)))\n\
    \  (mean-of-absolute-differences numbers))\n", "  (define (abs-difference x)\n\
    \    (abs (- x (mean numbers))))\n  (mean (map abs-difference numbers)))\n", " \
    \ (let* ([mean (mean numbers)]\n         [differences (map (lambda (x) (abs (-\
    \ x mean))) numbers)])\n    (mean differences)))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (cond\n      [(empty? numbers) (/ sum count)]\n    \
    \  [else (mean_absolute_deviation_iter (rest numbers) (+ sum (abs (- (first numbers)\
    \ (/ sum count)))) (+ count 1))]))\n  (mean_absolute_deviation_iter numbers 0\
    \ 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
