name: HumanEval_4_mean_absolute_deviation
language: rkt
prompt: "#lang racket\n\n;; For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n;; around the mean of this dataset.\n;; Mean Absolute Deviation is\
  \ the average absolute difference between each\n;; element and a centerpoint (mean\
  \ in this case):\n;; MAD = average | x - x_mean |\n;; >>> (mean_absolute_deviation\
  \ (list 1.0 2.0 3.0 4.0))\n;; 1.0\n(define (mean_absolute_deviation numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate mean_absolute_deviation))\n\
  \    (check-equal? (candidate (list 1.0 2.0)) 0.5)\n    (check-equal? (candidate\
  \ (list 1.0 2.0 3.0 4.0)) 1.0)\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0\
  \ 5.0)) 1.2)\n))\n\n(test-humaneval)"
completions: ["  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute_difference number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute_differences numbers)\n    (map absolute_difference numbers))\n\
    \  (/ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (abs-diff-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (/ (apply + (map abs-diff-from-mean\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute-difference x)\n    (if (< x\
    \ (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean numbers))))\n\
    \  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n", "  (define\
    \ (average numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute\
    \ x)\n    (if (< x 0) (- x) x))\n  (define (deviation x)\n    (absolute (- x (average\
    \ numbers))))\n  (define (deviations numbers)\n    (map deviation numbers))\n\
    \  (define (average-deviations numbers)\n    (average (deviations numbers)))\n\
    \  (average-deviations numbers))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (cond ((null? numbers) (/ sum count))\n          (else\
    \ (mean_absolute_deviation_iter (cdr numbers)\n                              \
    \                (+ sum (abs (- (car numbers) (/ sum count))))\n             \
    \                                 (+ count 1)))))\n  (mean_absolute_deviation_iter\
    \ numbers 0 0))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-difference-from-mean number)\n    (abs (- number\
    \ (mean numbers))))\n  (define (absolute-differences-from-mean numbers)\n    (map\
    \ absolute-difference-from-mean numbers))\n  (define (average numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean\
    \ numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (abs-diff x)\n    (if (&lt; x (mean\
    \ numbers))\n        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-differences\
    \ numbers)\n    (map abs-diff numbers))\n  (mean (absolute-differences numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference numbers))\
    \ (length numbers)))\n", "  (define (abs-diff x)\n    (if (< x (mean numbers))\n\
    \        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences numbers)\n    (map absolute-difference numbers))\n\
    \  (/ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (define\
    \ (abs-diff x)\n    (if (< x (mean numbers))\n        (- (mean numbers) x)\n \
    \       (- x (mean numbers))))\n  (define (abs-diffs numbers)\n    (if (null?\
    \ numbers)\n        '()\n        (cons (abs-diff (car numbers))\n            \
    \  (abs-diffs (cdr numbers)))))\n  (mean (abs-diffs numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences\
    \ numbers)\n    (map absolute-difference numbers))\n  (/ (apply + (absolute-differences\
    \ numbers)) (length numbers)))\n", "  (define (abs-diff x)\n    (abs (- x (mean\
    \ numbers))))\n  (mean (map abs-diff numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (mean-absolute-differences\
    \ numbers)\n    (apply + (map absolute-difference-from-mean numbers)))\n  (/ (mean-absolute-differences\
    \ numbers) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference x)\n    (if (&lt; x (mean\
    \ numbers))\n        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (/\
    \ (apply + (map absolute-difference numbers)) (length numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ x)\n    (abs (- x (mean numbers))))\n  (define (mean-absolute-differences numbers)\n\
    \    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (mean-absolute-differences numbers)) (length numbers)))\n\
    \  (mean-of-absolute-differences numbers))\n", "  (define (abs-difference x)\n\
    \    (abs (- x (mean numbers))))\n  (mean (map abs-difference numbers)))\n", " \
    \ (let* ([mean (mean numbers)]\n         [differences (map (lambda (x) (abs (-\
    \ x mean))) numbers)])\n    (mean differences)))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (cond\n      [(empty? numbers) (/ sum count)]\n    \
    \  [else (mean_absolute_deviation_iter (rest numbers) (+ sum (abs (- (first numbers)\
    \ (/ sum count)))) (+ count 1))]))\n  (mean_absolute_deviation_iter numbers 0\
    \ 0))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean\
    \ numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (abs x)\n    (if (< x 0)\n     \
    \   (- x)\n        x))\n  (define (sum lst)\n    (if (null? lst)\n        0\n\
    \        (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst)\
    \ (length lst)))\n  (define (difference-from-mean lst)\n    (map (lambda (x) (abs\
    \ (- x (mean lst)))) lst))\n  (mean (difference-from-mean numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute\
    \ x)\n    (if (< x 0) (- x) x))\n  (define (deviation x)\n    (absolute (- x (mean\
    \ numbers))))\n  (/ (apply + (map deviation numbers)) (length numbers)))\n", " \
    \ (define (abs x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (sum\
    \ lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n\
    \  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define (deviation lst)\n\
    \    (map (lambda (x) (abs (- x (mean lst)))) lst))\n  (mean (deviation numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-difference-from-mean number)\n    (abs (- number\
    \ (mean numbers))))\n  (define (absolute-differences-from-mean numbers)\n    (map\
    \ absolute-difference-from-mean numbers))\n  (define (average numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (mean-absolute-differences numbers)\n    (/ (apply + (absolute-differences-from-mean\
    \ numbers))\n       (length numbers)))\n  (mean-absolute-differences numbers))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (mean-absolute-differences numbers)\n    (apply + (map absolute-difference-from-mean\
    \ numbers)))\n  (/ (mean-absolute-differences numbers) (length numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (&lt; x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-difference x)\n    (if (< x (mean numbers))\n\
    \        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map\
    \ absolute-difference numbers)) (length numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-deviation number)\n\
    \    (abs (- number (mean numbers))))\n  (define (absolute-deviations numbers)\n\
    \    (map absolute-deviation numbers))\n  (/ (apply + (absolute-deviations numbers))\
    \ (length numbers)))\n", "  (define (mean_absolute_deviation_iter numbers sum\
    \ mean)\n    (cond ((null? numbers) (/ sum (length numbers)))\n          (else\
    \ (mean_absolute_deviation_iter (cdr numbers)\n                              \
    \                (+ sum (abs (- (car numbers) mean)))\n                      \
    \                        mean))))\n  (define (mean numbers)\n    (define (mean_iter\
    \ numbers sum)\n      (cond ((null? numbers) (/ sum (length numbers)))\n     \
    \       (else (mean_iter (cdr numbers) (+ sum (car numbers))))))\n    (mean_iter\
    \ numbers 0))\n  (mean_absolute_deviation_iter numbers 0 (mean numbers)))\n",
  "  (let ([mean (mean numbers)])\n    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-deviation number)\n    (abs (- number (mean numbers))))\n  (define\
    \ (absolute-deviations numbers)\n    (map absolute-deviation numbers))\n  (/ (apply\
    \ + (absolute-deviations numbers)) (length numbers)))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (cond ((null? numbers) (/ sum count))\n          (else\
    \ (mean_absolute_deviation_iter (cdr numbers)\n                              \
    \                (+ sum (abs (- (car numbers) (/ sum count))))\n             \
    \                                 (+ count 1)))))\n  (mean_absolute_deviation_iter\
    \ numbers 0 0))\n", "  (let ([mean (mean numbers)])\n    (mean (map (lambda (x)\
    \ (abs (- x mean))) numbers))))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute-difference number)\n    (abs\
    \ (- number (mean numbers))))\n  (define (absolute-differences numbers)\n    (map\
    \ absolute-difference numbers))\n  (/ (apply + (absolute-differences numbers))\
    \ (length numbers)))\n", "  (define (mean_absolute_deviation_iter numbers sum\
    \ count)\n    (cond ((null? numbers) (/ sum count))\n          (else (mean_absolute_deviation_iter\
    \ (cdr numbers)\n                                              (+ sum (abs (-\
    \ (car numbers) (/ sum count))))\n                                           \
    \   (+ count 1)))))\n  (mean_absolute_deviation_iter numbers 0 0))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define (mean_absolute_deviation_iter numbers sum mean)\n\
    \    (if (null? numbers)\n        (/ sum (length numbers))\n        (mean_absolute_deviation_iter\
    \ (cdr numbers)\n                                      (+ sum (abs (- (car numbers)\
    \ mean)))\n                                      mean)))\n  (mean_absolute_deviation_iter\
    \ numbers 0 (/ (apply + numbers) (length numbers))))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n\
    \    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference number)\n    (abs (- number (mean numbers))))\n  (define\
    \ (absolute-differences numbers)\n    (map absolute-difference numbers))\n  (/\
    \ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (let* ([numbers-mean\
    \ (mean numbers)]\n         [numbers-abs-diff (map (lambda (x) (abs (- x numbers-mean)))\
    \ numbers)])\n    (mean numbers-abs-diff)))\n", "  (let* ([mean (mean numbers)]\n\
    \         [numbers-minus-mean (map (lambda (x) (- x mean)) numbers)])\n    (mean\
    \ (map abs numbers-minus-mean))))\n", "  (define (deviation x)\n    (abs (- x\
    \ (mean numbers))))\n  (mean (map deviation numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n\
    \    (if (&lt; x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (define (abs x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (sum-abs-differences\
    \ numbers)\n    (if (null? numbers)\n        0\n        (+ (abs (- (car numbers)\
    \ (mean numbers)))\n           (sum-abs-differences (cdr numbers)))))\n  (/ (sum-abs-differences\
    \ numbers)\n     (length numbers)))\n", "  (define (mean_absolute_deviation_helper\
    \ numbers sum count)\n    (cond\n      [(empty? numbers) (/ sum count)]\n    \
    \  [else (mean_absolute_deviation_helper (rest numbers) (+ sum (abs (- (first\
    \ numbers) (/ sum count)))) (+ count 1))]))\n  (mean_absolute_deviation_helper\
    \ numbers 0 0))\n", "  (define (abs-diff x)\n    (if (< x (mean numbers))\n  \
    \      (- (mean numbers) x)\n        (- x (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n", "  (let* ([mean (mean numbers)]\n         [differences (map (lambda\
    \ (x) (abs (- x mean))) numbers)])\n    (mean differences)))\n", "  (define (mean-of-numbers\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean-of-numbers numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (mean-of-absolute-differences numbers))\n", "  (define\
    \ (mean_absolute_deviation_helper numbers sum mean)\n    (if (null? numbers)\n\
    \        (/ sum (length numbers))\n        (mean_absolute_deviation_helper (cdr\
    \ numbers)\n                                        (+ sum (abs (- (car numbers)\
    \ mean)))\n                                        mean)))\n  (mean_absolute_deviation_helper\
    \ numbers 0 (mean numbers)))\n", "  (let* ([numbers-mean (mean numbers)]\n   \
    \      [numbers-deviations (map (lambda (x) (abs (- x numbers-mean))) numbers)])\n\
    \    (mean numbers-deviations)))\n", "  (let* ([mean (mean numbers)]\n       \
    \  [differences (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean differences)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (average (absolute-differences-from-mean numbers)))\n", "  (define mean (mean\
    \ numbers))\n  (define absolute-differences (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (mean absolute-differences))\n", "  (define mean (mean numbers))\n\
    \  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (mean absolute-differences))\n", "  (define (mean_absolute_deviation_iter numbers\
    \ sum count)\n    (cond ((null? numbers) (/ sum count))\n          (else (mean_absolute_deviation_iter\
    \ (cdr numbers)\n                                              (+ sum (abs (-\
    \ (car numbers) (/ sum count))))\n                                           \
    \   (+ count 1)))))\n  (mean_absolute_deviation_iter numbers 0 0))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute_differences\
    \ numbers)\n    (map absolute_difference numbers))\n  (/ (apply + (absolute_differences\
    \ numbers)) (length numbers)))\n", "  (define (abs-diff x)\n    (abs (- x (mean\
    \ numbers))))\n  (mean (map abs-diff numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n\
    \    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (let* ([numbers-mean (mean numbers)]\n         [numbers-deviations (map (lambda\
    \ (x) (abs (- x numbers-mean))) numbers)])\n    (mean numbers-deviations)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference n)\n    (abs (- n (mean numbers))))\n  (/ (apply + (map\
    \ absolute-difference numbers)) (length numbers)))\n", "  (define (mean-of-numbers\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean-of-numbers numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (mean-of-absolute-differences numbers))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ x)\n    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x\
    \ (mean numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x)\n    (if (&lt; x (mean numbers))\n        (-\
    \ (mean numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute x)\n    (if (< x 0) (- x) x))\n\
    \  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (average (map\
    \ (lambda (x) (absolute (- x (mean numbers)))) numbers)))\n", "  (define (mean\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences numbers)\n    (map absolute-difference numbers))\n\
    \  (/ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (let*\
    \ ([numbers-mean (mean numbers)]\n         [numbers-diff (map (lambda (x) (abs\
    \ (- x numbers-mean))) numbers)])\n    (mean numbers-diff)))\n", "  (define (mean\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (let ([mean (mean numbers)])\n    (mean (map (lambda (x) (abs\
    \ (- x mean))) numbers))))\n", "  (define (abs x)\n    (if (< x 0)\n        (-\
    \ x)\n        x))\n  (define (sum lst)\n    (if (null? lst)\n        0\n     \
    \   (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst) (length\
    \ lst)))\n  (define (absolute_deviations lst)\n    (map (lambda (x) (abs (- x\
    \ (mean lst)))) lst))\n  (define (mean_absolute_deviation_helper lst)\n    (/\
    \ (sum (absolute_deviations lst)) (length lst)))\n  (mean_absolute_deviation_helper\
    \ numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x)\n    (if (&lt; x (mean numbers))\n        (-\
    \ (mean numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (abs x)\n    (if (< x 0)\n     \
    \   (- x)\n        x))\n  (define (sum-abs-differences numbers)\n    (if (null?\
    \ numbers)\n        0\n        (+ (abs (- (car numbers) (mean numbers)))\n   \
    \        (sum-abs-differences (cdr numbers)))))\n  (/ (sum-abs-differences numbers)\n\
    \     (length numbers)))\n", "  (define (average numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference number)\n    (abs (- number\
    \ (average numbers))))\n  (define (absolute-differences numbers)\n    (map absolute-difference\
    \ numbers))\n  (define (average-absolute-differences numbers)\n    (/ (apply +\
    \ (absolute-differences numbers)) (length numbers)))\n  (average-absolute-differences\
    \ numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute x)\n    (if (< x 0) (- x) x))\n  (define (deviation x)\n\
    \    (absolute (- x (mean numbers))))\n  (/ (apply + (map deviation numbers))\
    \ (length numbers)))\n", "  (define (mean_absolute_deviation-iter numbers sum\
    \ count)\n    (cond ((null? numbers) (/ sum count))\n          (else (mean_absolute_deviation-iter\
    \ (cdr numbers)\n                                              (+ sum (abs (-\
    \ (car numbers) (/ sum count))))\n                                           \
    \   (+ count 1)))))\n  (mean_absolute_deviation-iter numbers 0 0))\n", "  (define\
    \ mean (mean numbers))\n  (define absolute-differences (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute-differences))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum mean)\n    (if (null? numbers)\n        (/ sum (length numbers))\n\
    \        (mean_absolute_deviation_iter (cdr numbers)\n                       \
    \               (+ sum (abs (- (car numbers) mean)))\n                       \
    \               mean)))\n  (define (mean numbers)\n    (define (mean_iter numbers\
    \ sum)\n      (if (null? numbers)\n          (/ sum (length numbers))\n      \
    \    (mean_iter (cdr numbers) (+ sum (car numbers)))))\n    (mean_iter numbers\
    \ 0))\n  (mean_absolute_deviation_iter numbers 0 (mean numbers)))\n", "  (define\
    \ (abs x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (sum-abs-differences\
    \ numbers)\n    (if (null? numbers)\n        0\n        (+ (abs (- (car numbers)\
    \ (mean numbers)))\n           (sum-abs-differences (cdr numbers)))))\n  (/ (sum-abs-differences\
    \ numbers)\n     (length numbers)))\n", "  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference-from-mean number)\n\
    \    (abs (- number (average numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define mean (mean numbers))\n  (define absolute-differences\
    \ (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute-differences))\n",
  "  (let* ([mean (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x\
    \ mean))) numbers)])\n    (mean deviations)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n\
    \    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (mean-of-absolute-differences numbers)\n    (/ (apply +\
    \ (absolute-differences-from-mean numbers))\n       (length numbers)))\n  (mean-of-absolute-differences\
    \ numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences numbers)\n    (map absolute-difference numbers))\n\
    \  (/ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (define\
    \ mean (mean numbers))\n  (define abs-differences (map (lambda (x) (abs (- x mean)))\
    \ numbers))\n  (mean abs-differences))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference-from-mean number)\n\
    \    (abs (- number (mean numbers))))\n  (define (mean-absolute-differences numbers)\n\
    \    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (mean-absolute-differences numbers)) (length numbers)))\n\
    \  (mean-of-absolute-differences numbers))\n", "  (define (abs-diff x)\n    (if\
    \ (&lt; x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean numbers))))\n\
    \  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (abs-diffs numbers)\n    (map abs-diff numbers))\n  (/ (apply + (abs-diffs numbers))\
    \ (length numbers)))\n", "  (define (mean-of-list numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference-from-mean number)\n    (abs\
    \ (- number (mean-of-list numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (average-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (average-absolute-differences numbers))\n", "  (let* ([mean\
    \ (mean numbers)]\n         [deviations (map (lambda (x) (abs (- x mean))) numbers)])\n\
    \    (mean deviations)))\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference-from-mean number)\n    (abs\
    \ (- number (mean numbers))))\n  (define (absolute-differences-from-mean numbers)\n\
    \    (map absolute-difference-from-mean numbers))\n  (define (average numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (average (absolute-differences-from-mean numbers)))\n", "  (define (abs x)\n\
    \    (if (< x 0)\n        (- x)\n        x))\n  (define (sum-abs-differences numbers)\n\
    \    (if (null? numbers)\n        0\n        (+ (abs (- (car numbers) (mean numbers)))\n\
    \           (sum-abs-differences (cdr numbers)))))\n  (/ (sum-abs-differences\
    \ numbers)\n     (length numbers)))\n", "  (let* ([mean (mean numbers)]\n    \
    \     [deviations (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n",
  "  (define (abs-diff x)\n    (if (&lt; x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (abs-diffs numbers)\n    (map abs-diff\
    \ numbers))\n  (/ (apply + (abs-diffs numbers)) (length numbers)))\n", "  (define\
    \ (abs x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (sum-of-abs-differences\
    \ numbers)\n    (define (sum-of-abs-differences-iter numbers sum)\n      (if (null?\
    \ numbers)\n          sum\n          (sum-of-abs-differences-iter (cdr numbers)\n\
    \                                       (+ sum (abs (- (car numbers)\n       \
    \                                               (mean numbers)))))))\n    (sum-of-abs-differences-iter\
    \ numbers 0))\n  (/ (sum-of-abs-differences numbers)\n     (length numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-deviation number)\n    (abs (- number (mean numbers))))\n  (define\
    \ (absolute-deviations numbers)\n    (map absolute-deviation numbers))\n  (/ (apply\
    \ + (absolute-deviations numbers)) (length numbers)))\n", "  (define (mean-of-numbers\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean-of-numbers numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (mean-of-absolute-differences numbers))\n", "  (define\
    \ mean (mean numbers))\n  (define absolute-differences (map (lambda (x) (abs (-\
    \ x mean))) numbers))\n  (mean absolute-differences))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (mean-of-absolute-differences numbers))\n", "  (define\
    \ (absolute-difference x)\n    (if (&lt; x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-differences numbers)\n  \
    \  (map absolute-difference numbers))\n  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (average (absolute-differences numbers)))\n\
    </code>\nI'm not sure if this is the best way to do this in Racket, but it works.\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-difference-from-mean number)\n    (abs (- number\
    \ (mean numbers))))\n  (define (absolute-differences-from-mean numbers)\n    (map\
    \ absolute-difference-from-mean numbers))\n  (define (average numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x)\n    (if (&lt; x (mean numbers))\n        (-\
    \ (mean numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute x)\n    (if (< x 0) (- x) x))\n\
    \  (define (absolute-difference x)\n    (absolute (- x (mean numbers))))\n  (/\
    \ (apply + (map absolute-difference numbers)) (length numbers)))\n", "  (define\
    \ (abs-diff x)\n    (if (< x (mean numbers))\n        (- (mean numbers) x)\n \
    \       (- x (mean numbers))))\n  (mean (map abs-diff numbers)))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ x)\n    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x\
    \ (mean numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (average (absolute-differences-from-mean numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n\
    \    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference-from-mean number)\n    (abs (- number (average numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (average-absolute-differences numbers)\n    (average (absolute-differences-from-mean\
    \ numbers)))\n  (average-absolute-differences numbers))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean_absolute_deviation_iter (cdr numbers)\n                              \
    \        (+ sum (abs (- (car numbers) (/ sum count))))\n                     \
    \                 (+ count 1))))\n  (mean_absolute_deviation_iter numbers 0 0))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (abs-difference x)\n    (if (< x (mean numbers))\n   \
    \     (- (mean numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map\
    \ abs-difference numbers)) (length numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute_difference x)\n\
    \    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute_difference numbers)) (length numbers)))\n",
  "  (define (abs x)\n    (if (&lt; x 0) (- x) x))\n  (define (sum-abs-differences\
    \ numbers)\n    (if (null? numbers)\n        0\n        (+ (abs (- (car numbers)\
    \ (mean numbers)))\n           (sum-abs-differences (cdr numbers)))))\n  (/ (sum-abs-differences\
    \ numbers) (length numbers)))\n", "  (define (abs x)\n    (if (< x 0)\n      \
    \  (- x)\n        x))\n  (define (sum lst)\n    (if (null? lst)\n        0\n \
    \       (+ (car lst) (sum (cdr lst)))))\n  (define (mean lst)\n    (/ (sum lst)\
    \ (length lst)))\n  (define (deviations lst)\n    (map (lambda (x) (abs (- x (mean\
    \ lst)))) lst))\n  (define (average lst)\n    (/ (sum lst) (length lst)))\n  (average\
    \ (deviations numbers)))\n", "  (define (absolute x)\n    (if (< x 0)\n      \
    \  (- x)\n        x))\n  (define (sum-of-absolute-differences numbers)\n    (define\
    \ (sum-of-absolute-differences-iter numbers sum)\n      (if (null? numbers)\n\
    \          sum\n          (sum-of-absolute-differences-iter (cdr numbers)\n  \
    \                                          (+ sum (absolute (- (car numbers)\n\
    \                                                                (mean numbers)))))))\n\
    \    (sum-of-absolute-differences-iter numbers 0))\n  (/ (sum-of-absolute-differences\
    \ numbers)\n     (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference-from-mean number)\n\
    \    (abs (- number (mean numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (average (absolute-differences-from-mean\
    \ numbers)))\n", "  (define mean (mean numbers))\n  (define absolute-differences\
    \ (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute-differences))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference number)\n    (abs (- number (mean numbers))))\n  (define\
    \ (absolute-differences numbers)\n    (map absolute-difference numbers))\n  (/\
    \ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ x)\n    (abs (- x (average numbers))))\n  (define (mean-absolute-deviations\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-deviations\
    \ numbers)\n    (average (mean-absolute-deviations numbers)))\n  (mean-of-absolute-deviations\
    \ numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences numbers)\n    (map absolute-difference numbers))\n\
    \  (/ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (define\
    \ (mean_absolute_deviation_iter numbers sum count)\n    (if (null? numbers)\n\
    \        (/ sum count)\n        (mean_absolute_deviation_iter (cdr numbers)\n\
    \                                      (+ sum (abs (- (car numbers) (/ sum count))))\n\
    \                                      (+ count 1))))\n  (mean_absolute_deviation_iter\
    \ numbers 0 0))\n", "  (define mean (mean numbers))\n  (define absolute-differences\
    \ (map (lambda (x) (abs (- x mean))) numbers))\n  (mean absolute-differences))\n",
  "  (let ([mean (mean numbers)])\n    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-deviation number)\n    (abs (- number (mean numbers))))\n  (define\
    \ (absolute-deviations numbers)\n    (map absolute-deviation numbers))\n  (/ (apply\
    \ + (absolute-deviations numbers)) (length numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute x)\n    (if\
    \ (< x 0) (- x) x))\n  (define (absolute-difference x)\n    (absolute (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (let* ([mean (mean numbers)]\n         [differences (map (lambda (x) (abs (-\
    \ x mean))) numbers)])\n    (mean differences)))\n", "  (define (abs-difference\
    \ x)\n    (abs (- x (mean numbers))))\n  (mean (map abs-difference numbers)))\n",
  "  (define (abs-diff x)\n    (if (&lt; x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (define (abs-diffs numbers)\n    (if (null?\
    \ numbers)\n        '()\n        (cons (abs-diff (car numbers))\n            \
    \  (abs-diffs (cdr numbers)))))\n  (mean (abs-diffs numbers)))\n", "  (define\
    \ (absolute x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (mean_absolute_deviation_iter\
    \ numbers mean sum)\n    (if (null? numbers)\n        (/ sum (length numbers))\n\
    \        (mean_absolute_deviation_iter (cdr numbers) mean (+ sum (absolute (-\
    \ (car numbers) mean))))))\n  (define (mean numbers)\n    (define (mean_iter numbers\
    \ sum)\n      (if (null? numbers)\n          (/ sum (length numbers))\n      \
    \    (mean_iter (cdr numbers) (+ sum (car numbers)))))\n    (mean_iter numbers\
    \ 0))\n  (mean_absolute_deviation_iter numbers (mean numbers) 0))\n", "  (define\
    \ (mean_absolute_deviation_iter numbers sum mean)\n    (cond\n      [(empty? numbers)\
    \ (/ sum (length numbers))]\n      [else (mean_absolute_deviation_iter (rest numbers)\
    \ (+ sum (abs (- (first numbers) mean))) mean)]))\n  (mean_absolute_deviation_iter\
    \ numbers 0 (/ (sum numbers) (length numbers))))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n\
    \    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (average (absolute-differences-from-mean numbers)))\n", "  (define (abs x)\n\
    \    (if (< x 0)\n        (- x)\n        x))\n  (define (sum-abs-differences numbers)\n\
    \    (if (null? numbers)\n        0\n        (+ (abs (- (car numbers) (mean numbers)))\n\
    \           (sum-abs-differences (cdr numbers)))))\n  (/ (sum-abs-differences\
    \ numbers)\n     (length numbers)))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum mean)\n    (cond ((null? numbers) (/ sum (length numbers)))\n  \
    \        (else (mean_absolute_deviation_iter (cdr numbers)\n                 \
    \                             (+ sum (abs (- (car numbers) mean)))\n         \
    \                                     mean))))\n  (define (mean numbers)\n   \
    \ (define (mean_iter numbers sum)\n      (cond ((null? numbers) (/ sum (length\
    \ numbers)))\n            (else (mean_iter (cdr numbers) (+ sum (car numbers))))))\n\
    \    (mean_iter numbers 0))\n  (mean_absolute_deviation_iter numbers 0 (mean numbers)))\n",
  "  (define (abs-diff x)\n    (abs (- x (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n", "  (let* ([mean (mean numbers)]\n         [differences (map (lambda\
    \ (x) (abs (- x mean))) numbers)])\n    (mean differences)))\n", "  (define (mean\
    \ lst)\n    (/ (apply + lst) (length lst)))\n  (define (absolute x)\n    (if (&lt;\
    \ x 0) (- x) x))\n  (define (deviation x)\n    (absolute (- x (mean numbers))))\n\
    \  (define (deviations lst)\n    (map deviation lst))\n  (define (average lst)\n\
    \    (/ (apply + lst) (length lst)))\n  (average (deviations numbers)))\n", " \
    \ (define (mean-of-list numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference-from-mean number)\n    (abs (- number (mean-of-list\
    \ numbers))))\n  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (mean-of-absolute-differences numbers)\n    (/ (apply +\
    \ (absolute-differences-from-mean numbers))\n       (length numbers)))\n  (mean-of-absolute-differences\
    \ numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x y)\n    (if (&lt; x y) (- y x) (- x y)))\n \
    \ (define (average-absolute-difference numbers)\n    (define (absolute-differences\
    \ numbers)\n      (map (lambda (x) (absolute-difference x (mean numbers))) numbers))\n\
    \    (/ (apply + (absolute-differences numbers)) (length numbers)))\n  (average-absolute-difference\
    \ numbers))\n</code>\n", "  (define (abs-diff x)\n    (if (< x (mean numbers))\n\
    \        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n", "  (define (absolute x)\n    (if (< x 0)\n        (- x)\n   \
    \     x))\n  (define (sum-of-absolute-differences numbers)\n    (if (null? numbers)\n\
    \        0\n        (+ (absolute (- (car numbers) (mean numbers)))\n         \
    \  (sum-of-absolute-differences (cdr numbers)))))\n  (/ (sum-of-absolute-differences\
    \ numbers)\n     (length numbers)))\n", "  (let* ([mean (mean numbers)]\n    \
    \     [differences (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean differences)))\n",
  "  (define (abs x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (sum-abs-diff-from-mean\
    \ xs)\n    (define (sum-abs-diff-from-mean-iter xs acc)\n      (if (null? xs)\n\
    \          acc\n          (sum-abs-diff-from-mean-iter (cdr xs) (+ acc (abs (-\
    \ (car xs) (mean xs)))))))\n    (sum-abs-diff-from-mean-iter xs 0))\n  (/ (sum-abs-diff-from-mean\
    \ numbers) (length numbers)))\n", "  (let* ([mean (mean numbers)]\n         [deviations\
    \ (map (lambda (x) (abs (- x mean))) numbers)])\n    (mean deviations)))\n", " \
    \ (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (&lt; x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-difference number)\n    (abs (- number (mean\
    \ numbers))))\n  (define (absolute-differences numbers)\n    (map absolute-difference\
    \ numbers))\n  (/ (apply + (absolute-differences numbers)) (length numbers)))\n",
  "  (define (mean_absolute_deviation_iter numbers sum mean)\n    (if (null? numbers)\n\
    \        (/ sum (length numbers))\n        (mean_absolute_deviation_iter (cdr\
    \ numbers)\n                                      (+ sum (abs (- (car numbers)\
    \ mean)))\n                                      mean)))\n  (mean_absolute_deviation_iter\
    \ numbers 0 (mean numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference x)\n    (if (< x (mean numbers))\n\
    \        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map\
    \ absolute-difference numbers)) (length numbers)))\n", "  (define mean (mean numbers))\n\
    \  (define absolute-differences (map (lambda (x) (abs (- x mean))) numbers))\n\
    \  (mean absolute-differences))\n", "  (define (abs-diff x)\n    (if (&lt; x (mean\
    \ numbers))\n        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (mean\
    \ (map abs-diff numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference-from-mean number)\n    (abs\
    \ (- number (mean numbers))))\n  (define (absolute-differences-from-mean numbers)\n\
    \    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (mean-of-absolute-differences numbers))\n", "  (define\
    \ (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n\
    \  (define (mean lst)\n    (/ (sum lst) (length lst)))\n  (define (absolute-difference\
    \ x)\n    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x\
    \ (mean numbers))))\n  (define (absolute-differences lst)\n    (if (null? lst)\n\
    \        '()\n        (cons (absolute-difference (car lst)) (absolute-differences\
    \ (cdr lst)))))\n  (/ (sum (absolute-differences numbers)) (length numbers)))\n",
  "  (define (absolute-difference x)\n    (if (&lt; x (mean numbers))\n        (-\
    \ (mean numbers) x)\n        (- x (mean numbers))))\n  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (mean (map absolute-difference\
    \ numbers)))\n</code>\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference number)\n    (abs (- number\
    \ (mean numbers))))\n  (define (absolute-differences numbers)\n    (map absolute-difference\
    \ numbers))\n  (/ (apply + (absolute-differences numbers)) (length numbers)))\n",
  "  (define (mean_absolute_deviation-helper numbers mean)\n    (if (null? numbers)\n\
    \        0\n        (+ (/ (abs (- (car numbers) mean)) (length numbers))\n   \
    \        (mean_absolute_deviation-helper (cdr numbers) mean))))\n  (mean_absolute_deviation-helper\
    \ numbers (mean numbers)))\n", "  (let* ([numbers-mean (mean numbers)]\n     \
    \    [numbers-deviations (map (lambda (x) (abs (- x numbers-mean))) numbers)])\n\
    \    (mean numbers-deviations)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute_deviation number)\n    (abs\
    \ (- number (mean numbers))))\n  (define (absolute_deviations numbers)\n    (map\
    \ absolute_deviation numbers))\n  (/ (apply + (absolute_deviations numbers)) (length\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean\
    \ numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference\
    \ numbers)) (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute-difference number)\n    (abs\
    \ (- number (mean numbers))))\n  (define (absolute-differences numbers)\n    (map\
    \ absolute-difference numbers))\n  (/ (apply + (absolute-differences numbers))\
    \ (length numbers)))\n", "  (define (average numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute-difference number)\n    (abs (- number\
    \ (average numbers))))\n  (define (absolute-differences numbers)\n    (map absolute-difference\
    \ numbers))\n  (define (mean-absolute-differences numbers)\n    (/ (apply + (absolute-differences\
    \ numbers)) (length numbers)))\n  (mean-absolute-differences numbers))\n", " \
    \ (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference-from-mean number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (average numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (average (absolute-differences-from-mean numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (mean-of-absolute-differences numbers))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences\
    \ numbers)\n    (map absolute-difference numbers))\n  (/ (apply + (absolute-differences\
    \ numbers)) (length numbers)))\n", "  (define mean (mean numbers))\n  (define\
    \ deviations (map (lambda (x) (abs (- x mean))) numbers))\n  (mean deviations))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (absolute-difference-from-mean\
    \ x)\n    (absolute (- x (mean numbers))))\n  (/ (apply + (map absolute-difference-from-mean\
    \ numbers))\n     (length numbers)))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum mean)\n    (cond ((null? numbers) (/ sum (length numbers)))\n  \
    \        (else (mean_absolute_deviation_iter (cdr numbers)\n                 \
    \                             (+ sum (abs (- (car numbers) mean)))\n         \
    \                                     mean))))\n  (mean_absolute_deviation_iter\
    \ numbers 0 (mean numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers)\
    \ (length numbers)))\n  (define (absolute x)\n    (if (&lt; x 0) (- x) x))\n \
    \ (define (deviation x)\n    (absolute (- x (mean numbers))))\n  (/ (apply + (map\
    \ deviation numbers)) (length numbers)))\n</code>\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute x)\n    (if\
    \ (< x 0)\n        (- x)\n        x))\n  (define (absolute-differences numbers)\n\
    \    (map (lambda (x) (absolute (- x (mean numbers)))) numbers))\n  (/ (apply\
    \ + (absolute-differences numbers)) (length numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (abs-diff-from-mean number)\n\
    \    (abs (- number (mean numbers))))\n  (/ (apply + (map abs-diff-from-mean numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-deviation-from-mean number)\n    (abs (- number\
    \ (mean numbers))))\n  (define (absolute-deviations-from-mean numbers)\n    (map\
    \ absolute-deviation-from-mean numbers))\n  (define (mean-absolute-deviation numbers)\n\
    \    (/ (apply + (absolute-deviations-from-mean numbers))\n       (length numbers)))\n\
    \  (mean-absolute-deviation numbers))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference number)\n    (abs\
    \ (- number (mean numbers))))\n  (define (absolute-differences numbers)\n    (map\
    \ absolute-difference numbers))\n  (/ (apply + (absolute-differences numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute-difference x)\n    (if (< x (mean numbers))\n\
    \        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (/ (apply + (map\
    \ absolute-difference numbers)) (length numbers)))\n", "  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n\
    \    (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (define (mean_absolute_deviation_iter numbers sum count)\n    (cond ((null? numbers)\
    \ (/ sum count))\n          (else (mean_absolute_deviation_iter (cdr numbers)\n\
    \                                              (+ sum (abs (- (car numbers) (/\
    \ sum count))))\n                                              (+ count 1)))))\n\
    \  (mean_absolute_deviation_iter numbers 0 0))\n", "  (define (mean-of-list numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean-of-list numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (mean-of-absolute-differences numbers))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ x y)\n    (abs (- x y)))\n  (define (average-absolute-difference numbers)\n\
    \    (/ (apply + (map (lambda (x) (absolute-difference x (mean numbers))) numbers))\
    \ (length numbers)))\n  (average-absolute-difference numbers))\n", "  (define\
    \ (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference-from-mean\
    \ number)\n    (abs (- number (mean numbers))))\n  (define (absolute-differences-from-mean\
    \ numbers)\n    (map absolute-difference-from-mean numbers))\n  (define (mean-of-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences-from-mean numbers))\n      \
    \ (length numbers)))\n  (mean-of-absolute-differences numbers))\n", "  (let ([mean\
    \ (mean numbers)])\n    (mean (map (lambda (x) (abs (- x mean))) numbers))))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute_difference number)\n    (abs (- number (mean numbers))))\n  (define\
    \ (absolute_differences numbers)\n    (map absolute_difference numbers))\n  (/\
    \ (apply + (absolute_differences numbers)) (length numbers)))\n", "  (define (average\
    \ numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define (absolute-difference\
    \ number)\n    (abs (- number (average numbers))))\n  (define (absolute-differences\
    \ numbers)\n    (map absolute-difference numbers))\n  (define (mean-absolute-differences\
    \ numbers)\n    (/ (apply + (absolute-differences numbers)) (length numbers)))\n\
    \  (mean-absolute-differences numbers))\n", "  (define (mean numbers)\n    (/\
    \ (apply + numbers) (length numbers)))\n  (define (absolute-difference x)\n  \
    \  (if (< x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean\
    \ numbers))))\n  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n",
  "  (let* ([mean (mean numbers)]\n         [absolute-differences (map (lambda (x)\
    \ (abs (- x mean))) numbers)])\n    (mean absolute-differences)))\n", "  (define\
    \ (mean_absolute_deviation_helper numbers sum count)\n    (if (null? numbers)\n\
    \        (/ sum count)\n        (mean_absolute_deviation_helper (cdr numbers)\
    \ (+ sum (abs (- (car numbers) (/ sum count)))) count)))\n  (mean_absolute_deviation_helper\
    \ numbers 0 (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply +\
    \ numbers) (length numbers)))\n  (define (absolute-difference number)\n    (abs\
    \ (- number (mean numbers))))\n  (define (mean-absolute-differences numbers)\n\
    \    (map absolute-difference numbers))\n  (define (average numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (average (mean-absolute-differences numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference number)\n    (abs (- number (mean numbers))))\n  (define\
    \ (absolute-differences numbers)\n    (map absolute-difference numbers))\n  (/\
    \ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (define (mean_absolute_deviation_iter\
    \ numbers sum count)\n    (if (null? numbers)\n        (/ sum count)\n       \
    \ (mean_absolute_deviation_iter (cdr numbers)\n                              \
    \        (+ sum (abs (- (car numbers) (/ sum count))))\n                     \
    \                 (+ count 1))))\n  (define (mean numbers)\n    (mean_absolute_deviation_iter\
    \ numbers 0 0))\n  (define (absolute_deviation numbers)\n    (map (lambda (x)\
    \ (abs (- x (mean numbers)))) numbers))\n  (mean (absolute_deviation numbers)))\n",
  "  (define (mean-of-numbers numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference-from-mean number)\n    (abs (- number (mean-of-numbers\
    \ numbers))))\n  (define (absolute-differences-from-mean numbers)\n    (map absolute-difference-from-mean\
    \ numbers))\n  (define (mean-of-absolute-differences numbers)\n    (/ (apply +\
    \ (absolute-differences-from-mean numbers))\n       (length numbers)))\n  (mean-of-absolute-differences\
    \ numbers))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute x)\n    (if (< x 0) (- x) x))\n  (define (deviation x)\n\
    \    (absolute (- x (mean numbers))))\n  (/ (apply + (map deviation numbers))\
    \ (length numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length\
    \ numbers)))\n  (define (absolute x)\n    (if (< x 0) (- x) x))\n  (define (average\
    \ lst)\n    (/ (apply + lst) (length lst)))\n  (average (map (lambda (x) (absolute\
    \ (- x (mean numbers)))) numbers)))\n", "  (define (mean numbers)\n    (/ (apply\
    \ + numbers) (length numbers)))\n  (define (absolute-difference x)\n    (if (<\
    \ x (mean numbers))\n        (- (mean numbers) x)\n        (- x (mean numbers))))\n\
    \  (/ (apply + (map absolute-difference numbers)) (length numbers)))\n", "  (define\
    \ (absolute x)\n    (if (< x 0)\n        (- x)\n        x))\n  (define (mean numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (define (deviation-from-mean x)\n\
    \    (absolute (- x (mean numbers))))\n  (define (deviations numbers)\n    (map\
    \ (lambda (x) (deviation-from-mean x)) numbers))\n  (define (average numbers)\n\
    \    (/ (apply + numbers) (length numbers)))\n  (average (deviations numbers)))\n",
  "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n  (define\
    \ (absolute-difference x)\n    (if (< x (mean numbers))\n        (- (mean numbers)\
    \ x)\n        (- x (mean numbers))))\n  (/ (apply + (map absolute-difference numbers))\
    \ (length numbers)))\n", "  (define (abs-diff x)\n    (if (&lt; x (mean numbers))\n\
    \        (- (mean numbers) x)\n        (- x (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n", "  (define (abs-diff x)\n    (if (< x (mean numbers))\n     \
    \   (- (mean numbers) x)\n        (- x (mean numbers))))\n  (mean (map abs-diff\
    \ numbers)))\n", "  (define (mean numbers)\n    (/ (apply + numbers) (length numbers)))\n\
    \  (define (absolute-difference number)\n    (abs (- number (mean numbers))))\n\
    \  (define (absolute-differences numbers)\n    (map absolute-difference numbers))\n\
    \  (/ (apply + (absolute-differences numbers)) (length numbers)))\n", "  (let*\
    \ ([mean (mean numbers)]\n         [absolute-deviations (map (lambda (x) (abs\
    \ (- x mean))) numbers)])\n    (mean absolute-deviations)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
