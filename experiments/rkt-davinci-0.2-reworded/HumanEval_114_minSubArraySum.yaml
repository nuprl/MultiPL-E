name: HumanEval_114_minSubArraySum
language: rkt
prompt: "#lang racket\n\n;; Given a list of integers nums, find the minimum sum of\
  \ any non-empty sub-list\n;; of nums.\n;; Example\n;; >>> (minSubArraySum (list\
  \ 2 3 4 1 2 4))\n;; 1\n;; >>> (minSubArraySum (list -1 -2 -3))\n;; -6\n(define (minSubArraySum\
  \ nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n\
  \    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)\n    (check-equal? (candidate\
  \ (list -1 -2 -3)) -6)\n    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)\n\
  \    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)\n   \
  \ (check-equal? (candidate (list 0 10 20 1000000)) 0)\n    (check-equal? (candidate\
  \ (list -1 -2 -3 10 -5)) -6)\n    (check-equal? (candidate (list 100 -1 -2 -3 10\
  \ -5)) -6)\n    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)\n    (check-equal?\
  \ (candidate (list 100 -33 32 -1 0 -2)) -33)\n    (check-equal? (candidate (list\
  \ -10)) -10)\n    (check-equal? (candidate (list 7)) 7)\n    (check-equal? (candidate\
  \ (list 1 -1)) -1)\n))\n\n(test-humaneval)"
completions: ["  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n\
    \        min-sum\n        (let ([sum (apply + nums)])\n          (if (< sum min-sum)\n\
    \              (minSubArraySum-helper (cdr nums) sum)\n              (minSubArraySum-helper\
    \ (cdr nums) min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum' nums min-sum)\n    (cond\n      [(null? nums) min-sum]\n\
    \      [(< (car nums) 0) (minSubArraySum' (cdr nums) min-sum)]\n      [else (minSubArraySum'\
    \ (cdr nums) (min min-sum (car nums)))]))\n  (minSubArraySum' nums (apply + nums)))\n",
  "  (define (minSubArraySum' nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let ([sum (apply + nums)])\n          (if (< sum min-sum)\n        \
    \      (minSubArraySum' (cdr nums) sum)\n              (minSubArraySum' (cdr nums)\
    \ min-sum)))))\n  (minSubArraySum' nums (apply + nums)))\n", "  (define (minSubArraySum'\
    \ nums min-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [(< (first nums)\
    \ min-sum) (minSubArraySum' (rest nums) (first nums))]\n      [else (minSubArraySum'\
    \ (rest nums) min-sum)]))\n  (minSubArraySum' nums (first nums)))\n", "  (define\
    \ (minSubArraySum' nums min-sum)\n    (cond [(null? nums) min-sum]\n         \
    \ [(< (car nums) min-sum) (minSubArraySum' (cdr nums) (car nums))]\n         \
    \ [else (minSubArraySum' (cdr nums) min-sum)]))\n  (minSubArraySum' nums (car\
    \ nums)))\n", "  (define (minSubArraySum-iter nums min-so-far)\n    (cond\n  \
    \    [(empty? nums) min-so-far]\n      [(< (first nums) min-so-far) (minSubArraySum-iter\
    \ (rest nums) (first nums))]\n      [else (minSubArraySum-iter (rest nums) min-so-far)]))\n\
    \  (minSubArraySum-iter nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond\n      [(null? nums) min-sum]\n      [(<= (car nums)\
    \ min-sum) (minSubArraySum-helper (cdr nums) (car nums))]\n      [else (minSubArraySum-helper\
    \ (cdr nums) min-sum)]))\n  (minSubArraySum-helper nums (car nums)))\n", "  (define\
    \ (minSubArraySum' nums minSoFar)\n    (cond\n      [(empty? nums) minSoFar]\n\
    \      [(<= (first nums) minSoFar) (minSubArraySum' (rest nums) (first nums))]\n\
    \      [else (minSubArraySum' (rest nums) minSoFar)]))\n  (minSubArraySum' nums\
    \ (first nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n    (cond\n\
    \      [(empty? nums) min-so-far]\n      [(< (first nums) min-so-far) (minSubArraySum-helper\
    \ (rest nums) (first nums))]\n      [else (minSubArraySum-helper (rest nums) min-so-far)]))\n\
    \  (minSubArraySum-helper nums (first nums)))\n", "  (minSubArraySum-helper nums\
    \ 0 (length nums) 0))\n", "  (define (minSum nums sum minSum)\n    (cond\n   \
    \   [(empty? nums) minSum]\n      [(< sum (first nums)) (minSum (rest nums) (first\
    \ nums) minSum)]\n      [else (minSum (rest nums) (+ sum (first nums)) (min minSum\
    \ sum))]))\n  (minSum (rest nums) (first nums) (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [(< (first nums)\
    \ min-sum) (minSubArraySum-helper (rest nums) (first nums))]\n          [else\
    \ (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper nums\
    \ (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if\
    \ (null? nums)\n        min-sum\n        (let ((sum (apply + nums)))\n       \
    \   (minSubArraySum-helper (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum' nums minSum)\n    (cond\n\
    \      [(empty? nums) minSum]\n      [(< (car nums) 0) (minSubArraySum' (cdr nums)\
    \ (min minSum (car nums)))\n       (minSubArraySum' (cdr nums) minSum)]))\n  (minSubArraySum'\
    \ nums (car nums)))\n", "  (define (minSubArraySum' nums min-so-far)\n    (if\
    \ (null? nums)\n        min-so-far\n        (let ([curr-num (car nums)])\n   \
    \       (minSubArraySum' (cdr nums)\n                           (min min-so-far\n\
    \                                (if (&lt; curr-num 0)\n                     \
    \               curr-num\n                                    (+ curr-num min-so-far)))))))\n\
    \  (minSubArraySum' nums (car nums)))\n</code>\n", "  (define (minSubArraySum'\
    \ nums min-so-far)\n    (cond\n      [(empty? nums) min-so-far]\n      [(< (first\
    \ nums) min-so-far) (minSubArraySum' (rest nums) (first nums))]\n      [else (minSubArraySum'\
    \ (rest nums) min-so-far)]))\n  (minSubArraySum' nums (first nums)))\n", "  (define\
    \ (minSubArraySum' nums minSoFar)\n    (if (null? nums)\n        minSoFar\n  \
    \      (let* ([n (car nums)]\n               [minSoFar (if (< n minSoFar) n minSoFar)])\n\
    \          (minSubArraySum' (cdr nums) minSoFar))))\n  (minSubArraySum' nums (car\
    \ nums)))\n", "  (define (minSubArraySum' nums min-sum)\n    (if (null? nums)\n\
    \        min-sum\n        (let ([cur-sum (apply + nums)])\n          (if (&lt;\
    \ cur-sum min-sum)\n              (minSubArraySum' (cdr nums) cur-sum)\n     \
    \         (minSubArraySum' (cdr nums) min-sum)))))\n  (minSubArraySum' nums (apply\
    \ + nums)))\n</code>\n", "  (define (minSubArraySum-iter nums min-sum)\n    (cond\
    \ [(empty? nums) min-sum]\n          [(< (first nums) min-sum) (minSubArraySum-iter\
    \ (rest nums) (first nums))]\n          [else (minSubArraySum-iter (rest nums)\
    \ min-sum)]))\n  (minSubArraySum-iter nums (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ([sum (apply\
    \ + nums)])\n          (minSubArraySum-iter (cdr nums) (min sum min-sum)))))\n\
    \  (minSubArraySum-iter nums (apply + nums)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
