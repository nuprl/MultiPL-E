name: HumanEval_66_digitSum
language: rkt
results:
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref s 0))\n \
    \                (digitSum (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:31:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n98vf78.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3n98vf78.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n98vf78.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3n98vf78.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n98vf78.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3n98vf78.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n98vf78.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3n98vf78.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0hih2zif.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp0hih2zif.rkt:20:38\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxpnqfxqz.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxpnqfxqz.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxpnqfxqz.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c)\n               (char->integer c)\n            \
    \   0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdff2ab8i.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpdff2ab8i.rkt:22:6\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_fpa7yf.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_fpa7yf.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_fpa7yf.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_fpa7yf.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_fpa7yf.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_fpa7yf.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_fpa7yf.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_fpa7yf.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mr86gul.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0mr86gul.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mr86gul.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0mr86gul.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mr86gul.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0mr86gul.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mr86gul.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0mr86gul.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp95z4syz6.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp95z4syz6.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp95z4syz6.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp95z4syz6.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp95z4syz6.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp95z4syz6.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp95z4syz6.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp95z4syz6.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (\u03BB (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq2ajtgl7.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpq2ajtgl7.rkt:22:6\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond [(empty? s) 0]\n        [else (+ (if (char-upper-case? (first s)) (char->integer\
    \ (first s)) 0)\n                 (digitSum (rest s)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyg50ns7v.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyg50ns7v.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyg50ns7v.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyg50ns7v.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyg50ns7v.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyg50ns7v.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyg50ns7v.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyg50ns7v.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  exit_code: 1
  status: Exception
