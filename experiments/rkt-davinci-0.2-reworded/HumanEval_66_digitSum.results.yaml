language: rkt
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref s 0))\n \
    \                (digitSum (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:31:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n98vf78.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3n98vf78.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n98vf78.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3n98vf78.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n98vf78.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3n98vf78.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n98vf78.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3n98vf78.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0hih2zif.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp0hih2zif.rkt:20:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxpnqfxqz.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxpnqfxqz.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxpnqfxqz.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxpnqfxqz.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c)\n               (char->integer c)\n            \
    \   0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdff2ab8i.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpdff2ab8i.rkt:22:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_fpa7yf.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_fpa7yf.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_fpa7yf.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_fpa7yf.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_fpa7yf.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_fpa7yf.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_fpa7yf.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_fpa7yf.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mr86gul.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0mr86gul.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mr86gul.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0mr86gul.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mr86gul.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0mr86gul.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0mr86gul.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0mr86gul.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp95z4syz6.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp95z4syz6.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp95z4syz6.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp95z4syz6.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp95z4syz6.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp95z4syz6.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp95z4syz6.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp95z4syz6.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (\u03BB (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq2ajtgl7.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpq2ajtgl7.rkt:22:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond [(empty? s) 0]\n        [else (+ (if (char-upper-case? (first s)) (char->integer\
    \ (first s)) 0)\n                 (digitSum (rest s)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyg50ns7v.rkt:29:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyg50ns7v.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyg50ns7v.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyg50ns7v.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyg50ns7v.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyg50ns7v.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyg50ns7v.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyg50ns7v.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (let ([s (string-&gt;list s)])\n    (apply + (map (lambda (c)\n           \
    \         (if (char-upper-case? c)\n                        (char-&gt;integer\
    \ c)\n                        0))\n                  s))))\n</code>\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpmbdmpv_g.rkt:20:8: read-syntax: expected a `]` to close `[`\n \
    \ possible cause: indentation suggests a missing `]` before line 26\n  context...:\n\
    \   read-one/not-eof\n   loop\n   [repeats 6 more times]\n   read-unwrapped-sequence\n\
    \   read-undotted\n   read-one/not-eof\n   loop\n   read-unwrapped-sequence\n\
    \   read-undotted\n   read-one/not-eof\n   loop\n   [repeats 1 more time]\n  \
    \ read-unwrapped-sequence\n   read-undotted\n   read-one/not-eof\n   loop\n  \
    \ ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c)\n               (- c #\\A)\n               0)\n\
    \           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c)\n               (- c #\\A)\n               0)\n\
    \           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq2ajtgl7.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpq2ajtgl7.rkt:22:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdff2ab8i.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpdff2ab8i.rkt:22:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum-upper-chars s)\n    (cond ((null? s) 0)\n          ((char-upper-case?\
    \ (car s)) (+ (char->integer (car s)) (sum-upper-chars (cdr s))))\n          (else\
    \ (sum-upper-chars (cdr s)))))\n  (sum-upper-chars (string->list s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum-upper-chars s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum-upper-chars (rest s)))]\n     \
    \ [else (sum-upper-chars (rest s))]))\n  (sum-upper-chars (string->list s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (digitSum (rest\
    \ s)) (char->integer (first s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (and (>= c #\\A) (<= c #\\Z))\n               (- c #\\A)\n          \
    \     0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c) (char->integer c) 0)\n           (digitSum (substring\
    \ s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c)\n                  (if (and (>= c 65) (<= c 90))\n\
    \                      (- c 64)\n                      0))\n                (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (if (char-upper-case? (first s))\n      \
    \       (char->integer (first s))\n             0)\n         (digitSum (rest s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c)\n               (- c #\\A)\n               0)\n\
    \           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c) (char->integer c) 0)\n           (digitSum (substring\
    \ s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq2ajtgl7.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpq2ajtgl7.rkt:22:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (char-&gt;num c)\n    (char-&gt;integer c))\n  (define (is-upper? c)\n\
    \    (char-upcase c))\n  (define (is-lower? c)\n    (char-downcase c))\n  (define\
    \ (is-alpha? c)\n    (char-alphabetic? c))\n  (define (is-upper-or-lower? c)\n\
    \    (or (is-upper? c) (is-lower? c)))\n  (define (is-upper-or-lower-or-alpha?\
    \ c)\n    (or (is-upper? c) (is-lower? c) (is-alpha? c)))\n  (define (sum-of-upper-chars\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-upper-or-lower? (first s)) (+\
    \ (char-&gt;num (first s)) (sum-of-upper-chars (rest s)))]\n      [else (sum-of-upper-chars\
    \ (rest s))]))\n  (define (sum-of-upper-chars-or-alpha s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is-upper-or-lower-or-alpha? (first s)) (+ (char-&gt;num (first\
    \ s)) (sum-of-upper-chars-or-alpha (rest s)))]\n      [else (sum-of-upper-chars-or-alpha\
    \ (rest s))]))\n  (cond\n    [(empty? s) 0]\n    [(is-upper-or-lower? (first s))\
    \ (+ (char-&gt;num (first s)) (sum-of-upper-chars (rest s)))]\n    [else (sum-of-upper-chars-or-alpha\
    \ (rest s))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpa9f78n1m.rkt:44:4: read-syntax: expected a `]` to close `[`\n \
    \ possible cause: indentation suggests a missing `]` before line 46\n  context...:\n\
    \   read-one/not-eof\n   loop\n   [repeats 6 more times]\n   read-unwrapped-sequence\n\
    \   read-undotted\n   read-one/not-eof\n   loop\n   [repeats 2 more times]\n \
    \  read-unwrapped-sequence\n   read-undotted\n   read-one/not-eof\n   loop\n \
    \  [repeats 2 more times]\n   read-unwrapped-sequence\n   read-undotted\n   read-one/not-eof\n\
    \   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([chars (string->list s)])\n   \
    \     (apply + (map (lambda (c)\n                        (if (char-upcase? c)\n\
    \                            (char->integer c)\n                            0))\n\
    \                      chars)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum-of-upper-chars s)\n    (cond ((null? s) 0)\n          ((char-upper-case?\
    \ (car s)) (+ (char->integer (car s)) (sum-of-upper-chars (cdr s))))\n       \
    \   (else (sum-of-upper-chars (cdr s)))))\n  (sum-of-upper-chars (string->list\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (let loop ([s s] [sum 0])\n    (cond [(empty? s) sum]\n          [(char-upper-case?\
    \ (first s)) (loop (rest s) (+ sum (char->integer (first s))))]\n          [else\
    \ (loop (rest s) sum)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum-upper-chars s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum-upper-chars (rest s)))]\n     \
    \ [else (sum-upper-chars (rest s))]))\n  (sum-upper-chars s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(and (char-upper-case? (first s)) (char-numeric?\
    \ (first s))) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [(and (char-upper-case?\
    \ (first s)) (not (char-numeric? (first s)))) (digitSum (rest s))]\n    [else\
    \ (digitSum (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c)\n               (- c #\\A)\n               0)\n\
    \           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdff2ab8i.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpdff2ab8i.rkt:22:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdff2ab8i.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpdff2ab8i.rkt:22:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c) (char->integer c) 0)\n           (digitSum (substring\
    \ s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum (rest s)))]\n      [else (sum (rest\
    \ s))]))\n  (sum (string->list s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum s)\n    (if (empty? s)\n        0\n        (+ (char->integer (car\
    \ s)) (sum (cdr s)))))\n  (define (upper? s)\n    (if (empty? s)\n        0\n\
    \        (if (char-upper-case? (car s))\n            (+ (sum (car s)) (upper?\
    \ (cdr s)))\n            (upper? (cdr s)))))\n  (upper? s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c) (char->integer c) 0)\n           (digitSum (substring\
    \ s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (and (>= c #\\A) (<= c #\\Z))\n               (- c #\\A)\n          \
    \     0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c)\n                  (if (and (&gt;= c #\\A) (&lt;=\
    \ c #\\Z))\n                      (- c #\\A)\n                      0))\n    \
    \            s)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp1a_cemsd.rkt:20:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 25\n  context...:\n\
    \   read-one/not-eof\n   loop\n   [repeats 7 more times]\n   read-unwrapped-sequence\n\
    \   read-undotted\n   read-one/not-eof\n   loop\n   [repeats 2 more times]\n \
    \  read-unwrapped-sequence\n   read-undotted\n   read-syntax\n   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects/racket/../syntax/module-reader.rkt:65:9:\
    \ lang:read-syntax\n   read-syntax\n   default-load-handler\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (empty? s)\n      0\n      (+ (if (char-upper-case? (string-ref s 0))\n\
    \             (char->integer (string-ref s 0))\n             0)\n         (digitSum\
    \ (substring s 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq2ajtgl7.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpq2ajtgl7.rkt:22:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref s 0))\n \
    \                (digitSum (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:31:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref s 0))\n \
    \                (digitSum (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:31:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq2ajtgl7.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpq2ajtgl7.rkt:22:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref s 0))\n \
    \                (digitSum (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:31:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum-upper-chars s)\n    (if (empty? s)\n        0\n        (if (char-upcase?\
    \ (first s))\n            (+ (char->integer (first s)) (sum-upper-chars (rest\
    \ s)))\n            (sum-upper-chars (rest s)))))\n  (sum-upper-chars s))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (and (>= c #\\A) (<= c #\\Z))\n               (- c #\\A)\n          \
    \     0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum-of-upper-chars s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum-of-upper-chars (rest s)))]\n  \
    \    [else (sum-of-upper-chars (rest s))]))\n  (sum-of-upper-chars (string->list\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (char-&gt;int c)\n    (char-&gt;integer c))\n  (define (is-upper? c)\n\
    \    (and (&gt;= c #\\A) (&lt;= c #\\Z)))\n  (define (sum-upper-chars s)\n   \
    \ (cond\n      [(empty? s) 0]\n      [(is-upper? (first s)) (+ (char-&gt;int (first\
    \ s)) (sum-upper-chars (rest s)))]\n      [else (sum-upper-chars (rest s))]))\n\
    \  (sum-upper-chars s))\n</code>\nI'm not sure if this is the best way to do it,\
    \ but I'm trying to learn Racket.\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmp2hc3c6pj.rkt:29:21: read-syntax: missing `]` to close `[` on line\
    \ 27, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 29\n  context...:\n   read-undotted\n   read-one/not-eof\n   loop\n\
    \   [repeats 3 more times]\n   read-unwrapped-sequence\n   read-undotted\n   read-one/not-eof\n\
    \   loop\n   [repeats 2 more times]\n   read-unwrapped-sequence\n   read-undotted\n\
    \   read-one/not-eof\n   loop\n   [repeats 2 more times]\n   read-unwrapped-sequence\n\
    \   read-undotted\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (upper? c)\n    (and (&gt;= c #\\A) (&lt;= c #\\Z)))\n  (define (sum-upper\
    \ s)\n    (if (null? s)\n        0\n        (+ (if (upper? (car s))\n        \
    \       (- (car s) #\\A)\n               0)\n           (sum-upper (cdr s)))))\n\
    \  (sum-upper s))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpfd9kbkz3.rkt:21:4: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 30\n  context...:\n\
    \   read-one/not-eof\n   loop\n   [repeats 6 more times]\n   read-unwrapped-sequence\n\
    \   read-undotted\n   read-one/not-eof\n   loop\n   [repeats 2 more times]\n \
    \  read-unwrapped-sequence\n   read-undotted\n   read-one/not-eof\n   loop\n \
    \  [repeats 2 more times]\n   read-unwrapped-sequence\n   read-undotted\n   read-syntax\n\
    \   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (define (sum-upper-chars s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (sum-upper-chars (rest s)))]\n     \
    \ [else (sum-upper-chars (rest s))]))\n  (sum-upper-chars s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c) (char->integer c) 0)\n           (digitSum (substring\
    \ s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c)\n               (char->integer c)\n            \
    \   0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (if (string=? s \"\")\n      0\n      (let ([c (string-ref s 0)])\n       \
    \ (+ (if (char-upper-case? c)\n               (char->integer c)\n            \
    \   0)\n           (digitSum (substring s 1))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upcase? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdff2ab8i.rkt:22:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpdff2ab8i.rkt:22:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (filter (lambda (x) (and (&gt;= x 65) (&lt;= x 90))) (map char-&gt;integer\
    \ (string-&gt;list s)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: SyntaxError
  stderr: "/tmp/tmpz1fxabdq.rkt:20:36: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 21\n  context...:\n\
    \   read-one/not-eof\n   loop\n   [repeats 5 more times]\n   read-unwrapped-sequence\n\
    \   read-undotted\n   read-one/not-eof\n   loop\n   [repeats 1 more time]\n  \
    \ read-unwrapped-sequence\n   read-undotted\n   read-one/not-eof\n   loop\n  \
    \ [repeats 2 more times]\n   read-unwrapped-sequence\n   read-undotted\n   read-one/not-eof\n\
    \   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref s 0)) (digitSum\
    \ (substring s 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upper-case? (string->list s)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s))\n     (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm8rw2j_2.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm8rw2j_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0)) (+ (char->integer\
    \ (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6mgh93v3.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6mgh93v3.rkt:37:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond [(empty? s) 0]\n        [else (+ (char->integer (string-ref s 0))\n \
    \                (digitSum (substring s 1)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:31:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjj_t46o.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjj_t46o.rkt:36:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (x) (if (char-upper-case? x) (char->integer x) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) (string->list\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (string-ref s 0))\n     (+\
    \ (char->integer (string-ref s 0)) (digitSum (substring s 1)))]\n    [else (digitSum\
    \ (substring s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:35:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:36:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w7ufp75.rkt:37:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1w7ufp75.rkt:38:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c)\n                  (if (char-upper-case? c)\n   \
    \                   (char->integer c)\n                      0))\n           \
    \     (string->list s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map char->integer (filter char-upcase? (string->list s)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplq3dt2sm.rkt:20:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplq3dt2sm.rkt:20:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (apply + (map (lambda (c) (if (char-upper-case? c) (char->integer c) 0)) s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "standard-module-name-resolver: collection not found\n  for module path:\
    \ rackunit\n  collection: \"rackunit\"\n  in collection directories:\n   /home/a.guha/.racket/7.8/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/collects\n\
    \   /home/a.guha/.conda/envs/polyglot-codegen-evaluation/share/racket/pkgs/racket-lib\n\
    \  context...:\n   show-collection-err\n   standard-module-name-resolver\n   module-path-index-resolve\n\
    \   perform-require!\n   for-loop\n   finish\n   [repeats 2 more times]\n   pass-1-and-2-loop\n\
    \   module-begin-k\n   expand-module\n   expand-capturing-lifts\n   temp98_0\n\
    \   temp71_0\n   compile\n   temp65_0\n   standard-module-name-resolver\n   ...\n"
  stdout: ''
  timestamp: 1659747866
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum\
    \ \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"\
    woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n\
    \  (cond\n    [(empty? s) 0]\n    [(char-upper-case? (first s)) (+ (char->integer\
    \ (first s)) (digitSum (rest s)))]\n    [else (digitSum (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7rlh2hw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7rlh2hw.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
