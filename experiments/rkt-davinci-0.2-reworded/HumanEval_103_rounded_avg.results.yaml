name: HumanEval_103_rounded_avg
language: rkt
results:
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (define sum (+ n m))\n      (define avg (/ sum\
    \ 2))\n      (define rounded (round avg))\n      (define binary (number->string\
    \ rounded 2))\n      (string-append \"0b\" binary)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n    (check-equal?\
    \ (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13) \"0b1010\")\n\
    \    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal? (candidate\
    \ 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851) \"0b1011000010\"\
    )\n    (check-equal? (candidate 185 546) \"0b101101110\")\n    (check-equal? (candidate\
    \ 362 496) \"0b110101101\")\n    (check-equal? (candidate 350 902) \"0b1001110010\"\
    )\n    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal? (candidate\
    \ 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal? (candidate\
    \ 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyyq8_ic3.rkt:17:2: if: bad syntax\n  in: (if (> n m) -1 (define\
    \ sum (+ n m)) (define avg (/ sum 2)) (define rounded (round avg)) (define binary\
    \ (number->string rounded 2)) (string-append \"0b\" binary))\n  location...:\n\
    \   /tmp/tmpyyq8_ic3.rkt:17:2\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (define (sum n m)\n        (if (= n m)\n     \
    \       n\n            (+ n (sum (+ n 1) m))))\n      (define (avg n m)\n    \
    \    (round (/ (sum n m) (- m n))))\n      (define (bin n)\n        (if (= n 0)\n\
    \            \"\"\n            (string-append (bin (quotient n 2)) (number->string\
    \ (remainder n 2)))))\n      (string-append \"0b\" (bin (avg n m)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6c8jml03.rkt:17:2: if: bad syntax\n  in: (if (> n m) -1 (define\
    \ (sum n m) (if (= n m) n (+ n (sum (+ n 1) m)))) (define (avg n m) (round (/\
    \ (sum n m) (- m n)))) (define (bin n) (if (= n 0) \"\" (string-append (bin (quotient\
    \ n 2)) (number->string (remainder n 2))))) (string-append \"0b\" (bin (avg ...\n\
    \  location...:\n   /tmp/tmp6c8jml03.rkt:17:2\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m) -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n      \
    \      (string-append \"0b\" (integer->binary (quotient (+ sum 1) 2)))\n     \
    \       (string-append \"0b\" (integer->binary (/ sum 2)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n    (check-equal?\
    \ (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13) \"0b1010\")\n\
    \    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal? (candidate\
    \ 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851) \"0b1011000010\"\
    )\n    (check-equal? (candidate 185 546) \"0b101101110\")\n    (check-equal? (candidate\
    \ 362 496) \"0b110101101\")\n    (check-equal? (candidate 350 902) \"0b1001110010\"\
    )\n    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal? (candidate\
    \ 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal? (candidate\
    \ 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkkbtgqqd.rkt:20:33: integer->binary: unbound identifier\n  in:\
    \ integer->binary\n  location...:\n   /tmp/tmpkkbtgqqd.rkt:20:33\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (define (sum n m)\n        (if (= n m)\n     \
    \       n\n            (+ n (sum (+ n 1) m))))\n      (define (avg n m)\n    \
    \    (round (/ (sum n m) (- m n))))\n      (number->string (avg n m) 2)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppak4rpx0.rkt:17:2: if: bad syntax\n  in: (if (> n m) -1 (define\
    \ (sum n m) (if (= n m) n (+ n (sum (+ n 1) m)))) (define (avg n m) (round (/\
    \ (sum n m) (- m n)))) (number->string (avg n m) 2))\n  location...:\n   /tmp/tmppak4rpx0.rkt:17:2\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6c6nk19z.rkt:19:7: integer->binary: unbound identifier\n  in: integer->binary\n\
    \  location...:\n   /tmp/tmp6c6nk19z.rkt:19:7\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl65anr71.rkt:19:7: integer->binary: unbound identifier\n  in: integer->binary\n\
    \  location...:\n   /tmp/tmpl65anr71.rkt:19:7\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (cond\n    [(> n m) -1]\n    [else (string->number (number->string (round (/\
    \ (+ n m) 2))) 2)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rounded_avg))\n    (check-equal? (candidate 1 5) \"0b11\")\n  \
    \  (check-equal? (candidate 7 13) \"0b1010\")\n    (check-equal? (candidate 964\
    \ 977) \"0b1111001010\")\n    (check-equal? (candidate 996 997) \"0b1111100100\"\
    )\n    (check-equal? (candidate 560 851) \"0b1011000010\")\n    (check-equal?\
    \ (candidate 185 546) \"0b101101110\")\n    (check-equal? (candidate 362 496)\
    \ \"0b110101101\")\n    (check-equal? (candidate 350 902) \"0b1001110010\")\n\
    \    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal? (candidate\
    \ 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal? (candidate\
    \ 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:26:4\n\
    actual:     #f\nexpected:   \"0b11\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:27:4\nactual:\
    \     2\nexpected:   \"0b1010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:28:4\nactual:\
    \     #f\nexpected:   \"0b1111001010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:29:4\nactual:\
    \     #f\nexpected:   \"0b1111100100\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:30:4\nactual:\
    \     #f\nexpected:   \"0b1011000010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:31:4\nactual:\
    \     #f\nexpected:   \"0b101101110\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:32:4\nactual:\
    \     #f\nexpected:   \"0b110101101\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:33:4\nactual:\
    \     #f\nexpected:   \"0b1001110010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:34:4\nactual:\
    \     #f\nexpected:   \"0b11010111\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_jk6q4fe.rkt:37:4\nactual:\
    \     #f\nexpected:   \"0b101\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9mug9qlm.rkt:19:7: integer->binary: unbound identifier\n  in: integer->binary\n\
    \  location...:\n   /tmp/tmp9mug9qlm.rkt:19:7\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:26:4\n\
    actual:     \"11\"\nexpected:   \"0b11\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:27:4\nactual:\
    \     \"1010\"\nexpected:   \"0b1010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:28:4\nactual:\
    \     \"1111001010\"\nexpected:   \"0b1111001010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:29:4\nactual:\
    \     \"1111100100\"\nexpected:   \"0b1111100100\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:30:4\nactual:\
    \     \"1011000010\"\nexpected:   \"0b1011000010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:31:4\nactual:\
    \     \"101101110\"\nexpected:   \"0b101101110\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:32:4\nactual:\
    \     \"110101101\"\nexpected:   \"0b110101101\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:33:4\nactual:\
    \     \"1001110010\"\nexpected:   \"0b1001110010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:34:4\nactual:\
    \     \"11010111\"\nexpected:   \"0b11010111\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclplpkb9.rkt:37:4\nactual:\
    \     \"101\"\nexpected:   \"0b101\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (let* ([sum (+ n m)]\n             [avg (/ sum\
    \ 2)]\n             [rounded (round avg)])\n        (number->string rounded 2))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:29:4\n\
    actual:     \"11\"\nexpected:   \"0b11\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:30:4\nactual:\
    \     \"1010\"\nexpected:   \"0b1010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:31:4\nactual:\
    \     \"1111001010\"\nexpected:   \"0b1111001010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:32:4\nactual:\
    \     \"1111100100\"\nexpected:   \"0b1111100100\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:33:4\nactual:\
    \     \"1011000010\"\nexpected:   \"0b1011000010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:34:4\nactual:\
    \     \"101101110\"\nexpected:   \"0b101101110\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:35:4\nactual:\
    \     \"110101101\"\nexpected:   \"0b110101101\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:36:4\nactual:\
    \     \"1001110010\"\nexpected:   \"0b1001110010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:37:4\nactual:\
    \     \"11010111\"\nexpected:   \"0b11010111\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb0z6uih2.rkt:40:4\nactual:\
    \     \"101\"\nexpected:   \"0b101\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9np4rq5w.rkt:19:7: integer->binary: unbound identifier\n  in: integer->binary\n\
    \  location...:\n   /tmp/tmp9np4rq5w.rkt:19:7\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (let ([avg (/ (+ n m) 2.0)])\n        (string->symbol\
    \ (string-append \"0b\" (number->string (inexact->exact (round avg))))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:27:4\n\
    actual:     '0b3\nexpected:   \"0b11\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:28:4\nactual:\
    \     '0b10\nexpected:   \"0b1010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:29:4\nactual:\
    \     '0b970\nexpected:   \"0b1111001010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:30:4\nactual:\
    \     '0b996\nexpected:   \"0b1111100100\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:31:4\nactual:\
    \     '0b706\nexpected:   \"0b1011000010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:32:4\nactual:\
    \     '0b366\nexpected:   \"0b101101110\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:33:4\nactual:\
    \     '0b429\nexpected:   \"0b110101101\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:34:4\nactual:\
    \     '0b626\nexpected:   \"0b1001110010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:35:4\nactual:\
    \     '0b215\nexpected:   \"0b11010111\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm55891o.rkt:38:4\nactual:\
    \     '0b5\nexpected:   \"0b101\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprgjzwfwu.rkt:19:7: integer->binary: unbound identifier\n  in: integer->binary\n\
    \  location...:\n   /tmp/tmprgjzwfwu.rkt:19:7\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiyoc53ey.rkt:19:7: integer->binary: unbound identifier\n  in: integer->binary\n\
    \  location...:\n   /tmp/tmpiyoc53ey.rkt:19:7\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp17aerc8.rkt:19:7: integer->binary: unbound identifier\n  in: integer->binary\n\
    \  location...:\n   /tmp/tmpp17aerc8.rkt:19:7\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n\
    \            (string->symbol (string-append \"0b\" (number->string (round (/ sum\
    \ 2)))))\n            (string->symbol (string-append \"0b\" (number->string (round\
    \ (/ sum 2)))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rounded_avg))\n    (check-equal? (candidate 1 5) \"0b11\")\n  \
    \  (check-equal? (candidate 7 13) \"0b1010\")\n    (check-equal? (candidate 964\
    \ 977) \"0b1111001010\")\n    (check-equal? (candidate 996 997) \"0b1111100100\"\
    )\n    (check-equal? (candidate 560 851) \"0b1011000010\")\n    (check-equal?\
    \ (candidate 185 546) \"0b101101110\")\n    (check-equal? (candidate 362 496)\
    \ \"0b110101101\")\n    (check-equal? (candidate 350 902) \"0b1001110010\")\n\
    \    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal? (candidate\
    \ 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal? (candidate\
    \ 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:29:4\n\
    actual:     '0b3\nexpected:   \"0b11\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:30:4\nactual:\
    \     '0b10\nexpected:   \"0b1010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:31:4\nactual:\
    \     '0b970\nexpected:   \"0b1111001010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:32:4\nactual:\
    \     '0b996\nexpected:   \"0b1111100100\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:33:4\nactual:\
    \     '0b706\nexpected:   \"0b1011000010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:34:4\nactual:\
    \     '0b366\nexpected:   \"0b101101110\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:35:4\nactual:\
    \     '0b429\nexpected:   \"0b110101101\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:36:4\nactual:\
    \     '0b626\nexpected:   \"0b1001110010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:37:4\nactual:\
    \     '0b215\nexpected:   \"0b11010111\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd1m4tcrq.rkt:40:4\nactual:\
    \     '0b5\nexpected:   \"0b101\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (define (sum n m)\n        (if (= n m)\n     \
    \       n\n            (+ n (sum (+ n 1) m))))\n      (define (avg n m)\n    \
    \    (round (/ (sum n m) (- m n))))\n      (string->number (number->string (avg\
    \ n m) 2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rounded_avg))\n    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal?\
    \ (candidate 7 13) \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\"\
    )\n    (check-equal? (candidate 996 997) \"0b1111100100\")\n    (check-equal?\
    \ (candidate 560 851) \"0b1011000010\")\n    (check-equal? (candidate 185 546)\
    \ \"0b101101110\")\n    (check-equal? (candidate 362 496) \"0b110101101\")\n \
    \   (check-equal? (candidate 350 902) \"0b1001110010\")\n    (check-equal? (candidate\
    \ 197 233) \"0b11010111\")\n    (check-equal? (candidate 7 5) -1)\n    (check-equal?\
    \ (candidate 5 1) -1)\n    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdmwl2fe2.rkt:17:2: if: bad syntax\n  in: (if (> n m) -1 (define\
    \ (sum n m) (if (= n m) n (+ n (sum (+ n 1) m)))) (define (avg n m) (round (/\
    \ (sum n m) (- m n)))) (string->number (number->string (avg n m) 2)))\n  location...:\n\
    \   /tmp/tmpdmwl2fe2.rkt:17:2\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n        (string->number\
    \ (number->string avg 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate rounded_avg))\n    (check-equal? (candidate 1 5) \"\
    0b11\")\n    (check-equal? (candidate 7 13) \"0b1010\")\n    (check-equal? (candidate\
    \ 964 977) \"0b1111001010\")\n    (check-equal? (candidate 996 997) \"0b1111100100\"\
    )\n    (check-equal? (candidate 560 851) \"0b1011000010\")\n    (check-equal?\
    \ (candidate 185 546) \"0b101101110\")\n    (check-equal? (candidate 362 496)\
    \ \"0b110101101\")\n    (check-equal? (candidate 350 902) \"0b1001110010\")\n\
    \    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal? (candidate\
    \ 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal? (candidate\
    \ 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:27:4\n\
    actual:     11\nexpected:   \"0b11\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:28:4\nactual:\
    \     1010\nexpected:   \"0b1010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:29:4\nactual:\
    \     11110010101/10\nexpected:   \"0b1111001010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:30:4\nactual:\
    \     11111001001/10\nexpected:   \"0b1111100100\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:31:4\nactual:\
    \     10110000011/10\nexpected:   \"0b1011000010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:32:4\nactual:\
    \     1011011011/10\nexpected:   \"0b101101110\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:33:4\nactual:\
    \     110101101\nexpected:   \"0b110101101\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:34:4\nactual:\
    \     1001110010\nexpected:   \"0b1001110010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:35:4\nactual:\
    \     11010111\nexpected:   \"0b11010111\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpridq3i00.rkt:38:4\nactual:\
    \     101\nexpected:   \"0b101\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
    \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
    \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
    \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851)\
    \ \"0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n\
    \    (check-equal? (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate\
    \ 350 902) \"0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\"\
    )\n    (check-equal? (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n\
    \    (check-equal? (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:26:4\n\
    actual:     \"11\"\nexpected:   \"0b11\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:27:4\nactual:\
    \     \"1010\"\nexpected:   \"0b1010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:28:4\nactual:\
    \     \"1111001010\"\nexpected:   \"0b1111001010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:29:4\nactual:\
    \     \"1111100100\"\nexpected:   \"0b1111100100\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:30:4\nactual:\
    \     \"1011000010\"\nexpected:   \"0b1011000010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:31:4\nactual:\
    \     \"101101110\"\nexpected:   \"0b101101110\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:32:4\nactual:\
    \     \"110101101\"\nexpected:   \"0b110101101\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:33:4\nactual:\
    \     \"1001110010\"\nexpected:   \"0b1001110010\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:34:4\nactual:\
    \     \"11010111\"\nexpected:   \"0b11010111\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1kjwwjm.rkt:37:4\nactual:\
    \     \"101\"\nexpected:   \"0b101\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given two positive integers n and m, and your\
    \ task is to compute the\n;; average of the integers from n through m (including\
    \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
    ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n\
    ;; \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"\
    0b1111\"\n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n\
    \  (if (> n m)\n      -1\n      (define (sum-of-integers n m)\n        (if (=\
    \ n m)\n            n\n            (+ n (sum-of-integers (+ n 1) m))))\n     \
    \ (define (avg n m)\n        (/ (sum-of-integers n m) (- m n)))\n      (define\
    \ (round-to-int n)\n        (if (< n 0)\n            (round (- n 0.5))\n     \
    \       (round (+ n 0.5))))\n      (define (int-to-binary n)\n        (if (= n\
    \ 0)\n            \"\"\n            (string-append (int-to-binary (quotient n\
    \ 2)) (number->string (remainder n 2)))))\n      (string-append \"0b\" (int-to-binary\
    \ (round-to-int (avg n m))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate rounded_avg))\n    (check-equal? (candidate 1 5) \"\
    0b11\")\n    (check-equal? (candidate 7 13) \"0b1010\")\n    (check-equal? (candidate\
    \ 964 977) \"0b1111001010\")\n    (check-equal? (candidate 996 997) \"0b1111100100\"\
    )\n    (check-equal? (candidate 560 851) \"0b1011000010\")\n    (check-equal?\
    \ (candidate 185 546) \"0b101101110\")\n    (check-equal? (candidate 362 496)\
    \ \"0b110101101\")\n    (check-equal? (candidate 350 902) \"0b1001110010\")\n\
    \    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal? (candidate\
    \ 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal? (candidate\
    \ 5 5) \"0b101\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqrvmhsn2.rkt:17:2: if: bad syntax\n  in: (if (> n m) -1 (define\
    \ (sum-of-integers n m) (if (= n m) n (+ n (sum-of-integers (+ n 1) m)))) (define\
    \ (avg n m) (/ (sum-of-integers n m) (- m n))) (define (round-to-int n) (if (<\
    \ n 0) (round (- n 0.5)) (round (+ n 0.5)))) (define (int-to-binary n) (if ...\n\
    \  location...:\n   /tmp/tmpqrvmhsn2.rkt:17:2\n"
  exit_code: 1
  status: Exception
