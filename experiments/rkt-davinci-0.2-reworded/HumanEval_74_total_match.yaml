name: HumanEval_74_total_match
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts two lists of strings and\
  \ returns the list that has \n;; total number of chars in the all strings of the\
  \ list less than the other list.\n;; if the two lists have the same number of chars,\
  \ return the first list.\n;; Examples\n;; >>> (total_match (list ) (list ))\n;;\
  \ (list )\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hI\" \"Hi\"))\n;;\
  \ (list \"hI\" \"Hi\")\n;; >>> (total_match (list \"hi\" \"admin\") (list \"hi\"\
  \ \"hi\" \"admin\" \"project\"))\n;; (list \"hi\" \"admin\")\n;; >>> (total_match\
  \ (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\"))\n;; (list \"hI\" \"hi\" \"\
  hi\")\n;; >>> (total_match (list \"4\") (list \"1\" \"2\" \"3\" \"4\" \"5\"))\n\
  ;; (list \"4\")\n(define (total_match lst1 lst2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate total_match))\n\
  \    (check-equal? (candidate (list ) (list )) (list ))\n    (check-equal? (candidate\
  \ (list \"hi\" \"admin\") (list \"hi\" \"hi\")) (list \"hi\" \"hi\"))\n    (check-equal?\
  \ (candidate (list \"hi\" \"admin\") (list \"hi\" \"hi\" \"admin\" \"project\"))\
  \ (list \"hi\" \"admin\"))\n    (check-equal? (candidate (list \"4\") (list \"1\"\
  \ \"2\" \"3\" \"4\" \"5\")) (list \"4\"))\n    (check-equal? (candidate (list \"\
  hi\" \"admin\") (list \"hI\" \"Hi\")) (list \"hI\" \"Hi\"))\n    (check-equal? (candidate\
  \ (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"hi\")) (list \"hI\" \"hi\" \"hi\"\
  ))\n    (check-equal? (candidate (list \"hi\" \"admin\") (list \"hI\" \"hi\" \"\
  hii\")) (list \"hi\" \"admin\"))\n    (check-equal? (candidate (list ) (list \"\
  this\")) (list ))\n    (check-equal? (candidate (list \"this\") (list )) (list ))\n\
  ))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2) lst1]\n    [else\n\
    \     (if (> (total_chars lst1) (total_chars lst2))\n         lst2\n         lst1)]))\n",
  "  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2) lst1]\n    [else (if (> (total_chars\
    \ lst1) (total_chars lst2)) lst2 lst1)]))\n", "  (cond\n    [(empty? lst1) lst2]\n\
    \    [(empty? lst2) lst1]\n    [else (if (> (total_chars lst1) (total_chars lst2))\
    \ lst2 lst1)]))\n", "  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2) lst1]\n\
    \    [else\n     (if (> (total_chars lst1) (total_chars lst2))\n         lst2\n\
    \         lst1)]))\n", "  (cond\n    [(empty? lst1) (list)]\n    [(empty? lst2)\
    \ (list)]\n    [else\n     (if (> (total_chars lst1) (total_chars lst2))\n   \
    \      lst2\n         lst1)]))\n", "  (if (empty? lst1)\n      lst2\n      (if\
    \ (empty? lst2)\n          lst1\n          (if (< (total_chars lst1) (total_chars\
    \ lst2))\n              lst1\n              lst2))))\n", "  (cond\n    [(empty?\
    \ lst1) lst2]\n    [(empty? lst2) lst1]\n    [else\n     (if (> (total_chars lst1)\
    \ (total_chars lst2))\n         lst2\n         lst1)]))\n", "  (if (or (null?\
    \ lst1) (null? lst2))\n      (if (null? lst1) lst2 lst1)\n      (if (< (total_chars\
    \ lst1) (total_chars lst2))\n          lst1\n          lst2)))\n", "  (if (null?\
    \ lst1)\n      lst2\n      (if (null? lst2)\n          lst1\n          (if (<\
    \ (total_match_helper lst1) (total_match_helper lst2))\n              lst1\n \
    \             lst2))))\n", "  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2)\
    \ lst1]\n    [else (if (> (total_chars lst1) (total_chars lst2)) lst2 lst1)]))\n",
  "  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2) lst1]\n    [else\n     (let*\
    \ ([len1 (length (apply string-append lst1))]\n            [len2 (length (apply\
    \ string-append lst2))])\n       (if (< len1 len2)\n           lst1\n        \
    \   lst2))]))\n", "  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2) lst1]\n\
    \    [else\n     (if (> (total_match_helper lst1) (total_match_helper lst2))\n\
    \         lst1\n         lst2)]))\n", "  (cond\n    [(empty? lst1) lst2]\n   \
    \ [(empty? lst2) lst1]\n    [else\n     (if (> (total_chars lst1) (total_chars\
    \ lst2))\n         lst2\n         lst1)]))\n", "  (cond\n    [(empty? lst1) lst2]\n\
    \    [(empty? lst2) lst1]\n    [else\n     (if (> (total_chars lst1) (total_chars\
    \ lst2))\n         lst2\n         lst1)]))\n", "  (cond\n    [(empty? lst1) lst2]\n\
    \    [(empty? lst2) lst1]\n    [else (if (> (total_length lst1) (total_length\
    \ lst2)) lst2 lst1)]))\n", "  (if (or (null? lst1) (null? lst2))\n      (list)\n\
    \      (if (= (total_chars lst1) (total_chars lst2))\n          lst1\n       \
    \   (if (< (total_chars lst1) (total_chars lst2))\n              lst1\n      \
    \        lst2))))\n", "  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2) lst1]\n\
    \    [else (if (> (total_length lst1) (total_length lst2))\n             lst2\n\
    \             lst1)]))\n", "  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2)\
    \ lst1]\n    [else (if (> (total_chars lst1) (total_chars lst2)) lst2 lst1)]))\n",
  "  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2) lst1]\n    [else\n     (if\
    \ (> (total_length lst1) (total_length lst2))\n         lst2\n         lst1)]))\n",
  "  (cond\n    [(empty? lst1) lst2]\n    [(empty? lst2) lst1]\n    [else\n     (if\
    \ (> (total_chars lst1) (total_chars lst2))\n         lst2\n         lst1)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
