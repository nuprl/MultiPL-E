name: HumanEval_70_strange_sort_list
language: rkt
results:
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (if (null? lst)\n      '()\n      (append (list (min lst) (max lst))\
    \ (strange_sort_list (remove (min lst) (remove (max lst) lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4us8ouwr.rkt:22:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4us8ouwr.rkt:23:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4us8ouwr.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4us8ouwr.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4us8ouwr.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4us8ouwr.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4us8ouwr.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4us8ouwr.rkt:30:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (define (strange_sort_list_helper lst min max)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(= (length lst) 1) (cons (first lst) empty)]\n      [(=\
    \ (length lst) 2) (cons min (cons max empty))]\n      [else (cons min (cons max\
    \ (strange_sort_list_helper (remove min (remove max lst)) (min (remove min (remove\
    \ max lst))) (max (remove min (remove max lst))))))]))\n  (strange_sort_list_helper\
    \ lst (min lst) (max lst)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate strange_sort_list))\n    (check-equal? (candidate (list\
    \ 1 2 3 4)) (list 1 4 2 3))\n    (check-equal? (candidate (list 5 6 7 8 9)) (list\
    \ 5 9 6 8 7))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3))\n\
    \    (check-equal? (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal?\
    \ (candidate (list 5 5 5 5)) (list 5 5 5 5))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8\
    \ 2 7 3 6 4 5))\n    (check-equal? (candidate (list 0 2 2 2 5 5 -5 -5)) (list\
    \ -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate (list 111111)) (list 111111))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvk280rzn.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvk280rzn.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvk280rzn.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvk280rzn.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvk280rzn.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvk280rzn.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvk280rzn.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvk280rzn.rkt:33:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvk280rzn.rkt:34:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (cond\n    [(empty? lst) empty]\n    [else\n     (cons (min lst)\n \
    \          (cons (max (remove (min lst) lst))\n                 (strange_sort_list\
    \ (remove (max (remove (min lst) lst)) lst))))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal? (candidate (list\
    \ 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list 1 2 3 4 5))\
    \ (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1)) (list 1\
    \ 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5 5))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
    \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
    \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0lofmxl.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0lofmxl.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0lofmxl.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0lofmxl.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0lofmxl.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0lofmxl.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0lofmxl.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj0lofmxl.rkt:33:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n      (list\
    \ (min lst))\n      (list (max (remove (min lst) lst)))\n      (strange_sort_list\
    \ (remove (max (remove (min lst) lst)) (remove (min lst) lst))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oazbfut.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oazbfut.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oazbfut.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oazbfut.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oazbfut.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oazbfut.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7oazbfut.rkt:33:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7oazbfut.rkt:34:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (cond\n    [(empty? lst) empty]\n    [else\n     (let ([min (min (first\
    \ lst) (last lst))]\n           [max (max (first lst) (last lst))])\n       (cons\
    \ min (cons max (strange_sort_list (remove min (remove max lst))))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfa1aa28.rkt:26:4\n\
    actual:     '(5 9 6 8 7 7)\nexpected:   '(5 9 6 8 7)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfa1aa28.rkt:27:4\nactual:\
    \     '(1 5 2 4 3 3)\nexpected:   '(1 5 2 4 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfa1aa28.rkt:28:4\nactual:\
    \     '(1 5 6 9 7 8)\nexpected:   '(1 9 5 8 6 7)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfa1aa28.rkt:32:4\nactual:\
    \     '(-5 0 -5 2 2 5 2 5)\nexpected:   '(-5 5 -5 5 0 2 2 2)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplfa1aa28.rkt:33:4\n\
    actual:     '(111111 111111)\nexpected:   '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n      (list\
    \ (min lst))\n      (list (max (remove (min lst) lst)))\n      (strange_sort_list\
    \ (remove (max (remove (min lst) lst)) (remove (min lst) lst))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdzcjmez.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdzcjmez.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdzcjmez.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdzcjmez.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdzcjmez.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdzcjmez.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdzcjmez.rkt:33:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvdzcjmez.rkt:34:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (if (null? lst)\n      '()\n      (let* ([min (apply min lst)]\n   \
    \          [max (apply max lst)]\n             [min-index (index-of min lst)]\n\
    \             [max-index (index-of max lst)]\n             [min-lst (remove-at\
    \ min-index lst)]\n             [max-lst (remove-at max-index min-lst)])\n   \
    \     (cons min (cons max (strange_sort_list max-lst))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal? (candidate (list\
    \ 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list 1 2 3 4 5))\
    \ (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1)) (list 1\
    \ 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5 5))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
    \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
    \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8wlgjlxc.rkt:19:23: remove-at: unbound identifier\n  in: remove-at\n\
    \  location...:\n   /tmp/tmp8wlgjlxc.rkt:19:23\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (if (null? lst)\n      '()\n      (let* ([min (apply min lst)]\n   \
    \          [max (apply max lst)]\n             [rest (remove min (remove max lst))])\n\
    \        (append (list min max) (strange_sort_list rest)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal? (candidate (list\
    \ 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list 1 2 3 4 5))\
    \ (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1)) (list 1\
    \ 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5 5))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
    \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
    \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphm2255m0.rkt:26:4\n\
    actual:     '(5 9 6 8 7 7)\nexpected:   '(5 9 6 8 7)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphm2255m0.rkt:27:4\nactual:\
    \     '(1 5 2 4 3 3)\nexpected:   '(1 5 2 4 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphm2255m0.rkt:33:4\nactual:\
    \     '(111111 111111)\nexpected:   '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (if (null? lst)\n      '()\n      (append (list (min lst) (max lst))\n\
    \              (strange_sort_list (remove (min lst) (remove (max lst) lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jbrh35e.rkt:23:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jbrh35e.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jbrh35e.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jbrh35e.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jbrh35e.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jbrh35e.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_jbrh35e.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_jbrh35e.rkt:31:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (define (strange_sort_list_helper lst acc)\n    (if (null? lst)\n  \
    \      acc\n        (let* ([min (apply min lst)]\n               [max (apply max\
    \ lst)]\n               [new-lst (remove min (remove max lst))])\n          (strange_sort_list_helper\
    \ new-lst (append acc (list min max))))))\n  (strange_sort_list_helper lst '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxcj204sv.rkt:28:4\n\
    actual:     '(5 9 6 8 7 7)\nexpected:   '(5 9 6 8 7)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxcj204sv.rkt:29:4\nactual:\
    \     '(1 5 2 4 3 3)\nexpected:   '(1 5 2 4 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxcj204sv.rkt:35:4\nactual:\
    \     '(111111 111111)\nexpected:   '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (cond\n    [(empty? lst) '()]\n    [else\n     (append\n      (list\
    \ (min lst) (max lst))\n      (strange_sort_list (remove (min lst) (remove (max\
    \ lst) lst))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate strange_sort_list))\n    (check-equal? (candidate (list 1 2 3 4))\
    \ (list 1 4 2 3))\n    (check-equal? (candidate (list 5 6 7 8 9)) (list 5 9 6\
    \ 8 7))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3))\n  \
    \  (check-equal? (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal?\
    \ (candidate (list 5 5 5 5)) (list 5 5 5 5))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8\
    \ 2 7 3 6 4 5))\n    (check-equal? (candidate (list 0 2 2 2 5 5 -5 -5)) (list\
    \ -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate (list 111111)) (list 111111))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpih184gq4.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpih184gq4.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpih184gq4.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpih184gq4.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpih184gq4.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpih184gq4.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpih184gq4.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpih184gq4.rkt:33:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (cond ((null? lst) '())\n        ((null? (cdr lst)) lst)\n        (else\
    \ (append (list (min lst) (max lst))\n                      (strange_sort_list\
    \ (remove (min lst) (remove (max lst) lst)))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n    (check-equal?\
    \ (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal? (candidate (list\
    \ 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate (list 1 2 3 4 5))\
    \ (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6 7 8 9 1)) (list 1\
    \ 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5)) (list 5 5 5 5))\n\
    \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal? (candidate\
    \ (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate\
    \ (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcwmemzn.rkt:23:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcwmemzn.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcwmemzn.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcwmemzn.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcwmemzn.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcwmemzn.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcwmemzn.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (cond\n    [(empty? lst) empty]\n    [else\n     (append (list (min\
    \ lst) (max lst))\n             (strange_sort_list (remove (min lst) (remove (max\
    \ lst) lst))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate strange_sort_list))\n    (check-equal? (candidate (list 1 2 3 4))\
    \ (list 1 4 2 3))\n    (check-equal? (candidate (list 5 6 7 8 9)) (list 5 9 6\
    \ 8 7))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3))\n  \
    \  (check-equal? (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal?\
    \ (candidate (list 5 5 5 5)) (list 5 5 5 5))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8\
    \ 2 7 3 6 4 5))\n    (check-equal? (candidate (list 0 2 2 2 5 5 -5 -5)) (list\
    \ -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate (list 111111)) (list 111111))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkcqarrs.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkcqarrs.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkcqarrs.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkcqarrs.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkcqarrs.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkcqarrs.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkcqarrs.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplkcqarrs.rkt:32:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n      (list\
    \ (min lst))\n      (list (max (remove (min lst) lst)))\n      (strange_sort_list\
    \ (remove (max (remove (min lst) lst)) (remove (min lst) lst))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv0l4e3o.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv0l4e3o.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv0l4e3o.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv0l4e3o.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv0l4e3o.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv0l4e3o.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnv0l4e3o.rkt:33:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnv0l4e3o.rkt:34:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (if (null? lst)\n      '()\n      (append (list (min lst) (max lst))\n\
    \              (strange_sort_list (remove (min lst) (remove (max lst) lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpahpxyfho.rkt:23:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpahpxyfho.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpahpxyfho.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpahpxyfho.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpahpxyfho.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpahpxyfho.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpahpxyfho.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpahpxyfho.rkt:31:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (if (null? lst)\n      '()\n      (append (list (min lst) (max lst))\n\
    \              (strange_sort_list (remove (min lst) (remove (max lst) lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgivhqn4.rkt:23:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgivhqn4.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgivhqn4.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgivhqn4.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgivhqn4.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgivhqn4.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgivhqn4.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvgivhqn4.rkt:31:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (if (null? lst)\n      lst\n      (append (list (min lst) (max lst))\n\
    \              (strange_sort_list (remove (min lst) (remove (max lst) lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5d9j2v6.rkt:23:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5d9j2v6.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5d9j2v6.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5d9j2v6.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5d9j2v6.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5d9j2v6.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5d9j2v6.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq5d9j2v6.rkt:31:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (if (null? lst)\n      '()\n      (append (list (min lst) (max lst))\n\
    \              (strange_sort_list (remove (min lst) (remove (max lst) lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate strange_sort_list))\n\
    \    (check-equal? (candidate (list 1 2 3 4)) (list 1 4 2 3))\n    (check-equal?\
    \ (candidate (list 5 6 7 8 9)) (list 5 9 6 8 7))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5)) (list 1 5 2 4 3))\n    (check-equal? (candidate (list 5 6\
    \ 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal? (candidate (list 5 5 5 5))\
    \ (list 5 5 5 5))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8 2 7 3 6 4 5))\n    (check-equal?\
    \ (candidate (list 0 2 2 2 5 5 -5 -5)) (list -5 5 -5 5 0 2 2 2))\n    (check-equal?\
    \ (candidate (list 111111)) (list 111111))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbb713r0.rkt:23:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbb713r0.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbb713r0.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbb713r0.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbb713r0.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbb713r0.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmbb713r0.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmbb713r0.rkt:31:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (if (null? lst)\n      '()\n      (cons (min lst)\n            (cons\
    \ (max lst)\n                  (strange_sort_list (remove (min lst) (remove (max\
    \ lst) lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate strange_sort_list))\n    (check-equal? (candidate (list 1 2 3 4))\
    \ (list 1 4 2 3))\n    (check-equal? (candidate (list 5 6 7 8 9)) (list 5 9 6\
    \ 8 7))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3))\n  \
    \  (check-equal? (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal?\
    \ (candidate (list 5 5 5 5)) (list 5 5 5 5))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8\
    \ 2 7 3 6 4 5))\n    (check-equal? (candidate (list 0 2 2 2 5 5 -5 -5)) (list\
    \ -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate (list 111111)) (list 111111))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb2wrox5.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb2wrox5.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb2wrox5.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb2wrox5.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb2wrox5.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb2wrox5.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjb2wrox5.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjb2wrox5.rkt:32:4\n\nmin: contract violation\n  expected:\
    \ real?\n  given: '(111111)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given list of integers, return list in strange order.\n\
    ;; Strange sorting, is when you start with the minimum value,\n;; then maximum\
    \ of the remaining integers, then minimum and so on.\n;; >>> (strange_sort_list\
    \ (list 1 2 3 4))\n;; (list 1 4 2 3)\n;; >>> (strange_sort_list (list 5 5 5 5))\n\
    ;; (list 5 5 5 5)\n;; >>> (strange_sort_list (list ))\n;; (list )\n(define (strange_sort_list\
    \ lst)\n  (define (strange_sort_list_iter lst1 lst2)\n    (cond\n      [(empty?\
    \ lst1) lst2]\n      [(empty? (rest lst1)) (append lst2 lst1)]\n      [else (strange_sort_list_iter\
    \ (rest lst1) (append lst2 (list (min lst1) (max lst1))))]))\n  (strange_sort_list_iter\
    \ lst (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate strange_sort_list))\n    (check-equal? (candidate (list 1 2 3 4))\
    \ (list 1 4 2 3))\n    (check-equal? (candidate (list 5 6 7 8 9)) (list 5 9 6\
    \ 8 7))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 1 5 2 4 3))\n  \
    \  (check-equal? (candidate (list 5 6 7 8 9 1)) (list 1 9 5 8 6 7))\n    (check-equal?\
    \ (candidate (list 5 5 5 5)) (list 5 5 5 5))\n    (check-equal? (candidate (list\
    \ )) (list ))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8)) (list 1 8\
    \ 2 7 3 6 4 5))\n    (check-equal? (candidate (list 0 2 2 2 5 5 -5 -5)) (list\
    \ -5 5 -5 5 0 2 2 2))\n    (check-equal? (candidate (list 111111)) (list 111111))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjztz7ufs.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjztz7ufs.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjztz7ufs.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjztz7ufs.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 6 7 8 9 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjztz7ufs.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(5 5 5 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjztz7ufs.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 2 3 4 5 6 7 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjztz7ufs.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 2 2 2 5 5 -5 -5)\n\
    --------------------\n"
  exit_code: 0
  status: Exception
