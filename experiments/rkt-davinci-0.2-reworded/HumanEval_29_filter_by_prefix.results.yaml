name: HumanEval_29_filter_by_prefix
language: rkt
results:
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa40ymmer.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdwkoyanl.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_1blli_x.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp_ojk445.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8jen9716.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbek0bsyj.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnuwalo4k.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (x) (string-prefix? prefix x)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpla_8fmu0.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9bumid2y.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoudx3zci.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp25vyy_gh.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmgi3lnuq.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2znmkdd.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4vxfpvps.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv6akuatg.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgek6avq6.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpguj42qm3.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp48sjridp.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvf2moukr.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> (filter_by_prefix (list ) \"a\")\n;; (list\
    \ )\n;; >>> (filter_by_prefix (list \"abc\" \"bcd\" \"cde\" \"array\") \"a\")\n\
    ;; (list \"abc\" \"array\")\n(define (filter_by_prefix strings prefix)\n  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n    (check-equal?\
    \ (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate (list \"\
    xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\"\
    \ \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj4yq5kt6.rkt:17:4\n\
    actual:     '(\"xxx\" \"xxx\")\nexpected:   '(\"xxx\" \"xxxAAA\" \"xxx\")\n--------------------\n"
  exit_code: 0
  status: Exception
