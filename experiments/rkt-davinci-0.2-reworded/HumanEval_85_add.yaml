name: HumanEval_85_add
language: rkt
prompt: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even elements\
  \ that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n;; 2\n(define\
  \ (add lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
  \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
  \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
  \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst)\
    \ (add (rest lst)))]\n    [else (add (rest lst))]))\n", "  (if (null? lst)\n \
    \     0\n      (if (even? (car lst))\n          (car lst)\n          0)\n    \
    \  (add (cdr lst))))\n", "  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest\
    \ lst)))]\n    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n    [else (add (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n    [else\
    \ (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(odd? (first lst)) (add (rest lst))]\n    [else (+\
    \ (first lst) (add (rest lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest\
    \ lst)))]\n    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n    [else (add (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add (rest\
    \ lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n    [else\
    \ (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(even? (first lst)) (+ (first lst) (add (rest lst)))]\n\
    \    [else (add (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (first lst)) (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n",
  "  (define (add-helper lst acc)\n    (if (null? lst)\n        acc\n        (if (and\
    \ (even? (car lst)) (odd? (length lst)))\n            (add-helper (cdr lst) (+\
    \ acc (car lst)))\n            (add-helper (cdr lst) acc))))\n  (add-helper lst\
    \ 0))\n", "  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (add (rest\
    \ lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
