name: HumanEval_143_words_in_sentence
language: rkt
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is\
  \ a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\"\
  )\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence\
  \ contains only letters\n(define (words_in_sentence sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime? n)\n    (define (iter i)\n      (cond\n      \
    \  [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n\
    \    (iter (- n 1)))\n  (define (prime-words sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n    \
    \   (cons (first sentence) (prime-words (rest sentence)))]\n      [else (prime-words\
    \ (rest sentence))]))\n  (string-join (prime-words (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (is-prime-word? word)\n    (is-prime? (string-length word)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime-word? (car\
    \ sentence))\n           (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n\
    \          (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (string-join\n   (filter\n\
    \    (lambda (word)\n      (prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length\
    \ (first words)))\n       (cons (first words) (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (w) (list-ref (string-split sentence #\\space) w))\n       \
    \  (prime-word-lengths sentence)))\n  (string-join (prime-words sentence) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(=\
    \ i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (string-join\n   (filter\n\
    \    (lambda (word)\n      (prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word) (member (string-length word) (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (words-in-sentence-iter sentence acc)\n    (cond\n      [(empty? sentence)\
    \ (string-join (reverse acc) \" \")]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (words-in-sentence-iter (rest sentence) (cons (first sentence)\
    \ acc))]\n      [else (words-in-sentence-iter (rest sentence) acc)]))\n  (words-in-sentence-iter\
    \ (string-split sentence #\\space) '()))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (\u03BB (w) (string-length w)) (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (\u03BB (w) (list-ref\
    \ (string-split sentence #\\space) w))\n         (prime-word-lengths sentence)))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (primes-in-sentence sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (words-in-sentence-with-primes sentence)\n    (filter (lambda (word)\
    \ (member (string-length word) (primes-in-sentence sentence)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join (words-in-sentence-with-primes sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n\
    \      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n \
    \           (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper n\
    \ (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (words-in-sentence-helper (cdr sentence))))\n   \
    \       (else (words-in-sentence-helper (cdr sentence)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (define\
    \ (prime-helper n div)\n      (cond\n        [(= div 1) #t]\n        [(= (modulo\
    \ n div) 0) #f]\n        [else (prime-helper n (- div 1))]))\n    (prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond\n    \
    \  [(empty? sentence) empty]\n      [(prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n\
    \      [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word)) (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (word) (list-ref (string-split sentence #\\space) word))\n \
    \        (prime-word-lengths sentence)))\n  (string-join prime-words #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter?\
    \ n (- i 1)))))\n    (is-prime-iter? n (quotient n 2)))\n  (define (words-in-sentence-iter\
    \ sentence result)\n    (cond ((null? sentence) result)\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (words-in-sentence-iter (cdr sentence)\
    \ (string-append result \" \" (car sentence))))\n          (else (words-in-sentence-iter\
    \ (cdr sentence) result))))\n  (string-trim (words-in-sentence-iter (string-split\
    \ sentence) \"\")))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n\
    \      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (is-divisible?\
    \ n divisor)\n         (cond\n           [(= divisor 1) #f]\n           [(= (modulo\
    \ n divisor) 0) #t]\n           [else (is-divisible? n (- divisor 1))]))\n   \
    \    (is-divisible? n (- n 1))]))\n  (define (prime-words sentence)\n    (cond\n\
    \      [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words (rest sentence)))]\n      [else (prime-words\
    \ (rest sentence))]))\n  (string-join (prime-words (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (filter-prime-lengths word-lengths)\n\
    \    (filter is-prime? word-lengths))\n  (define (filter-prime-words sentence\
    \ word-lengths)\n    (filter (lambda (word) (member (string-length word) word-lengths))\n\
    \            (string-split sentence #\\space)))\n  (string-join (filter-prime-words\
    \ sentence (filter-prime-lengths (word-lengths sentence)))\n               #\\\
    space))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n    \
    \    [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (iter sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n    \
    \   (cons (first sentence) (iter (rest sentence)))]\n      [else (iter (rest sentence))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even?\
    \ n) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((=\
    \ i n) #t)\n                   ((= (remainder n i) 0) #f)\n                  \
    \ (else (loop (+ i 2))))))))\n  (define (prime-words sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (prime-words (cdr sentence))))\n          (else (prime-words\
    \ (cdr sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n   \
    \ (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word)\n              (member (string-length word) (prime-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null?\
    \ words) '())\n          ((is-prime? (string-length (car words)))\n          \
    \ (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (iter sentence)\n    (cond ((null? sentence) '())\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (cons (car sentence) (iter (cdr\
    \ sentence))))\n          (else (iter (cdr sentence)))))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words result)\n    (cond\n      [(empty? words)\
    \ result]\n      [(is-prime? (string-length (first words)))\n       (iter (rest\
    \ words) (string-append result (first words) \" \"))]\n      [else (iter (rest\
    \ words) result)]))\n  (string-trim (iter (string-split sentence #\\space) \"\"\
    )))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n  \
    \  (iter (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (word)\n           (list-ref (string-split sentence #\\space)\
    \ word))\n          (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (string-join\n   (filter\n    (lambda (word)\n    \
    \  (prime? (string-length word)))\n    (string-split sentence #\\space))\n   #\\\
    space))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n    \
    \    [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n\
    \    (iter (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word) (is-prime? (string-length word))) (string-split sentence\
    \ #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (iter (cdr sentence))))\n\
    \          (else (iter (cdr sentence)))))\n  (string-join (iter (string-split\
    \ sentence \" \")) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) empty]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= n 3) #t)\n    \
    \      ((= n 4) #f)\n          ((= n 5) #t)\n          ((= n 6) #f)\n        \
    \  ((= n 7) #t)\n          ((= n 8) #f)\n          ((= n 9) #f)\n          ((=\
    \ n 10) #f)\n          ((= n 11) #t)\n          ((= n 12) #f)\n          ((= n\
    \ 13) #t)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16)\
    \ #f)\n          ((= n 17) #t)\n          ((= n 18) #f)\n          ((= n 19) #t)\n\
    \          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n \
    \         ((= n 23) #t)\n          ((= n 24) #f)\n          ((= n 25) #f)\n  \
    \        ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n   \
    \       ((= n 29) #t)\n          ((= n 30) #f)\n          ((= n 31) #t)\n    \
    \      ((= n 32) #f)\n          ((= n 33) #f)\n          ((= n 34) #f)\n     \
    \     ((= n 35) #f)\n          ((= n 36) #f)\n          ((= n 37) #t)\n      \
    \    ((= n 38) #f)\n          ((= n 39) #f)\n          ((= n 40) #f)\n       \
    \   ((= n 41) #t)\n          ((= n 42) #f)\n          ((= n 43) #t)\n        \
    \  ((= n 44) #f)\n          ((= n 45) #f)\n          ((= n 46) #f)\n         \
    \ ((= n 47) #t)\n          ((= n 48) #f)\n          ((= n 49) #f)\n          ((=\
    \ n 50) #f", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda\
    \ (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (filter (lambda (word) (is-prime? (string-length\
    \ word)))\n            (string-split sentence #\\space)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n   \
    \   (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper sentence)\n  \
    \  (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (cons (first sentence) (helper (rest sentence)))]\n    \
    \  [else (helper (rest sentence))]))\n  (string-join (helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n  \
    \    (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else\
    \ (helper (+ i 1))]))\n    (helper 2))\n  (define (helper words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (helper (rest words)))]\n      [else (helper (rest\
    \ words))]))\n  (string-join (helper (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n  \
    \         [(> i (sqrt n)) #t]\n           [(= (modulo n i) 0) #f]\n          \
    \ [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (word-lengths sentence)\n    (map (lambda (word) (string-length word))\n\
    \         (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (word) (list-ref (string-split sentence #\\space) word))\n \
    \        (prime-word-lengths sentence)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (string-join\n   (filter\n    (lambda (word)\n      (is-prime?\
    \ (string-length word)))\n    (string-split sentence #\\space))\n   #\\space))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (iter words)\n    (cond ((null? words) \"\")\n          ((is-prime?\
    \ (string-length (car words)))\n           (string-append (car words) \" \" (iter\
    \ (cdr words))))\n          (else (iter (cdr words)))))\n  (iter (string-split\
    \ sentence #\\space)))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1)\
    \ #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n   \
    \    (define (iter i)\n         (cond\n           [(= i n) #t]\n           [(=\
    \ (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n\
    \  (define (iter s)\n    (cond\n      [(empty? s) empty]\n      [(is-prime? (string-length\
    \ (first s)))\n       (cons (first s) (iter (rest s)))]\n      [else (iter (rest\
    \ s))]))\n  (string-join (iter (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter?\
    \ n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (is-prime-word? word)\n\
    \    (is-prime? (string-length word)))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime-word? (first sentence))\n\
    \       (cons (first sentence) (prime-words-in-sentence (rest sentence)))]\n \
    \     [else (prime-words-in-sentence (rest sentence))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space))))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (word-at-index sentence i)\n    (list-ref (string-split sentence #\\space) i))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (i) (word-at-index\
    \ sentence i))\n         (filter (lambda (i) (is-prime? (list-ref (word-lengths\
    \ sentence) i)))\n                 (build-list (length (word-lengths sentence))\n\
    \                             (lambda (i) i)))))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-helper? n (- i 1)))))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (define (prime-words-helper\
    \ sentence lengths)\n      (cond ((null? sentence) '())\n            ((member\
    \ (string-length (car sentence)) lengths)\n             (cons (car sentence) (prime-words-helper\
    \ (cdr sentence) lengths)))\n            (else (prime-words-helper (cdr sentence)\
    \ lengths))))\n    (prime-words-helper (string-split sentence #\\space) (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero?\
    \ (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (filter (lambda (word)\n              (member\
    \ (string-length word) (prime-lengths sentence)))\n            (string-split sentence\
    \ #\\space)))\n  (string-join prime-words #\\space))\n", "  (string-join\n   (filter\n\
    \    (lambda (word)\n      (prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (word-at-index i\
    \ sentence)\n    (string-join (list-ref (string-split sentence #\\space) i) \"\
    \"))\n  (define (iter i sentence)\n    (cond ((= i (string-length sentence)) \"\
    \")\n          ((is-prime? (list-ref (word-lengths sentence) i))\n           (string-append\
    \ (word-at-index i sentence) \" \" (iter (+ i 1) sentence)))\n          (else\
    \ (iter (+ i 1) sentence))))\n  (iter 0 sentence))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder\
    \ n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (word-lengths-to-words sentence)\n    (map (lambda (word-length)\n\
    \           (string-join (filter (lambda (word) (= (string-length word) word-length))\n\
    \                                (string-split sentence #\\space))))\n       \
    \  (word-lengths sentence)))\n  (string-join (filter (lambda (word) (is-prime?\
    \ (string-length word)))\n                       (word-lengths-to-words sentence))\n\
    \                #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (filter-prime-lengths\
    \ lengths)\n    (filter is-prime? lengths))\n  (define (filter-words sentence\
    \ lengths)\n    (filter (lambda (word) (member (string-length word) lengths))\n\
    \            (string-split sentence #\\space)))\n  (string-join (filter-words\
    \ sentence (filter-prime-lengths (word-lengths sentence))) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (loop i)\n         (cond\n           [(=\
    \ i n) #t]\n           [(= (modulo n i) 0) #f]\n           [else (loop (+ i 1))]))\n\
    \       (loop 3)]))\n  (define (loop sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (loop (rest sentence)))]\n      [else (loop (rest sentence))]))\n\
    \  (string-join (loop (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (word-lengths sentence)\n    (map (\u03BB (word) (string-length word))\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (\u03BB (word) (is-prime? (string-length word))) (string-split sentence\
    \ #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n\
    \          (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo\
    \ n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter lst\
    \ acc)\n    (cond\n      [(null? lst) (string-join (reverse acc) \" \")]\n   \
    \   [(is-prime? (string-length (car lst))) (iter (cdr lst) (cons (car lst) acc))]\n\
    \      [else (iter (cdr lst) acc)]))\n  (iter (string-split sentence #\\space)\
    \ '()))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n    \
    \  (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else\
    \ (is-prime-helper n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (cond ((null? sentence) '())\n    \
    \      ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (words-in-sentence-helper (cdr sentence))))\n          (else (words-in-sentence-helper\
    \ (cdr sentence)))))\n  (string-join (words-in-sentence-helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (filter-prime-lengths\
    \ word-lengths)\n    (filter is-prime? word-lengths))\n  (define (get-words-with-prime-lengths\
    \ sentence word-lengths)\n    (define (get-word-with-length sentence length)\n\
    \      (define (iter i)\n        (cond ((= i length) (substring sentence 0 i))\n\
    \              (else (iter (+ i 1)))))\n      (iter 0))\n    (map (lambda (length)\
    \ (get-word-with-length sentence length)) word-lengths))\n  (define (join-words\
    \ words)\n    (string-join words #\\space))\n  (join-words (get-words-with-prime-lengths\
    \ sentence (filter-prime-lengths (word-lengths sentence)))))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (helper (rest sentence) (string-append result (first sentence) \" \"))]\n\
    \      [else (helper (rest sentence) result)]))\n  (string-trim (helper (string-split\
    \ sentence #\\space) \"\")))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond\n        [(= divisor 1) #t]\n        [(= (modulo n divisor)\
    \ 0) #f]\n        [else (is-prime-helper n (- divisor 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence result)\n    (cond\n\
    \      [(empty? sentence) result]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-helper (rest sentence) (string-append result (first\
    \ sentence)))]\n      [else (words-in-sentence-helper (rest sentence) result)]))\n\
    \  (words-in-sentence-helper (string-split sentence #\\space) \"\"))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(=\
    \ n 5) #t]\n      [(= n 7) #t]\n      [(= n 11) #t]\n      [(= n 13) #t]\n   \
    \   [(= n 17) #t]\n      [(= n 19) #t]\n      [(= n 23) #t]\n      [(= n 29) #t]\n\
    \      [(= n 31) #t]\n      [(= n 37) #t]\n      [(= n 41) #t]\n      [(= n 43)\
    \ #t]\n      [(= n 47) #t]\n      [(= n 53) #t]\n      [(= n 59) #t]\n      [(=\
    \ n 61) #t]\n      [(= n 67) #t]\n      [(= n 71) #t]\n      [(= n 73) #t]\n \
    \     [(= n 79) #t]\n      [(= n 83) #t]\n      [(= n 89) #t]\n      [(= n 97)\
    \ #t]\n      [else #f]))\n  (define (prime-words sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n    \
    \   (cons (first sentence) (prime-words (rest sentence)))]\n      [else (prime-words\
    \ (rest sentence))]))\n  (string-join (prime-words (string-split sentence #\\\
    space)) \" \"))\n", "  (string-join\n   (filter (lambda (word)\n             (prime?\
    \ (string-length word)))\n           (string-split sentence #\\space))\n   #\\\
    space))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n    \
    \    [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (word-lengths-to-words sentence)\n    (map\
    \ (lambda (w) (list-ref (string-split sentence #\\space) w))\n         (build-list\
    \ (length (string-split sentence #\\space))\n                     (lambda (i)\
    \ i))))\n  (define (prime-word-lengths-to-words sentence)\n    (map (lambda (w)\
    \ (list-ref (string-split sentence #\\space) w))\n         (build-list (length\
    \ (prime-word-lengths sentence))\n                     (lambda (i) i))))\n  (define\
    \ (prime-word-lengths-to-words-to-string sentence)\n    (string-join (prime-word-lengths-to-words\
    \ sentence) \" \"))\n  (prime-word-lengths-to-words-to-string sentence))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((< i n) (and (not\
    \ (zero? (modulo n i))) (iter (+ i 1))))\n            (else #t)))\n    (iter 2))\n\
    \  (define (iter words)\n    (cond ((null? words) '())\n          ((is-prime?\
    \ (string-length (car words))) (cons (car words) (iter (cdr words))))\n      \
    \    (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond\n        [(= divisor 1) #t]\n        [(= (modulo n divisor)\
    \ 0) #f]\n        [else (is-prime-helper n (- divisor 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond\n    \
    \  [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n\
    \      [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (word-at-index sentence i)\n    (list-ref (string-split sentence #\\space) i))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-word-at-index sentence i)\n    (word-at-index\
    \ sentence i))\n  (define (prime-word-at-indexes sentence indexes)\n    (map (lambda\
    \ (i) (prime-word-at-index sentence i)) indexes))\n  (define (indexes-of-prime-word-lengths\
    \ sentence)\n    (define (index-of-prime-word-lengths sentence i)\n      (if (is-prime?\
    \ (string-length (word-at-index sentence i)))\n          i\n          (index-of-prime-word-lengths\
    \ sentence (+ i 1))))\n    (define (iter i)\n      (if (= i (length (string-split\
    \ sentence #\\space)))\n          '()\n          (cons (index-of-prime-word-lengths\
    \ sentence i)\n                (iter (+ i 1)))))\n    (iter 0))\n  (define (indexes-of-prime-word-lengths\
    \ sentence)\n    (define (iter i)\n      (if (= i (length (string-split sentence\
    \ #\\space)))\n          '()\n          (if (is-prime? (string-length (word-at-index\
    \ sentence i)))\n              (cons i (iter (+ i 1)))\n              (iter (+\
    \ i 1)))))\n    (iter 0))\n  (define (indexes-of-prime-word-lengths sentence)\n\
    \    (define (iter i)\n      (if (= i (length (string-split sentence #\\space)))\n\
    \          '()\n          (if (is-prime? (string-length (word-at", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (word-at-index sentence i)\n    (list-ref\
    \ (string-split sentence #\\space) i))\n  (define (prime-word-at-index sentence\
    \ i)\n    (word-at-index sentence i))\n  (define (prime-words sentence)\n    (map\
    \ prime-word-at-index (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (cond ((> i (/ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter lst acc)\n    (cond ((null?\
    \ lst) acc)\n          ((is-prime? (string-length (car lst))) (iter (cdr lst)\
    \ (string-append acc \" \" (car lst))))\n          (else (iter (cdr lst) acc))))\n\
    \  (iter (string-split sentence) \"\"))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (cond ((null?\
    \ sentence) acc)\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (words-in-sentence-iter (cdr sentence) (string-append acc \" \" (car sentence))))\n\
    \          (else (words-in-sentence-iter (cdr sentence) acc))))\n  (words-in-sentence-iter\
    \ (string-split sentence) \"\"))\n", "  (define (is-prime? n)\n    (cond\n   \
    \   [(= n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #f]\n\
    \      [(= n 5) #t]\n      [(= n 6) #f]\n      [(= n 7) #t]\n      [(= n 8) #f]\n\
    \      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #t]\n      [(= n 12)\
    \ #f]\n      [(= n 13) #t]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(=\
    \ n 16) #f]\n      [(= n 17) #t]\n      [(= n 18) #f]\n      [(= n 19) #t]\n \
    \     [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23)\
    \ #t]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(=\
    \ n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #t]\n      [(= n 30) #f]\n \
    \     [(= n 31) #t]\n      [(= n 32) #f]\n      [(= n 33) #f]\n      [(= n 34)\
    \ #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #t]\n      [(=\
    \ n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #t]\n \
    \     [(= n 42) #f]\n      [(= n 43) #t]\n      [(= n 44) #f]\n      [(= n 45)\
    \ #f]\n      [(= n 46) #f]\n      [(= n 47) #t]\n      [(= n 48) #f]\n      [(=\
    \ n 49) #f]\n      [(= n 50)", "  (define (is-prime? n)\n    (define (is-prime-rec\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-rec n (- i 1))]))\n    (is-prime-rec n (- n 1)))\n  (define\
    \ (prime-words-rec sentence result)\n    (cond\n      [(empty? sentence) result]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (prime-words-rec\
    \ (rest sentence) (string-append result (first sentence) \" \"))]\n      [else\
    \ (prime-words-rec (rest sentence) result)]))\n  (string-trim (prime-words-rec\
    \ (string-split sentence #\\space) \"\")))\n", "  (define (is-prime? n)\n    (cond\
    \ ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n\
    \           (define (iter i)\n             (cond ((> i (sqrt n)) #t)\n       \
    \            ((= (modulo n i) 0) #f)\n                   (else (iter (+ i 1)))))\n\
    \           (iter 3))))\n  (define (prime-words words)\n    (cond ((null? words)\
    \ '())\n          ((is-prime? (string-length (car words)))\n           (cons (car\
    \ words) (prime-words (cdr words))))\n          (else (prime-words (cdr words)))))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter?\
    \ n (- i 1)))))\n    (is-prime-iter? n (quotient n 2)))\n  (define (words-in-sentence-iter\
    \ sentence result)\n    (cond ((null? sentence) result)\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (words-in-sentence-iter (cdr sentence)\
    \ (string-append result \" \" (car sentence))))\n          (else (words-in-sentence-iter\
    \ (cdr sentence) result))))\n  (string-trim (words-in-sentence-iter (string-split\
    \ sentence \" \") \"\")))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (word-at-index sentence i)\n    (list-ref (string-split sentence #\\\
    space) i))\n  (define (prime-words sentence)\n    (map (lambda (i) (word-at-index\
    \ sentence i))\n         (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n   \
    \   (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (helper (+ i 1)))))\n    (helper 2))\n  (define (word-lengths sentence)\n  \
    \  (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (words-with-prime-lengths\
    \ sentence)\n    (filter (lambda (word)\n              (member (string-length\
    \ word)\n                      (prime-word-lengths sentence)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join (words-with-prime-lengths sentence) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (helper divisor)\n      (cond\n\
    \        [(= divisor n) #t]\n        [(= (modulo n divisor) 0) #f]\n        [else\
    \ (helper (+ divisor 1))]))\n    (helper 2))\n  (define (helper words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (helper (rest words)))]\n      [else (helper (rest\
    \ words))]))\n  (string-join (helper (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(zero? (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (string-join\n   (filter\n    (lambda (word)\n   \
    \   (prime? (string-length word)))\n    (string-split sentence #\\space))\n  \
    \ #\\space))\n", "  (define (is-prime n)\n    (define (is-divisible? a b)\n  \
    \    (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((> i (/ n 2))\
    \ #t)\n            ((is-divisible? n i) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (word-at-index sentence i)\n    (list-ref (string-split\
    \ sentence #\\space) i))\n  (define (word-at-index-is-prime sentence i)\n    (is-prime\
    \ (word-lengths sentence i)))\n  (define (prime-words sentence)\n    (filter word-at-index-is-prime\
    \ (word-lengths sentence)))\n  (string-join (prime-words sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (w)\n              (member (string-length w) (prime-word-lengths sentence)))\n\
    \            (string-split sentence #\\space)))\n  (string-join prime-words #\\\
    space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n    \
    \  (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (if (string-empty? sentence)\n    \
    \    \"\"\n        (let ((word (string-take sentence (string-index sentence #\\\
    space))))\n          (if (is-prime? (string-length word))\n              (string-append\
    \ word \" \" (words-in-sentence-helper (string-drop sentence (string-length word))))\n\
    \              (words-in-sentence-helper (string-drop sentence (string-length\
    \ word)))))))\n  (words-in-sentence-helper sentence))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (helper lst)\n    (cond\n      [(null? lst) '()]\n      [(is-prime? (string-length\
    \ (car lst))) (cons (car lst) (helper (cdr lst)))]\n      [else (helper (cdr lst))]))\n\
    \  (string-join (helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even?\
    \ n) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((=\
    \ i n) #t)\n                   ((= (remainder n i) 0) #f)\n                  \
    \ (else (loop (+ i 2))))))))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (word)\n           (list-ref (string-split sentence #\\space)\
    \ word))\n          (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null? words) \"\
    \")\n          ((is-prime (string-length (car words)))\n           (string-append\
    \ (car words) \" \" (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (iter (string-split sentence #\\space)))\n", "  (define (is-prime? n)\n   \
    \ (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0)\
    \ #f]\n      [else\n       (define (iter i)\n         (cond\n           [(= i\
    \ n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n\
    \       (iter 3)]))\n  (define (iter words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(is-prime? (string-length (first words)))\n       (cons (first\
    \ words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (prime? n)\n\
    \    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n  \
    \        (else\n           (let loop ((i 3))\n             (cond ((> (* i i) n)\
    \ #t)\n                   ((= (modulo n i) 0) #f)\n                   (else (loop\
    \ (+ i 2))))))))\n  (define (prime-words sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words (cdr sentence))))\n          (else (prime-words (cdr\
    \ sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper (+\
    \ i 1)))))\n    (helper 2))\n  (define (helper words)\n    (cond ((null? words)\
    \ '())\n          ((is-prime? (string-length (car words)))\n           (cons (car\
    \ words) (helper (cdr words))))\n          (else (helper (cdr words)))))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder\
    \ n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n        \
    \   [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter\
    \ (+ i 1))]))\n       (iter 3)]))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word) (member (string-length word) (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (string-join\n   (filter\n    (\u03BB (word)\n\
    \      (prime? (string-length word)))\n    (string-split sentence #\\space))\n\
    \   #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null? words) '())\n\
    \          ((is-prime? (string-length (car words)))\n           (cons (car words)\
    \ (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ word)\n    (cond ((null? word) '())\n          ((is-prime (string-length (car\
    \ word)))\n           (cons (car word) (iter (cdr word))))\n          (else (iter\
    \ (cdr word)))))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(=\
    \ i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-word-indexes sentence)\n    (map (lambda (x) (index-of x (word-lengths\
    \ sentence)))\n         (prime-word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (x) (list-ref (string-split sentence #\\space) x))\n\
    \         (prime-word-indexes sentence)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word)\
    \ (string-length word))\n         (string-split sentence #\\space)))\n  (define\
    \ (word-lengths-are-prime? sentence)\n    (map is-prime? (word-lengths sentence)))\n\
    \  (define (words-with-prime-lengths sentence)\n    (map (lambda (word) (string-ref\
    \ word 0))\n         (filter (lambda (word) (is-prime? (string-length word)))\n\
    \                 (string-split sentence #\\space))))\n  (string-join (words-with-prime-lengths\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n\
    \      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define\
    \ (iter i)\n         (cond\n           [(> i (sqrt n)) #t]\n           [(= (remainder\
    \ n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime? (string-length\
    \ (first words)))\n       (cons (first words) (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime n)\n    (cond ((= n 1) #f)\n          ((= n\
    \ 2) #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i\
    \ 3))\n             (cond ((> (* i i) n) #t)\n                   ((= (modulo n\
    \ i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime (word-lengths sentence)))\n\
    \  (define (prime-word-indexes sentence)\n    (map (lambda (x) (index-of x (word-lengths\
    \ sentence)))\n         (prime-word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (x) (list-ref (string-split sentence #\\space) x))\n\
    \         (prime-word-indexes sentence)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (string-join (filter (lambda (word) (is-prime (string-length\
    \ word)))\n                       (string-split sentence #\\space))\n        \
    \       \" \"))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null? words) \"\
    \")\n          ((is-prime (string-length (car words)))\n           (string-append\
    \ (car words) \" \" (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-trim (iter (string-split sentence #\\space))))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n          \
    \  ((= (modulo n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence)))\n  (define (word-lengths-in-sentence\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (words-in-sentence\
    \ sentence)\n    (map string-ref (string-split sentence)))\n  (define (words-with-prime-lengths\
    \ sentence)\n    (map list-ref (words-in-sentence sentence) (word-lengths-in-sentence\
    \ sentence)))\n  (string-join (words-with-prime-lengths sentence) \" \"))\n",
  "  (string-join\n   (filter\n    (lambda (word)\n      (prime? (string-length word)))\n\
    \    (string-split sentence #\\space))\n   #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (string-join\n   (filter\n    (lambda (word)\n      (prime?\
    \ (string-length word)))\n    (string-split sentence #\\space))\n   #\\space))\n",
  "  (define (is-prime? n)\n    (define (divisors n)\n      (for/list ([i (in-range\
    \ 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (empty?\
    \ (divisors n)))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (define (prime-words-helper\
    \ sentence word-lengths)\n      (cond [(empty? word-lengths) '()]\n          \
    \  [(is-prime? (car word-lengths))\n             (cons (car sentence) (prime-words-helper\
    \ (cdr sentence) (cdr word-lengths)))]\n            [else (prime-words-helper\
    \ (cdr sentence) (cdr word-lengths))]))\n    (prime-words-helper (string-split\
    \ sentence #\\space) (word-lengths sentence)))\n  (string-join (prime-words sentence)\
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (if (=\
    \ i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (word-is-prime?\
    \ word)\n    (is-prime? (string-length word)))\n  (define (prime-words sentence)\n\
    \    (filter word-is-prime? (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n \
    \             #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (for/list ([word (in-list (string-split sentence #\\space))])\n\
    \      (string-length word)))\n  (define (prime-word-lengths sentence)\n    (for/list\
    \ ([length (in-list (word-lengths sentence))])\n      (if (is-prime? length)\n\
    \          length\n          #f)))\n  (define (prime-words sentence)\n    (for/list\
    \ ([word (in-list (string-split sentence #\\space))])\n      (if (member (string-length\
    \ word) (prime-word-lengths sentence))\n          word\n          #f)))\n  (string-join\
    \ (filter (lambda (x) (not (equal? x #f))) (prime-words sentence)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond\n\
    \        [(= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n        [else\
    \ (is-prime-helper n (- divisor 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (define (prime-helper\
    \ n div)\n      (cond\n        [(= div 1) #t]\n        [(= (modulo n div) 0) #f]\n\
    \        [else (prime-helper n (- div 1))]))\n    (prime-helper n (- n 1)))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (x) (list-ref\
    \ (string-split sentence #\\space) x))\n         (filter (lambda (x) (prime? (list-ref\
    \ (word-lengths sentence) x)))\n                 (build-list (string-length sentence)\
    \ add1))))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (word-at-index sentence i)\n    (list-ref (string-split sentence #\\space) i))\n\
    \  (define (word-is-prime? sentence i)\n    (is-prime? (word-lengths sentence\
    \ i)))\n  (define (prime-words sentence)\n    (filter word-is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words-in-sentence sentence)\n    (map word-at-index\
    \ sentence (prime-words sentence)))\n  (string-join (prime-words-in-sentence sentence)\
    \ #\\space))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (iter sentence)\n    (if (string-null? sentence)\n\
    \        \"\"\n        (let ((word (string-split sentence #\\space)))\n      \
    \    (if (is-prime (string-length (car word)))\n              (string-append (car\
    \ word) \" \" (iter (string-join (cdr word) #\\space)))\n              (iter (string-join\
    \ (cdr word) #\\space))))))\n  (iter sentence))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths-are-prime?\
    \ sentence)\n    (define (iter words)\n      (cond ((null? words) #t)\n      \
    \      ((is-prime? (string-length (car words)))\n             (iter (cdr words)))\n\
    \            (else #f)))\n    (iter (string-split sentence)))\n  (string-join\
    \ (filter word-lengths-are-prime? (string-split sentence))))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(zero?\
    \ (modulo n i)) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define\
    \ (word-lengths sentence)\n    (for/list ([word (in-list (string-split sentence))])\n\
    \      (string-length word)))\n  (define (prime-word-lengths sentence)\n    (for/list\
    \ ([length (in-list (word-lengths sentence))])\n      (if (is-prime? length) length\
    \ #f)))\n  (define (prime-words sentence)\n    (for/list ([word (in-list (string-split\
    \ sentence))])\n      (if (member (string-length word) (prime-word-lengths sentence))\
    \ word #f)))\n  (string-join (prime-words sentence) \" \"))\n```\n\n## Problem\
    \ 2\n\n```racket\n#lang racket\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter lst)\n    (cond\n\
    \      [(null? lst) '()]\n      [(is-prime? (string-length (car lst))) (cons (car\
    \ lst) (iter (cdr lst)))]\n      [else (iter (cdr lst))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n divisor)\n      (cond ((= divisor 1) #t)\n      \
    \      ((= (modulo n divisor) 0) #f)\n            (else (is-prime-helper n (-\
    \ divisor 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (is-prime-word?\
    \ word)\n    (is-prime? (string-length word)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((empty? sentence) empty)\n          ((is-prime-word? (first\
    \ sentence))\n           (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence))))\n          (else (prime-words-in-sentence (rest sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (define (prime-words sentence)\n  \
    \  (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (iter sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (iter (cdr sentence))))\n          (else (iter (cdr sentence)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(=\
    \ i n) #t]\n           [(= (modulo n i) 0) #f]\n           [else (iter (+ i 1))]))\n\
    \       (iter 3)]))\n  (define (iter words)\n    (cond\n      [(null? words) '()]\n\
    \      [(is-prime? (string-length (car words)))\n       (cons (car words) (iter\
    \ (cdr words)))]\n      [else (iter (cdr words))]))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word)\n              (member (string-length\
    \ word)\n                      (prime-word-lengths sentence)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join prime-words #\\space))\n", "  (define (prime?\
    \ n)\n    (define (prime-helper n d)\n      (cond ((= d 1) #t)\n            ((=\
    \ (modulo n d) 0) #f)\n            (else (prime-helper n (- d 1)))))\n    (prime-helper\
    \ n (- n 1)))\n  (define (prime-words-helper sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words-helper (cdr sentence))))\n          (else (prime-words-helper\
    \ (cdr sentence)))))\n  (string-join (prime-words-helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n       \
    \ [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (word-lengths-are-prime? words)\n    (cond\n      [(empty?\
    \ words) #t]\n      [(is-prime? (string-length (first words))) (word-lengths-are-prime?\
    \ (rest words))]\n      [else #f]))\n  (define (words-in-sentence-iter sentence\
    \ words)\n    (cond\n      [(empty? sentence) (string-join words \" \")]\n   \
    \   [(word-lengths-are-prime? (string-split sentence #\\space)) (words-in-sentence-iter\
    \ (rest sentence) (append words (list (first sentence))))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) words)]))\n  (words-in-sentence-iter (string-split sentence\
    \ #\\space) '()))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter lst)\n    (cond ((null? lst) '())\n\
    \          ((is-prime? (string-length (car lst)))\n           (cons (car lst)\
    \ (iter (cdr lst))))\n          (else (iter (cdr lst)))))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n\
    \       (define (is-divisible? n divisor)\n         (cond\n           [(= divisor\
    \ 1) #f]\n           [(= (modulo n divisor) 0) #t]\n           [else (is-divisible?\
    \ n (- divisor 1))]))\n       (is-divisible? n (- n 1))]))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence)))]\n      [else (prime-words-in-sentence (rest sentence))]))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (define (prime-word-lengths\
    \ sentence)\n      (filter is-prime? (word-lengths sentence)))\n    (define (prime-word-indexes\
    \ sentence)\n      (map (lambda (length)\n             (list-ref (word-lengths\
    \ sentence) length))\n           (prime-word-lengths sentence)))\n    (define\
    \ (prime-words sentence)\n      (map (lambda (index)\n             (list-ref (string-split\
    \ sentence #\\space) index))\n           (prime-word-indexes sentence)))\n   \
    \ (string-join (prime-words sentence) \" \"))\n  (prime-words sentence))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-iter? n divisor)\n      (cond ((=\
    \ divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n            (else\
    \ (is-prime-iter? n (- divisor 1)))))\n    (is-prime-iter? n (- n 1)))\n  (define\
    \ (words-in-sentence-iter sentence result)\n    (cond ((null? sentence) result)\n\
    \          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-iter\
    \ (cdr sentence) (string-append result \" \" (car sentence))))\n          (else\
    \ (words-in-sentence-iter (cdr sentence) result))))\n  (words-in-sentence-iter\
    \ (string-split sentence) \"\"))\n", "  (define (is-prime? n)\n    (cond\n   \
    \   [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n     \
    \ [else\n       (define (iter i)\n         (cond\n           [(= i n) #t]\n  \
    \         [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n   \
    \    (iter 3)]))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n\
    \    (cond\n      [(null? words) '()]\n      [(is-prime? (string-length (car words)))\n\
    \       (cons (car words) (iter (cdr words)))]\n      [else (iter (cdr words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter? n (- i\
    \ 1)))))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter sentence\
    \ acc)\n    (cond ((null? sentence) acc)\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (words-in-sentence-iter (cdr sentence) (string-append\
    \ acc \" \" (car sentence))))\n          (else (words-in-sentence-iter (cdr sentence)\
    \ acc))))\n  (string-trim (words-in-sentence-iter (string-split sentence #\\space)\
    \ \"\")))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper\
    \ (+ i 1))]))\n    (helper 2))\n  (define (helper lst)\n    (cond\n      [(null?\
    \ lst) '()]\n      [(is-prime? (string-length (car lst))) (cons (car lst) (helper\
    \ (cdr lst)))]\n      [else (helper (cdr lst))]))\n  (string-join (helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (word-is-prime? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (word-is-not-prime? word)\n    (not (word-is-prime? word)))\n\
    \  (define (filter-words words)\n    (cond\n      [(empty? words) empty]\n   \
    \   [(word-is-prime? (first words))\n       (cons (first words) (filter-words\
    \ (rest words)))]\n      [else (filter-words (rest words))]))\n  (string-join\
    \ (filter-words (string-split sentence #\\space)) #\\space))\n", "  (define (prime?\
    \ n)\n    (define (prime-helper n d)\n      (cond\n        [(= d 1) #t]\n    \
    \    [(= (modulo n d) 0) #f]\n        [else (prime-helper n (- d 1))]))\n    (prime-helper\
    \ n (- n 1)))\n  (define (prime-words sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime n)\n    (define (is-prime-iter n i)\n      (cond\n       \
    \ [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter\
    \ n (+ i 1))]))\n    (is-prime-iter n 2))\n  (define (words-in-sentence-iter sentence\
    \ acc)\n    (cond\n      [(empty? sentence) (string-join (reverse acc) \" \")]\n\
    \      [(is-prime (string-length (first sentence)))\n       (words-in-sentence-iter\
    \ (rest sentence) (cons (first sentence) acc))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) acc)]))\n  (words-in-sentence-iter (string-split sentence #\\\
    space) '()))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (iter sentence acc)\n    (cond ((null? sentence)\
    \ acc)\n          ((is-prime? (string-length (car sentence)))\n           (iter\
    \ (cdr sentence) (string-append acc \" \" (car sentence))))\n          (else (iter\
    \ (cdr sentence) acc))))\n  (string-trim (iter (string-split sentence #\\space)\
    \ \"\")))\n", "  (define (is-prime? n)\n    (define (is-prime-iter? n divisor)\n\
    \      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n \
    \           (else (is-prime-iter? n (- divisor 1)))))\n    (is-prime-iter? n (-\
    \ n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((is-prime? (string-length (car sentence)))\n           (cons\
    \ (car sentence) (prime-words-in-sentence (cdr sentence))))\n          (else (prime-words-in-sentence\
    \ (cdr sentence)))))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (prime? n i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (prime? n (- i 1))]))\n    (prime? n (- n 1)))\n  (define (prime-words sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (x) (list-ref (string-split sentence #\\space) x))\n\
    \         (filter (lambda (x) (is-prime? (list-ref (word-lengths sentence) x)))\n\
    \                 (build-list (length (word-lengths sentence))\n             \
    \                (lambda (x) x)))))\n  (string-join (prime-words sentence) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (word-lengths-to-primes word-lengths)\n    (filter\
    \ is-prime? word-lengths))\n  (define (word-lengths-to-words word-lengths)\n \
    \   (map (lambda (word-length)\n           (list-ref (string-split sentence #\\\
    space) word-length))\n          word-lengths))\n  (define (words-to-sentence words)\n\
    \    (string-join words #\\space))\n  (words-to-sentence\n   (word-lengths-to-words\n\
    \    (word-lengths-to-primes\n     (word-lengths sentence)))))\n", "  (string-join\n\
    \   (filter\n    (lambda (word)\n      (prime? (string-length word)))\n    (string-split\
    \ sentence #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) '()]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (loop i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (filter (lambda (word)\n              (is-prime?\
    \ (string-length word)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond\
    \ ((null? words) '())\n          ((is-prime? (string-length (car words)))\n  \
    \         (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n d)\n      (cond\n        [(= d\
    \ 1) #t]\n        [(= (modulo n d) 0) #f]\n        [else (is-prime-helper n (-\
    \ d 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n\
    \          ((even? n) #f)\n          (else\n           (let loop ((i 3))\n   \
    \          (cond ((= i n) #t)\n                   ((= (remainder n i) 0) #f)\n\
    \                   (else (loop (+ i 2))))))))\n  (define (prime-words sentence)\n\
    \    (define (prime-words-helper sentence acc)\n      (cond ((null? sentence)\
    \ acc)\n            ((prime? (string-length (car sentence)))\n             (prime-words-helper\
    \ (cdr sentence) (cons (car sentence) acc)))\n            (else (prime-words-helper\
    \ (cdr sentence) acc))))\n    (prime-words-helper sentence '()))\n  (string-join\
    \ (reverse (prime-words (string-split sentence #\\space))) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words acc)\n    (cond\n  \
    \    [(empty? words) (string-join (reverse acc) \" \")]\n      [(is-prime? (string-length\
    \ (first words)))\n       (iter (rest words) (cons (first words) acc))]\n    \
    \  [else (iter (rest words) acc)]))\n  (iter (string-split sentence #\\space)\
    \ '()))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (iter word)\n    (cond ((null? word) '())\n        \
    \  ((is-prime? (string-length (car word)))\n           (cons (car word) (iter\
    \ (cdr word))))\n          (else (iter (cdr word)))))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (define (prime-word-at-index i)\n      (list-ref (string-split\
    \ sentence #\\space) i))\n    (map prime-word-at-index (prime-word-lengths sentence)))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n\
    \    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= (remainder n 2)\
    \ 0) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((>\
    \ (* i i) n) #t)\n                   ((= (remainder n i) 0) #f)\n            \
    \       (else (loop (+ i 2))))))))\n  (define (prime-words sentence)\n    (cond\
    \ ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (word-is-prime? word)\n    (is-prime?\
    \ (string-length word)))\n  (define (word-is-prime? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (word-is-prime? word)\n    (is-prime? (string-length word)))\n\
    \  (define (word-is-prime? word)\n    (is-prime? (string-length word)))\n  (define\
    \ (word-is-prime? word)\n    (is-prime? (string-length word)))\n  (define (word-is-prime?\
    \ word)\n    (is-prime? (string-length word)))\n  (define (word-is-prime? word)\n\
    \    (is-prime? (string-length word)))\n  (define (word-is-prime? word)\n    (is-prime?\
    \ (string-length word)))\n  (define (word-is-prime? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (word-is-prime? word)\n    (is-prime? (string-length word)))\n\
    \  (define (word-is-prime? word)\n    (is-prime? (string-length word)))\n  (define\
    \ (word-is-prime? word)\n    (is-prime? (string-length word)))\n  (define (word-is-prime?\
    \ word)\n    (is-prime? (string-length word)))\n  (define (word-is-prime? word)\n\
    \    (is-prime? (string-length word)))\n  (define (word-is-prime? word)\n    (is-prime?\
    \ (string-length word)))\n  (define (word-is-prime? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (word-is-prime? word)\n    (is-prime? (string-length word)))\n\
    \  (define", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond ((null? words) '())\n      \
    \    ((is-prime? (string-length (car words)))\n           (cons (car words) (iter\
    \ (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-helper n (+ i 1)))))\n    (is-prime-helper\
    \ n 2))\n  (define (words-in-sentence-helper sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((is-prime? (string-length (car sentence)))\n           (cons\
    \ (car sentence) (words-in-sentence-helper (cdr sentence))))\n          (else\
    \ (words-in-sentence-helper (cdr sentence)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n\
    \       (define (is-divisible? n d)\n         (= (remainder n d) 0))\n       (define\
    \ (next n)\n         (if (= n 2) 3 (+ n 2)))\n       (define (iter n d)\n    \
    \     (cond\n           [(> (* d d) n) #t]\n           [(is-divisible? n d) #f]\n\
    \           [else (iter n (next d))]))\n       (iter n 2)]))\n  (define (words-in-sentence-iter\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-iter (rest\
    \ sentence)))]\n      [else (words-in-sentence-iter (rest sentence))]))\n  (string-join\
    \ (words-in-sentence-iter (string-split sentence #\\space)) \" \"))\n", "  (string-join\
    \ (filter (lambda (word) (prime? (string-length word)))\n                    \
    \   (string-split sentence #\\space))\n               \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (if (> i (/ n 2))\n          #t\n          (if\
    \ (= (modulo n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (is-prime-word? word)\n    (is-prime? (string-length word)))\n\
    \  (define (iter words)\n    (if (null? words)\n        \"\"\n        (if (is-prime-word?\
    \ (car words))\n            (string-append (car words) \" \" (iter (cdr words)))\n\
    \            (iter (cdr words)))))\n  (iter (string-split sentence #\\space)))\n",
  "  (string-join\n   (filter\n    (lambda (word)\n      (prime? (string-length word)))\n\
    \    (string-split sentence #\\space))\n   #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (filter-prime-lengths word-lengths)\n    (filter is-prime? word-lengths))\n\
    \  (define (filter-prime-words sentence word-lengths)\n    (define (iter word-lengths)\n\
    \      (cond\n        [(empty? word-lengths) empty]\n        [(= (string-length\
    \ (first sentence)) (first word-lengths))\n         (cons (first sentence) (iter\
    \ (rest word-lengths)))]\n        [else (iter (rest word-lengths))]))\n    (iter\
    \ word-lengths))\n  (define (join-words words)\n    (string-join words #\\space))\n\
    \  (define (sentence->words sentence)\n    (string-split sentence #\\space))\n\
    \  (define (words->sentence words)\n    (string-join words #\\space))\n  (define\
    \ (main sentence)\n    (words->sentence\n     (filter-prime-words\n      (sentence->words\
    \ sentence)\n      (filter-prime-lengths\n       (word-lengths sentence)))))\n\
    \  (main sentence))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null? words)\
    \ '())\n          ((is-prime? (string-length (car words)))\n           (cons (car\
    \ words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (iter (cdr sentence))))\n\
    \          (else (iter (cdr sentence)))))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (word-lengths lst)\n\
    \    (cond ((null? lst) '())\n          ((is-prime? (string-length (car lst)))\n\
    \           (cons (car lst) (word-lengths (cdr lst))))\n          (else (word-lengths\
    \ (cdr lst)))))\n  (string-join (word-lengths (string-split sentence #\\space))\
    \ \" \"))\n", "  (string-join\n   (filter\n    (lambda (word)\n      (prime? (string-length\
    \ word)))\n    (string-split sentence #\\space))\n   #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (define (iter\
    \ words lengths)\n      (cond ((null? words) '())\n            ((member (string-length\
    \ (car words)) lengths)\n             (cons (car words) (iter (cdr words) lengths)))\n\
    \            (else (iter (cdr words) lengths))))\n    (iter (string-split sentence\
    \ #\\space) (prime-word-lengths sentence)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (iter lst)\n    (cond\n      [(empty? lst)\
    \ '()]\n      [(is-prime? (string-length (first lst)))\n       (cons (first lst)\
    \ (iter (rest lst)))]\n      [else (iter (rest lst))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond\n        [(= i n) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-helper n (+ i 1))]))\n    (is-prime-helper\
    \ n 2))\n  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n    \
    \   (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n    \
    \  [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (cond\n\
    \      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #f]\n\
    \      [(= n 5) #t]\n      [(= n 6) #f]\n      [(= n 7) #t]\n      [(= n 8) #f]\n\
    \      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #t]\n      [(= n 12)\
    \ #f]\n      [(= n 13) #t]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(=\
    \ n 16) #f]\n      [(= n 17) #t]\n      [(= n 18) #f]\n      [(= n 19) #t]\n \
    \     [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23)\
    \ #t]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(=\
    \ n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #t]\n      [(= n 30) #f]\n \
    \     [(= n 31) #t]\n      [(= n 32) #f]\n      [(= n 33) #f]\n      [(= n 34)\
    \ #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #t]\n      [(=\
    \ n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #t]\n \
    \     [(= n 42) #f]\n      [(= n 43) #t]\n      [(= n 44) #f]\n      [(= n 45)\
    \ #f]\n      [(= n 46) #f]\n      [(= n 47) #t]\n      [(= n 48) #f]\n      [(=\
    \ n 49) #f]\n      [(= n 50) #f", "  (define (is-prime? n)\n    (cond\n      [(=\
    \ n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define\
    \ (iter i)\n         (cond\n           [(= i n) #t]\n           [(= (modulo n\
    \ i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime? (string-length\
    \ (first words)))\n       (cons (first words) (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(> i (sqrt n)) #t]\n           [(= (remainder\
    \ n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime? (string-length\
    \ (first words)))\n       (cons (first words) (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (word-lengths-to-words sentence)\n\
    \    (define (iter i)\n      (cond ((= i (string-length sentence)) '())\n    \
    \        ((= (string-ref sentence i) #\\space) (cons (substring sentence 0 i)\
    \ (iter (+ i 1))))\n            (else (iter (+ i 1)))))\n    (iter 0))\n  (define\
    \ (filter-prime-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (filter-prime-words sentence)\n    (filter (lambda (w) (member (string-length\
    \ w) (filter-prime-lengths sentence))) (word-lengths-to-words sentence)))\n  (string-join\
    \ (filter-prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (words-in-sentence-helper (cdr sentence))))\n   \
    \       (else (words-in-sentence-helper (cdr sentence)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond\n    \
    \  [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n\
    \      [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter\
    \ words)\n    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length\
    \ (first words)))\n       (cons (first words) (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (filter-prime-lengths word-lengths)\n\
    \    (filter is-prime? word-lengths))\n  (define (filter-prime-words sentence\
    \ word-lengths)\n    (define (iter words lengths)\n      (cond ((null? words)\
    \ '())\n            ((member (string-length (car words)) lengths)\n          \
    \   (cons (car words) (iter (cdr words) lengths)))\n            (else (iter (cdr\
    \ words) lengths))))\n    (iter (string-split sentence #\\space) word-lengths))\n\
    \  (define (join-words words)\n    (string-join words #\\space))\n  (join-words\
    \ (filter-prime-words sentence (filter-prime-lengths (word-lengths sentence)))))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (for/list ([word (in-list (string-split\
    \ sentence #\\space))])\n      (string-length word)))\n  (define (prime-word-lengths\
    \ sentence)\n    (for/list ([word-length (in-list (word-lengths sentence))])\n\
    \      (if (is-prime? word-length)\n          word-length\n          #f)))\n \
    \ (define (prime-words sentence)\n    (for/list ([word (in-list (string-split\
    \ sentence #\\space))]\n               [word-length (in-list (prime-word-lengths\
    \ sentence))])\n      (if (= (string-length word) word-length)\n          word\n\
    \          #f)))\n  (string-join (prime-words sentence) #\\space))\n", "  (define\
    \ (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder\
    \ n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n        \
    \   [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter\
    \ (+ i 1))]))\n       (iter 3)]))\n  (define (iter sentence)\n    (cond\n    \
    \  [(empty? sentence) empty]\n      [(prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (iter (rest sentence)))]\n      [else (iter (rest\
    \ sentence))]))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (cond\n      [(< n 2) #f]\n      [(= n 2)\
    \ #t]\n      [(even? n) #f]\n      [else\n       (define (is-divisible? n d)\n\
    \         (= (remainder n d) 0))\n       (define (next-divisor n d)\n        \
    \ (cond\n           [(> (* d d) n) n]\n           [(is-divisible? n d) #f]\n \
    \          [else (next-divisor n (+ d 2))]))\n       (next-divisor n 3)]))\n \
    \ (define (prime-words sentence)\n    (cond\n      [(empty? sentence) '()]\n \
    \     [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (word-lengths-to-primes word-lengths)\n    (filter\
    \ is-prime? word-lengths))\n  (define (primes-to-words primes)\n    (map (lambda\
    \ (prime)\n           (list-ref (string-split sentence #\\space) prime))\n   \
    \       primes))\n  (define (words-to-sentence words)\n    (string-join words\
    \ #\\space))\n  (words-to-sentence (primes-to-words (word-lengths-to-primes (word-lengths\
    \ sentence)))))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n\
    \      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n \
    \           (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper n\
    \ (- n 1)))\n  (define (prime-words-helper sentence result)\n    (cond ((null?\
    \ sentence) result)\n          ((is-prime? (string-length (car sentence)))\n \
    \          (prime-words-helper (cdr sentence) (string-append result \" \" (car\
    \ sentence))))\n          (else (prime-words-helper (cdr sentence) result))))\n\
    \  (string-trim (prime-words-helper (string-split sentence) \"\")))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (iter words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter sentence)\n    (if (null? sentence)\n\
    \        '()\n        (let ((word (car sentence))\n              (rest (cdr sentence)))\n\
    \          (if (is-prime? (string-length word))\n              (cons word (iter\
    \ rest))\n              (iter rest)))))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths lst)\n    (cond\n\
    \      [(empty? lst) empty]\n      [else (cons (string-length (first lst)) (word-lengths\
    \ (rest lst)))]))\n  (define (prime-words lst)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(is-prime? (first lst)) (cons (first lst) (prime-words (rest\
    \ lst)))]\n      [else (prime-words (rest lst))]))\n  (define (prime-words-in-sentence\
    \ lst)\n    (cond\n      [(empty? lst) empty]\n      [(is-prime? (string-length\
    \ (first lst))) (cons (first lst) (prime-words-in-sentence (rest lst)))]\n   \
    \   [else (prime-words-in-sentence (rest lst))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (word-at-index sentence i)\n    (list-ref (string-split sentence #\\space) i))\n\
    \  (define (word-at-index-is-prime? sentence i)\n    (is-prime? (string-length\
    \ (word-at-index sentence i))))\n  (define (words-at-indexes-are-prime? sentence\
    \ indexes)\n    (for/and ([i indexes])\n      (word-at-index-is-prime? sentence\
    \ i)))\n  (define (indexes-of-prime-words sentence)\n    (for/list ([i (in-range\
    \ (string-length sentence))])\n      (if (word-at-index-is-prime? sentence i)\
    \ i)))\n  (define (prime-words-in-sentence sentence)\n    (for/list ([i (indexes-of-prime-words\
    \ sentence)])\n      (word-at-index sentence i)))\n  (string-join (prime-words-in-sentence\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter sentence)\n    (cond\n\
    \      [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (iter (rest sentence)))]\n      [else (iter (rest\
    \ sentence))]))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (+ i 1))]))\n    (is-prime-helper n 2))\n  (define (words-in-sentence-helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) result)]))\n  (words-in-sentence-helper (string-split sentence)\
    \ \"\"))\n", "  (define (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n\
    \ 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(= i n) #t]\n           [(= (remainder n i)\
    \ 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter\
    \ sentence)\n    (if (empty? sentence)\n        \"\"\n        (let ([word (first\
    \ sentence)])\n          (if (prime? (string-length word))\n              (string-append\
    \ word \" \" (iter (rest sentence)))\n              (iter (rest sentence))))))\n\
    \  (string-trim (iter (string-split sentence #\\space))))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (filter-prime-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (filter-prime-words sentence)\n    (filter (lambda (word)\n\
    \              (member (string-length word)\n                      (filter-prime-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (filter-prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n divisor)\n      (cond\n        [(= divisor 1) #t]\n     \
    \   [(= (modulo n divisor) 0) #f]\n        [else (is-prime-helper n (- divisor\
    \ 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\n      \
    \  [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is-prime (string-length (first words)))\n       (cons (first words) (iter\
    \ (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (word-lengths-to-words\
    \ sentence)\n    (map (lambda (w) (list-ref (string-split sentence #\\space) w))\n\
    \         (enumerate (word-lengths sentence))))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-word-lengths-to-words\
    \ sentence)\n    (map (lambda (w) (list-ref (string-split sentence #\\space) w))\n\
    \         (enumerate (prime-word-lengths sentence))))\n  (string-join (prime-word-lengths-to-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper? n (- i 1))]))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (first sentence)))\n   \
    \    (words-in-sentence-helper (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-helper (rest sentence) result)]))\n\
    \  (words-in-sentence-helper (string-split sentence #\\space) \"\"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (filter (lambda (word)\n              (is-prime?\
    \ (string-length word)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((> i\
    \ (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n            (else (loop\
    \ (+ i 1)))))\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          (else\
    \ (loop 2))))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word)\n           (list-ref (string-split sentence) word))\n          (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (helper i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (helper (+ i 1)))))\n    (helper 2))\n  (define\
    \ (helper lst)\n    (cond ((null? lst) '())\n          ((is-prime? (string-length\
    \ (car lst))) (cons (car lst) (helper (cdr lst))))\n          (else (helper (cdr\
    \ lst)))))\n  (string-join (helper (string-split sentence #\\space)) \" \"))\n",
  "  (string-join\n   (filter\n    (lambda (word)\n      (prime? (string-length word)))\n\
    \    (string-split sentence #\\space))\n   #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n  \
    \      [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n\
    \    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter sentence result)\n\
    \    (cond\n      [(empty? sentence) result]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-iter (rest sentence) (string-append\
    \ result (first sentence) \" \"))]\n      [else (words-in-sentence-iter (rest\
    \ sentence) result)]))\n  (words-in-sentence-iter (string-split sentence) \"\"\
    ))\n", "  (define (is-prime? n)\n    (define (divides? a b) (= (remainder b a)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (define\
    \ (is-prime-word? word)\n    (is-prime? (string-length word)))\n  (string-join\
    \ (filter is-prime-word? (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words)\n    (if (null? words)\n        '()\n        (if (is-prime?\
    \ (string-length (car words)))\n            (cons (car words) (iter (cdr words)))\n\
    \            (iter (cdr words)))))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (word-at-index sentence\
    \ i)\n    (list-ref (string-split sentence #\\space) i))\n  (define (word-is-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (prime-words\
    \ sentence)\n    (filter word-is-prime? (word-lengths sentence)))\n  (define (prime-word-at-index\
    \ sentence i)\n    (word-at-index sentence i))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (map prime-word-at-index sentence (prime-words sentence)))\n\
    \  (string-join (prime-words-in-sentence sentence) #\\space))\n", "  (define (is-prime\
    \ n)\n    (define (is-prime-iter n i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-iter n (+ i 1)))))\n    (is-prime-iter\
    \ n 2))\n  (define (words-in-sentence-iter sentence result)\n    (cond ((null?\
    \ sentence) result)\n          ((is-prime (string-length (car sentence)))\n  \
    \         (words-in-sentence-iter (cdr sentence) (string-append result \" \" (car\
    \ sentence))))\n          (else (words-in-sentence-iter (cdr sentence) result))))\n\
    \  (words-in-sentence-iter (string-split sentence) \"\"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n  \
    \      [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n\
    \    (is-prime-iter? n (- n 1)))\n  (define (is-prime-word? word)\n    (is-prime?\
    \ (string-length word)))\n  (define (prime-words-in-sentence sentence)\n    (define\
    \ (prime-words-in-sentence-iter sentence acc)\n      (cond\n        [(empty? sentence)\
    \ acc]\n        [(is-prime-word? (first sentence))\n         (prime-words-in-sentence-iter\
    \ (rest sentence) (append acc (list (first sentence))))]\n        [else (prime-words-in-sentence-iter\
    \ (rest sentence) acc)]))\n    (prime-words-in-sentence-iter sentence '()))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (word-lengths sentence)\n    (map (lambda (word)\
    \ (string-length word))\n         (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (map (lambda (word) (list-ref (string-split\
    \ sentence #\\space) word))\n         (prime-word-lengths sentence)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
