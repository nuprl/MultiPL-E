name: HumanEval_143_words_in_sentence
language: rkt
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; >>> (words_in_sentence \"This is a test\")\n;; \"\
  is\"\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n\
  ;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters\n(define (words_in_sentence\
  \ sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) result)]))\n  (string-trim (words-in-sentence-helper (string-split\
    \ sentence #\\space) \"\")))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (word-at-index sentence\
    \ i)\n    (list-ref (string-split sentence #\\space) i))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-word-at-index\
    \ sentence i)\n    (word-at-index sentence i))\n  (define (prime-words sentence)\n\
    \    (map (lambda (i) (prime-word-at-index sentence i))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper? n divisor)\n      (cond ((= divisor 1) #t)\n\
    \            ((= (modulo n divisor) 0) #f)\n            (else (is-prime-helper?\
    \ n (- divisor 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n     \
    \ (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else (is-prime-helper\
    \ n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (word) (string-ref\
    \ word 0))\n         (filter (lambda (word) (is-prime? (string-length word)))\n\
    \                 (string-split sentence #\\space))))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (string-join\n   (filter\n    (lambda (word)\n    \
    \  (prime? (string-length word)))\n    (string-split sentence #\\space))\n   #\\\
    space))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(> i (/ n 2)) #t]\n           [(= (modulo n i) 0) #f]\n\
    \           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n\
    \    (iter (/ n 2)))\n  (define (iter sentence)\n    (if (empty? sentence)\n \
    \       '()\n        (let ([word (first sentence)])\n          (if (is-prime?\
    \ (string-length word))\n              (cons word (iter (rest sentence)))\n  \
    \            (iter (rest sentence))))))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null?\
    \ words) '())\n          ((is-prime? (string-length (car words)))\n          \
    \ (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper n (-\
    \ i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (word-lengths-are-prime?\
    \ sentence)\n    (define (word-lengths-are-prime-helper sentence)\n      (cond\
    \ ((null? sentence) #t)\n            ((is-prime? (string-length (car sentence)))\n\
    \             (word-lengths-are-prime-helper (cdr sentence)))\n            (else\
    \ #f)))\n    (word-lengths-are-prime-helper (string-split sentence #\\space)))\n\
    \  (define (get-prime-words sentence)\n    (define (get-prime-words-helper sentence)\n\
    \      (cond ((null? sentence) '())\n            ((is-prime? (string-length (car\
    \ sentence)))\n             (cons (car sentence) (get-prime-words-helper (cdr\
    \ sentence))))\n            (else (get-prime-words-helper (cdr sentence)))))\n\
    \    (get-prime-words-helper (string-split sentence #\\space)))\n  (string-join\
    \ (get-prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (word-at-index\
    \ sentence i)\n    (list-ref (string-split sentence #\\space) i))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (i) (word-at-index sentence i))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (define (prime-word-indexes\
    \ sentence)\n      (map (lambda (length)\n             (define (index-of-word-with-length\
    \ sentence length)\n               (define (iter i)\n                 (cond ((=\
    \ (string-length (string-split sentence #\\space i)) length) i)\n            \
    \           (else (iter (+ i 1)))))\n               (iter 0))\n             (index-of-word-with-length\
    \ sentence length))\n           (prime-word-lengths sentence)))\n    (define (word-at-index\
    \ sentence index)\n      (string-split sentence #\\space index))\n    (map (lambda\
    \ (index) (word-at-index sentence index))\n         (prime-word-indexes sentence)))\n\
    \  (string-join (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-helper n (+ i 1)))))\n    (is-prime-helper\
    \ n 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word)) (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (word) (list-ref (string-split sentence #\\space) word))\n \
    \        (filter (lambda (word) (member (list-ref (word-lengths sentence) word)\n\
    \                                        (prime-lengths sentence)))\n        \
    \         (build-list (length (string-split sentence #\\space))\n            \
    \                 (lambda (i) i)))))\n  (string-join (prime-words sentence) #\\\
    space))\n", "  (string-join\n   (filter (\u03BB (word)\n             (prime? (string-length\
    \ word)))\n           (string-split sentence #\\space))\n   #\\space))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (iter words)\n    (cond ((null? words) '())\n         \
    \ ((is-prime? (string-length (car words)))\n           (cons (car words) (iter\
    \ (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (iter (cdr sentence))))\n\
    \          (else (iter (cdr sentence)))))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(=\
    \ n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define\
    \ (iter i)\n         (cond\n           [(= i n) #t]\n           [(= (modulo n\
    \ i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (iter lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(is-prime? (string-length\
    \ (first lst)))\n       (iter (rest lst) (append acc (list (first lst))))]\n \
    \     [else (iter (rest lst) acc)]))\n  (string-join (iter (string-split sentence\
    \ #\\space) '()) #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-words sentence)\n    (cond\
    \ ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n    \
    \      (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (cond\n  \
    \    [(empty? sentence) acc]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-iter (rest sentence) (string-append acc (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-iter (rest sentence) acc)]))\n  (string-trim\
    \ (words-in-sentence-iter (string-split sentence #\\space) \"\")))\n", "  (define\
    \ (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= (remainder\
    \ n 2) 0) #f)\n          (else\n           (let loop ((i 3))\n             (cond\
    \ ((&gt; i (sqrt n)) #t)\n                   ((= (remainder n i) 0) #f)\n    \
    \               (else (loop (+ i 2))))))))\n  (define (prime-words sentence)\n\
    \    (cond ((null? sentence) '())\n          ((prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n</code>\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
