name: HumanEval_143_words_in_sentence
language: rkt
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; >>> (words_in_sentence \"This is a test\")\n;; \"\
  is\"\n;; >>> (words_in_sentence \"lets go for swimming\")\n;; \"go for\"\n;; Constraints:\n\
  ;; * 1 <= len(sentence) <= 100\n;; * sentence contains only letters\n(define (words_in_sentence\
  \ sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (words-in-sentence-helper (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) result)]))\n  (string-trim (words-in-sentence-helper (string-split\
    \ sentence #\\space) \"\")))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (word-at-index sentence\
    \ i)\n    (list-ref (string-split sentence #\\space) i))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-word-at-index\
    \ sentence i)\n    (word-at-index sentence i))\n  (define (prime-words sentence)\n\
    \    (map (lambda (i) (prime-word-at-index sentence i))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper? n divisor)\n      (cond ((= divisor 1) #t)\n\
    \            ((= (modulo n divisor) 0) #f)\n            (else (is-prime-helper?\
    \ n (- divisor 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n     \
    \ (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else (is-prime-helper\
    \ n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (word) (string-ref\
    \ word 0))\n         (filter (lambda (word) (is-prime? (string-length word)))\n\
    \                 (string-split sentence #\\space))))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (string-join\n   (filter\n    (lambda (word)\n    \
    \  (prime? (string-length word)))\n    (string-split sentence #\\space))\n   #\\\
    space))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(> i (/ n 2)) #t]\n           [(= (modulo n i) 0) #f]\n\
    \           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n\
    \    (iter (/ n 2)))\n  (define (iter sentence)\n    (if (empty? sentence)\n \
    \       '()\n        (let ([word (first sentence)])\n          (if (is-prime?\
    \ (string-length word))\n              (cons word (iter (rest sentence)))\n  \
    \            (iter (rest sentence))))))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null?\
    \ words) '())\n          ((is-prime? (string-length (car words)))\n          \
    \ (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper n (-\
    \ i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (word-lengths-are-prime?\
    \ sentence)\n    (define (word-lengths-are-prime-helper sentence)\n      (cond\
    \ ((null? sentence) #t)\n            ((is-prime? (string-length (car sentence)))\n\
    \             (word-lengths-are-prime-helper (cdr sentence)))\n            (else\
    \ #f)))\n    (word-lengths-are-prime-helper (string-split sentence #\\space)))\n\
    \  (define (get-prime-words sentence)\n    (define (get-prime-words-helper sentence)\n\
    \      (cond ((null? sentence) '())\n            ((is-prime? (string-length (car\
    \ sentence)))\n             (cons (car sentence) (get-prime-words-helper (cdr\
    \ sentence))))\n            (else (get-prime-words-helper (cdr sentence)))))\n\
    \    (get-prime-words-helper (string-split sentence #\\space)))\n  (string-join\
    \ (get-prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (word-at-index\
    \ sentence i)\n    (list-ref (string-split sentence #\\space) i))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (i) (word-at-index sentence i))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (define (prime-word-indexes\
    \ sentence)\n      (map (lambda (length)\n             (define (index-of-word-with-length\
    \ sentence length)\n               (define (iter i)\n                 (cond ((=\
    \ (string-length (string-split sentence #\\space i)) length) i)\n            \
    \           (else (iter (+ i 1)))))\n               (iter 0))\n             (index-of-word-with-length\
    \ sentence length))\n           (prime-word-lengths sentence)))\n    (define (word-at-index\
    \ sentence index)\n      (string-split sentence #\\space index))\n    (map (lambda\
    \ (index) (word-at-index sentence index))\n         (prime-word-indexes sentence)))\n\
    \  (string-join (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-helper n (+ i 1)))))\n    (is-prime-helper\
    \ n 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word)) (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (word) (list-ref (string-split sentence #\\space) word))\n \
    \        (filter (lambda (word) (member (list-ref (word-lengths sentence) word)\n\
    \                                        (prime-lengths sentence)))\n        \
    \         (build-list (length (string-split sentence #\\space))\n            \
    \                 (lambda (i) i)))))\n  (string-join (prime-words sentence) #\\\
    space))\n", "  (string-join\n   (filter (\u03BB (word)\n             (prime? (string-length\
    \ word)))\n           (string-split sentence #\\space))\n   #\\space))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (iter words)\n    (cond ((null? words) '())\n         \
    \ ((is-prime? (string-length (car words)))\n           (cons (car words) (iter\
    \ (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (iter (cdr sentence))))\n\
    \          (else (iter (cdr sentence)))))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(=\
    \ n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define\
    \ (iter i)\n         (cond\n           [(= i n) #t]\n           [(= (modulo n\
    \ i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (iter lst acc)\n    (cond\n      [(empty? lst) acc]\n      [(is-prime? (string-length\
    \ (first lst)))\n       (iter (rest lst) (append acc (list (first lst))))]\n \
    \     [else (iter (rest lst) acc)]))\n  (string-join (iter (string-split sentence\
    \ #\\space) '()) #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-words sentence)\n    (cond\
    \ ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n    \
    \      (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (cond\n  \
    \    [(empty? sentence) acc]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-iter (rest sentence) (string-append acc (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-iter (rest sentence) acc)]))\n  (string-trim\
    \ (words-in-sentence-iter (string-split sentence #\\space) \"\")))\n", "  (define\
    \ (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= (remainder\
    \ n 2) 0) #f)\n          (else\n           (let loop ((i 3))\n             (cond\
    \ ((&gt; i (sqrt n)) #t)\n                   ((= (remainder n i) 0) #f)\n    \
    \               (else (loop (+ i 2))))))))\n  (define (prime-words sentence)\n\
    \    (cond ((null? sentence) '())\n          ((prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n</code>\n", "  (define (is-prime? n)\n    (define (helper\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper lst)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(is-prime? (string-length (first\
    \ lst))) (cons (first lst) (helper (rest lst)))]\n      [else (helper (rest lst))]))\n\
    \  (string-join (helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper n (-\
    \ i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (word-lengths lst)\n \
    \   (cond ((null? lst) '())\n          (else (cons (string-length (car lst)) (word-lengths\
    \ (cdr lst))))))\n  (define (prime-words lst)\n    (cond ((null? lst) '())\n \
    \         ((is-prime? (car lst)) (cons (car lst) (prime-words (cdr lst))))\n \
    \         (else (prime-words (cdr lst)))))\n  (define (prime-words-in-sentence\
    \ lst)\n    (cond ((null? lst) '())\n          ((member (string-length (car lst))\
    \ (prime-words (word-lengths lst)))\n           (cons (car lst) (prime-words-in-sentence\
    \ (cdr lst))))\n          (else (prime-words-in-sentence (cdr lst)))))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (is-prime-length? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (prime-words sentence)\n    (filter is-prime-length? (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words sentence) #\\space))\n", " \
    \ (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n \
    \     [(even? n) #f]\n      [else\n       (define (is-divisible? n d)\n      \
    \   (if (= d 1)\n             #f\n             (if (= (remainder n d) 0)\n   \
    \              #t\n                 (is-divisible? n (- d 1)))))\n       (is-divisible?\
    \ n (- n 1))]))\n  (define (prime-words sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n \
    \     [(even? n) #f]\n      [else\n       (define (is-prime-helper n d)\n    \
    \     (cond\n           [(= d 1) #t]\n           [(= (modulo n d) 0) #f]\n   \
    \        [else (is-prime-helper n (- d 1))]))\n       (is-prime-helper n (- n\
    \ 1))]))\n  (define (prime-words-helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (first sentence)))\n   \
    \    (prime-words-helper (rest sentence) (append result (list (first sentence))))]\n\
    \      [else (prime-words-helper (rest sentence) result)]))\n  (string-join (prime-words-helper\
    \ (string-split sentence #\\space) '()) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (w) (list-ref (string-split sentence #\\space) w))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join prime-words #\\space))\n", "  (define (is-prime?\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else\n           (let loop ((i 3))\n             (cond ((= i n) #t)\n\
    \                   ((= (remainder n i) 0) #f)\n                   (else (loop\
    \ (+ i 2))))))))\n  (define (prime-words sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((is-prime? (string-length (car sentence)))\n           (cons\
    \ (car sentence) (prime-words (cdr sentence))))\n          (else (prime-words\
    \ (cdr sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n    \
    \  (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((> i (sqrt n)) #t)\n\
    \            ((is-divisible? n i) #f)\n            (else (loop (+ i 1)))))\n \
    \   (loop 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (is-prime-length?\
    \ word)\n    (is-prime? (string-length word)))\n  (define (prime-words sentence)\n\
    \    (filter is-prime-length? (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((= i\
    \ n) #t)\n            ((is-divisible? n i) #f)\n            (else (loop (+ i 1)))))\n\
    \    (loop 2))\n  (define (loop words)\n    (cond ((null? words) '())\n      \
    \    ((is-prime? (string-length (car words)))\n           (cons (car words) (loop\
    \ (cdr words))))\n          (else (loop (cdr words)))))\n  (string-join (loop\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((is-prime? (string-length (car sentence)))\n           (cons\
    \ (car sentence) (iter (cdr sentence))))\n          (else (iter (cdr sentence)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (is-prime-word? word)\n    (is-prime? (string-length word)))\n  (define (prime-words\
    \ sentence)\n    (filter is-prime-word? (string-split sentence #\\space)))\n \
    \ (string-join (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n d)\n      (cond ((= d 1) #t)\n            ((=\
    \ (modulo n d) 0) #f)\n            (else (is-prime-helper n (- d 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (n) (list-ref (string-split sentence #\\space) n))\n         (filter is-prime?\
    \ (word-lengths sentence))))\n  (string-join (prime-words sentence) \" \"))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (prime-words-in-sentence sentence)\n    (define (iter words)\n\
    \      (cond ((null? words) '())\n            ((is-prime? (string-length (car\
    \ words)))\n             (cons (car words) (iter (cdr words))))\n            (else\
    \ (iter (cdr words)))))\n    (iter (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words-in-sentence sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-prime-word?\
    \ word)\n    (is-prime? (string-length word)))\n  (define (prime-words words)\n\
    \    (cond ((null? words) '())\n          ((is-prime-word? (car words)) (cons\
    \ (car words) (prime-words (cdr words))))\n          (else (prime-words (cdr words)))))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper\
    \ n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (iter lst)\n    (cond ((null? lst) '())\n          ((is-prime?\
    \ (string-length (car lst)))\n           (cons (car lst) (iter (cdr lst))))\n\
    \          (else (iter (cdr lst)))))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n\
    \      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (is-divisible?\
    \ n divisor)\n         (cond\n           [(= divisor 1) #f]\n           [(= (modulo\
    \ n divisor) 0) #t]\n           [else (is-divisible? n (- divisor 1))]))\n   \
    \    (is-divisible? n (- n 1))]))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word)\n              (member (string-length\
    \ word) (prime-word-lengths sentence)))\n            (string-split sentence #\\\
    space)))\n  (string-join prime-words #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length\
    \ (first words)))\n       (cons (first words) (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words)\
    \ empty]\n      [(is-prime? (string-length (first words)))\n       (cons (first\
    \ words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (string-join\n   (filter\n\
    \    (lambda (word)\n      (prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (cond\n      [(=\
    \ n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (let\
    \ loop ([i 3])\n         (cond\n           [(= i n) #t]\n           [(= (remainder\
    \ n i) 0) #f]\n           [else (loop (+ i 2))]))]))\n  (define (prime-words sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(=\
    \ n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n\
    \       (let loop ([i 3])\n         (cond\n           [(= i n) #t]\n         \
    \  [(= (remainder n i) 0) #f]\n           [else (loop (+ i 2))]))]))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (prime-words-in-sentence (rest sentence)))]\n      [else (prime-words-in-sentence\
    \ (rest sentence))]))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n  \
    \        ((= n 2) #t)\n          ((even? n) #f)\n          (else\n           (define\
    \ (iter i)\n             (cond ((> i (sqrt n)) #t)\n                   ((= (modulo\
    \ n i) 0) #f)\n                   (else (iter (+ i 1)))))\n           (iter 3))))\n\
    \  (define (is-prime-word? word)\n    (is-prime? (string-length word)))\n  (define\
    \ (prime-words words)\n    (cond ((null? words) '())\n          ((is-prime-word?\
    \ (car words))\n           (cons (car words) (prime-words (cdr words))))\n   \
    \       (else (prime-words (cdr words)))))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) #\\space))\n", "  (define (is-prime? n)\n    (define (helper\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (helper (- i 1)))))\n    (helper (- n 1)))\n  (define (helper sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (helper (cdr sentence))))\n          (else (helper\
    \ (cdr sentence)))))\n  (string-join (helper (string-split sentence #\\space))\
    \ \" \"))\n", "  (string-join\n   (filter\n    (lambda (word)\n      (prime? (string-length\
    \ word)))\n    (string-split sentence #\\space))\n   #\\space))\n", "  (string-join\n\
    \   (filter\n    (lambda (word)\n      (prime? (string-length word)))\n    (string-split\
    \ sentence #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (define (iter words)\n      (cond\n        [(empty? words) empty]\n\
    \        [(is-prime? (string-length (first words)))\n         (cons (first words)\
    \ (iter (rest words)))]\n        [else (iter (rest words))]))\n    (iter (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words-in-sentence sentence) #\\\
    space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper? n i)\n   \
    \   (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper? n (- i 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define\
    \ (words_in_sentence-helper sentence)\n    (define (words_in_sentence-helper-helper\
    \ sentence result)\n      (cond ((null? sentence) result)\n            ((is-prime?\
    \ (string-length (car sentence)))\n             (words_in_sentence-helper-helper\
    \ (cdr sentence) (string-append result (car sentence) \" \")))\n            (else\
    \ (words_in_sentence-helper-helper (cdr sentence) result))))\n    (words_in_sentence-helper-helper\
    \ sentence \"\"))\n  (string-trim (words_in_sentence-helper (string-split sentence\
    \ #\\space))))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (- n 1)))\n  (define (iter sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (iter (cdr sentence))))\n          (else (iter (cdr\
    \ sentence)))))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper (- i 1)))))\n\
    \    (helper (- n 1)))\n  (define (helper sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((is-prime? (string-length (car sentence)))\n           (cons\
    \ (car sentence) (helper (cdr sentence))))\n          (else (helper (cdr sentence)))))\n\
    \  (string-join (helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (iter divisor)\n      (cond ((> divisor (/ n 2)) #t)\n          \
    \  ((is-divisible? n divisor) #f)\n            (else (iter (+ divisor 1)))))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (word-at-index sentence index)\n    (list-ref\
    \ (string-split sentence #\\space) index))\n  (define (word-at-index-if-prime\
    \ sentence index)\n    (if (is-prime? (string-length (word-at-index sentence index)))\n\
    \        (word-at-index sentence index)\n        \"\"))\n  (string-join (map word-at-index-if-prime\
    \ (build-list (string-length sentence) (lambda (x) sentence)) (build-list (string-length\
    \ sentence) (lambda (x) x))) \" \"))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (is-prime-helper n (+ i 1))]))\n    (is-prime-helper\
    \ n 2))\n  (define (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-helper\
    \ sentence acc)\n      (cond\n        [(empty? sentence) acc]\n        [(is-prime?\
    \ (string-length (first sentence)))\n         (prime-words-in-sentence-helper\
    \ (rest sentence) (append acc (list (first sentence))))]\n        [else (prime-words-in-sentence-helper\
    \ (rest sentence) acc)]))\n    (prime-words-in-sentence-helper sentence '()))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (word-lengths lst)\n    (cond ((null? lst) '())\n\
    \          ((is-prime? (string-length (car lst)))\n           (cons (car lst)\
    \ (word-lengths (cdr lst))))\n          (else (word-lengths (cdr lst)))))\n  (string-join\
    \ (word-lengths (string-split sentence #\\space)) \" \"))\n", "  (string-join\n\
    \   (filter\n    (lambda (word)\n      (prime? (string-length word)))\n    (string-split\
    \ sentence #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n div)\n      (cond ((= div 1) #t)\n            ((= (modulo\
    \ n div) 0) #f)\n            (else (is-prime-helper n (- div 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (words-in-sentence-helper (cdr sentence))))\n   \
    \       (else (words-in-sentence-helper (cdr sentence)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is-prime-word?\
    \ word)\n    (is-prime? (string-length word)))\n  (define (prime-words words)\n\
    \    (cond\n      [(empty? words) empty]\n      [(is-prime-word? (first words))\n\
    \       (cons (first words) (prime-words (rest words)))]\n      [else (prime-words\
    \ (rest words))]))\n  (define (join words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(empty? (rest words)) (first words)]\n      [else (string-append (first\
    \ words) \" \" (join (rest words)))]))\n  (join (prime-words (string-split sentence\
    \ #\\space))))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (is-prime-word? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (iter words)\n    (cond ((null? words) \"\")\n          ((is-prime-word?\
    \ (car words))\n           (string-append (car words) \" \" (iter (cdr words))))\n\
    \          (else (iter (cdr words)))))\n  (iter (string-split sentence #\\space)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n      (cond\n     \
    \   [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n        [else (is-prime-helper\
    \ n (- d 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence \" \")) \" \"\
    ))\n", "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n\
    \          ((even? n) #f)\n          (else\n           (define (iter i)\n    \
    \         (cond ((> (* i i) n) #t)\n                   ((= (modulo n i) 0) #f)\n\
    \                   (else (iter (+ i 2)))))\n           (iter 3))))\n  (define\
    \ (prime-words words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (prime-words (cdr words))))\n  \
    \        (else (prime-words (cdr words)))))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n d)\n      (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n      \
    \      (else (is-prime-helper n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n        \
    \  ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (prime-words (cdr sentence))))\n          (else (prime-words (cdr sentence)))))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word)\n              (member (string-length\
    \ word)\n                      (prime-word-lengths sentence)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((=\
    \ (remainder n 2) 0) #f)\n          (else\n           (let loop ((i 3))\n    \
    \         (cond ((> (* i i) n) #t)\n                   ((= (remainder n i) 0)\
    \ #f)\n                   (else (loop (+ i 2))))))))\n  (string-join\n   (filter\n\
    \    (lambda (word)\n      (is-prime? (string-length word)))\n    (string-split\
    \ sentence #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (cond ((=\
    \ n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n\
    \           (let loop ((i 3))\n             (cond ((= i n) #t)\n             \
    \      ((= (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n\
    \  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n        \
    \  ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (prime-words (cdr sentence))))\n          (else (prime-words (cdr sentence)))))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (prime-words-in-sentence sentence)\n    (define (iter words)\n    \
    \  (cond\n        [(empty? words) empty]\n        [(is-prime? (string-length (first\
    \ words)))\n         (cons (first words) (iter (rest words)))]\n        [else\
    \ (iter (rest words))]))\n    (iter (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words-in-sentence sentence) #\\space))\n", "  (define (prime? n)\n  \
    \  (define (prime-helper n i)\n      (cond\n        [(= i n) #t]\n        [(zero?\
    \ (modulo n i)) #f]\n        [else (prime-helper n (+ i 1))]))\n    (prime-helper\
    \ n 2))\n  (define (prime-words-helper sentence acc)\n    (cond\n      [(empty?\
    \ sentence) (string-join (reverse acc) \" \")]\n      [(prime? (string-length\
    \ (first sentence)))\n       (prime-words-helper (rest sentence) (cons (first\
    \ sentence) acc))]\n      [else (prime-words-helper (rest sentence) acc)]))\n\
    \  (prime-words-helper (string-split sentence #\\space) '()))\n", "  (define (is-prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n\
    \      [else\n       (define (iter i)\n         (cond\n           [(= i n) #t]\n\
    \           [(= (modulo n i) 0) #f]\n           [else (iter (+ i 1))]))\n    \
    \   (iter 3)]))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (words-in-sentence-helper (cdr sentence))))\n   \
    \       (else (words-in-sentence-helper (cdr sentence)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words_in_sentence-helper sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (words_in_sentence-helper (cdr sentence))))\n   \
    \       (else (words_in_sentence-helper (cdr sentence)))))\n  (string-join (words_in_sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n\
    \    (cond ((null? words) '())\n          ((is-prime? (string-length (car words)))\n\
    \           (cons (car words) (iter (cdr words))))\n          (else (iter (cdr\
    \ words)))))\n  (string-join (iter (string-split sentence #\\space)) \" \"))\n",
  "  (string-join (filter (lambda (word) (is-prime? (string-length word)))\n     \
    \                  (string-split sentence #\\space))\n               #\\space))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (word-at-index sentence i)\n    (list-ref (string-split\
    \ sentence #\\space) i))\n  (define (prime-word-lengths sentence)\n    (filter\
    \ is-prime? (word-lengths sentence)))\n  (define (prime-word-at-index sentence\
    \ i)\n    (word-at-index sentence i))\n  (define (prime-words sentence)\n    (map\
    \ (lambda (i) (prime-word-at-index sentence i))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n          \
    \  ((= (modulo n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (word-lengths lst)\n    (cond ((null?\
    \ lst) '())\n          (else (cons (string-length (car lst)) (word-lengths (cdr\
    \ lst))))))\n  (define (prime-word-lengths lst)\n    (cond ((null? lst) '())\n\
    \          ((is-prime? (car lst)) (cons (car lst) (prime-word-lengths (cdr lst))))\n\
    \          (else (prime-word-lengths (cdr lst)))))\n  (define (prime-words lst)\n\
    \    (cond ((null? lst) '())\n          ((is-prime? (string-length (car lst)))\
    \ (cons (car lst) (prime-words (cdr lst))))\n          (else (prime-words (cdr\
    \ lst)))))\n  (string-join (prime-words (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n\
    \      [(= n 3) #t]\n      [(= n 4) #f]\n      [(= n 5) #t]\n      [(= n 6) #f]\n\
    \      [(= n 7) #t]\n      [(= n 8) #f]\n      [(= n 9) #f]\n      [(= n 10) #f]\n\
    \      [(= n 11) #t]\n      [(= n 12) #f]\n      [(= n 13) #t]\n      [(= n 14)\
    \ #f]\n      [(= n 15) #f]\n      [(= n 16) #f]\n      [(= n 17) #t]\n      [(=\
    \ n 18) #f]\n      [(= n 19) #t]\n      [(= n 20) #f]\n      [(= n 21) #f]\n \
    \     [(= n 22) #f]\n      [(= n 23) #t]\n      [(= n 24) #f]\n      [(= n 25)\
    \ #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(=\
    \ n 29) #t]\n      [(= n 30) #f]\n      [(= n 31) #t]\n      [(= n 32) #f]\n \
    \     [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36)\
    \ #f]\n      [(= n 37) #t]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(=\
    \ n 40) #f]\n      [(= n 41) #t]\n      [(= n 42) #f]\n      [(= n 43) #t]\n \
    \     [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47)\
    \ #t]\n      [(= n 48) #f]\n      [(= n 49) #f]\n      [(= n 50) #f", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n d)\n      (cond ((= d 1) #t)\n\
    \            ((= (modulo n d) 0) #f)\n            (else (is-prime-helper n (-\
    \ d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words)\n    (cond\n      [(empty? words) empty]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 2) #t]\n\
    \      [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n      [(= n 11) #t]\n\
    \      [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19) #t]\n      [(= n 23)\
    \ #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n      [(= n 37) #t]\n      [(=\
    \ n 41) #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n      [(= n 53) #t]\n \
    \     [(= n 59) #t]\n      [(= n 61) #t]\n      [(= n 67) #t]\n      [(= n 71)\
    \ #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n      [(= n 83) #t]\n      [(=\
    \ n 89) #t]\n      [(= n 97) #t]\n      [else #f]))\n  (define (prime-words sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence \" \")) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (i) (list-ref (string-split sentence #\\space) i))\n\
    \         (prime-word-lengths sentence)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n     \
    \    (cond\n           [(> i (sqrt n)) #t]\n           [(= (modulo n i) 0) #f]\n\
    \           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (is-prime-word? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (iter words)\n    (cond\n      [(empty? words) \"\"]\n  \
    \    [(is-prime-word? (first words))\n       (string-append (first words) \" \"\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (iter (string-split\
    \ sentence #\\space)))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((> i\
    \ (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n            (else (loop\
    \ (+ i 1)))))\n    (if (<= n 1) #f (loop 2)))\n  (define (prime-words sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ (lambda (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (filter (lambda (word)\n\
    \              (is-prime? (string-length word)))\n            (string-split sentence\
    \ #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (string-join\n\
    \   (filter\n    (lambda (word)\n      (is-prime? (string-length word)))\n   \
    \ (string-split sentence #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper\
    \ (+ i 1))]))\n    (helper 2))\n  (define (helper lst)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(is-prime? (string-length (first lst)))\n       (cons (first\
    \ lst) (helper (rest lst)))]\n      [else (helper (rest lst))]))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (string-join\n   (filter\n\
    \    (lambda (word)\n      (prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (word-lengths lst)\n\
    \    (cond\n      [(empty? lst) empty]\n      [else (cons (string-length (first\
    \ lst)) (word-lengths (rest lst)))]))\n  (define (filter-prime-lengths lst)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(is-prime? (first lst)) (cons (first\
    \ lst) (filter-prime-lengths (rest lst)))]\n      [else (filter-prime-lengths\
    \ (rest lst))]))\n  (define (filter-prime-words lst)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(is-prime? (string-length (first lst))) (cons (first lst)\
    \ (filter-prime-words (rest lst)))]\n      [else (filter-prime-words (rest lst))]))\n\
    \  (define (filter-prime-words-in-sentence lst)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(is-prime? (string-length (first lst))) (cons (first lst) (filter-prime-words-in-sentence\
    \ (rest lst)))]\n      [else (filter-prime-words-in-sentence (rest lst))]))\n\
    \  (define (join-words lst)\n    (cond\n      [(empty? lst) empty]\n      [(empty?\
    \ (rest lst)) (first lst)]\n      [else (string-append (first lst) \" \" (join-words\
    \ (rest lst)))]))\n  (join-words (filter-prime-words-in-sentence (string-split\
    \ sentence #\\space))))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime\
    \ n)\n    (define (is-prime-iter n i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-iter n (- i 1)))))\n    (is-prime-iter\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime (string-length (car sentence)))\n     \
    \      (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n     \
    \     (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond\n        [(= i n) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (is-prime-helper n (+ i 1))]))\n    (is-prime-helper\
    \ n 2))\n  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n    \
    \   (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n    \
    \  [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (string-join\n   (filter\n\
    \    (lambda (word)\n      (prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null?\
    \ words) '())\n          ((is-prime? (string-length (car words)))\n          \
    \ (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (helper i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (helper (- i 1))]))\n    (helper\
    \ (- n 1)))\n  (define (helper2 lst)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(is-prime? (string-length (first lst))) (cons (first lst) (helper2 (rest\
    \ lst)))]\n      [else (helper2 (rest lst))]))\n  (string-join (helper2 (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond ((= n 1)\
    \ #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n   \
    \        (let loop ((i 3))\n             (cond ((= i n) #t)\n                \
    \   ((= (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n\
    \  (define (prime-words-in-sentence sentence)\n    (cond ((empty? sentence) empty)\n\
    \          ((is-prime? (string-length (first sentence)))\n           (cons (first\
    \ sentence) (prime-words-in-sentence (rest sentence))))\n          (else (prime-words-in-sentence\
    \ (rest sentence)))))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (string-join\n   (filter\n    (lambda (word)\n   \
    \   (prime? (string-length word)))\n    (string-split sentence #\\space))\n  \
    \ #\\space))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n   \
    \   [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (for/and\
    \ ([i (in-range 3 (+ n 1) 2)])\n         (not (= (remainder n i) 0)))]))\n  (define\
    \ (word-lengths sentence)\n    (for/list ([word (in-list (string-split sentence))])\n\
    \      (string-length word)))\n  (define (prime-word-lengths sentence)\n    (for/list\
    \ ([word-length (in-list (word-lengths sentence))])\n      (if (is-prime? word-length)\n\
    \          word-length\n          #f)))\n  (define (prime-word-indexes sentence)\n\
    \    (for/list ([i (in-range (length (word-lengths sentence)))])\n      (if (is-prime?\
    \ (list-ref (word-lengths sentence) i))\n          i\n          #f)))\n  (define\
    \ (prime-words sentence)\n    (for/list ([i (in-list (prime-word-indexes sentence))])\n\
    \      (list-ref (string-split sentence) i)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n  \
    \    (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (+ i 1))]))\n    (is-prime-helper n 2))\n  (define (words-in-sentence-helper\
    \ sentence acc)\n    (cond\n      [(empty? sentence) acc]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-helper (rest sentence) (string-append\
    \ acc (first sentence) \" \"))]\n      [else (words-in-sentence-helper (rest sentence)\
    \ acc)]))\n  (substring (words-in-sentence-helper (string-split sentence #\\space)\
    \ \"\") 0 -1))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper\
    \ (+ i 1)))))\n    (helper 2))\n  (define (helper lst)\n    (cond ((null? lst)\
    \ '())\n          ((is-prime? (string-length (car lst))) (cons (car lst) (helper\
    \ (cdr lst))))\n          (else (helper (cdr lst)))))\n  (string-join (helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n d)\n      (cond ((= d 1) #t)\n            ((= (modulo\
    \ n d) 0) #f)\n            (else (is-prime-helper n (- d 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word) (member (string-length word) (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (string-join\n   (filter\n    (\u03BB\
    \ (word)\n      (prime? (string-length word)))\n    (string-split sentence #\\\
    space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond\n        [(= divisor 1) #t]\n        [(= (modulo n divisor)\
    \ 0) #f]\n        [else (is-prime-helper n (- divisor 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond\n     \
    \ [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words-in-sentence (rest sentence)))]\n \
    \     [else (prime-words-in-sentence (rest sentence))]))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n     \
    \     (else\n           (let loop ((i 3))\n             (cond ((= i n) #t)\n \
    \                  ((= (remainder n i) 0) #f)\n                   (else (loop\
    \ (+ i 2))))))))\n  (define (prime-words sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((is-prime? (string-length (car sentence)))\n           (cons\
    \ (car sentence) (prime-words (cdr sentence))))\n          (else (prime-words\
    \ (cdr sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime n)\n    (define (is-divisible? a b)\n     \
    \ (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((> i (/ n 2)) #t)\n\
    \            ((is-divisible? n i) #f)\n            (else (loop (+ i 1)))))\n \
    \   (loop 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (word) (list-ref (string-split sentence #\\space)\
    \ word))\n         (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (cond ((= i n) #t)\n            ((zero? (modulo n i)) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (word-indices sentence)\n\
    \    (map (lambda (x) (if (is-prime? x) x #f)) (word-lengths sentence)))\n  (define\
    \ (word-indices-to-words sentence)\n    (map (lambda (x) (if (not (equal? x #f))\
    \ (list-ref (string-split sentence #\\space) x) #f)) (word-indices sentence)))\n\
    \  (string-join (filter (lambda (x) (not (equal? x #f))) (word-indices-to-words\
    \ sentence)) \" \"))\n", "  (define (prime? n)\n    (define (prime-helper n i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (prime-helper n (- i 1))]))\n    (prime-helper n (- n 1)))\n  (define (word-lengths\
    \ lst)\n    (cond\n      [(empty? lst) empty]\n      [else (cons (string-length\
    \ (first lst)) (word-lengths (rest lst)))]))\n  (define (prime-words lst)\n  \
    \  (cond\n      [(empty? lst) empty]\n      [(prime? (first lst)) (cons (first\
    \ lst) (prime-words (rest lst)))]\n      [else (prime-words (rest lst))]))\n \
    \ (define (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-helper\
    \ sentence lst)\n      (cond\n        [(empty? sentence) lst]\n        [(empty?\
    \ (rest sentence)) (cons (first sentence) lst)]\n        [(string=? (first sentence)\
    \ \" \") (prime-words-in-sentence-helper (rest sentence) lst)]\n        [else\
    \ (prime-words-in-sentence-helper (rest sentence) (cons (first sentence) lst))]))\n\
    \    (prime-words-in-sentence-helper sentence empty))\n  (define (prime-words-in-sentence-helper\
    \ sentence lst)\n    (cond\n      [(empty? sentence) lst]\n      [(empty? (rest\
    \ sentence)) (cons (first sentence) lst)]\n      [(string=? (first sentence) \"\
    \ \") (prime-words-in-sentence-helper (rest sentence) lst)]\n      [else (prime-words-in-sentence-helper\
    \ (rest sentence) (cons (first sentence) lst))]))\n  (define (prime-words-in-sentence-helper\
    \ sentence lst)\n    (cond\n      [(empty? sentence) lst]\n      [(empty? (rest\
    \ sentence)) (cons (first sentence) lst)]", "  (define (is-prime? n)\n    (define\
    \ (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (is-prime-aux\
    \ n d)\n      (cond ((> d (sqrt n)) #t)\n            ((is-divisible? n d) #f)\n\
    \            (else (is-prime-aux n (+ d 1)))))\n    (is-prime-aux n 2))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence)))\n\
    \  (define (word-lengths-are-prime? sentence)\n    (map is-prime? (word-lengths\
    \ sentence)))\n  (define (words-with-prime-lengths sentence)\n    (filter (lambda\
    \ (x) (not (eq? x #f)))\n            (map (lambda (x y) (if x y #f))\n       \
    \          (word-lengths-are-prime? sentence)\n                 (string-split\
    \ sentence))))\n  (string-join (words-with-prime-lengths sentence) \" \"))\n",
  "  (define (is-prime? n)\n    (define (iter x)\n      (cond ((= x 1) #t)\n     \
    \       ((= (modulo n x) 0) #f)\n            (else (iter (- x 1)))))\n    (iter\
    \ (- n 1)))\n  (define (iter words)\n    (cond ((null? words) '())\n         \
    \ ((is-prime? (string-length (car words)))\n           (cons (car words) (iter\
    \ (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n d)\n      (cond ((= d 1) #t)\n            ((= (modulo\
    \ n d) 0) #f)\n            (else (is-prime-helper n (- d 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word) (is-prime? (string-length word))) (string-split sentence #\\space)))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ word)\n    (cond ((null? word) '())\n          ((is-prime? (string-length (car\
    \ word)))\n           (cons (car word) (iter (cdr word))))\n          (else (iter\
    \ (cdr word)))))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(=\
    \ i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (is-prime-word? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (iter words)\n    (cond\n      [(empty? words) \"\"]\n  \
    \    [(is-prime-word? (first words))\n       (string-append (first words) \" \"\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (iter (string-split\
    \ sentence #\\space)))\n", "  (define (is-prime? n)\n    (define (iter i)\n  \
    \    (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (word-indexes sentence)\n\
    \    (map (lambda (word-length)\n           (define (iter i)\n             (cond\
    \ ((= (string-length (string-ref sentence i)) word-length) i)\n              \
    \     (else (iter (+ i 1)))))\n           (iter 0))\n         (word-lengths sentence)))\n\
    \  (define (word-at-index sentence index)\n    (define (iter i)\n      (cond ((=\
    \ i index) (string-ref sentence i))\n            (else (string-append (string-ref\
    \ sentence i) (iter (+ i 1))))))\n    (iter 0))\n  (define (prime-word-indexes\
    \ sentence)\n    (filter (lambda (index) (is-prime? (string-length (word-at-index\
    \ sentence index))))\n            (word-indexes sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (index) (word-at-index sentence index))\n      \
    \   (prime-word-indexes sentence)))\n  (string-join (prime-words sentence) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word) (member (string-length word) (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (define (prime? n)\n    (cond\n      [(= n 1)\
    \ #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (loop\
    \ i)\n         (cond\n           [(= i n) #t]\n           [(= (modulo n i) 0)\
    \ #f]\n           [else (loop (+ i 1))]))\n       (loop 3)]))\n  (define (loop\
    \ words)\n    (cond\n      [(empty? words) empty]\n      [(prime? (string-length\
    \ (first words)))\n       (cons (first words) (loop (rest words)))]\n      [else\
    \ (loop (rest words))]))\n  (string-join (loop (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((=\
    \ n 2) #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i\
    \ 3))\n             (cond ((= i n) #t)\n                   ((= (remainder n i)\
    \ 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (is-prime-word?\
    \ word)\n    (is-prime? (string-length word)))\n  (define (prime-words words)\n\
    \    (cond ((null? words) '())\n          ((is-prime-word? (car words))\n    \
    \       (cons (car words) (prime-words (cdr words))))\n          (else (prime-words\
    \ (cdr words)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n    \
    \  (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((> i (sqrt n)) #t)\n\
    \            ((is-divisible? n i) #f)\n            (else (loop (+ i 1)))))\n \
    \   (loop 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word) (is-prime? (string-length word)))\n  \
    \          (string-split sentence #\\space)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n  \
    \    (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (cond ((null? sentence) '())\n    \
    \      ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (words-in-sentence-helper (cdr sentence))))\n          (else (words-in-sentence-helper\
    \ (cdr sentence)))))\n  (string-join (words-in-sentence-helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (prime? n)\n    (define (divisors n)\n   \
    \   (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo\
    \ n i)) i)))\n    (equal? (divisors n) '(1)))\n  (define (prime-words sentence)\n\
    \    (for/list ([word (in-list (string-split sentence #\\space))])\n      (if\
    \ (prime? (string-length word)) word)))\n  (string-join (prime-words sentence)\
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n\
    \      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n \
    \           (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper n\
    \ (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (words-in-sentence-helper (cdr sentence))))\n   \
    \       (else (words-in-sentence-helper (cdr sentence)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word)\n              (member (string-length word)\n                      (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((> i\
    \ (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n            (else (loop\
    \ (+ i 1)))))\n    (loop 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (filter-prime-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (filter-prime-words\
    \ sentence)\n    (filter (lambda (w) (member (string-length w) (filter-prime-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (filter-prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (loop i)\n      (cond ((> i (sqrt n)) #t)\n            ((is-divisible? n i)\
    \ #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word)\n              (is-prime? (string-length word)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (filter (lambda (word)\n\
    \              (is-prime? (string-length word)))\n            (string-split sentence\
    \ #\\space)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (iter sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (iter (cdr sentence))))\n\
    \          (else (iter (cdr sentence)))))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((> i\
    \ (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n            (else (loop\
    \ (+ i 1)))))\n    (loop 2))\n  (define (loop words)\n    (cond ((null? words)\
    \ '())\n          ((is-prime? (string-length (car words)))\n           (cons (car\
    \ words) (loop (cdr words))))\n          (else (loop (cdr words)))))\n  (string-join\
    \ (loop (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-length-words sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-length-words-in-sentence sentence)\n\
    \    (map (lambda (word) (string-ref sentence word))\n         (prime-length-words\
    \ sentence)))\n  (string-join (prime-length-words-in-sentence sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n    \
    \  [(is-prime? (string-length (first words)))\n       (cons (first words) (iter\
    \ (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words)\n    (cond\n      [(empty? words) empty]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper i)\n  \
    \    (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (helper (- i 1)))))\n    (helper (- n 1)))\n  (define (helper sentence)\n  \
    \  (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (helper (cdr sentence))))\n          (else (helper\
    \ (cdr sentence)))))\n  (string-join (helper (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word)\
    \ (string-length word))\n         (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (map (lambda (word) (list-ref (string-split\
    \ sentence #\\space) word))\n         (prime-word-lengths sentence)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((> i (/ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (filter (lambda (word)\n\
    \              (member (string-length word)\n                      (prime-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n    \
    \      (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (helper i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n\
    \ i) 0) #f]\n        [else (helper (+ i 1))]))\n    (helper 2))\n  (define (helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (helper (rest sentence)))]\n\
    \      [else (helper (rest sentence))]))\n  (string-join (helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (iter words)\n  \
    \  (cond ((null? words) '())\n          ((is-prime? (string-length (car words)))\n\
    \           (cons (car words) (iter (cdr words))))\n          (else (iter (cdr\
    \ words)))))\n  (string-join (iter (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n  \
    \         [(= i n) #t]\n           [(= (modulo n i) 0) #f]\n           [else (iter\
    \ (+ i 1))]))\n       (iter 3)]))\n  (define (prime-words sentence)\n    (cond\n\
    \      [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words (rest sentence)))]\n      [else (prime-words\
    \ (rest sentence))]))\n  (string-join (prime-words (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda\
    \ (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (primes-in-sentence sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (words-with-primes-lengths sentence)\n    (filter (lambda\
    \ (word) (member (string-length word) (primes-in-sentence sentence)))\n      \
    \      (string-split sentence #\\space)))\n  (string-join (words-with-primes-lengths\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ '()]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (if (= i n)\n          #t\n          (if (= (modulo n i) 0)\n    \
    \          #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (lambda (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((=\
    \ (remainder n 2) 0) #f)\n          (else\n           (let loop ((i 3))\n    \
    \         (cond ((&gt; i (sqrt n)) #t)\n                   ((= (remainder n i)\
    \ 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (prime-words\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words (cdr sentence))))\n\
    \          (else (prime-words (cdr sentence)))))\n  (string-join (prime-words\
    \ (string-split sentence #\\space)) \" \"))\n</code>\n", "  (define (is-prime?\
    \ n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (is-prime-aux n i)\n      (cond ((= i 1) #t)\n            ((is-divisible? n\
    \ i) #f)\n            (else (is-prime-aux n (- i 1)))))\n    (is-prime-aux n (-\
    \ n 1)))\n  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words (cdr sentence))))\n          (else (prime-words (cdr\
    \ sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime n)\n    (define (is-prime-iter n i)\n     \
    \ (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-iter n (+ i 1))]))\n    (is-prime-iter n 2))\n  (define (get-words\
    \ sentence)\n    (string-split sentence #\\space))\n  (define (get-prime-words\
    \ words)\n    (filter (lambda (word) (is-prime (string-length word))) words))\n\
    \  (string-join (get-prime-words (get-words sentence)) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? n d)\n      (= (remainder n d) 0))\n\
    \    (define (loop i)\n      (cond ((> i (sqrt n)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n  (define (get-words\
    \ sentence)\n    (string-split sentence #\\space))\n  (define (get-prime-words\
    \ words)\n    (filter (lambda (word) (is-prime? (string-length word))) words))\n\
    \  (string-join (get-prime-words (get-words sentence)) #\\space))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (iter lst)\n    (cond ((null? lst) '())\n            ((is-prime (string-length\
    \ (car lst))) (cons (car lst) (iter (cdr lst))))\n            (else (iter (cdr\
    \ lst)))))\n  (string-join (iter (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (filter-prime-lengths sentence)\n    (filter\
    \ is-prime? (word-lengths sentence)))\n  (define (filter-prime-words sentence)\n\
    \    (filter (lambda (word) (member (string-length word) (filter-prime-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ (filter-prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (word)\n              (member (string-length word)\n                      (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null?\
    \ words) '())\n          ((is-prime? (string-length (car words)))\n          \
    \ (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(=\
    \ (remainder n 2) 0) #f]\n      [else\n       (let loop ([i 3])\n         (cond\n\
    \           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (loop (+ i 2))]))]))\n  (define (words-in-sentence-helper sentence)\n    (cond\n\
    \      [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n\
    \      [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (word) (list-ref\
    \ (string-split sentence #\\space) word))\n         (prime-word-lengths sentence)))\n\
    \  (string-join (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n divisor)\n      (cond\n        [(= divisor 1)\
    \ #t]\n        [(= (modulo n divisor) 0) #f]\n        [else (is-prime-helper n\
    \ (- divisor 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i 3))\n\
    \             (cond ((= i n) #t)\n                   ((= (remainder n i) 0) #f)\n\
    \                   (else (loop (+ i 2))))))))\n  (define (prime-words sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n\
    \      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n\
    \         (cond\n           [(= i n) #t]\n           [(= (modulo n i) 0) #f]\n\
    \           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n\
    \    (cond\n      [(empty? words) '()]\n      [(is-prime? (string-length (first\
    \ words)))\n       (cons (first words) (iter (rest words)))]\n      [else (iter\
    \ (rest words))]))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (string-join\n   (filter\n\
    \    (lambda (word)\n      (prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n    \
    \      (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper? n divisor)\n      (cond ((= divisor 1) #t)\n     \
    \       ((= (modulo n divisor) 0) #f)\n            (else (is-prime-helper? n (-\
    \ divisor 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (word) (list-ref (string-split sentence #\\space)\
    \ word))\n         (prime-word-lengths sentence)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (word-lengths sentence)\n    (map (lambda (word) (string-length word))\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-word-indexes\
    \ sentence)\n    (map (lambda (length) (index-of sentence length)) (prime-word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (index) (list-ref\
    \ (string-split sentence #\\space) index)) (prime-word-indexes sentence)))\n \
    \ (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n \
    \   (define (helper i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (helper (+ i 1))]))\n    (helper 2))\n  (define (helper\
    \ lst)\n    (cond\n      [(empty? lst) empty]\n      [(is-prime? (string-length\
    \ (first lst)))\n       (cons (first lst) (helper (rest lst)))]\n      [else (helper\
    \ (rest lst))]))\n  (string-join (helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((> i (/\
    \ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (word-at-index i sentence)\n \
    \   (list-ref (string-split sentence #\\space) i))\n  (define (word-at-index-with-length\
    \ i sentence)\n    (list (word-at-index i sentence) (string-length (word-at-index\
    \ i sentence))))\n  (define (prime-words sentence)\n    (filter (lambda (word-length)\
    \ (is-prime? (cadr word-length)))\n            (map (lambda (i) (word-at-index-with-length\
    \ i sentence))\n                 (build-list (length (string-split sentence #\\\
    space))\n                             (lambda (i) i)))))\n  (define (prime-words-to-string\
    \ prime-words)\n    (apply string-append (map (lambda (word-length) (car word-length))\
    \ prime-words)))\n  (prime-words-to-string (prime-words sentence)))\n", "  (define\
    \ (is_prime n)\n    (define (is_prime-iter n i)\n      (cond\n        [(= i n)\
    \ #t]\n        [(= (modulo n i) 0) #f]\n        [else (is_prime-iter n (+ i 1))]))\n\
    \    (is-prime-iter n 2))\n  (define (is_prime-word word)\n    (is_prime (string-length\
    \ word)))\n  (define (prime-words words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is_prime-word (first words)) (cons (first words) (prime-words (rest words)))]\n\
    \      [else (prime-words (rest words))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) '()]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime n)\n    (define (is-prime-iter n i)\n      (cond ((= i 1) #t)\n  \
    \          ((= (modulo n i) 0) #f)\n            (else (is-prime-iter n (- i 1)))))\n\
    \    (is-prime-iter n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n\
    \    (cond ((null? sentence) (string-join (reverse acc) \" \"))\n          ((is-prime\
    \ (string-length (car sentence)))\n           (words-in-sentence-iter (cdr sentence)\
    \ (cons (car sentence) acc)))\n          (else (words-in-sentence-iter (cdr sentence)\
    \ acc))))\n  (words-in-sentence-iter (string-split sentence) '()))\n", "  (define\
    \ (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(=\
    \ (remainder n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n\
    \           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (prime-words sentence)\n  \
    \  (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (cons (first sentence) (prime-words (rest sentence)))]\n\
    \      [else (prime-words (rest sentence))]))\n  (string-join (prime-words (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (cond ((= n 1)\
    \ #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n   \
    \        (let loop ((i 3))\n             (cond ((= i n) #t)\n                \
    \   ((zero? (modulo n i)) #f)\n                   (else (loop (+ i 2))))))))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (prime-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (filter (lambda (word) (member\
    \ (string-length word) (prime-lengths sentence)))\n            (string-split sentence\
    \ #\\space)))\n  (string-join prime-words #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n div)\n      (cond\n        [(= div 1) #t]\n\
    \        [(= (modulo n div) 0) #f]\n        [else (is-prime-helper n (- div 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n\
    \    (cond\n      [(empty? sentence) '()]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n\
    \      [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (loop\
    \ i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n \
    \           (else (loop (+ i 1)))))\n    (loop 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word)\n              (is-prime? (string-length\
    \ word)))\n            (string-split sentence #\\space)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda\
    \ (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (word) (list-ref\
    \ (string-split sentence #\\space) word))\n         (prime-word-lengths sentence)))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (divisors n)\n      (for/list ([i (in-range 1 (+ 1 (quotient n 2)))])\n\
    \        (if (zero? (modulo n i)) i)))\n    (empty? (divisors n)))\n  (define\
    \ (prime-words sentence)\n    (for/list ([word (in-list (string-split sentence))])\n\
    \      (if (is-prime? (string-length word)) word)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter\
    \ (- i 1)))))\n    (iter (- n 1)))\n  (define (iter lst)\n    (cond ((null? lst)\
    \ '())\n          ((is-prime? (string-length (car lst)))\n           (cons (car\
    \ lst) (iter (cdr lst))))\n          (else (iter (cdr lst)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2)\
    \ 0) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(=\
    \ i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i\
    \ 1))]))\n       (iter 3)]))\n  (define (prime-words sentence)\n    (cond\n  \
    \    [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words (rest sentence)))]\n      [else (prime-words\
    \ (rest sentence))]))\n  (string-join (prime-words (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null? words) '())\n\
    \          ((is-prime? (string-length (car words)))\n           (cons (car words)\
    \ (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define\
    \ (prime-words sentence)\n    (define (iter words)\n      (cond ((null? words)\
    \ '())\n            ((is-prime? (string-length (car words)))\n             (cons\
    \ (car words) (iter (cdr words))))\n            (else (iter (cdr words)))))\n\
    \    (iter (string-split sentence #\\space)))\n  (string-join (prime-words sentence)\
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-is-prime? word)\n    (is-prime? (string-length\
    \ word)))\n  (define (iter words result)\n    (cond ((null? words) result)\n \
    \         ((word-is-prime? (car words)) (iter (cdr words) (string-append result\
    \ (car words) \" \")))\n          (else (iter (cdr words) result))))\n  (string-trim\
    \ (iter (string-split sentence) \"\")))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (string-ref word 0))\n         (filter (lambda (word) (is-prime? (string-length\
    \ word)))\n                 (string-split sentence #\\space))))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is-prime-word? word)\n\
    \    (is-prime? (string-length word)))\n  (define (prime-words words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime-word? (first words))\n       (cons\
    \ (first words) (prime-words (rest words)))]\n      [else (prime-words (rest words))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n    \
    \    [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence \" \")) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper (- i 1)))))\n\
    \    (helper (- n 1)))\n  (define (helper sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((is-prime? (string-length (car sentence)))\n           (cons\
    \ (car sentence) (helper (cdr sentence))))\n          (else (helper (cdr sentence)))))\n\
    \  (string-join (helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i\
    \ 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (-\
    \ i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence acc)\n    (cond\n      [(empty? sentence) (string-join (reverse acc)\
    \ \" \")]\n      [(is-prime? (string-length (first sentence)))\n       (words-in-sentence-helper\
    \ (rest sentence) (cons (first sentence) acc))]\n      [else (words-in-sentence-helper\
    \ (rest sentence) acc)]))\n  (words-in-sentence-helper (string-split sentence\
    \ #\\space) '()))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words)\
    \ empty]\n      [(is-prime? (string-length (first words)))\n       (cons (first\
    \ words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime n)\n\
    \    (define (helper i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (helper (+ i 1))]))\n    (helper 2))\n  (define (helper2\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime (string-length\
    \ (first sentence)))\n       (cons (first sentence) (helper2 (rest sentence)))]\n\
    \      [else (helper2 (rest sentence))]))\n  (string-join (helper2 (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence result)\n    (cond ((null? sentence)\
    \ result)\n          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-helper\
    \ (cdr sentence) (string-append result (car sentence) \" \")))\n          (else\
    \ (words-in-sentence-helper (cdr sentence) result))))\n  (substring (words-in-sentence-helper\
    \ (string-split sentence) \"\") 0 -1))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n d)\n      (cond\n        [(= d 1) #t]\n        [(= (modulo\
    \ n d) 0) #f]\n        [else (is-prime-helper n (- d 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond\n    \
    \  [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n\
    \      [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (word-at-index sentence i)\n    (list-ref (string-split sentence #\\space) i))\n\
    \  (define (word-at-index-is-prime? sentence i)\n    (is-prime? (string-length\
    \ (word-at-index sentence i))))\n  (define (prime-words sentence)\n    (filter\
    \ word-at-index-is-prime? (word-lengths sentence)))\n  (define (prime-words-sentence\
    \ sentence)\n    (string-join (map word-at-index (prime-words sentence)) \" \"\
    ))\n  (prime-words-sentence sentence))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (if (= i n)\n          #t\n          (if (= (modulo n i) 0)\n\
    \              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (define (prime-word? word)\n      (member\
    \ (string-length word) (prime-word-lengths sentence)))\n    (filter prime-word?\
    \ (string-split sentence #\\space)))\n  (string-join (prime-words sentence) #\\\
    space))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\n       \
    \ [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length (string-split\
    \ sentence #\\space)))\n  (define (prime-lengths sentence)\n    (filter prime?\
    \ (word-lengths sentence)))\n  (define (word-at-index sentence i)\n    (list-ref\
    \ (string-split sentence #\\space) i))\n  (define (prime-words sentence)\n   \
    \ (map (lambda (i) (word-at-index sentence i))\n         (filter (lambda (i) (prime?\
    \ (list-ref (word-lengths sentence) i)))\n                 (build-list (length\
    \ (word-lengths sentence))\n                             (lambda (i) i)))))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (string-join\n   (filter\
    \ (lambda (word)\n             (prime? (string-length word)))\n           (string-split\
    \ sentence #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (list-ref (string-split sentence #\\space) word))\n         (prime-word-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (helper d)\n      (cond ((= d 1) #t)\n            ((= (modulo\
    \ n d) 0) #f)\n            (else (helper (- d 1)))))\n    (helper (- n 1)))\n\
    \  (define (helper lst)\n    (cond ((null? lst) '())\n          ((is-prime? (string-length\
    \ (car lst))) (cons (car lst) (helper (cdr lst))))\n          (else (helper (cdr\
    \ lst)))))\n  (string-join (helper (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter? n d)\n      (cond\
    \ ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else (is-prime-iter?\
    \ n (- d 1)))))\n    (is-prime-iter? n (- n 1)))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-word-lengths-indexes sentence)\n\
    \    (map (lambda (length) (index-of (word-lengths sentence) length))\n      \
    \   (prime-word-lengths sentence)))\n  (define (prime-words sentence)\n    (map\
    \ (lambda (index) (list-ref (string-split sentence #\\space) index))\n       \
    \  (prime-word-lengths-indexes sentence)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (- n 1)))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (word-at-index sentence i)\n \
    \   (string-ref sentence i))\n  (define (word-at-index-prime? sentence i)\n  \
    \  (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime? sentence\
    \ i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-lengths sentence i)))\n  (define (word-at-index-prime?\
    \ sentence i)\n    (is-prime? (word-", "  (string-join\n   (filter\n    (lambda\
    \ (word)\n      (is-prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((< i n) (if (zero? (modulo n i)) #f (iter (+ i 1))))\n         \
    \   (else #t)))\n    (iter 2))\n  (define (iter lst)\n    (cond ((null? lst) '())\n\
    \          ((is-prime? (string-length (car lst))) (cons (car lst) (iter (cdr lst))))\n\
    \          (else (iter (cdr lst)))))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((< i n) (if (zero? (modulo n i)) #f (iter (+ i 1))))\n            (else\
    \ #t)))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map (lambda (word)\
    \ (string-length word)) (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (word) (list-ref (string-split sentence #\\space)\
    \ word))\n         (prime-word-lengths sentence)))\n  (string-join prime-words\
    \ #\\space))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n   \
    \   [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define\
    \ (iter i)\n         (cond\n           [(= i n) #t]\n           [(= (remainder\
    \ n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (prime-words sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (cons (first sentence) (prime-words\
    \ (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n div)\n      (if (= div 1)\n          #t\n\
    \          (if (= (modulo n div) 0)\n              #f\n              (is-prime-helper\
    \ n (- div 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence acc)\n    (if (empty? sentence)\n        acc\n        (if (is-prime?\
    \ (string-length (first sentence)))\n            (words-in-sentence-helper (rest\
    \ sentence) (string-append acc (first sentence) \" \"))\n            (words-in-sentence-helper\
    \ (rest sentence) acc))))\n  (substring (words-in-sentence-helper (string-split\
    \ sentence #\\space) \"\") 0 -1))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (helper sentence)\n    (cond ((null? sentence) '())\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (cons (car sentence) (helper (cdr\
    \ sentence))))\n          (else (helper (cdr sentence)))))\n  (string-join (helper\
    \ (string-split sentence #\\space)) \" \"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
