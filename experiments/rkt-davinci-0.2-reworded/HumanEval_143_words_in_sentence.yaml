name: HumanEval_143_words_in_sentence
language: rkt
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; Example 1:\n;; >>> (words_in_sentence \"This is\
  \ a test\")\n;; \"is\"\n;; Example 2:\n;; >>> (words_in_sentence \"lets go for swimming\"\
  )\n;; \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence\
  \ contains only letters\n(define (words_in_sentence sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime? n)\n    (define (iter i)\n      (cond\n      \
    \  [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n\
    \    (iter (- n 1)))\n  (define (prime-words sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n    \
    \   (cons (first sentence) (prime-words (rest sentence)))]\n      [else (prime-words\
    \ (rest sentence))]))\n  (string-join (prime-words (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (is-prime-word? word)\n    (is-prime? (string-length word)))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime-word? (car\
    \ sentence))\n           (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n\
    \          (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (string-join\n   (filter\n\
    \    (lambda (word)\n      (prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond\n      [(empty? words) empty]\n      [(is-prime? (string-length\
    \ (first words)))\n       (cons (first words) (iter (rest words)))]\n      [else\
    \ (iter (rest words))]))\n  (string-join (iter (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (w) (list-ref (string-split sentence #\\space) w))\n       \
    \  (prime-word-lengths sentence)))\n  (string-join (prime-words sentence) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(=\
    \ i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (string-join\n   (filter\n\
    \    (lambda (word)\n      (prime? (string-length word)))\n    (string-split sentence\
    \ #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word) (member (string-length word) (prime-word-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (words-in-sentence-iter sentence acc)\n    (cond\n      [(empty? sentence)\
    \ (string-join (reverse acc) \" \")]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (words-in-sentence-iter (rest sentence) (cons (first sentence)\
    \ acc))]\n      [else (words-in-sentence-iter (rest sentence) acc)]))\n  (words-in-sentence-iter\
    \ (string-split sentence #\\space) '()))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (\u03BB (w) (string-length w)) (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (\u03BB (w) (list-ref\
    \ (string-split sentence #\\space) w))\n         (prime-word-lengths sentence)))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (primes-in-sentence sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (words-in-sentence-with-primes sentence)\n    (filter (lambda (word)\
    \ (member (string-length word) (primes-in-sentence sentence)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join (words-in-sentence-with-primes sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n\
    \      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n \
    \           (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper n\
    \ (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (words-in-sentence-helper (cdr sentence))))\n   \
    \       (else (words-in-sentence-helper (cdr sentence)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (define\
    \ (prime-helper n div)\n      (cond\n        [(= div 1) #t]\n        [(= (modulo\
    \ n div) 0) #f]\n        [else (prime-helper n (- div 1))]))\n    (prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond\n    \
    \  [(empty? sentence) empty]\n      [(prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n\
    \      [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word)) (string-split sentence #\\space)))\n  (define (prime-word-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (map (lambda (word) (list-ref (string-split sentence #\\space) word))\n \
    \        (prime-word-lengths sentence)))\n  (string-join prime-words #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter?\
    \ n (- i 1)))))\n    (is-prime-iter? n (quotient n 2)))\n  (define (words-in-sentence-iter\
    \ sentence result)\n    (cond ((null? sentence) result)\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (words-in-sentence-iter (cdr sentence)\
    \ (string-append result \" \" (car sentence))))\n          (else (words-in-sentence-iter\
    \ (cdr sentence) result))))\n  (string-trim (words-in-sentence-iter (string-split\
    \ sentence) \"\")))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n\
    \      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define (is-divisible?\
    \ n divisor)\n         (cond\n           [(= divisor 1) #f]\n           [(= (modulo\
    \ n divisor) 0) #t]\n           [else (is-divisible? n (- divisor 1))]))\n   \
    \    (is-divisible? n (- n 1))]))\n  (define (prime-words sentence)\n    (cond\n\
    \      [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (prime-words (rest sentence)))]\n      [else (prime-words\
    \ (rest sentence))]))\n  (string-join (prime-words (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (filter-prime-lengths word-lengths)\n\
    \    (filter is-prime? word-lengths))\n  (define (filter-prime-words sentence\
    \ word-lengths)\n    (filter (lambda (word) (member (string-length word) word-lengths))\n\
    \            (string-split sentence #\\space)))\n  (string-join (filter-prime-words\
    \ sentence (filter-prime-lengths (word-lengths sentence)))\n               #\\\
    space))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n    \
    \    [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (iter (+ i\
    \ 1))]))\n    (iter 2))\n  (define (iter sentence)\n    (cond\n      [(empty?\
    \ sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n    \
    \   (cons (first sentence) (iter (rest sentence)))]\n      [else (iter (rest sentence))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even?\
    \ n) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((=\
    \ i n) #t)\n                   ((= (remainder n i) 0) #f)\n                  \
    \ (else (loop (+ i 2))))))))\n  (define (prime-words sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (prime-words (cdr sentence))))\n          (else (prime-words\
    \ (cdr sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
