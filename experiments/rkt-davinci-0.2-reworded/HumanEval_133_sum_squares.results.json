{
  "language": "rkt",
  "name": "HumanEval_133_sum_squares",
  "results": [
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 1,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "/tmp/tmp55t21oqx.rkt:19:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmp55t21oqx.rkt:19:0\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwwwezlji.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x))\n                (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:27:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:28:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:29:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:30:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:31:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:32:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:33:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:34:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:35:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:36:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr4fa58v4.rkt:37:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt (ceiling x) 2)) lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jbi6z8y.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (* x x)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0nxxmuq_.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    },
    {
      "exit_code": 0,
      "program": "#lang racket\n\n;; You are given a list of numbers.\n;; You need to return the sum of squared numbers in the given list,\n;; round each element in the list to the upper int(Ceiling) first.\n;; Examples:\n;; >>> (lst (list 1.0 2.0 3.0))\n;; 14\n;; >>> (lst (list 1.0 4.0 9.0))\n;; 98\n;; >>> (lst (list 1.0 3.0 5.0 7.0))\n;; 84\n;; >>> (lst (list 1.4 4.2 0.0))\n;; 29\n;; >>> (lst (list -2.4 1.0 1.0))\n;; 6\n(define (sum_squares lst)\n  (apply + (map (lambda (x) (expt x 2)) (map ceiling lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_squares))\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 2.0 3.0)) 14)\n    (check-equal? (candidate (list 1.0 3.0 5.0 7.0)) 84)\n    (check-equal? (candidate (list 1.4 4.2 0.0)) 29)\n    (check-equal? (candidate (list -2.4 1.0 1.0)) 6)\n    (check-equal? (candidate (list 100.0 1.0 15.0 2.0)) 10230)\n    (check-equal? (candidate (list 10000.0 10000.0)) 200000000)\n    (check-equal? (candidate (list -1.4 4.6 6.3)) 75)\n    (check-equal? (candidate (list -1.4 17.9 18.9 19.9)) 1086)\n    (check-equal? (candidate (list 0.0)) 0)\n    (check-equal? (candidate (list -1.0)) 1)\n    (check-equal? (candidate (list -1.0 1.0 0.0)) 2)\n))\n\n(test-humaneval)",
      "status": "Exception",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:25:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:26:4\nactual:     14.0\nexpected:   14\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:27:4\nactual:     84.0\nexpected:   84\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:28:4\nactual:     29.0\nexpected:   29\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:29:4\nactual:     6.0\nexpected:   6\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:30:4\nactual:     10230.0\nexpected:   10230\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:31:4\nactual:     200000000.0\nexpected:   200000000\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:32:4\nactual:     75.0\nexpected:   75\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:33:4\nactual:     1086.0\nexpected:   1086\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:34:4\nactual:     0.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:35:4\nactual:     1.0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ed1mei5.rkt:36:4\nactual:     2.0\nexpected:   2\n--------------------\n",
      "stdout": "",
      "timestamp": 1660039978
    }
  ]
}