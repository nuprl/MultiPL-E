name: HumanEval_15_string_sequence
language: rkt
results:
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (define (string_sequence_iter n acc)\n    (if (= n 0)\n        (string-append\
    \ acc \"0\")\n        (string_sequence_iter (- n 1) (string-append acc (number->string\
    \ n) \" \"))))\n  (string_sequence_iter n \"\"))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-equal?\
    \ (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal?\
    \ (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7poq8i83.rkt:21:4\n\
    actual:     \"3 2 1 0\"\nexpected:   \"0 1 2 3\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7poq8i83.rkt:22:4\nactual:\
    \     \"10 9 8 7 6 5 4 3 2 1 0\"\nexpected:   \"0 1 2 3 4 5 6 7 8 9 10\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (cond [(= n 0) \"0\"]\n        [else (string-append (string_sequence (- n 1))\
    \ \" \" (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (cond\n    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1))\
    \ \" \" (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (cond\n    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1))\
    \ \" \" (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (cond\n    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1))\
    \ \" \" (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (cond\n    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1))\
    \ \" \" (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (cond\n    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1))\
    \ \" \" (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (cond\n    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1))\
    \ \" \" (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> (string_sequence 0)\n;; \"0\"\n;;\
    \ >>> (string_sequence 5)\n;; \"0 1 2 3 4 5\"\n(define (string_sequence n)\n \
    \ (if (= n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \"\
    \ \" (number->string n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
