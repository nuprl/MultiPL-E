name: HumanEval_123_get_odd_collatz
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer n, return a sorted list that\
  \ has the odd numbers in collatz sequence.\n;; The Collatz conjecture is a conjecture\
  \ in mathematics that concerns a sequence defined\n;; as follows: start with any\
  \ positive integer n. Then each term is obtained from the \n;; previous term as\
  \ follows: if the previous term is even, the next term is one half of \n;; the previous\
  \ term. If the previous term is odd, the next term is 3 times the previous\n;; term\
  \ plus 1. The conjecture is that no matter what value of n, the sequence will always\
  \ reach 1.\n;; Note: \n;; 1. Collatz(1) is [1].\n;; 2. returned list sorted in increasing\
  \ order.\n;; For example:\n;; get_odd_collatz(5) returns [1, 5] # The collatz sequence\
  \ for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n;; >>> (get_odd_collatz\
  \ 5)\n;; (list 1 5)\n(define (get_odd_collatz n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_odd_collatz))\n\
  \    (check-equal? (candidate 14) (list 1 5 7 11 13 17))\n    (check-equal? (candidate\
  \ 5) (list 1 5))\n    (check-equal? (candidate 12) (list 1 3 5))\n    (check-equal?\
  \ (candidate 1) (list 1))\n))\n\n(test-humaneval)"
completions: ["  (define (collatz-iter n collatz-list)\n    (cond ((= n 1) (append\
    \ collatz-list (list 1)))\n          ((even? n) (collatz-iter (/ n 2) collatz-list))\n\
    \          (else (collatz-iter (+ (* 3 n) 1) (append collatz-list (list n))))))\n\
    \  (collatz-iter n (list)))\n", "  (define (collatz n)\n    (cond\n      [(= n\
    \ 1) (list 1)]\n      [(even? n) (cons n (collatz (/ n 2)))]\n      [else (cons\
    \ n (collatz (+ (* 3 n) 1)))]))\n  (filter odd? (collatz n)))\n", "  (define (collatz\
    \ n)\n    (cond\n      [(= n 1) (list 1)]\n      [(even? n) (cons n (collatz (/\
    \ n 2)))]\n      [else (cons n (collatz (+ (* 3 n) 1)))]))\n  (filter odd? (collatz\
    \ n)))\n", "  (define (collatz n)\n    (if (= n 1)\n        (list 1)\n       \
    \ (if (even? n)\n            (cons n (collatz (/ n 2)))\n            (cons n (collatz\
    \ (+ (* 3 n) 1))))))\n  (filter odd? (collatz n)))\n", "  (define (collatz n)\n\
    \    (cond ((= n 1) (list 1))\n          ((even? n) (cons n (collatz (/ n 2))))\n\
    \          (else (cons n (collatz (+ (* 3 n) 1))))))\n  (filter odd? (collatz\
    \ n)))\n", "  (cond ((= n 1) (list 1))\n        (else (cons n (get_odd_collatz\
    \ (if (even? n) (/ n 2) (+ 1 (* 3 n))))))))\n", "  (define (collatz n)\n    (cond\n\
    \      [(= n 1) (list 1)]\n      [(even? n) (cons n (collatz (/ n 2)))]\n    \
    \  [else (cons n (collatz (+ (* 3 n) 1)))]))\n  (filter odd? (collatz n)))\n",
  "  (define (collatz n)\n    (cond [(= n 1) (list 1)]\n          [(= (remainder n\
    \ 2) 0) (cons n (collatz (/ n 2)))]\n          [else (cons n (collatz (+ (* 3\
    \ n) 1)))]))\n  (define (odd? n)\n    (= (remainder n 2) 1))\n  (define (filter-odd\
    \ lst)\n    (cond [(empty? lst) empty]\n          [(odd? (first lst)) (cons (first\
    \ lst) (filter-odd (rest lst)))]\n          [else (filter-odd (rest lst))]))\n\
    \  (filter-odd (collatz n)))\n", "  (define (collatz n)\n    (cond\n      [(=\
    \ n 1) (list 1)]\n      [(even? n) (cons n (collatz (/ n 2)))]\n      [else (cons\
    \ n (collatz (+ (* 3 n) 1)))]))\n  (filter odd? (collatz n)))\n", "  (define (collatz\
    \ n)\n    (cond\n      [(= n 1) (list 1)]\n      [(even? n) (cons n (collatz (/\
    \ n 2)))]\n      [else (cons n (collatz (+ (* 3 n) 1)))]))\n  (filter odd? (collatz\
    \ n)))\n", "  (define (collatz n)\n    (cond\n      [(= n 1) (list 1)]\n     \
    \ [(even? n) (cons n (collatz (/ n 2)))]\n      [else (cons n (collatz (+ (* 3\
    \ n) 1)))]))\n  (filter odd? (collatz n)))\n", "  (define (collatz n)\n    (cond\
    \ [(= n 1) (list 1)]\n          [(even? n) (cons n (collatz (/ n 2)))]\n     \
    \     [else (cons n (collatz (+ (* 3 n) 1)))]))\n  (define (filter-odd lst)\n\
    \    (cond [(empty? lst) empty]\n          [(odd? (first lst)) (cons (first lst)\
    \ (filter-odd (rest lst)))]\n          [else (filter-odd (rest lst))]))\n  (sort\
    \ (filter-odd (collatz n)) <))\n", "  (define (collatz n)\n    (cond ((= n 1)\
    \ (list 1))\n          ((even? n) (cons n (collatz (/ n 2))))\n          (else\
    \ (cons n (collatz (+ (* 3 n) 1))))))\n  (filter odd? (collatz n)))\n", "  (define\
    \ (collatz n)\n    (cond\n      [(= n 1) (list 1)]\n      [(even? n) (cons n (collatz\
    \ (/ n 2)))]\n      [else (cons n (collatz (+ (* 3 n) 1)))]))\n  (filter odd?\
    \ (collatz n)))\n", "  (define (collatz n)\n    (cond ((= n 1) (list 1))\n   \
    \       ((even? n) (cons n (collatz (/ n 2))))\n          (else (cons n (collatz\
    \ (+ 1 (* 3 n)))))))\n  (filter odd? (collatz n)))\n", "  (define (collatz n)\n\
    \    (cond\n      [(= n 1) (list 1)]\n      [(even? n) (cons n (collatz (/ n 2)))]\n\
    \      [else (cons n (collatz (+ (* 3 n) 1)))]))\n  (define (odds lst)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(odd? (first lst)) (cons (first lst) (odds\
    \ (rest lst)))]\n      [else (odds (rest lst))]))\n  (sort (odds (collatz n))\
    \ <))\n", "  (if (= n 1)\n      (list 1)\n      (if (even? n)\n          (get_odd_collatz\
    \ (/ n 2))\n          (cons n (get_odd_collatz (+ 1 (* 3 n)))))))\n", "  (define\
    \ (collatz n)\n    (cond ((= n 1) (list 1))\n          ((even? n) (cons n (collatz\
    \ (/ n 2))))\n          (else (cons n (collatz (+ 1 (* 3 n)))))))\n  (filter odd?\
    \ (collatz n)))\n", "  (define (collatz n)\n    (cond\n      [(= n 1) (list 1)]\n\
    \      [(even? n) (cons n (collatz (/ n 2)))]\n      [else (cons n (collatz (+\
    \ (* 3 n) 1)))]))\n  (filter odd? (collatz n)))\n", "  (cond\n    [(= n 1) (list\
    \ 1)]\n    [(= (remainder n 2) 0) (cons n (get_odd_collatz (/ n 2)))]\n    [else\
    \ (cons n (get_odd_collatz (+ (* 3 n) 1)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
