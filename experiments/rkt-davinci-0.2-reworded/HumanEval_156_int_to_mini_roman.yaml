name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman\
  \ 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (define (int_to_mini_roman_helper number)\n    (cond ((= number 1000)\
    \ \"m\")\n          ((= number 900) \"cm\")\n          ((= number 500) \"d\")\n\
    \          ((= number 400) \"cd\")\n          ((= number 100) \"c\")\n       \
    \   ((= number 90) \"xc\")\n          ((= number 50) \"l\")\n          ((= number\
    \ 40) \"xl\")\n          ((= number 10) \"x\")\n          ((= number 9) \"ix\"\
    )\n          ((= number 5) \"v\")\n          ((= number 4) \"iv\")\n         \
    \ ((= number 1) \"i\")))\n  (cond ((= number 0) \"\")\n        ((<= number 1000)\
    \ (string-append (int_to_mini_roman_helper number)\n                         \
    \                (int_to_mini_roman (- number number))))\n        (else (string-append\
    \ (int_to_mini_roman (/ number 1000))\n                             (int_to_mini_roman_helper\
    \ 1000)\n                             (int_to_mini_roman (- number (* 1000 (/\
    \ number 1000))))))))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\
    \ ((= number 1000) \"m\")\n          ((= number 900) \"cm\")\n          ((= number\
    \ 500) \"d\")\n          ((= number 400) \"cd\")\n          ((= number 100) \"\
    c\")\n          ((= number 90) \"xc\")\n          ((= number 50) \"l\")\n    \
    \      ((= number 40) \"xl\")\n          ((= number 10) \"x\")\n          ((=\
    \ number 9) \"ix\")\n          ((= number 5) \"v\")\n          ((= number 4) \"\
    iv\")\n          ((= number 1) \"i\")))\n  (cond ((= number 0) \"\")\n       \
    \ ((= number 1) (int_to_mini_roman-helper 1))\n        ((= number 2) (string-append\
    \ (int_to_mini_roman-helper 1)\n                                     (int_to_mini_roman-helper\
    \ 1)))\n        ((= number 3) (string-append (int_to_mini_roman-helper 1)\n  \
    \                                   (int_to_mini_roman-helper 1)\n           \
    \                          (int_to_mini_roman-helper 1)))\n        ((= number\
    \ 4) (int_to_mini_roman-helper 4))\n        ((= number 5) (int_to_mini_roman-helper\
    \ 5))\n        ((= number 6) (string-append (int_to_mini_roman-helper 5)\n   \
    \                                  (int_to_mini_roman-helper 1)))\n        ((=\
    \ number 7) (string-append (int_to_mini_roman-helper 5)\n                    \
    \                 (int_to_mini_roman-helper 1)\n                             \
    \        (int_to_mini_roman-helper 1)))\n        ((= number 8) (string-append\
    \ (int_to_mini_roman-helper 5)\n                                     (int_to_mini_roman-helper\
    \ 1)\n                                     (int_to_mini_roman-helper 1)\n    \
    \                                 (int_to_mini_roman-helper 1)))\n        ((=\
    \ number 9) (int_to_mini_roman-helper 9))\n        ((= number 10", "  (define\
    \ (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000) \"m\"]\n\
    \      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(= number\
    \ 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number 10)\
    \ \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number\
    \ 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond ((= number 0) \"\")\n  \
    \        ((= number 1) \"i\")\n          ((= number 2) \"ii\")\n          ((=\
    \ number 3) \"iii\")\n          ((= number 4) \"iv\")\n          ((= number 5)\
    \ \"v\")\n          ((= number 6) \"vi\")\n          ((= number 7) \"vii\")\n\
    \          ((= number 8) \"viii\")\n          ((= number 9) \"ix\")\n        \
    \  ((= number 10) \"x\")\n          ((= number 20) \"xx\")\n          ((= number\
    \ 30) \"xxx\")\n          ((= number 40) \"xl\")\n          ((= number 50) \"\
    l\")\n          ((= number 60) \"lx\")\n          ((= number 70) \"lxx\")\n  \
    \        ((= number 80) \"lxxx\")\n          ((= number 90) \"xc\")\n        \
    \  ((= number 100) \"c\")\n          ((= number 200) \"cc\")\n          ((= number\
    \ 300) \"ccc\")\n          ((= number 400) \"cd\")\n          ((= number 500)\
    \ \"d\")\n          ((= number 600) \"dc\")\n          ((= number 700) \"dcc\"\
    )\n          ((= number 800) \"dccc\")\n          ((= number 900) \"cm\")\n  \
    \        ((= number 1000) \"m\")\n          (else (string-append (int_to_mini_roman-helper\
    \ (/ number 10)) (int_to_mini_roman-helper (modulo number 10))))))\n  (string-downcase\
    \ (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 11) '(x i)]\n      [(= number 12)\
    \ '(x i i)]\n      [(= number 13) '(x i i i)]\n      [(= number 14) '(x i v)]\n\
    \      [(= number 15) '(x v)]\n      [(= number 16) '(x v i)]\n      [(= number\
    \ 17) '(x v i i)]\n      [(= number 18) '(x v i i i)]\n      [(= number 19) '(x\
    \ i x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x x x x)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l\
    \ x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n    \
    \  [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200)\
    \ '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400) '(c c c c)]\n\
    \      [(= number 500) '(c d)]\n      [(= number 600) '(d)]\n      [(= number\
    \ 700) '(d c)]\n      [(= number 800) '(d c c)]\n      [(= number 900) '(c m)]\n\
    \      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                    (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-join (int_to", "  (define (int_to_mini_roman-helper number)\n\
    \    (cond ((= number 1000) \"m\")\n          ((= number 900) \"cm\")\n      \
    \    ((= number 500) \"d\")\n          ((= number 400) \"cd\")\n          ((=\
    \ number 100) \"c\")\n          ((= number 90) \"xc\")\n          ((= number 50)\
    \ \"l\")\n          ((= number 40) \"xl\")\n          ((= number 10) \"x\")\n\
    \          ((= number 9) \"ix\")\n          ((= number 5) \"v\")\n          ((=\
    \ number 4) \"iv\")\n          ((= number 1) \"i\")))\n  (cond ((= number 0) \"\
    \")\n        ((= number 1) (int_to_mini_roman-helper 1))\n        ((= number 2)\
    \ (string-append (int_to_mini_roman-helper 1) (int_to_mini_roman-helper 1)))\n\
    \        ((= number 3) (string-append (int_to_mini_roman-helper 1) (int_to_mini_roman-helper\
    \ 1) (int_to_mini_roman-helper 1)))\n        ((= number 4) (int_to_mini_roman-helper\
    \ 4))\n        ((= number 5) (int_to_mini_roman-helper 5))\n        ((= number\
    \ 6) (string-append (int_to_mini_roman-helper 5) (int_to_mini_roman-helper 1)))\n\
    \        ((= number 7) (string-append (int_to_mini_roman-helper 5) (int_to_mini_roman-helper\
    \ 1) (int_to_mini_roman-helper 1)))\n        ((= number 8) (string-append (int_to_mini_roman-helper\
    \ 5) (int_to_mini_roman-helper 1) (int_to_mini_roman-helper 1) (int_to_mini_roman-helper\
    \ 1)))\n        ((= number 9) (int_to_mini_roman-helper 9))\n        ((= number\
    \ 10) (int_to_mini_roman-helper 10))\n        ((= number 11) (string-append (int",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman-iter number)\n    (cond\n      [(= number 0) \"\"\
    ]\n      [(= number 1) \"i\"]\n      [(= number 2) \"ii\"]\n      [(= number 3)\
    \ \"iii\"]\n      [(= number 4) \"iv\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 6) \"vi\"]\n      [(= number 7) \"vii\"]\n      [(= number 8) \"viii\"\
    ]\n      [(= number 9) \"ix\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 20) \"xx\"]\n      [(= number 30) \"xxx\"]\n      [(= number 40) \"xl\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 60) \"lx\"]\n      [(= number 70)\
    \ \"lxx\"]\n      [(= number 80) \"lxxx\"]\n      [(= number 90) \"xc\"]\n   \
    \   [(= number 100) \"c\"]\n      [(= number 200) \"cc\"]\n      [(= number 300)\
    \ \"ccc\"]\n      [(= number 400) \"cd\"]\n      [(= number 500) \"d\"]\n    \
    \  [(= number 600) \"dc\"]\n      [(= number 700) \"dcc\"]\n      [(= number 800)\
    \ \"dccc\"]\n      [(= number 900) \"cm\"]\n      [(= number 1000) \"m\"]\n  \
    \    [else (string-append\n              (int_to_mini_roman-iter (quotient number\
    \ 10))\n              (int_to_mini_roman-iter (remainder number 10)))]))\n  (string-downcase\
    \ (int_to_mini_roman-iter number)))\n", "  (define (int_to_mini_roman-helper number)\n\
    \    (cond ((= number 1000) \"m\")\n          ((= number 900) \"cm\")\n      \
    \    ((= number 500) \"d\")\n          ((= number 400) \"cd\")\n          ((=\
    \ number 100) \"c\")\n          ((= number 90) \"xc\")\n          ((= number 50)\
    \ \"l\")\n          ((= number 40) \"xl\")\n          ((= number 10) \"x\")\n\
    \          ((= number 9) \"ix\")\n          ((= number 5) \"v\")\n          ((=\
    \ number 4) \"iv\")\n          ((= number 1) \"i\")))\n  (cond ((<= number 0)\
    \ \"\")\n        ((= number 1) (int_to_mini_roman-helper number))\n        ((=\
    \ number 2) (string-append (int_to_mini_roman-helper 1) (int_to_mini_roman-helper\
    \ 1)))\n        ((= number 3) (string-append (int_to_mini_roman-helper 1) (int_to_mini_roman-helper\
    \ 1) (int_to_mini_roman-helper 1)))\n        ((= number 4) (int_to_mini_roman-helper\
    \ 4))\n        ((= number 5) (int_to_mini_roman-helper 5))\n        ((= number\
    \ 6) (string-append (int_to_mini_roman-helper 5) (int_to_mini_roman-helper 1)))\n\
    \        ((= number 7) (string-append (int_to_mini_roman-helper 5) (int_to_mini_roman-helper\
    \ 1) (int_to_mini_roman-helper 1)))\n        ((= number 8) (string-append (int_to_mini_roman-helper\
    \ 5) (int_to_mini_roman-helper 1) (int_to_mini_roman-helper 1) (int_to_mini_roman-helper\
    \ 1)))\n        ((= number 9) (int_to_mini_roman-helper 9))\n        ((= number\
    \ 10) (int_to_mini_roman-helper 10))\n        ((= number 11) (string-append (",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      ((= number 1000)\
    \ \"m\")\n      ((= number 900) \"cm\")\n      ((= number 500) \"d\")\n      ((=\
    \ number 400) \"cd\")\n      ((= number 100) \"c\")\n      ((= number 90) \"xc\"\
    )\n      ((= number 50) \"l\")\n      ((= number 40) \"xl\")\n      ((= number\
    \ 10) \"x\")\n      ((= number 9) \"ix\")\n      ((= number 5) \"v\")\n      ((=\
    \ number 4) \"iv\")\n      ((= number 1) \"i\")\n      (else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10))))))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"\
    xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70)\
    \ \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(=\
    \ number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"\
    ]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600)\
    \ \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(=\
    \ number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [(= number 2000) \"mm\"\
    ]\n    [(= number 3000) \"mmm\"]\n    [(= number 4000) \"mv\"]\n    [(= number\
    \ 5000) \"v\"]\n    [(= number 6000) \"vm\"]\n    [(= number 7000) \"vmm\"]\n\
    \    [(= number 8000) \"vmmm\"]\n    [(= number 9000) \"mx\"]\n    [(= number\
    \ 10000) \"x\"]\n    [(= number 20000) \"xx\"]\n    [(= number 30000) \"xxx\"\
    ]\n    [(", "  (let ([roman-numerals '((1000 \"m\") (900 \"cm\") (500 \"d\") (400\
    \ \"cd\") (100 \"c\") (90 \"xc\") (50 \"l\") (40 \"xl\") (10 \"x\") (9 \"ix\"\
    ) (5 \"v\") (4 \"iv\") (1 \"i\"))])\n    (let loop ([number number] [roman-numerals\
    \ roman-numerals] [result \"\"])\n      (if (zero? number)\n          result\n\
    \          (let ([(numeral-value . numeral-string) (car roman-numerals)])\n  \
    \          (if (<= number numeral-value)\n                (loop (- number numeral-value)\
    \ roman-numerals (string-append result numeral-string))\n                (loop\
    \ number (cdr roman-numerals) result)))))))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 11) '(x i)]\n      [(= number 12)\
    \ '(x i i)]\n      [(= number 13) '(x i i i)]\n      [(= number 14) '(x i v)]\n\
    \      [(= number 15) '(x v)]\n      [(= number 16) '(x v i)]\n      [(= number\
    \ 17) '(x v i i)]\n      [(= number 18) '(x v i i i)]\n      [(= number 19) '(x\
    \ i x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x x x x)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l\
    \ x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n    \
    \  [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200)\
    \ '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400) '(c c c c)]\n\
    \      [(= number 500) '(c d)]\n      [(= number 600) '(d)]\n      [(= number\
    \ 700) '(d c)]\n      [(= number 800) '(d c c)]\n      [(= number 900) '(c m)]\n\
    \      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                    (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-join (int_to", "  (define (int_to_mini_roman_helper number)\n\
    \    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number\
    \ 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n   \
    \   [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v\
    \ i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(=\
    \ number 10) '(x)]\n      [(= number 11) '(x i)]\n      [(= number 12) '(x i i)]\n\
    \      [(= number 13) '(x i i i)]\n      [(= number 14) '(x i v)]\n      [(= number\
    \ 15) '(x v)]\n      [(= number 16) '(x v i)]\n      [(= number 17) '(x v i i)]\n\
    \      [(= number 18) '(x v i i i)]\n      [(= number 19) '(x i x)]\n      [(=\
    \ number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x\
    \ x x x)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(=\
    \ number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90)\
    \ '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(=\
    \ number 300) '(c c c)]\n      [(= number 400) '(c c c c)]\n      [(= number 500)\
    \ '(c d)]\n      [(= number 600) '(d)]\n      [(= number 700) '(d c)]\n      [(=\
    \ number 800) '(d c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000)\
    \ '(m)]\n      [else (append (int_to_mini_roman_helper (quotient number 10))\n\
    \                    (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to", "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(=\
    \ number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"\
    d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number\
    \ 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n   \
    \   [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"\
    v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                          \
    \ (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper\
    \ number)))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n    \
    \  [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500)\
    \ \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(=\
    \ number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"\
    ]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number\
    \ 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else\
    \ (string-append (int_to_mini_roman-helper (quotient number 10))\n           \
    \                (int_to_mini_roman-helper (remainder number 10)))]))\n  (string-downcase\
    \ (int_to_mini_roman-helper number)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
