name: HumanEval_87_get_row
language: rkt
prompt: "#lang racket\n\n;; You are given a 2 dimensional data, as a nested lists,\n\
  ;; which is similar to matrix, however, unlike matrices,\n;; each row may contain\
  \ a different number of columns.\n;; Given lst, and integer x, find integers x in\
  \ the list,\n;; and return list of lists, [(x1, y1), (x2, y2) ...] such that\n;;\
  \ each list is a coordinate - (row, columns), starting with 0.\n;; Sort coordinates\
  \ initially by rows in ascending order.\n;; Also, sort coordinates of the row by\
  \ columns in descending order.\n;; Examples:\n;; >>> (get_row (list (list 1 2 3\
  \ 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1)\n;; (list (list 0 0) (list 1\
  \ 4) (list 1 0) (list 2 5) (list 2 0))\n;; >>> (get_row (list ) 1)\n;; (list )\n\
  ;; >>> (get_row (list (list ) (list 1) (list 1 2 3)) 3)\n;; (list (list 2 2))\n\
  (define (get_row lst x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list\
  \ 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list\
  \ 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list\
  \ (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)))\n    (check-equal?\
  \ (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list\
  \ 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list\
  \ (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list\
  \ 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)))\n    (check-equal? (candidate\
  \ (list ) 1) (list ))\n    (check-equal? (candidate (list (list 1)) 2) (list ))\n\
  \    (check-equal? (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list\
  \ 2 2)))\n))\n\n(test-humaneval)"
completions: ["  (define (get_row_helper lst x result)\n    (cond\n      [(empty?\
    \ lst) result]\n      [(empty? (first lst)) (get_row_helper (rest lst) x result)]\n\
    \      [(equal? x (first (first lst)))\n       (get_row_helper (rest lst) x (append\
    \ result (list (list (length result) (length (first lst)))))\n       )]\n    \
    \  [else (get_row_helper (rest lst) x (append result (list (list (length result)\
    \ (length (first lst))))))]))\n  (sort (get_row_helper lst x (list))\n       \
    \ (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n \
    \           [(> (first x) (first y)) #f]\n            [(> (second x) (second y))\
    \ #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get-row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [else #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest\
    \ lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row\
    \ col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [else #f]))))\n", "  (let loop ([lst lst] [x x] [row 0]\
    \ [col 0] [acc '()])\n    (cond [(empty? lst) (reverse acc)]\n          [(empty?\
    \ (car lst)) (loop (cdr lst) x (+ row 1) 0 acc)]\n          [(= x (car (car lst)))\
    \ (loop (cdr (car lst)) x row (+ col 1) (cons (list row col) acc))]\n        \
    \  [else (loop (cdr (car lst)) x row (+ col 1) acc)])))\n", "  (define (get_row_helper\
    \ lst x)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row_helper\
    \ (cdr lst) x))\n          ((equal? x (car (car lst))) (cons (list (car lst) (car\
    \ (cdr (car lst)))) (get_row_helper (cdr lst) x)))\n          (else (get_row_helper\
    \ (cdr lst) x))))\n  (sort (get_row_helper lst x)\n        (lambda (lst1 lst2)\n\
    \          (cond ((< (car (car lst1)) (car (car lst2))) #t)\n                ((>\
    \ (car (car lst1)) (car (car lst2))) #f)\n                ((> (car (cdr (car lst1)))\
    \ (car (cdr (car lst2)))) #t)\n                (else #f)))))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (if\
    \ (= x col)\n             (list (list (length lst) col)\n                   (list\
    \ (length row) col))))\n        <))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (when (= x col)\n         \
    \  (list (list (length lst) col))))\n        <))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [else #f]))))\n",
  "  (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n   \
    \   [(empty? (first lst)) (get_row-helper (rest lst) x acc)]\n      [(equal? x\
    \ (first (first lst)))\n       (get_row-helper (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]\n      [else (get_row-helper (rest lst) x\
    \ (cons (list (length acc) (length (first lst))) acc))]))\n  (sort (get_row-helper\
    \ lst x '())\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row_helper lst x acc)\n \
    \   (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x acc)]\n      [(= x (first (first lst))) (get_row_helper (rest lst)\
    \ x (cons (list (length acc) (length (first lst))) acc))]\n      [else (get_row_helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper lst\
    \ x (list))\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(= (first x) (first y)) (< (second x) (second y))]\n\
    \            [else #f]))))\n", "  (define (get_row_helper lst x acc)\n    (cond\
    \ ((null? lst) acc)\n          ((null? (car lst)) (get_row_helper (cdr lst) x\
    \ acc))\n          ((equal? x (car (car lst))) (get_row_helper (cdr lst) x (cons\
    \ (list (length acc) 0) acc)))\n          (else (get_row_helper (cdr lst) x (cons\
    \ (list (length acc) (get_row_helper_2 (car lst) x 0)) acc)))))\n  (define (get_row_helper_2\
    \ lst x acc)\n    (cond ((null? lst) acc)\n          ((equal? x (car lst)) (get_row_helper_2\
    \ (cdr lst) x (+ acc 1)))\n          (else (get_row_helper_2 (cdr lst) x acc))))\n\
    \  (get_row_helper lst x '()))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (cond\n   \
    \ [(empty? lst) (list)]\n    [else\n     (append\n      (get_row (rest lst) x)\n\
    \      (get_row_helper (first lst) x 0 (length lst)))]))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (if (null? lst)\n        (list)\n        (if (null? (car\
    \ lst))\n            (get_row-helper (cdr lst) x (+ row 1) 0)\n            (if\
    \ (= x (car (car lst)))\n                (cons (list row col) (get_row-helper\
    \ (cdr (car lst)) x row (+ col 1)))\n                (get_row-helper (cdr (car\
    \ lst)) x row (+ col 1))))))\n  (sort (get_row-helper lst x 0 0)\n        (lambda\
    \ (lst1 lst2)\n          (if (= (car lst1) (car lst2))\n              (> (cadr\
    \ lst1) (cadr lst2))\n              (< (car lst1) (car lst2))))))\n", "  (define\
    \ (get_row-iter lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n  \
    \    [(empty? (first lst)) (get_row-iter (rest lst) x acc)]\n      [(equal? x\
    \ (first (first lst)))\n       (get_row-iter (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]\n      [else (get_row-iter (rest lst) x acc)]))\n\
    \  (get_row-iter lst x (list)))\n", "  (define (get_row-aux lst x acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row-aux (rest lst)\
    \ x acc)]\n      [(equal? x (first (first lst)))\n       (get_row-aux (rest lst)\
    \ x (cons (list (length acc) 0) acc))]\n      [(equal? x (first (rest (first lst))))\n\
    \       (get_row-aux (rest lst) x (cons (list (length acc) 1) acc))]\n      [(equal?\
    \ x (first (rest (rest (first lst)))))\n       (get_row-aux (rest lst) x (cons\
    \ (list (length acc) 2) acc))]\n      [else (get_row-aux (rest lst) x acc)]))\n\
    \  (sort (get_row-aux lst x (list))\n        (lambda (x y)\n          (cond\n\
    \            [(< (first x) (first y)) #t]\n            [(> (first x) (first y))\
    \ #f]\n            [(> (second x) (second y)) #t]\n            [(< (second x)\
    \ (second y)) #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list\
    \ lst)]\n                   [col (in-list row)])\n         (when (= x col)\n \
    \          (list row col)))\n        (\u03BB (a b)\n          (cond\n        \
    \    [(< (car a) (car b)) #t]\n            [(> (car a) (car b)) #f]\n        \
    \    [(> (cadr a) (cadr b)) #t]\n            [(< (cadr a) (cadr b)) #f]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (length lst) col))))\n     \
    \   (lambda (l1 l2)\n          (cond\n            [(> (car (car l1)) (car (car\
    \ l2))) #t]\n            [(< (car (car l1)) (car (car l2))) #f]\n            [(>\
    \ (cadr (car l1)) (cadr (car l2))) #f]\n            [(< (cadr (car l1)) (cadr\
    \ (car l2))) #t]))))\n", "  (sort (for/list ([row (in-list lst)]\n           \
    \        [col (in-list row)])\n         (if (= x col) (list (list (length lst)\
    \ (length row)))))\n        (lambda (x y)\n          (if (= (car (car x)) (car\
    \ (car y)))\n              (if (= (cadr (car x)) (cadr (car y)))\n           \
    \       (if (= (caddr (car x)) (caddr (car y)))\n                      (if (=\
    \ (cadddr (car x)) (cadddr (car y)))\n                          (if (= (caddddr\
    \ (car x)) (caddddr (car y)))\n                              (if (= (cadddddr\
    \ (car x)) (cadddddr (car y)))\n                                  (if (= (caddddddr\
    \ (car x)) (caddddddr (car y)))\n                                      (if (=\
    \ (cadddddddr (car x)) (cadddddddr (car y)))\n                               \
    \           (if (= (caddddddddr (car x)) (caddddddddr (car y)))\n            \
    \                                  (if (= (cadddddddddr (car x)) (cadddddddddr\
    \ (car y)))\n                                                  (if (= (caddddddddddr\
    \ (car x)) (caddddddddddr (car y)))\n                                        \
    \              (if (= (cadddddddddddr (car x)) (cadddddddddddr (car y)))\n   \
    \                                                       (if (= (caddddddddddddr\
    \ (car x)) (caddddddddddddr (car y)))\n                                      \
    \                        (if (= (cadddddddddddddr (car x)) (cadddddddddddddr (car\
    \ y)))\n                                                                  (if\
    \ (= (caddddddddddddddr (car x)) (caddddddddddddddr (car y)))\n              \
    \                                                        (if (= (cadddddddddddddddr\
    \ (car x)) (cadddddddddddddddr (car y)))\n                                   \
    \             ", "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) (list)]\n      [(empty? (first lst)) (get_row_helper (rest lst) x (add1\
    \ row) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get_row-helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get_row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row-helper (rest lst) x row (add1 col))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get_row_helper lst x row col)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper (rest\
    \ lst) x (add1 row) 0)]\n      [(= x (first (first lst))) (cons (list row col)\
    \ (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n\
    \            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (cond\n    [(empty? lst) empty]\n    [else\n     (define row (first lst))\n \
    \    (define rest (rest lst))\n     (define row-index (length lst))\n     (define\
    \ col-index (length row))\n     (define (get-indexes row x)\n       (cond\n  \
    \       [(empty? row) empty]\n         [else\n          (define first (first row))\n\
    \          (define rest (rest row))\n          (cond\n            [(= first x)\
    \ (cons (list row-index col-index) (get-indexes rest x))]\n            [else (get-indexes\
    \ rest x)])]))\n     (append (get-indexes row x) (get_row rest x))]])\n", "  (sort\
    \ (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n  \
    \       (if (= x col)\n             (list (list (length lst) col))))\n       \
    \ (\u03BB (x y)\n          (cond\n            [(< (car (car x)) (car (car y)))\
    \ #t]\n            [(> (car (car x)) (car (car y))) #f]\n            [(> (cadr\
    \ (car x)) (cadr (car y))) #t]\n            [(< (cadr (car x)) (cadr (car y)))\
    \ #f]))))\n", "  (define (get_row_helper lst x row col acc)\n    (cond\n     \
    \ [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper (rest lst) x\
    \ (+ row 1) 0 acc)]\n      [(= x (first (first lst)))\n       (get_row_helper\
    \ (rest (first lst)) x row (+ col 1) (cons (list row col) acc))]\n      [else\
    \ (get_row_helper (rest (first lst)) x row (+ col 1) acc)]))\n  (sort (get_row_helper\
    \ lst x 0 0 (list))\n        (lambda (lst1 lst2)\n          (cond\n          \
    \  [(< (first lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2))\
    \ #f]\n            [(> (second lst1) (second lst2)) #t]\n            [(< (second\
    \ lst1) (second lst2)) #f]\n            [else #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [else #f]))))\n",
  "  (define (get_row-helper lst x row col)\n    (cond ((null? lst) '())\n       \
    \   ((null? (car lst)) (get_row-helper (cdr lst) x (+ row 1) col))\n         \
    \ ((equal? x (car (car lst)))\n           (cons (list row col) (get_row-helper\
    \ (cdr (car lst)) x row (+ col 1))))\n          (else (get_row-helper (cdr (car\
    \ lst)) x row (+ col 1)))))\n  (sort (get_row-helper lst x 0 0)\n        (lambda\
    \ (lst1 lst2)\n          (cond ((< (car lst1) (car lst2)) #t)\n              \
    \  ((> (car lst1) (car lst2)) #f)\n                ((> (cadr lst1) (cadr lst2))\
    \ #t)\n                (else #f)))))\n", "  (define (get_row-helper lst x row\
    \ col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list\
    \ row col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [else #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst))) (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (when (= x col)\n         \
    \  (list (list (length lst) col))))\n        <))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get_row-helper lst x acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row-helper (rest lst)\
    \ x acc)]\n      [(equal? x (first (first lst)))\n       (get_row-helper (rest\
    \ lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else (get_row-helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]))\n  (sort\
    \ (get_row-helper lst x '()) <))\n", "  (sort (filter (lambda (coord)\n      \
    \            (equal? x (list-ref (list-ref lst (car coord)) (cdr coord))))\n \
    \               (get-coordinates lst))\n        (lambda (coord1 coord2)\n    \
    \      (cond\n            [(< (car coord1) (car coord2)) #t]\n            [(>\
    \ (car coord1) (car coord2)) #f]\n            [(> (cdr coord1) (cdr coord2)) #t]\n\
    \            [(< (cdr coord1) (cdr coord2)) #f]))))\n", "  (define (get-row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get-row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get-row-helper (rest lst) x row (+ col 1))]))\n  (sort (get-row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get_row_helper lst x row col)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper (rest\
    \ lst) x (add1 row) 0)]\n      [(= x (first (first lst))) (cons (list row col)\
    \ (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (when (= x col)\n           (list (list (length lst) col))))\n     \
    \   (\u03BB (x y)\n          (or (and (= (car x) (car y))\n                  \
    \ (> (cadr x) (cadr y)))\n              (< (car x) (car y))))))\n", "  (define\
    \ (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n   \
    \   [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) col)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get_row_helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get_row_helper (rest lst) x row (+ col 1)))]\n \
    \     [else (get_row_helper (rest lst) x row (+ col 1))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (helper lst x acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(empty? (car lst)) (helper (cdr lst) x acc)]\n      [(equal? x\
    \ (car (car lst)))\n       (helper (cdr lst) x (append acc (list (list (length\
    \ acc) 0))))]\n      [else (helper (cdr (car lst)) x (append acc (list (list (length\
    \ acc) (add1 (length (cdr (car lst))))))))]))\n  (define (sort-by-row lst)\n \
    \   (sort lst (lambda (l1 l2) (< (car l1) (car l2)))))\n  (define (sort-by-col\
    \ lst)\n    (sort lst (lambda (l1 l2) (> (cadr l1) (cadr l2)))))\n  (sort-by-row\
    \ (sort-by-col (helper lst x '()))))\n", "  (define (get_row_helper lst x acc)\n\
    \    (cond ((null? lst) acc)\n          ((null? (car lst)) (get_row_helper (cdr\
    \ lst) x acc))\n          ((equal? x (car (car lst))) (get_row_helper (cdr lst)\
    \ x (cons (list (length acc) 0) acc)))\n          (else (get_row_helper (cdr lst)\
    \ x (cons (list (length acc) (get_col (car lst) x)) acc)))))\n  (sort (get_row_helper\
    \ lst x '()) (lambda (x y) (or (and (< (car x) (car y)) #t)\n                \
    \                                     (and (= (car x) (car y)) (> (cadr x) (cadr\
    \ y)))))))\n", "  (define (helper lst x)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (helper (rest lst) x)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list (length lst) (length (first lst))) (helper (rest\
    \ lst) x))]\n      [else (helper (rest lst) x)]))\n  (sort (helper lst x)\n  \
    \      (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty?\
    \ lst) (reverse acc)]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x acc)]\n      [(= x (first (first lst)))\n       (get_row_helper (rest lst)\
    \ x (cons (list (length acc) 0) acc))]\n      [(> x (first (first lst)))\n   \
    \    (get_row_helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [else\n\
    \       (get_row_helper (rest (first lst)) x\n                       (cons (list\
    \ (length acc) (length (first lst))) acc))]))\n  (get_row_helper lst x (list)))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (when (= x col)\n           (list (length lst) col)))\n        (lambda\
    \ (l1 l2)\n          (cond\n            [(< (car l1) (car l2)) #t]\n         \
    \   [(> (car l1) (car l2)) #f]\n            [(> (cadr l1) (cadr l2)) #t]\n   \
    \         [(< (cadr l1) (cadr l2)) #f]\n            [else #f]))))\n", "  (sort\
    \ (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n  \
    \       (if (= x col) (list (list (length lst) col) (list (length row) col))))\n\
    \        (lambda (l1 l2)\n          (cond [(< (car (car l1)) (car (car l2))) #t]\n\
    \                [(> (car (car l1)) (car (car l2))) #f]\n                [(> (cadr\
    \ (car l1)) (cadr (car l2))) #t]\n                [(< (cadr (car l1)) (cadr (car\
    \ l2))) #f]))))\n", "  (define (get-row-helper lst x row-num)\n    (cond ((null?\
    \ lst) '())\n          ((null? (car lst)) (get-row-helper (cdr lst) x (+ row-num\
    \ 1)))\n          ((equal? x (car (car lst)))\n           (append (list (list\
    \ row-num 0))\n                   (get-row-helper (cdr (car lst)) x row-num)\n\
    \                   (get-row-helper (cdr lst) x (+ row-num 1))))\n          (else\
    \ (get-row-helper (cdr (car lst)) x row-num))))\n  (sort (get-row-helper lst x\
    \ 0)\n        (lambda (lst1 lst2)\n          (cond ((< (car lst1) (car lst2))\
    \ #t)\n                ((> (car lst1) (car lst2)) #f)\n                ((> (cadr\
    \ lst1) (cadr lst2)) #t)\n                ((< (cadr lst1) (cadr lst2)) #f)\n \
    \               (else #f)))))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n\
    \      [(member x (first lst))\n       (get_row_helper (rest lst) x (cons (cons\
    \ (length acc) (position x (first lst))) acc))]\n      [else (get_row_helper (rest\
    \ lst) x acc)]))\n  (get_row_helper lst x (list)))\n", "  (sort (for/list ([row\
    \ (in-list lst)]\n                   [col (in-list row)])\n         (when (= x\
    \ col)\n           (list row col)))\n        (\u03BB (l1 l2)\n          (cond\n\
    \            [(< (car l1) (car l2)) #t]\n            [(> (car l1) (car l2)) #f]\n\
    \            [(> (cadr l1) (cadr l2)) #t]\n            [(< (cadr l1) (cadr l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row-helper lst x row col)\n\
    \    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row-helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list\
    \ row col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [else #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row-helper (rest lst) x row (add1 col))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]\n            [else #f]))))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [else\n     (append\n      (get_row (rest lst) x)\n      (get_row_helper\
    \ (first lst) x 0 (length lst)))]))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x acc)]\n      [(equal?\
    \ x (first (first lst)))\n       (get_row_helper (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]\n      [else (get_row_helper (rest lst) x\
    \ acc)]))\n  (get_row_helper lst x (list)))\n", "  (define (get_row_iter lst x\
    \ res)\n    (cond\n      [(empty? lst) res]\n      [(empty? (first lst)) (get_row_iter\
    \ (rest lst) x res)]\n      [(= x (first (first lst)))\n       (get_row_iter (rest\
    \ lst) x (cons (list (length res) 0) res))]\n      [(= x (first (rest (first lst))))\n\
    \       (get_row_iter (rest lst) x (cons (list (length res) 1) res))]\n      [(=\
    \ x (first (rest (rest (first lst)))))\n       (get_row_iter (rest lst) x (cons\
    \ (list (length res) 2) res))]\n      [else (get_row_iter (rest lst) x res)]))\n\
    \  (get_row_iter lst x (list)))\n", "  (define (get-row-helper lst x acc)\n  \
    \  (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x acc)]\n      [(= x (first (first lst)))\n       (get-row-helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n      [(get-row-helper (rest\
    \ (first lst)) x (cons (list (length acc) (add1 (length (first lst)))) acc))]\n\
    \      [else (get-row-helper (rest lst) x acc)]))\n  (get-row-helper lst x (list)))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [else #f]))))\n", "  (define (get_row-iter lst x res)\n    (if (null? lst)\n\
    \        res\n        (get_row-iter (cdr lst) x (append res (get_row-iter-2 (car\
    \ lst) x 0 (list))))))\n  (define (get_row-iter-2 lst x y res)\n    (if (null?\
    \ lst)\n        res\n        (if (= x (car lst))\n            (get_row-iter-2\
    \ (cdr lst) x (+ y 1) (append res (list (list y x))))\n            (get_row-iter-2\
    \ (cdr lst) x (+ y 1) res))))\n  (sort (get_row-iter lst x (list)) (lambda (x\
    \ y) (< (car x) (car y)))))\n", "  (define (get_row_helper lst x acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x acc)]\n      [(= x (first (first lst))) (get_row_helper (rest lst) x (cons\
    \ (list (length acc) 0) acc))]\n      [(= x (first (rest (first lst)))) (get_row_helper\
    \ (rest lst) x (cons (list (length acc) 1) acc))]\n      [(= x (first (rest (rest\
    \ (first lst))))) (get_row_helper (rest lst) x (cons (list (length acc) 2) acc))]\n\
    \      [else (get_row_helper (rest lst) x acc)]))\n  (sort (get_row_helper lst\
    \ x '()) <))\n", "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty?\
    \ lst) (reverse acc)]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x acc)]\n      [(= x (first (first lst)))\n       (get_row_helper (rest lst)\
    \ x (cons (list (length acc) (length (first lst))) acc))]\n      [else (get_row_helper\
    \ (rest lst) x acc)]))\n  (sort (get_row_helper lst x '())\n        (lambda (lst1\
    \ lst2)\n          (cond\n            [(< (first lst1) (first lst2)) #t]\n   \
    \         [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second\
    \ lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define\
    \ (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (get_row_helper (rest lst) x acc)]\n      [(= x (first (first lst)))\
    \ (get_row_helper (rest lst) x (cons (list (length acc) (length (first lst)))\
    \ acc))]\n      [else (get_row_helper (rest lst) x (cons (list (length acc) 0)\
    \ acc))]))\n  (sort (get_row_helper lst x '()) (lambda (l1 l2) (or (and (= (first\
    \ l1) (first l2)) (> (second l1) (second l2))) (< (first l1) (first l2))))))\n",
  "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n   \
    \   [(empty? (first lst)) (get_row_helper (rest lst) x acc)]\n      [(equal? x\
    \ (first (first lst)))\n       (get_row_helper (rest lst) x (append acc (list\
    \ (list (length acc) (length (first lst))))) )]\n      [else (get_row_helper (rest\
    \ lst) x (append acc (list (list (length acc) 0))))]))\n  (sort (get_row_helper\
    \ lst x '())\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest lst)\
    \ x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper (rest\
    \ lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda\
    \ (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2)) #t]\n\
    \            [(> (first lst1) (first lst2)) #f]\n            [(< (second lst1)\
    \ (second lst2)) #f]\n            [(> (second lst1) (second lst2)) #t]\n     \
    \       [else #f]))))\n", "  (define (get_row_helper lst x acc)\n    (cond\n \
    \     [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x acc)]\n      [(equal? x (first (first lst)))\n       (get_row_helper (rest\
    \ lst) x (cons (list (length acc) 0) acc))]\n      [(equal? x (first (rest (first\
    \ lst))))\n       (get_row_helper (rest lst) x (cons (list (length acc) 1) acc))]\n\
    \      [(equal? x (first (rest (rest (first lst)))))\n       (get_row_helper (rest\
    \ lst) x (cons (list (length acc) 2) acc))]\n      [else (get_row_helper (rest\
    \ lst) x acc)]))\n  (sort (get_row_helper lst x (list))\n        (lambda (lst1\
    \ lst2)\n          (cond\n            [(< (first lst1) (first lst2)) #t]\n   \
    \         [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second\
    \ lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]\n            [else\
    \ #f]))))\n", "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) (list)]\n      [(empty? (first lst)) (get_row_helper (rest lst) x (add1\
    \ row) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (when (= x col)\n           (list (length lst) col)))\n        (\u03BB\
    \ (x y) (cond\n                  [(< (car x) (car y)) #t]\n                  [(>\
    \ (car x) (car y)) #f]\n                  [(> (cadr x) (cadr y)) #t]\n       \
    \           [(< (cadr x) (cadr y)) #f]))))\n", "  (define (get_row-helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst))\
    \ (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(equal? x (first (first lst)))\n\
    \       (cons (list row col) (get_row-helper (rest lst) x row (+ col 1)))]\n \
    \     [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row_helper lst x acc)\n \
    \   (if (null? lst)\n        acc\n        (get_row_helper (cdr lst) x (append\
    \ (get_row_helper_row (car lst) x acc 0) acc))))\n  (define (get_row_helper_row\
    \ lst x acc row)\n    (if (null? lst)\n        acc\n        (if (= x (car lst))\n\
    \            (get_row_helper_row (cdr lst) x (cons (list row (length acc)) acc)\
    \ row)\n            (get_row_helper_row (cdr lst) x acc row))))\n  (sort (get_row_helper\
    \ lst x '())\n        (lambda (l1 l2)\n          (if (= (car l1) (car l2))\n \
    \             (> (cadr l1) (cadr l2))\n              (< (car l1) (car l2))))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (length lst) col))))\n     \
    \   <))\n", "  (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(empty? (first lst)) (get_row-helper (rest lst) x acc)]\n     \
    \ [(= x (first (first lst)))\n       (get_row-helper (rest lst) x (cons (list\
    \ (length acc) 0) acc))]\n      [(> x (first (first lst)))\n       (get_row-helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n      [else (get_row-helper\
    \ (rest (first lst)) x (cons (list (length acc) (length (first lst))) acc))]))\n\
    \  (sort (get_row-helper lst x (list))\n        (lambda (lst1 lst2)\n        \
    \  (cond\n            [(< (first lst1) (first lst2)) #t]\n            [(> (first\
    \ lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2)) #t]\n\
    \            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst))) (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (get_row_helper lst x acc)\n    (cond\n      [(empty?\
    \ lst) acc]\n      [(empty? (first lst)) (get_row_helper (rest lst) x acc)]\n\
    \      [(= x (first (first lst))) (get_row_helper (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]\n      [else (get_row_helper (rest lst) x\
    \ (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper lst x '())\n \
    \       (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first\
    \ lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(>\
    \ (second lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (cond\n    [(empty? lst) empty]\n    [else\n     (let ([row (first lst)])\n \
    \      (cond\n         [(empty? row) (get_row (rest lst) x)]\n         [(= x (first\
    \ row))\n          (cons (list (length lst) (length row))\n                (get_row\
    \ (rest lst) x))]\n         [else (get_row (rest lst) x)]))]))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (if\
    \ (= x col)\n             (list (list (length lst) col)\n                   (list\
    \ (length row) col))))\n        (lambda (x y)\n          (cond\n            [(<\
    \ (car (car x)) (car (car y))) #t]\n            [(> (car (car x)) (car (car y)))\
    \ #f]\n            [(> (cadr (car x)) (cadr (car y))) #t]\n            [(< (cadr\
    \ (car x)) (cadr (car y))) #f]))))\n", "  (define (get_row-helper lst x row col)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list\
    \ row col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [else #f]))))\n", "  (define (get_row_helper lst x acc)\n\
    \    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n       (get_row_helper\
    \ (rest lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else\
    \ (get_row_helper (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper\
    \ lst x '())\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row-iter lst x row acc)\n\
    \    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row-iter\
    \ (rest lst) x (add1 row) acc)]\n      [(equal? x (first (first lst)))\n     \
    \  (get_row-iter (rest lst) x row (cons (list row 0) acc))]\n      [else (get_row-iter\
    \ (rest (first lst)) x row (cons (list row (sub1 (length (first lst)))) acc))]))\n\
    \  (sort (get_row-iter lst x 0 (list))\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second\
    \ l1) (second l2)) #f]))))\n", "  (cond [(empty? lst) empty]\n        [else (append\
    \ (get_row (rest lst) x)\n                      (get_row (first lst) x (rest lst)\
    \ 0))]))\n", "  (define (get_row_helper lst x result)\n    (cond ((null? lst)\
    \ result)\n          ((null? (car lst)) (get_row_helper (cdr lst) x result))\n\
    \          ((= x (car (car lst))) (get_row_helper (cdr lst) x (cons (list (length\
    \ result) (length (car lst))) result)))\n          (else (get_row_helper (cdr\
    \ lst) x (cons (list (length result) 0) result)))))\n  (get_row_helper lst x (list)))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) col)]\n \
    \     [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [else #f]))))\n", "  (define\
    \ (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty?\
    \ (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first\
    \ (first lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row\
    \ (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get_row_helper lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n\
    \            [(< (first lst1) (first lst2)) #t]\n            [(> (first lst1)\
    \ (first lst2)) #f]\n            [(> (second lst1) (second lst2)) #t]\n      \
    \      [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row-helper (rest lst) x row (add1 col))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) '()]\n      [(empty? (first lst)) (get_row-helper (rest lst)\
    \ x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get_row-helper (rest lst) x row (add1 col)))]\n      [else (get_row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row-helper lst x 0 0)\n      \
    \  (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n\
    \            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (if\
    \ (= x col)\n             (list (list (length lst) col) (list (length row) col))))\n\
    \        <))\n", "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) '()]\n      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row)\
    \ col)]\n      [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n  \
    \    [(empty? (first lst)) (get_row-helper (rest lst) x acc)]\n      [(= x (first\
    \ (first lst)))\n       (get_row-helper (rest lst) x (cons (list (length acc)\
    \ 0) acc))]\n      [(> x (first (first lst)))\n       (get_row-helper (rest lst)\
    \ x (cons (list (length acc) 0) acc))]\n      [else (get_row-helper (rest (first\
    \ lst)) x (cons (list (length acc) (length (first lst))) acc))]))\n  (sort (get_row-helper\
    \ lst x (list))\n        (lambda (lst1 lst2)\n          (cond\n            [(=\
    \ (first lst1) (first lst2))\n             (if (> (second lst1) (second lst2))\n\
    \                 #t\n                 #f)]\n            [(> (first lst1) (first\
    \ lst2)) #t]\n            [else #f]))))\n", "  (define (get_row-helper lst x row\
    \ col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row-helper\
    \ (rest lst) x (+ row 1) col)]\n      [(= x (first (first lst)))\n       (cons\
    \ (list row col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n \
    \           [(> (first x) (first y)) #f]\n            [(> (second x) (second y))\
    \ #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (define (get_row_iter lst x acc)\n    (cond\n      [(empty? lst) acc]\n     \
    \ [(empty? (first lst)) (get_row_iter (rest lst) x acc)]\n      [(= x (first (first\
    \ lst))) (get_row_iter (rest lst) x (cons (cons 0 (cons 0 acc)) acc))]\n     \
    \ [(> x (first (first lst))) (get_row_iter (rest lst) x acc)]\n      [else (get_row_iter\
    \ (rest lst) x (cons (cons 0 (cons (index-of x (first lst)) acc)) acc))]))\n \
    \ (sort (get_row_iter lst x (list)) (lambda (l1 l2) (or (and (= (first l1) (first\
    \ l2)) (> (second l1) (second l2))) (< (first l1) (first l2))))))\n", "  (define\
    \ (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (get_row_helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n\
    \       (get_row_helper (rest lst) x (cons (list (length acc) 0) acc))]\n    \
    \  [(= x (first (rest (first lst))))\n       (get_row_helper (rest lst) x (cons\
    \ (list (length acc) 1) acc))]\n      [(= x (first (rest (rest (first lst)))))\n\
    \       (get_row_helper (rest lst) x (cons (list (length acc) 2) acc))]\n    \
    \  [else (get_row_helper (rest lst) x acc)]))\n  (sort (get_row_helper lst x (list))\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n                \
    \   [col (in-list row)])\n         (if (= x col)\n             (list (list (length\
    \ lst) col))\n             (list (list (length lst) col))))\n        (lambda (a\
    \ b)\n          (cond\n            [(> (car (car a)) (car (car b))) #t]\n    \
    \        [(< (car (car a)) (car (car b))) #f]\n            [(> (cadr (car a))\
    \ (cadr (car b))) #f]\n            [(< (cadr (car a)) (cadr (car b))) #t]))))\n",
  "  (define (get_row-helper lst x row col result)\n    (cond\n      [(empty? lst)\
    \ result]\n      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1)\
    \ 0 result)]\n      [(= x (first (first lst)))\n       (get_row-helper (rest (first\
    \ lst)) x row (+ col 1) (cons (list row col) result))]\n      [else (get_row-helper\
    \ (rest (first lst)) x row (+ col 1) result)]))\n  (sort (get_row-helper lst x\
    \ 0 0 '())\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (define (get-row-helper lst x acc)\n    (cond\n      [(empty?\
    \ lst) acc]\n      [(empty? (first lst)) (get-row-helper (rest lst) x acc)]\n\
    \      [(= x (first (first lst)))\n       (get-row-helper (rest lst) x (cons (list\
    \ (length acc) (length (first lst))) acc))]\n      [else (get-row-helper (rest\
    \ lst) x (cons (list (length acc) (length (first lst))) acc))]))\n  (sort (get-row-helper\
    \ lst x '())\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get-row-helper lst x acc)\n    (cond\n\
    \      [(empty? lst) (reverse acc)]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n       (get-row-helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n      [(equal? x (first (rest\
    \ (first lst))))\n       (get-row-helper (rest lst) x (cons (list (length acc)\
    \ 1) acc))]\n      [(equal? x (first (rest (rest (first lst)))))\n       (get-row-helper\
    \ (rest lst) x (cons (list (length acc) 2) acc))]\n      [else (get-row-helper\
    \ (rest lst) x acc)]))\n  (get-row-helper lst x (list)))\n", "  (cond [(empty?\
    \ lst) empty]\n        [else (define (get_row_helper lst x row)\n            \
    \    (cond [(empty? lst) empty]\n                      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (+ row 1))]\n                      [(member x (first lst)) (append\
    \ (list (list row (get_index (first lst) x))) (get_row_helper (rest lst) x (+\
    \ row 1)))]\n                      [else (get_row_helper (rest lst) x (+ row 1))]))\n\
    \              (sort (get_row_helper lst x 0) (lambda (l1 l2)\n              \
    \                                 (cond [(< (first l1) (first l2)) #t]\n     \
    \                                                [(> (first l1) (first l2)) #f]\n\
    \                                                     [(> (second l1) (second\
    \ l2)) #t]\n                                                     [(< (second l1)\
    \ (second l2)) #f])))]))\n", "  (define (get_row_helper lst x acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x acc)]\n      [(equal? x (first (first lst)))\n       (get_row_helper (rest\
    \ lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else (get_row_helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper lst\
    \ x (list))\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]\n            [else #f]))))\n", "  (cond\n    [(empty? lst)\
    \ empty]\n    [else\n     (append\n      (get_row (rest lst) x)\n      (get_row_helper\
    \ (first lst) x 0 (length lst)))]))\n", "  (define (get_row-helper lst x row col)\n\
    \    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row-helper (cdr\
    \ lst) x (+ row 1) 0))\n          ((equal? x (car (car lst)))\n           (cons\
    \ (list row col) (get_row-helper (cdr (car lst)) x row (+ col 1))))\n        \
    \  (else (get_row-helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond ((< (car l1) (car l2))\
    \ #t)\n                ((> (car l1) (car l2)) #f)\n                ((> (cadr l1)\
    \ (cadr l2)) #t)\n                ((< (cadr l1) (cadr l2)) #f)\n             \
    \   (else #f)))))\n", "  (define (get-row-helper lst x row-num)\n    (cond\n \
    \     [(empty? lst) empty]\n      [(member x (first lst))\n       (append (get-row-helper\
    \ (rest lst) x (+ row-num 1))\n               (list (list row-num (index-of x\
    \ (first lst)))))\n       ]\n      [else (get-row-helper (rest lst) x (+ row-num\
    \ 1))]))\n  (sort (get-row-helper lst x 0)\n        (lambda (l1 l2)\n        \
    \  (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first l1)\
    \ (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(<\
    \ (second l1) (second l2)) #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (if (= x col)\n           \
    \  (list (list (length lst) col) (list (length lst) col))))\n        (lambda (l1\
    \ l2)\n          (cond\n            [(< (car (car l1)) (car (car l2))) #t]\n \
    \           [(> (car (car l1)) (car (car l2))) #f]\n            [(> (cadr (car\
    \ l1)) (cadr (car l2))) #t]\n            [(< (cadr (car l1)) (cadr (car l2)))\
    \ #f]))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n     (append\n  \
    \    (get_row (rest lst) x)\n      (get_row_helper (first lst) x 0 (length lst)))]))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst))) (cons (list row col) (get_row_helper (rest lst)\
    \ x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get_row_helper lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (first l1) (first l2)) #t]\n            [(> (first l1) (first\
    \ l2)) #f]\n            [(> (second l1) (second l2)) #t]\n            [(< (second\
    \ l1) (second l2)) #f]\n            [else #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest\
    \ lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row\
    \ col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [else #f]))))\n", "  (sort (for/list ([row\
    \ (in-list lst)]\n                   [col (in-list row)])\n         (when (= x\
    \ col)\n           (list (list (length lst) col))))\n        (lambda (x y)\n \
    \         (cond\n            [(< (car (car x)) (car (car y))) #t]\n          \
    \  [(> (car (car x)) (car (car y))) #f]\n            [(> (cadr (car x)) (cadr\
    \ (car y))) #t]\n            [(< (cadr (car x)) (cadr (car y))) #f]))))\n", " \
    \ (define (helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty?\
    \ (first lst)) (helper (rest lst) x acc)]\n      [(= x (first (first lst))) (helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n      [(> x (first (first lst)))\
    \ (helper (rest lst) x acc)]\n      [else (helper (rest lst) x (cons (list (length\
    \ acc) (helper2 (first lst) x 0)) acc))]))\n  (define (helper2 lst x acc)\n  \
    \  (cond\n      [(empty? lst) acc]\n      [(= x (first lst)) acc]\n      [else\
    \ (helper2 (rest lst) x (+ 1 acc))]))\n  (sort (helper lst x (list)) (lambda (lst1\
    \ lst2) (or (and (= (first lst1) (first lst2)) (> (second lst1) (second lst2)))\
    \ (< (first lst1) (first lst2))))))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (helper lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n \
    \     [(member x (first lst))\n       (helper (rest lst) x (append (map (lambda\
    \ (y) (list (length lst) y)) (find-all x (first lst))) acc))]\n      [else (helper\
    \ (rest lst) x acc)]))\n  (sort (helper lst x '()) (lambda (x y) (and (or (< (first\
    \ x) (first y)) (= (first x) (first y))) (> (second x) (second y))))))\n", " \
    \ (define (get_row_helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n  \
    \    [(empty? (first lst)) (get_row_helper (rest lst) x acc)]\n      [(= x (first\
    \ (first lst))) (get_row_helper (rest lst) x (cons (list (length acc) (length\
    \ (first lst))) acc))]\n      [else (get_row_helper (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]))\n  (sort (get_row_helper lst x '()) (lambda\
    \ (l1 l2) (or (and (= (first l1) (first l2)) (< (second l1) (second l2))) (< (first\
    \ l1) (first l2))))))\n", "  (define (get_row_helper lst x acc)\n    (cond\n \
    \     [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x acc)]\n      [(equal? x (first (first lst)))\n       (get_row_helper (rest\
    \ lst) x (cons (list (length acc) (length (first lst))) acc))]\n      [else (get_row_helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper lst\
    \ x (list))\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]\n            [else #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row-helper\
    \ (cdr lst) x (+ row 1) col))\n          ((eq? (car (car lst)) x)\n          \
    \ (append (list (list row col))\n                   (get_row-helper (cdr (car\
    \ lst)) x row (+ col 1))\n                   (get_row-helper (cdr lst) x (+ row\
    \ 1) col)))\n          (else (get_row-helper (cdr (car lst)) x row (+ col 1)))))\n\
    \  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\
    \ ((< (car lst1) (car lst2)) #t)\n                ((> (car lst1) (car lst2)) #f)\n\
    \                ((> (cadr lst1) (cadr lst2)) #t)\n                ((< (cadr lst1)\
    \ (cadr lst2)) #f)\n                (else #f)))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get_row-helper (rest lst) x row (+ col 1)))]\n \
    \     [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [else #f]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (length lst) col)\n        \
    \           (list (length row) col))))\n        (lambda (l1 l2)\n          (cond\n\
    \            [(> (car (car l1)) (car (car l2))) #t]\n            [(< (car (car\
    \ l1)) (car (car l2))) #f]\n            [(> (cadr (car l1)) (cadr (car l2))) #f]\n\
    \            [(< (cadr (car l1)) (cadr (car l2))) #t]))))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [else\n     (cond\n       [(empty? (first lst)) (get_row (rest\
    \ lst) x)]\n       [(equal? x (first (first lst)))\n        (append (list (list\
    \ (first (rest lst)) (first lst)))\n                (get_row (rest lst) x))]\n\
    \       [else (get_row (rest lst) x)])]))\n", "  (define (get-row-helper lst x\
    \ result)\n    (cond ((null? lst) result)\n          ((null? (car lst)) (get-row-helper\
    \ (cdr lst) x result))\n          ((equal? x (car (car lst))) (get-row-helper\
    \ (cdr lst) x (cons (list (length result) (length (car lst))) result)))\n    \
    \      (else (get-row-helper (cdr lst) x (cons (list (length result) 0) result)))))\n\
    \  (sort (get-row-helper lst x (list))\n        (lambda (x y)\n          (cond\
    \ ((< (car x) (car y)) #t)\n                ((> (car x) (car y)) #f)\n       \
    \         ((> (cadr x) (cadr y)) #t)\n                ((< (cadr x) (cadr y)) #f)\n\
    \                (else #f)))))\n", "  (define (get_row-helper lst x acc)\n   \
    \ (cond ((null? lst) (reverse acc))\n          ((null? (car lst)) (get_row-helper\
    \ (cdr lst) x acc))\n          ((= x (car (car lst))) (get_row-helper (cdr lst)\
    \ x (cons (list (length acc) (length (car lst))) acc)))\n          (else (get_row-helper\
    \ (cdr lst) x (cons (list (length acc) 0) acc)))))\n  (get_row-helper lst x (list)))\n",
  "  (sort (for/list ([(row . rows) (in-list lst)]\n                   [i (in-naturals)])\n\
    \         (for/list ([(col . cols) (in-list row)]\n                    [j (in-naturals)])\n\
    \           (when (= col x)\n             (list i j))))\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (car l1) (car l2)) #t]\n            [(> (car\
    \ l1) (car l2)) #f]\n            [(> (cadr l1) (cadr l2)) #t]\n            [(<\
    \ (cadr l1) (cadr l2)) #f]\n            [else #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row-helper (rest lst) x row (add1 col))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]))))\n", "  (define (get_row-helper lst x acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row-helper (rest lst)\
    \ x acc)]\n      [(= x (first (first lst)))\n       (get_row-helper (rest lst)\
    \ x (cons (list (length acc) 0) acc))]\n      [(> x (first (first lst)))\n   \
    \    (get_row-helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [else\
    \ (get_row-helper (rest (first lst)) x\n                            (cons (list\
    \ (length acc) (length (first lst))) acc))]))\n  (sort (get_row-helper lst x (list))\n\
    \        (lambda (lst1 lst2)\n          (cond\n            [(= (first lst1) (first\
    \ lst2))\n             (< (second lst1) (second lst2))]\n            [else (<\
    \ (first lst1) (first lst2))]))))\n", "  (define (get-row-helper lst x acc)\n\
    \    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get-row-helper\
    \ (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n       (get-row-helper\
    \ (rest lst) x (cons (cons 0 (first lst)) acc))]\n      [else (get-row-helper\
    \ (rest lst) x (cons (cons (first (first lst)) (rest (first lst))) acc))]))\n\
    \  (get-row-helper lst x (list)))\n", "  (define (get_row_helper lst x acc)\n\
    \    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x acc)]\n      [(= x (first (first lst))) (get_row_helper (rest lst)\
    \ x (cons (list (length acc) 0) acc))]\n      [(> x (first (first lst))) (get_row_helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n      [else (get_row_helper\
    \ (rest (first lst)) x (cons (list (length acc) (add1 (length (first lst)))) acc))]))\n\
    \  (sort (get_row_helper lst x (list))\n        (lambda (lst1 lst2)\n        \
    \  (cond\n            [(< (first lst1) (first lst2)) #t]\n            [(> (first\
    \ lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2)) #t]\n\
    \            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) col)]\n      [(equal? x (first\
    \ (first lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row\
    \ (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get_row_helper lst x 0 0)\n        (lambda (x y)\n          (cond\n\
    \            [(< (first x) (first y)) #t]\n            [(> (first x) (first y))\
    \ #f]\n            [(> (second x) (second y)) #t]\n            [(< (second x)\
    \ (second y)) #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n          \
    \         [col (in-list row)])\n         (when (= x col)\n           (list (list\
    \ (length lst) col))))\n        #:key (lambda (x) (list (car x) (cadr x)))))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n  \
    \        (cond\n            [(< (first lst1) (first lst2)) #t]\n            [(>\
    \ (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (if (= x col)\n           \
    \  (list (length lst) col)))\n        <))\n", "  (define (get_row_helper lst x\
    \ result)\n    (cond\n      [(empty? lst) result]\n      [(empty? (first lst))\
    \ (get_row_helper (rest lst) x result)]\n      [(equal? x (first (first lst)))\n\
    \       (get_row_helper (rest lst) x (cons (list (length result) (length (first\
    \ lst))) result))]\n      [else (get_row_helper (rest lst) x result)]))\n  (get_row_helper\
    \ lst x (list)))\n", "  (define (get-row-helper lst x row col)\n    (cond\n  \
    \    [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get-row-helper (rest lst) x row (+ col 1)))]\n      [else (get-row-helper (rest\
    \ lst) x row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda\
    \ (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n         \
    \   [(> (first x) (first y)) #f]\n            [(> (second x) (second y)) #t]\n\
    \            [(< (second x) (second y)) #f]\n            [else #f]))))\n", " \
    \ (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) (reverse\
    \ acc)]\n      [(member x (first lst))\n       (get_row-helper (rest lst) x (append\
    \ (map (lambda (y) (list (length lst) y)) (find-all x (first lst))) acc))]\n \
    \     [else (get_row-helper (rest lst) x acc)]))\n  (get_row-helper lst x (list)))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (length lst) (length row))))\n   \
    \     (\u03BB (x y) (and (< (car x) (car y))\n                      (> (cadr x)\
    \ (cadr y))))))\n", "  (define (get_row_helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) '()]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list\
    \ row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (helper lst x acc)\n    (cond ((null? lst) acc)\n          ((null? (car\
    \ lst)) (helper (cdr lst) x acc))\n          ((equal? x (car (car lst))) (helper\
    \ (cdr lst) x (cons (list (length acc) (length (car lst))) acc)))\n          (else\
    \ (helper (cdr lst) x (cons (list (length acc) 0) acc)))))\n  (sort (helper lst\
    \ x '()) (lambda (x y) (or (and (equal? (car x) (car y)) (not (equal? (cadr x)\
    \ (cadr y))))\n                                             (and (not (equal?\
    \ (car x) (car y))) (< (car x) (car y)))))))\n", "  (define (get_row_helper lst\
    \ x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get_row_helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (when (= x col)\n         \
    \  (list (length lst) col)))\n        <))\n", "  (define (get_row_helper lst x\
    \ acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first lst))\
    \ (get_row_helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n     \
    \  (get_row_helper (rest lst) x (cons (list (length acc) (length (first lst)))\
    \ acc))]\n      [else (get_row_helper (rest lst) x acc)]))\n  (get_row_helper\
    \ lst x (list)))\n", "  (define (get_row_helper lst x row col)\n    (cond\n  \
    \    [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper (rest lst)\
    \ x (add1 row) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list\
    \ row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row_helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row_helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", "  (sort\
    \ (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n  \
    \       (when (= x col)\n           (list (list (length lst) col))))\n       \
    \ <))\n", "  (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(empty? (first lst)) (get_row-helper (rest lst) x acc)]\n     \
    \ [(equal? x (first (first lst)))\n       (get_row-helper (rest lst) x (cons (list\
    \ (length acc) (length (first lst))) acc))]\n      [else (get_row-helper (rest\
    \ lst) x (cons (list (length acc) 0) acc))]))\n  (sort (get_row-helper lst x (list))\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (define (get_row_helper lst x acc)\n    (cond ((null? lst)\
    \ acc)\n          ((null? (car lst)) (get_row_helper (cdr lst) x acc))\n     \
    \     ((= x (car (car lst))) (get_row_helper (cdr lst) x (cons (list (length acc)\
    \ (length (car lst))) acc)))\n          (else (get_row_helper (cdr lst) x (cons\
    \ (list (length acc) 0) acc)))))\n  (sort (get_row_helper lst x '())\n       \
    \ (lambda (x y)\n          (cond ((< (car x) (car y)) #t)\n                ((>\
    \ (car x) (car y)) #f)\n                ((< (cadr x) (cadr y)) #f)\n         \
    \       ((> (cadr x) (cadr y)) #t)\n                (else #f)))))\n", "  (define\
    \ (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n   \
    \   [(empty? (first lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n      [(=\
    \ x (first (first lst)))\n       (append (list (list row col)) (get_row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(= (first lst1) (first lst2))\n             (cond\n               [(> (second\
    \ lst1) (second lst2)) #t]\n               [else #f])]\n            [else #f]))))\n",
  "  (cond\n    [(empty? lst) empty]\n    [else\n     (define (get_row_helper lst\
    \ x)\n       (cond\n         [(empty? lst) empty]\n         [else\n          (define\
    \ (get_col lst x)\n            (cond\n              [(empty? lst) empty]\n   \
    \           [else\n               (define (get_col_helper lst x)\n           \
    \      (cond\n                   [(empty? lst) empty]\n                   [else\n\
    \                    (define (get_col_helper2 lst x)\n                      (cond\n\
    \                        [(empty? lst) empty]\n                        [else\n\
    \                         (define (get_col_helper3 lst x)\n                  \
    \         (cond\n                             [(empty? lst) empty]\n         \
    \                    [else\n                              (define (get_col_helper4\
    \ lst x)\n                                (cond\n                            \
    \      [(empty? lst) empty]\n                                  [else\n       \
    \                            (define (get_col_helper5 lst x)\n               \
    \                      (cond\n                                       [(empty?\
    \ lst) empty]\n                                       [else\n                \
    \                        (define (get_col_helper6 lst x)\n                   \
    \                       (cond\n                                            [(empty?\
    \ lst) empty]\n                                            [else\n           \
    \                                  (define (get_col_helper7 lst x)\n         \
    \                                      (cond\n                               \
    \                  [(empty? lst) empty]\n                                    \
    \             [else\n                                                  (define\
    \ (get_col_helper8 lst x)\n                                                  \
    \  (cond\n                                                      [(empty? lst)\
    \ empty]\n                                                      [else\n      \
    \                                                 (define (get_col_helper9 lst\
    \ x)\n                                                         (cond\n       \
    \                                                    [(empty? lst) empty]\n  \
    \                                                         [else\n            \
    \                                                (define (get_col_helper10 lst\
    \ x)\n                                                              (cond\n  \
    \                                                              [(empty? lst) empty]\n\
    \                                                                [else\n     \
    \                                                            (define (get_col_helper11\
    \ lst x)\n                                                                   (cond\n\
    \                                                                     [(empty?\
    \ lst", "  (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(empty? (first lst)) (get_row-helper (rest lst) x acc)]\n     \
    \ [(= x (first (first lst)))\n       (get_row-helper (rest lst) x (cons (list\
    \ (length acc) 0) acc))]\n      [(= x (first (rest (first lst))))\n       (get_row-helper\
    \ (rest lst) x (cons (list (length acc) 1) acc))]\n      [(= x (first (rest (rest\
    \ (first lst)))))\n       (get_row-helper (rest lst) x (cons (list (length acc)\
    \ 2) acc))]\n      [else (get_row-helper (rest lst) x acc)]))\n  (sort (get_row-helper\
    \ lst x (list))\n        (lambda (lst1 lst2)\n          (cond\n            [(<\
    \ (first lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n\
    \            [(> (second lst1) (second lst2)) #t]\n            [(< (second lst1)\
    \ (second lst2)) #f]\n            [else #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [else #f]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (when (= x col)\n           (list (list (length lst) col))))\n     \
    \   (\u03BB (x y)\n          (cond\n            [(< (car (car x)) (car (car y)))\
    \ #t]\n            [(> (car (car x)) (car (car y))) #f]\n            [(> (cadr\
    \ (car x)) (cadr (car y))) #t]\n            [(< (cadr (car x)) (cadr (car y)))\
    \ #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty?\
    \ lst) (list)]\n      [(empty? (first lst)) (get_row-helper (rest lst) x (add1\
    \ row) col)]\n      [(equal? x (first (first lst)))\n       (cons (list row col)\
    \ (get_row-helper (rest lst) x row (add1 col)))]\n      [else (get_row-helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row-helper lst x 0 0)\n      \
    \  (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n\
    \            [(> (first x) (first y)) #f]\n            [(> (second x) (second\
    \ y)) #t]\n            [(< (second x) (second y)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row_helper (rest lst) x row (+ col 1))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row-helper lst x row col)\n\
    \    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row-helper (cdr\
    \ lst) x (+ row 1) 0))\n          ((= x (car (car lst)))\n           (cons (list\
    \ row col) (get_row-helper (cdr (car lst)) x row (+ col 1))))\n          (else\
    \ (get_row-helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond ((< (car l1) (car l2))\
    \ #t)\n                ((> (car l1) (car l2)) #f)\n                ((> (cadr l1)\
    \ (cadr l2)) #t)\n                ((< (cadr l1) (cadr l2)) #f)\n             \
    \   (else #f)))))\n", "  (cond\n    [(empty? lst) (list)]\n    [else\n     (let\
    \ ([row (first lst)])\n       (append\n        (map (lambda (y) (list (sub1 (length\
    \ lst)) y))\n             (filter (lambda (y) (= x (list-ref row y)))\n      \
    \               (iota (length row))))\n        (get_row (rest lst) x)))]))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (length lst) col)\n        \
    \           (list (length row) col))))\n        (lambda (l1 l2)\n          (cond\n\
    \            [(< (car (car l1)) (car (car l2))) #t]\n            [(> (car (car\
    \ l1)) (car (car l2))) #f]\n            [(> (cadr (car l1)) (cadr (car l2))) #t]\n\
    \            [(< (cadr (car l1)) (cadr (car l2))) #f]\n            [else #f]))))\n",
  "  (cond\n    [(empty? lst) (list)]\n    [else\n     (let* ([row (first lst)]\n\
    \            [rest (rest lst)]\n            [row-index 0]\n            [row-index-list\
    \ (list row-index)]\n            [row-index-list-list (list row-index-list)]\n\
    \            [row-index-list-list-list (list row-index-list-list)]\n         \
    \   [row-index-list-list-list-list (list row-index-list-list-list)]\n        \
    \    [row-index-list-list-list-list-list (list row-index-list-list-list-list)]\n\
    \            [row-index-list-list-list-list-list-list (list row-index-list-list-list-list-list)]\n\
    \            [row-index-list-list-list-list-list-list-list (list row-index-list-list-list-list-list-list-list)]\n\
    \            [row-index-list-list-list-list-list-list-list-list (list row-index-list-list-list-list-list-list-list-list)]\n\
    \            [row-index-list-list-list-list-list-list-list-list-list (list row-index-list-list-list-list-list-list-list-list-list)]\n\
    \            [row-index-list-list-list-list-list-list-list-list-list-list (list\
    \ row-index-list-list-list-list-list-list-list-list-list-list)]\n            [row-index-list-list-list-list-list-list-list-list-list-list-list\
    \ (list row-index-list-list-list-list-list-list-list-list-list-list-list)]\n \
    \           [row-index-list-list-list-list-list-list-list-list-list-list-list-list\
    \ (list row-index-list-list-list-list-list-list-list-list-list-list-list-list)]\n\
    \            [row-index-list-list-list-list-list-list-list", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (when\
    \ (= x col)\n           (list (length lst) col)))\n        (\u03BB (x y)\n   \
    \       (cond\n            [(> (car x) (car y)) #t]\n            [(< (car x) (car\
    \ y)) #f]\n            [(> (cadr x) (cadr y)) #f]\n            [(< (cadr x) (cadr\
    \ y)) #t]))))\n", "  (define (get_row-helper lst x)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest lst) x)]\n  \
    \    [(equal? x (first (first lst)))\n       (cons (cons (length lst) (length\
    \ (first lst)))\n             (get_row-helper (rest lst) x))]\n      [else (get_row-helper\
    \ (rest lst) x)]))\n  (sort (get_row-helper lst x)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (helper\
    \ lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n      [(empty? (first\
    \ lst)) (helper (rest lst) x acc)]\n      [(= x (first (first lst)))\n       (helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]\n      [(> x (first (first lst)))\n\
    \       (helper (rest lst) x (cons (list (length acc) 0) acc))]\n      [else\n\
    \       (helper (rest (first lst)) x (cons (list (length acc) (length (first lst)))\
    \ acc))]))\n  (helper lst x (list)))\n", "  (define (get_row_iter lst x acc)\n\
    \    (cond\n      [(empty? lst) acc]\n      [(member x (first lst))\n       (get_row_iter\
    \ (rest lst) x (append acc (list (list (length acc) (index-of x (first lst))))))]\n\
    \      [else (get_row_iter (rest lst) x acc)]))\n  (sort (get_row_iter lst x (list))\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [else (< (second\
    \ l1) (second l2))]))))\n", "  (define (get-row-helper lst x row)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper (rest\
    \ lst) x (add1 row))]\n      [(equal? x (first (first lst)))\n       (cons (list\
    \ row 0) (get-row-helper (rest lst) x row))]\n      [else (append (get-row-helper\
    \ (rest (first lst)) x row)\n                    (get-row-helper (rest lst) x\
    \ (add1 row)))]))\n  (sort (get-row-helper lst x 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get_row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [else #f]))))\n", "  (sort (filter (lambda (coord)\n                  (equal?\
    \ x (list-ref (list-ref lst (car coord)) (cdr coord))))\n                (for/list\
    \ ([i (in-range (length lst))]\n                           [j (in-range (length\
    \ (list-ref lst i)))])\n                  (list i j)))\n        (lambda (coord1\
    \ coord2)\n          (cond\n            [(> (car coord1) (car coord2)) #t]\n \
    \           [(< (car coord1) (car coord2)) #f]\n            [(> (cdr coord1) (cdr\
    \ coord2)) #f]\n            [(< (cdr coord1) (cdr coord2)) #t]))))\n", "  (cond\
    \ [(empty? lst) empty]\n        [(empty? (first lst)) (get_row (rest lst) x)]\n\
    \        [(equal? x (first (first lst)))\n         (append (list (list (first\
    \ (rest lst)) (first lst)))\n                 (get_row (rest lst) x))]\n     \
    \   [else (get_row (rest lst) x)]))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row_helper (cdr\
    \ lst) x (+ row 1) 0))\n          ((= x (car (car lst)))\n           (cons (list\
    \ row col) (get_row_helper (cdr (car lst)) x row (+ col 1))))\n          (else\
    \ (get_row_helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond ((< (car l1) (car l2))\
    \ #t)\n                ((> (car l1) (car l2)) #f)\n                ((> (cadr l1)\
    \ (cadr l2)) #t)\n                ((< (cadr l1) (cadr l2)) #f)\n             \
    \   (else #f)))))\n", "  (sort (for/list ([row (in-list lst)]\n              \
    \     [col (in-list row)])\n         (when (= x col)\n           (list (length\
    \ lst) col)))\n        <))\n", "  (define (get_row_helper lst x row)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper (rest\
    \ lst) x (+ row 1))]\n      [(equal? x (first (first lst)))\n       (cons (list\
    \ row 0) (get_row_helper (rest lst) x row))]\n      [else (get_row_helper (rest\
    \ lst) x row)]))\n  (define (get_row_helper2 lst x row col)\n    (cond\n     \
    \ [(empty? lst) empty]\n      [(empty? (first lst)) (get_row_helper2 (rest lst)\
    \ x (+ row 1) 0)]\n      [(equal? x (first (first lst)))\n       (cons (list row\
    \ col) (get_row_helper2 (rest lst) x row (+ col 1)))]\n      [else (get_row_helper2\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row_helper2 lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (sort (filter (lambda (lst) (equal? x (car lst)))\n                (apply append\
    \ (map (lambda (lst) (map (lambda (x) (list (car lst) x)) (cdr lst)))\n      \
    \                             (map (lambda (lst) (cons (car lst) (iota (length\
    \ (cdr lst)))))\n                                        (map (lambda (lst) (cons\
    \ (car lst) (filter (lambda (x) (equal? x x)) (cdr lst))))\n                 \
    \                            lst)))))\n        (lambda (lst1 lst2) (or (and (equal?\
    \ (car lst1) (car lst2)) (equal? (cadr lst1) (cadr lst2)))\n                 \
    \               (and (equal? (car lst1) (car lst2)) (< (cadr lst1) (cadr lst2)))\n\
    \                                (< (car lst1) (car lst2))))))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [else\n     (append\n      (get_row (rest lst)\
    \ x)\n      (get_row_helper (first lst) x 0 (length lst)))]))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get_row-helper (rest lst) x row (+ col 1)))]\n \
    \     [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(> (first x) (first y)) #f]\n            [(> (second\
    \ x) (second y)) #t]\n            [(< (second x) (second y)) #f]\n           \
    \ [else #f]))))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n     (cond\n\
    \       [(empty? (first lst)) (get_row (rest lst) x)]\n       [(member x (first\
    \ lst))\n        (append (list (list (first lst) (first (first lst))))\n     \
    \           (get_row (rest lst) x))]\n       [else (get_row (rest lst) x)])]))\n",
  "  (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get_row-helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (l1 l2)\n    \
    \      (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", "  (cond\n\
    \    [(empty? lst) empty]\n    [else\n     (let ([row (first lst)])\n       (cond\n\
    \         [(empty? row) (get_row (rest lst) x)]\n         [(= x (first row))\n\
    \          (append (list (list (length lst) (length row)))\n                 \
    \ (get_row (rest lst) x))]\n         [else (get_row (rest lst) x)]))]))\n", " \
    \ (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n  \
    \    [(find x (first lst))\n       (get_row-helper (rest lst) x (append acc (get-coordinates\
    \ (first lst) x (length lst))))]\n      [else (get_row-helper (rest lst) x acc)]))\n\
    \  (define (get-coordinates lst x row)\n    (define (get-coordinates-helper lst\
    \ x row acc)\n      (cond\n        [(empty? lst) acc]\n        [(= x (first lst))\n\
    \         (get-coordinates-helper (rest lst) x row (append acc (list (list row\
    \ (length lst)))))\n         ]\n        [else (get-coordinates-helper (rest lst)\
    \ x row acc)]))\n    (get-coordinates-helper lst x row (list)))\n  (sort (get_row-helper\
    \ lst x (list)) (lambda (x y) (< (first (first x)) (first (first y))))))\n", " \
    \ (define (get_row-helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(= x (first (first lst)))\n       (cons (list row col) (get_row-helper (rest\
    \ lst) x row (add1 col)))]\n      [else (get_row-helper (rest lst) x row (add1\
    \ col))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst))\
    \ (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n\
    \       (cons (list row col) (get_row-helper (rest lst) x row (+ col 1)))]\n \
    \     [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row-helper lst x row col)\n\
    \    (cond\n      [(empty? lst) '()]\n      [(empty? (first lst)) (get_row-helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list\
    \ row col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [else #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst))) (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row-helper lst x row col)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper\
    \ (rest lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list\
    \ row col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2))\
    \ #t]\n            [(> (first lst1) (first lst2)) #f]\n            [(> (second\
    \ lst1) (second lst2)) #t]\n            [else #f]))))\n", "  (cond\n    [(empty?\
    \ lst) empty]\n    [else\n     (append\n      (get_row (rest lst) x)\n      (get_row_helper\
    \ (first lst) x 0 (length lst)))]))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(= (first l1) (first l2)) (<\
    \ (second l1) (second l2))]\n            [else (< (first l1) (first l2))]))))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) (list)]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) col)]\n \
    \     [(= x (first (first lst)))\n       (append (list (list row col)) (get_row_helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(equal? x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row-helper lst x row col\
    \ acc)\n    (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row-helper\
    \ (rest lst) x (add1 row) 0 acc)]\n      [(= x (first (first lst)))\n       (get_row-helper\
    \ (rest lst) x row (add1 col) (cons (list row col) acc))]\n      [else (get_row-helper\
    \ (rest lst) x row (add1 col) acc)]))\n  (sort (get_row-helper lst x 0 0 '())\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (define (get-row-helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) empty]\n      [(empty? (first lst)) (get-row-helper (rest lst)\
    \ x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get-row-helper (rest lst) x row (+ col 1)))]\n      [else (get-row-helper (rest\
    \ lst) x row (+ col 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda\
    \ (lst1 lst2)\n          (cond\n            [(< (first lst1) (first lst2)) #t]\n\
    \            [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1)\
    \ (second lst2)) #t]\n            [(< (second lst1) (second lst2)) #f]))))\n",
  "  (define (get_row_helper lst x acc)\n    (cond ((null? lst) acc)\n          ((null?\
    \ (car lst)) (get_row_helper (cdr lst) x acc))\n          ((equal? x (car (car\
    \ lst))) (get_row_helper (cdr lst) x (cons (list (length acc) (length (car lst)))\
    \ acc)))\n          (else (get_row_helper (cdr lst) x (cons (list (length acc)\
    \ 0) acc)))))\n  (sort (get_row_helper lst x (list))\n        (lambda (x y)\n\
    \          (cond ((< (car x) (car y)) #t)\n                ((> (car x) (car y))\
    \ #f)\n                ((> (cadr x) (cadr y)) #t)\n                ((< (cadr x)\
    \ (cadr y)) #f)\n                (else #f)))))\n", "  (sort (for/list ([row (in-list\
    \ lst)]\n                   [col (in-list row)])\n         (when (= x col)\n \
    \          (list (list (length lst) col))))\n        <))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (when\
    \ (= x col)\n           (list (length lst) col)))\n        <))\n", "  (define\
    \ (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n    \
    \  [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(=\
    \ x (first (first lst))) (cons (list row col) (get_row_helper (rest lst) x row\
    \ (add1 col)))]\n      [else (get_row_helper (rest lst) x row (add1 col))]))\n\
    \  (sort (get_row_helper lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n\
    \            [(< (first lst1) (first lst2)) #t]\n            [(> (first lst1)\
    \ (first lst2)) #f]\n            [(> (second lst1) (second lst2)) #t]\n      \
    \      [(< (second lst1) (second lst2)) #f]))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) (list)]\n      [(empty? (first\
    \ lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n\
    \      [else (get_row_helper (rest lst) x row (add1 col))]))\n  (sort (get_row_helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row_helper lst x acc)\n \
    \   (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x acc)]\n      [(= x (first (first lst))) (get_row_helper (rest lst)\
    \ x (cons (cons (length acc) (length (first lst))) acc))]\n      [else (get_row_helper\
    \ (rest lst) x (cons (first lst) acc))]))\n  (sort (get_row_helper lst x '())\n\
    \        (lambda (l1 l2)\n          (cond\n            [(and (list? l1) (list?\
    \ l2)) (and (< (first l1) (first l2)) (> (second l1) (second l2)))]\n        \
    \    [(list? l1) #t]\n            [(list? l2) #f]\n            [else #f]))))\n",
  "  (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(equal? x (first (first lst)))\n       (cons (list row col) (get_row_helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (get_row_helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get_row_helper (rest lst) x (add1 row) 0)]\n   \
    \   [(equal? x (first (first lst)))\n       (cons (list row col) (get_row_helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get_row_helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n        (lambda (l1 l2)\n\
    \          (cond\n            [(< (first l1) (first l2)) #t]\n            [(>\
    \ (first l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n \
    \           [(< (second l1) (second l2)) #f]\n            [else #f]))))\n", " \
    \ (define (get_row-helper lst x row col acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(empty? (first lst)) (get_row-helper (rest lst) x (+ row 1) 0 acc)]\n\
    \      [(= x (first (first lst)))\n       (get_row-helper (rest (first lst)) x\
    \ row (+ col 1) (cons (list row col) acc))]\n      [else (get_row-helper (rest\
    \ (first lst)) x row (+ col 1) acc)]))\n  (sort (get_row-helper lst x 0 0 '())\n\
    \        (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2))\
    \ #t]\n            [(> (first l1) (first l2)) #f]\n            [(> (second l1)\
    \ (second l2)) #t]\n            [(< (second l1) (second l2)) #f]\n           \
    \ [else #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n   \
    \   [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest lst)\
    \ x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row col)\
    \ (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper (rest\
    \ lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n        (lambda\
    \ (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n     \
    \       [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second l2))\
    \ #t]\n            [else #f]))))\n", "  (define (get_row_iter lst x acc)\n   \
    \ (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_iter (rest\
    \ lst) x acc)]\n      [(equal? x (first (first lst)))\n       (get_row_iter (rest\
    \ lst) x (append acc (list (list (length acc) 0))))]\n      [else (get_row_iter\
    \ (rest lst) x (append acc (list (list (length acc) (length (first lst)))))])]))\n\
    \  (get_row_iter lst x (list)))\n", "  (cond\n    [(empty? lst) empty]\n    [else\n\
    \     (append\n      (get_row (rest lst) x)\n      (get_row_helper (first lst)\
    \ x 0 (length lst)))]))\n", "  (define (get_row_helper lst x row col)\n    (cond\
    \ ((null? lst) '())\n          ((null? (car lst)) (get_row_helper (cdr lst) x\
    \ (+ row 1) 0))\n          ((= x (car (car lst))) (cons (list row col) (get_row_helper\
    \ (cdr (car lst)) x row (+ col 1))))\n          (else (get_row_helper (cdr (car\
    \ lst)) x row (+ col 1)))))\n  (sort (get_row_helper lst x 0 0) (lambda (x y)\
    \ (and (< (car x) (car y)) (or (= (car x) (car y)) (> (cadr x) (cadr y)))))))\n",
  "  (cond [(empty? lst) empty]\n        [else (append (get_row (rest lst) x)\n  \
    \                    (get_row_helper (first lst) x 0 (length lst)))]))\n", " \
    \ (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (when (= x col)\n           (list (list (length lst) col))))\n     \
    \   (lambda (l1 l2)\n          (cond [(< (car (car l1)) (car (car l2))) #t]\n\
    \                [(> (car (car l1)) (car (car l2))) #f]\n                [(> (cadr\
    \ (car l1)) (cadr (car l2))) #t]\n                [(< (cadr (car l1)) (cadr (car\
    \ l2))) #f]\n                [else #f]))))\n", "  (define (get_row-helper lst\
    \ x row col)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row-helper\
    \ (cdr lst) x (+ row 1) 0))\n          ((equal? x (car (car lst)))\n         \
    \  (cons (list row col) (get_row-helper (cdr (car lst)) x row (+ col 1))))\n \
    \         (else (get_row-helper (cdr (car lst)) x row (+ col 1)))))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (l1 l2)\n          (cond ((< (car l1) (car l2))\
    \ #t)\n                ((> (car l1) (car l2)) #f)\n                ((> (cadr l1)\
    \ (cadr l2)) #t)\n                (else #f)))))\n", "  (define (get_row_helper\
    \ lst x row col)\n    (if (null? lst)\n        (list)\n        (if (null? (car\
    \ lst))\n            (get_row_helper (cdr lst) x (+ row 1) 0)\n            (if\
    \ (= x (car (car lst)))\n                (cons (list row col) (get_row_helper\
    \ (cdr (car lst)) x row (+ col 1)))\n                (get_row_helper (cdr (car\
    \ lst)) x row (+ col 1))))))\n  (sort (get_row_helper lst x 0 0)\n        (lambda\
    \ (l1 l2)\n          (if (= (car l1) (car l2))\n              (> (cadr l1) (cadr\
    \ l2))\n              (< (car l1) (car l2))))))\n", "  (sort (for/list ([row (in-list\
    \ lst)]\n                   [col (in-list row)])\n         (if (= x col)\n   \
    \          (list (list (length lst) col)\n                   (list (length row)\
    \ col))))\n        (\u03BB (l1 l2)\n          (cond\n            [(< (car (car\
    \ l1)) (car (car l2))) #t]\n            [(> (car (car l1)) (car (car l2))) #f]\n\
    \            [(> (cadr (car l1)) (cadr (car l2))) #t]\n            [(< (cadr (car\
    \ l1)) (cadr (car l2))) #f]))))\n", "  (define (get_row_helper lst x acc)\n  \
    \  (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x acc)]\n      [(equal? x (first (first lst)))\n       (get_row_helper\
    \ (rest lst) x (append acc (list (list (length acc) (length (first lst))))) )]\n\
    \      [else (get_row_helper (rest lst) x (append acc (list (list (length acc)\
    \ 0))))]))\n  (sort (get_row_helper lst x (list))\n        (lambda (l1 l2)\n \
    \         (cond\n            [(> (first l1) (first l2)) #t]\n            [(< (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #f]\n        \
    \    [(< (second l1) (second l2)) #t]\n            [else #f]))))\n", "  (define\
    \ (get_row_helper lst x acc)\n    (cond\n      ((null? lst) acc)\n      ((null?\
    \ (car lst)) (get_row_helper (cdr lst) x acc))\n      ((equal? x (car (car lst)))\
    \ (get_row_helper (cdr lst) x (cons (list (length acc) (length (car lst))) acc)))\n\
    \      (else (get_row_helper (cdr lst) x (cons (list (length acc) 0) acc)))))\n\
    \  (sort (get_row_helper lst x (list)) (lambda (l1 l2) (if (equal? (car l1) (car\
    \ l2)) (if (equal? (cadr l1) (cadr l2)) #f #t) #f))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
