name: HumanEval_87_get_row
language: rkt
prompt: "#lang racket\n\n;; You are given a 2 dimensional data, as a nested lists,\n\
  ;; which is similar to matrix, however, unlike matrices,\n;; each row may contain\
  \ a different number of columns.\n;; Given lst, and integer x, find integers x in\
  \ the list,\n;; and return list of lists, [(x1, y1), (x2, y2) ...] such that\n;;\
  \ each list is a coordinate - (row, columns), starting with 0.\n;; Sort coordinates\
  \ initially by rows in ascending order.\n;; Also, sort coordinates of the row by\
  \ columns in descending order.\n;; Examples:\n;; >>> (get_row (list (list 1 2 3\
  \ 4 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1)\n;; (list (list 0 0) (list 1\
  \ 4) (list 1 0) (list 2 5) (list 2 0))\n;; >>> (get_row (list ) 1)\n;; (list )\n\
  ;; >>> (get_row (list (list ) (list 1) (list 1 2 3)) 3)\n;; (list (list 2 2))\n\
  (define (get_row lst x)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_row))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 1 6) (list\
  \ 1 2 3 4 5 1)) 1) (list (list 0 0) (list 1 4) (list 1 0) (list 2 5) (list 2 0)))\n\
  \    (check-equal? (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list\
  \ 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 2 3 4 5 6)) 2) (list\
  \ (list 0 1) (list 1 1) (list 2 1) (list 3 1) (list 4 1) (list 5 1)))\n    (check-equal?\
  \ (candidate (list (list 1 2 3 4 5 6) (list 1 2 3 4 5 6) (list 1 1 3 4 5 6) (list\
  \ 1 2 1 4 5 6) (list 1 2 3 1 5 6) (list 1 2 3 4 1 6) (list 1 2 3 4 5 1)) 1) (list\
  \ (list 0 0) (list 1 0) (list 2 1) (list 2 0) (list 3 2) (list 3 0) (list 4 3) (list\
  \ 4 0) (list 5 4) (list 5 0) (list 6 5) (list 6 0)))\n    (check-equal? (candidate\
  \ (list ) 1) (list ))\n    (check-equal? (candidate (list (list 1)) 2) (list ))\n\
  \    (check-equal? (candidate (list (list ) (list 1) (list 1 2 3)) 3) (list (list\
  \ 2 2)))\n))\n\n(test-humaneval)"
completions: ["  (define (get_row_helper lst x result)\n    (cond\n      [(empty?\
    \ lst) result]\n      [(empty? (first lst)) (get_row_helper (rest lst) x result)]\n\
    \      [(equal? x (first (first lst)))\n       (get_row_helper (rest lst) x (append\
    \ result (list (list (length result) (length (first lst)))))\n       )]\n    \
    \  [else (get_row_helper (rest lst) x (append result (list (list (length result)\
    \ (length (first lst))))))]))\n  (sort (get_row_helper lst x (list))\n       \
    \ (lambda (x y)\n          (cond\n            [(< (first x) (first y)) #t]\n \
    \           [(> (first x) (first y)) #f]\n            [(> (second x) (second y))\
    \ #t]\n            [(< (second x) (second y)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) empty]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (+ row 1) 0)]\n    \
    \  [(= x (first (first lst)))\n       (cons (list row col) (get-row-helper (rest\
    \ lst) x row (+ col 1)))]\n      [else (get-row-helper (rest lst) x row (+ col\
    \ 1))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (l1 l2)\n      \
    \    (cond\n            [(< (first l1) (first l2)) #t]\n            [(> (first\
    \ l1) (first l2)) #f]\n            [(> (second l1) (second l2)) #t]\n        \
    \    [else #f]))))\n", "  (define (get_row-helper lst x row col)\n    (cond\n\
    \      [(empty? lst) empty]\n      [(empty? (first lst)) (get_row-helper (rest\
    \ lst) x (+ row 1) 0)]\n      [(= x (first (first lst)))\n       (cons (list row\
    \ col) (get_row-helper (rest lst) x row (+ col 1)))]\n      [else (get_row-helper\
    \ (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper lst x 0 0)\n       \
    \ (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [else #f]))))\n", "  (let loop ([lst lst] [x x] [row 0]\
    \ [col 0] [acc '()])\n    (cond [(empty? lst) (reverse acc)]\n          [(empty?\
    \ (car lst)) (loop (cdr lst) x (+ row 1) 0 acc)]\n          [(= x (car (car lst)))\
    \ (loop (cdr (car lst)) x row (+ col 1) (cons (list row col) acc))]\n        \
    \  [else (loop (cdr (car lst)) x row (+ col 1) acc)])))\n", "  (define (get_row_helper\
    \ lst x)\n    (cond ((null? lst) '())\n          ((null? (car lst)) (get_row_helper\
    \ (cdr lst) x))\n          ((equal? x (car (car lst))) (cons (list (car lst) (car\
    \ (cdr (car lst)))) (get_row_helper (cdr lst) x)))\n          (else (get_row_helper\
    \ (cdr lst) x))))\n  (sort (get_row_helper lst x)\n        (lambda (lst1 lst2)\n\
    \          (cond ((< (car (car lst1)) (car (car lst2))) #t)\n                ((>\
    \ (car (car lst1)) (car (car lst2))) #f)\n                ((> (car (cdr (car lst1)))\
    \ (car (cdr (car lst2)))) #t)\n                (else #f)))))\n", "  (sort (for/list\
    \ ([row (in-list lst)]\n                   [col (in-list row)])\n         (if\
    \ (= x col)\n             (list (list (length lst) col)\n                   (list\
    \ (length row) col))))\n        <))\n", "  (sort (for/list ([row (in-list lst)]\n\
    \                   [col (in-list row)])\n         (when (= x col)\n         \
    \  (list (list (length lst) col))))\n        <))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (cond\n      [(empty? lst) empty]\n      [(empty? (first\
    \ lst)) (get_row-helper (rest lst) x (+ row 1) 0)]\n      [(= x (first (first\
    \ lst)))\n       (cons (list row col) (get_row-helper (rest lst) x row (+ col\
    \ 1)))]\n      [else (get_row-helper (rest lst) x row (+ col 1))]))\n  (sort (get_row-helper\
    \ lst x 0 0)\n        (lambda (lst1 lst2)\n          (cond\n            [(< (first\
    \ lst1) (first lst2)) #t]\n            [(> (first lst1) (first lst2)) #f]\n  \
    \          [(> (second lst1) (second lst2)) #t]\n            [else #f]))))\n",
  "  (define (get_row-helper lst x acc)\n    (cond\n      [(empty? lst) acc]\n   \
    \   [(empty? (first lst)) (get_row-helper (rest lst) x acc)]\n      [(equal? x\
    \ (first (first lst)))\n       (get_row-helper (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]\n      [else (get_row-helper (rest lst) x\
    \ (cons (list (length acc) (length (first lst))) acc))]))\n  (sort (get_row-helper\
    \ lst x '())\n        (lambda (l1 l2)\n          (cond\n            [(< (first\
    \ l1) (first l2)) #t]\n            [(> (first l1) (first l2)) #f]\n          \
    \  [(> (second l1) (second l2)) #t]\n            [(< (second l1) (second l2))\
    \ #f]\n            [else #f]))))\n", "  (define (get_row_helper lst x acc)\n \
    \   (cond\n      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x acc)]\n      [(= x (first (first lst))) (get_row_helper (rest lst)\
    \ x (cons (list (length acc) (length (first lst))) acc))]\n      [else (get_row_helper\
    \ (rest lst) x (cons (list (length acc) 0) acc))]))\n  (sort (get_row_helper lst\
    \ x (list))\n        (lambda (x y)\n          (cond\n            [(< (first x)\
    \ (first y)) #t]\n            [(= (first x) (first y)) (< (second x) (second y))]\n\
    \            [else #f]))))\n", "  (define (get_row_helper lst x acc)\n    (cond\
    \ ((null? lst) acc)\n          ((null? (car lst)) (get_row_helper (cdr lst) x\
    \ acc))\n          ((equal? x (car (car lst))) (get_row_helper (cdr lst) x (cons\
    \ (list (length acc) 0) acc)))\n          (else (get_row_helper (cdr lst) x (cons\
    \ (list (length acc) (get_row_helper_2 (car lst) x 0)) acc)))))\n  (define (get_row_helper_2\
    \ lst x acc)\n    (cond ((null? lst) acc)\n          ((equal? x (car lst)) (get_row_helper_2\
    \ (cdr lst) x (+ acc 1)))\n          (else (get_row_helper_2 (cdr lst) x acc))))\n\
    \  (get_row_helper lst x '()))\n", "  (define (get_row_helper lst x row col)\n\
    \    (cond\n      [(empty? lst) (list)]\n      [(empty? (first lst)) (get_row_helper\
    \ (rest lst) x (add1 row) 0)]\n      [(= x (first (first lst)))\n       (cons\
    \ (list row col) (get_row_helper (rest lst) x row (add1 col)))]\n      [else (get_row_helper\
    \ (rest lst) x row (add1 col))]))\n  (sort (get_row_helper lst x 0 0)\n      \
    \  (lambda (l1 l2)\n          (cond\n            [(< (first l1) (first l2)) #t]\n\
    \            [(> (first l1) (first l2)) #f]\n            [(> (second l1) (second\
    \ l2)) #t]\n            [(< (second l1) (second l2)) #f]\n            [else #f]))))\n",
  "  (define (get-row-helper lst x row col)\n    (cond\n      [(empty? lst) '()]\n\
    \      [(empty? (first lst)) (get-row-helper (rest lst) x (add1 row) 0)]\n   \
    \   [(equal? x (first (first lst)))\n       (cons (list row col) (get-row-helper\
    \ (rest lst) x row (add1 col)))]\n      [else (get-row-helper (rest lst) x row\
    \ (add1 col))]))\n  (sort (get-row-helper lst x 0 0)\n        (lambda (lst1 lst2)\n\
    \          (cond\n            [(< (first lst1) (first lst2)) #t]\n           \
    \ [(> (first lst1) (first lst2)) #f]\n            [(> (second lst1) (second lst2))\
    \ #t]\n            [(< (second lst1) (second lst2)) #f]))))\n", "  (cond\n   \
    \ [(empty? lst) (list)]\n    [else\n     (append\n      (get_row (rest lst) x)\n\
    \      (get_row_helper (first lst) x 0 (length lst)))]))\n", "  (define (get_row-helper\
    \ lst x row col)\n    (if (null? lst)\n        (list)\n        (if (null? (car\
    \ lst))\n            (get_row-helper (cdr lst) x (+ row 1) 0)\n            (if\
    \ (= x (car (car lst)))\n                (cons (list row col) (get_row-helper\
    \ (cdr (car lst)) x row (+ col 1)))\n                (get_row-helper (cdr (car\
    \ lst)) x row (+ col 1))))))\n  (sort (get_row-helper lst x 0 0)\n        (lambda\
    \ (lst1 lst2)\n          (if (= (car lst1) (car lst2))\n              (> (cadr\
    \ lst1) (cadr lst2))\n              (< (car lst1) (car lst2))))))\n", "  (define\
    \ (get_row-iter lst x acc)\n    (cond\n      [(empty? lst) (reverse acc)]\n  \
    \    [(empty? (first lst)) (get_row-iter (rest lst) x acc)]\n      [(equal? x\
    \ (first (first lst)))\n       (get_row-iter (rest lst) x (cons (list (length\
    \ acc) (length (first lst))) acc))]\n      [else (get_row-iter (rest lst) x acc)]))\n\
    \  (get_row-iter lst x (list)))\n", "  (define (get_row-aux lst x acc)\n    (cond\n\
    \      [(empty? lst) acc]\n      [(empty? (first lst)) (get_row-aux (rest lst)\
    \ x acc)]\n      [(equal? x (first (first lst)))\n       (get_row-aux (rest lst)\
    \ x (cons (list (length acc) 0) acc))]\n      [(equal? x (first (rest (first lst))))\n\
    \       (get_row-aux (rest lst) x (cons (list (length acc) 1) acc))]\n      [(equal?\
    \ x (first (rest (rest (first lst)))))\n       (get_row-aux (rest lst) x (cons\
    \ (list (length acc) 2) acc))]\n      [else (get_row-aux (rest lst) x acc)]))\n\
    \  (sort (get_row-aux lst x (list))\n        (lambda (x y)\n          (cond\n\
    \            [(< (first x) (first y)) #t]\n            [(> (first x) (first y))\
    \ #f]\n            [(> (second x) (second y)) #t]\n            [(< (second x)\
    \ (second y)) #f]\n            [else #f]))))\n", "  (sort (for/list ([row (in-list\
    \ lst)]\n                   [col (in-list row)])\n         (when (= x col)\n \
    \          (list row col)))\n        (\u03BB (a b)\n          (cond\n        \
    \    [(< (car a) (car b)) #t]\n            [(> (car a) (car b)) #f]\n        \
    \    [(> (cadr a) (cadr b)) #t]\n            [(< (cadr a) (cadr b)) #f]))))\n",
  "  (sort (for/list ([row (in-list lst)]\n                   [col (in-list row)])\n\
    \         (if (= x col)\n             (list (list (length lst) col))))\n     \
    \   (lambda (l1 l2)\n          (cond\n            [(> (car (car l1)) (car (car\
    \ l2))) #t]\n            [(< (car (car l1)) (car (car l2))) #f]\n            [(>\
    \ (cadr (car l1)) (cadr (car l2))) #f]\n            [(< (cadr (car l1)) (cadr\
    \ (car l2))) #t]))))\n", "  (sort (for/list ([row (in-list lst)]\n           \
    \        [col (in-list row)])\n         (if (= x col) (list (list (length lst)\
    \ (length row)))))\n        (lambda (x y)\n          (if (= (car (car x)) (car\
    \ (car y)))\n              (if (= (cadr (car x)) (cadr (car y)))\n           \
    \       (if (= (caddr (car x)) (caddr (car y)))\n                      (if (=\
    \ (cadddr (car x)) (cadddr (car y)))\n                          (if (= (caddddr\
    \ (car x)) (caddddr (car y)))\n                              (if (= (cadddddr\
    \ (car x)) (cadddddr (car y)))\n                                  (if (= (caddddddr\
    \ (car x)) (caddddddr (car y)))\n                                      (if (=\
    \ (cadddddddr (car x)) (cadddddddr (car y)))\n                               \
    \           (if (= (caddddddddr (car x)) (caddddddddr (car y)))\n            \
    \                                  (if (= (cadddddddddr (car x)) (cadddddddddr\
    \ (car y)))\n                                                  (if (= (caddddddddddr\
    \ (car x)) (caddddddddddr (car y)))\n                                        \
    \              (if (= (cadddddddddddr (car x)) (cadddddddddddr (car y)))\n   \
    \                                                       (if (= (caddddddddddddr\
    \ (car x)) (caddddddddddddr (car y)))\n                                      \
    \                        (if (= (cadddddddddddddr (car x)) (cadddddddddddddr (car\
    \ y)))\n                                                                  (if\
    \ (= (caddddddddddddddr (car x)) (caddddddddddddddr (car y)))\n              \
    \                                                        (if (= (cadddddddddddddddr\
    \ (car x)) (cadddddddddddddddr (car y)))\n                                   \
    \             "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
