name: HumanEval_116_sort_array
language: rkt
prompt: "#lang racket\n\n;; In this Kata, you have to sort a list of non-negative\
  \ integers according to\n;; number of ones in their binary representation in ascending\
  \ order.\n;; For similar number of ones, sort based on decimal value.\n;; It must\
  \ be implemented like this:\n;; >>> (sort_array (list 1 5 2 3 4))\n;; (list 1 2\
  \ 3 4 5)\n;; >>> (sort_array (list -2 -3 -4 -5 -6))\n;; (list -6 -5 -4 -3 -2)\n\
  ;; >>> (sort_array (list 1 0 2 3 4))\n;; (list 0 1 2 3 4)\n(define (sort_array arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n\
  \    (check-equal? (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5))\n    (check-equal?\
  \ (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3))\n    (check-equal? (candidate\
  \ (list 1 0 2 3 4)) (list 0 1 2 4 3))\n    (check-equal? (candidate (list )) (list\
  \ ))\n    (check-equal? (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4\
  \ 3 3 5 5 5 7 77))\n    (check-equal? (candidate (list 3 6 44 12 32 5)) (list 32\
  \ 3 5 6 12 44))\n    (check-equal? (candidate (list 2 4 8 16 32)) (list 2 4 8 16\
  \ 32))\n    (check-equal? (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32))\n))\n\
  \n(test-humaneval)"
completions: ["  (sort (map (lambda (x)\n               (cons (count-ones x) x))\n\
    \             arr)\n        (lambda (a b)\n          (cond\n            [(< (car\
    \ a) (car b)) #t]\n            [(> (car a) (car b)) #f]\n            [(< (cdr\
    \ a) (cdr b)) #t]\n            [(> (cdr a) (cdr b)) #f]\n            [else #f]))))\n",
  "  (sort (map (\u03BB (x) (cons x (count-ones x))) arr)\n        (\u03BB (a b) (cond\
    \ [(< (cdr a) (cdr b)) #t]\n                        [(> (cdr a) (cdr b)) #f]\n\
    \                        [(< (car a) (car b)) #t]\n                        [else\
    \ #f]))))\n", "  (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n      \
    \  (lambda (x y)\n          (cond\n            [(< (car x) (car y)) #t]\n    \
    \        [(> (car x) (car y)) #f]\n            [(< (cdr x) (cdr y)) #t]\n    \
    \        [(> (cdr x) (cdr y)) #f]\n            [else #f]))))\n", "  (sort (map\
    \ (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n         \
    \ (if (= (car x) (car y))\n              (< (cdr x) (cdr y))\n              (<\
    \ (car x) (car y))))))\n", "  (sort (map (lambda (x) (cons (count-ones x) x))\
    \ arr)\n        (lambda (x y)\n          (cond\n            [(< (car x) (car y))\
    \ #t]\n            [(> (car x) (car y)) #f]\n            [(< (cdr x) (cdr y))\
    \ #t]\n            [(> (cdr x) (cdr y)) #f]\n            [else #f]))))\n", " \
    \ (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (a b)\
    \ (cond\n                       ((< (car a) (car b)) #t)\n                   \
    \    ((> (car a) (car b)) #f)\n                       ((< (cdr a) (cdr b)) #t)\n\
    \                       ((> (cdr a) (cdr b)) #f)\n                       (else\
    \ #f)))))\n", "  (sort (map (\u03BB (x) (list x (number->string x 2))) arr)\n\
    \        (\u03BB (x y)\n          (cond\n            [(> (length (cadr x)) (length\
    \ (cadr y))) #t]\n            [(< (length (cadr x)) (length (cadr y))) #f]\n \
    \           [(> (car x) (car y)) #t]\n            [(< (car x) (car y)) #f]\n \
    \           [else #f]))))\n", "  (sort (map (lambda (x) (cons (count-ones x) x))\
    \ arr)\n        (lambda (x y)\n          (cond\n            [(> (car x) (car y))\
    \ #t]\n            [(< (car x) (car y)) #f]\n            [(> (cdr x) (cdr y))\
    \ #f]\n            [(< (cdr x) (cdr y)) #t]))))\n", "  (sort (map (lambda (x)\
    \ (cons (count-ones x) x)) arr)\n        (lambda (a b)\n          (cond\n    \
    \        [(< (car a) (car b)) #t]\n            [(> (car a) (car b)) #f]\n    \
    \        [(< (cdr a) (cdr b)) #t]\n            [(> (cdr a) (cdr b)) #f]))))\n",
  "  (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (a b)\n\
    \          (cond\n            [(= (car a) (car b)) (< (cdr a) (cdr b))]\n    \
    \        [else (< (car a) (car b))]))))\n", "  (sort arr (lambda (a b)\n     \
    \         (let ([a-ones (count-ones a)]\n                    [b-ones (count-ones\
    \ b)])\n                (if (= a-ones b-ones)\n                    (< a b)\n \
    \                   (< a-ones b-ones))))))\n", "  (sort arr (lambda (x y)\n  \
    \            (let ([x-ones (count-ones x)]\n                    [y-ones (count-ones\
    \ y)])\n                (cond\n                  [(> x-ones y-ones) #t]\n    \
    \              [(< x-ones y-ones) #f]\n                  [(> x y) #t]\n      \
    \            [(< x y) #f]\n                  [else #f])))))\n", "  (sort (map\
    \ (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n         \
    \ (cond\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car y))\
    \ #f]\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x) (cdr y))\
    \ #f]\n            [else #f]))))\n", "  (sort (map (\u03BB (x) (cons (count-ones\
    \ x) x)) arr)\n        (\u03BB (x y) (or (< (car x) (car y))\n               \
    \     (and (= (car x) (car y))\n                         (< (cdr x) (cdr y)))))))\n",
  "  (sort (map (lambda (x)\n               (cons (count-ones x) x))\n           \
    \  arr)\n        (lambda (a b)\n          (if (= (car a) (car b))\n          \
    \    (< (cdr a) (cdr b))\n              (< (car a) (car b))))))\n", "  (sort (map\
    \ (lambda (x) (list x (ones-in-binary x))) arr)\n        (lambda (x y)\n     \
    \     (cond\n            [(< (cadr x) (cadr y)) #t]\n            [(> (cadr x)\
    \ (cadr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car x)\
    \ (car y)) #f]\n            [else #f]))))\n", "  (sort (map (\u03BB (x) (cons\
    \ (count-ones x) x)) arr)\n        (\u03BB (x y) (or (< (car x) (car y))\n   \
    \                 (and (= (car x) (car y)) (< (cdr x) (cdr y)))))))\n", "  (sort\
    \ (map (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n    \
    \      (cond\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car\
    \ y)) #f]\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x) (cdr\
    \ y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (cons (count-ones\
    \ x) x)) arr)\n        (lambda (a b)\n          (cond ((= (car a) (car b)) (<\
    \ (cdr a) (cdr b)))\n                ((< (car a) (car b)) #t)\n              \
    \  (else #f)))))\n", "  (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n\
    \        <\n        (lambda (x y)\n          (if (= (car x) (car y))\n       \
    \       (< (cdr x) (cdr y))\n              (< (car x) (car y))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
