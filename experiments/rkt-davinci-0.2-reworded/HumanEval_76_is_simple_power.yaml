name: HumanEval_76_is_simple_power
language: rkt
prompt: "#lang racket\n\n;; Your task is to write a function that returns true if\
  \ a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple\
  \ power of n if n**int=x\n;; For example:\n;; >>> (is_simple_power 1 4)\n;; true\n\
  ;; >>> (is_simple_power 2 2)\n;; true\n;; >>> (is_simple_power 8 2)\n;; true\n;;\
  \ >>> (is_simple_power 3 2)\n;; false\n;; >>> (is_simple_power 3 1)\n;; false\n\
  ;; >>> (is_simple_power 5 3)\n;; false\n(define (is_simple_power x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
  \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
  \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
  \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24 2)\
  \ #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate 12\
  \ 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate 1\
  \ 12) #t)\n))\n\n(test-humaneval)"
completions: ["  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n        \
    \  (is_simple_power (/ x n) n)\n          #f)))\n", "  (define (is-power? x n)\n\
    \    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power? x n))\n", "  (if (or (= x 1)\
    \ (= n 1))\n      #f\n      (if (= x n)\n          #t\n          (if (= (remainder\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n     \
    \   (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n           \
    \ #f)))\n  (is-power-of? x n))\n", "  (let loop ([x x] [n n])\n    (cond [(= x\
    \ 1) true]\n          [(= x n) true]\n          [(< x n) false]\n          [else\
    \ (loop (/ x n) n)])))\n", "  (define (is-power? x n)\n    (cond\n      [(= x\
    \ 1) #t]\n      [(< x 1) #f]\n      [(= (remainder x n) 0) (is-power? (/ x n)\
    \ n)]\n      [else #f]))\n  (is-power? x n))\n", "  (define (power-of-n? x n)\n\
    \    (if (= x n)\n        true\n        (if (< x n)\n            false\n     \
    \       (power-of-n? (/ x n) n))))\n  (power-of-n? x n))\n", "  (define (pow n\
    \ x)\n    (if (= x 0)\n        1\n        (* n (pow n (- x 1)))))\n  (if (= x\
    \ 1)\n      true\n      (if (= (pow n (floor (/ (log x) (log n)))) x)\n      \
    \    true\n          false)))\n", "  (define (is-power-of? x n)\n    (if (= x\
    \ 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/\
    \ x n) n)\n            #f)))\n  (is-power-of? x n))", "  (define (is_simple_power_iter\
    \ x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n\
    \ i)) #t]\n      [(> x (* n i)) (is_simple_power_iter x n (+ i 1))]\n      [else\
    \ #f]))\n  (is_simple_power_iter x n 1))\n", "  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n",
  "  (define (is-power-of-n? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of-n? (/ x n) n)\n            #f)))\n  (is-power-of-n?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n      \
    \    (if (= (modulo x n) 0)\n              (is_simple_power (/ x n) n)\n     \
    \         #f))))\n", "  (define (is_simple_power-helper x n i)\n    (cond\n  \
    \    [(= x 1) true]\n      [(= x n) true]\n      [(= x (* n i)) true]\n      [else\
    \ (is_simple_power-helper x n (+ i 1))]))\n  (is_simple_power-helper x n 2))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond ((= x 1) #t)\n          ((= x\
    \ (expt n i)) #t)\n          ((> x (expt n i)) (is_simple_power-iter x n (+ i\
    \ 1)))\n          (else #f)))\n  (is_simple_power-iter x n 1))\n", "  (and (not\
    \ (= x 1))\n       (not (= n 1))\n       (not (= x n))\n       (let loop ([i 1])\n\
    \         (if (= (expt n i) x)\n             #t\n             (if (< (expt n i)\
    \ x)\n                 (loop (+ i 1))\n                 #f)))))\n", "  (define\
    \ (is_simple_power-iter x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n)\
    \ #t]\n      [(= x (* n i)) #t]\n      [(> x (* n i)) (is_simple_power-iter x\
    \ n (+ i 1))]\n      [else #f]))\n  (is_simple_power-iter x n 1))\n", "  (define\
    \ (is-power? x n)\n    (if (= x 1)\n        true\n        (if (= (modulo x n)\
    \ 0)\n            (is-power? (/ x n) n)\n            false)))\n  (is-power? x\
    \ n))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n        \
    \  (if (= x (* n n))\n              #t\n              (if (= x (* n (* n n)))\n\
    \                  #t\n                  (if (= x (* n (* n (* n n))))\n     \
    \                 #t\n                      (if (= x (* n (* n (* n (* n n)))))\n\
    \                          #t\n                          (if (= x (* n (* n (*\
    \ n (* n (* n n))))))\n                              #t\n                    \
    \          (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n                 \
    \                 #t\n                                  (if (= x (* n (* n (*\
    \ n (* n (* n (* n (* n n))))))))\n                                      #t\n\
    \                                      (if (= x (* n (* n (* n (* n (* n (* n\
    \ (* n (* n n)))))))))\n                                          #t\n       \
    \                                   (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))\n                                              #t\n\
    \                                              (if (= x (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))\n                                   \
    \               #t\n                                                  (if (= x\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n      \
    \                                                #t\n                        \
    \                              (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n n))))))))))))\n                                      \
    \                    #t\n                                                    \
    \      (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))))))\n                                                         \
    \     #t\n                                                              (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                  #t\n      \
    \                                                            (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
