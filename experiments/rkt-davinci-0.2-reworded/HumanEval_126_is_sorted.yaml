name: HumanEval_126_is_sorted
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return whether or not they are\
  \ sorted\n;; in ascending order. If list has more than 1 duplicate of the same\n\
  ;; number, return #f. Assume no negative numbers and only integers.\n;; Examples\n\
  ;; >>> (is_sorted (list 5))\n;; #t\n;; >>> (is_sorted (list 1 2 3 4 5))\n;; #t\n\
  ;; >>> (is_sorted (list 1 3 2 4 5))\n;; #f\n;; >>> (is_sorted (list 1 2 3 4 5 6))\n\
  ;; #t\n;; >>> (is_sorted (list 1 2 3 4 5 6 7))\n;; #t\n;; >>> (is_sorted (list 1\
  \ 3 2 4 5 6 7))\n;; #f\n;; >>> (is_sorted (list 1 2 2 3 3 4))\n;; #t\n;; >>> (is_sorted\
  \ (list 1 2 2 2 3 4))\n;; #f\n(define (is_sorted lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n\
  \    (check-equal? (candidate (list 5)) #t)\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 6)) #t)\n    (check-equal? (candidate (list 1 2 3 4\
  \ 5 6 7)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5 6 7)) #f)\n    (check-equal?\
  \ (candidate (list )) #t)\n    (check-equal? (candidate (list 1)) #t)\n    (check-equal?\
  \ (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 2 2 3 4))\
  \ #f)\n    (check-equal? (candidate (list 1 2 3 3 3 4)) #f)\n    (check-equal? (candidate\
  \ (list 1 2 2 3 3 4)) #t)\n    (check-equal? (candidate (list 1 2 3 4)) #t)\n))\n\
  \n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(<\
    \ (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (= (first lst)\
    \ (second lst))\n          (is_sorted (rest lst))) #f]\n    [(and (< (first lst)\
    \ (second lst))\n          (is_sorted (rest lst))) #t]\n    [else #f]))\n", " \
    \ (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #t]\n    [(and (not (null?\
    \ (cdr lst))) (not (null? (cddr lst))) (not (null? (cdddr lst))))\n     (and (not\
    \ (equal? (car lst) (cadr lst)))\n          (not (equal? (cadr lst) (caddr lst)))\n\
    \          (not (equal? (caddr lst) (cadddr lst)))\n          (is_sorted (cdr\
    \ lst)))]\n    [(and (not (null? (cdr lst))) (not (null? (cddr lst))))\n     (and\
    \ (not (equal? (car lst) (cadr lst)))\n          (not (equal? (cadr lst) (caddr\
    \ lst)))\n          (is_sorted (cdr lst)))]\n    [(and (not (null? (cdr lst)))\
    \ (not (null? (cdddr lst))))\n     (and (not (equal? (car lst) (cadr lst)))\n\
    \          (not (equal? (cadr lst) (caddr lst)))\n          (is_sorted (cdr lst)))]\n\
    \    [(and (not (null? (cdr lst))) (not (null? (cddr lst))))\n     (and (not (equal?\
    \ (car lst) (cadr lst)))\n          (not (equal? (cadr lst) (caddr lst)))\n  \
    \        (is_sorted (cdr lst)))]\n    [(and (not (null? (cdr lst))) (not (null?\
    \ (cddr lst))))\n     (and (not (equal? (car lst) (cadr lst)))\n          (not\
    \ (equal? (cadr lst) (caddr lst)))\n          (is_sorted (cdr lst)))]\n    [(and\
    \ (not (null? (cdr lst))) (not (null? (cddr lst))))\n     (and (not (equal? (car\
    \ lst) (cadr lst)))\n          (", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n \
    \    (if (and (= (first lst) (second lst))\n              (not (empty? (rest (rest\
    \ lst)))))\n         #f\n         (if (< (first lst) (second lst))\n         \
    \    (is_sorted (rest lst))\n             #f))]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty?\
    \ (rest lst))))\n     (and (<= (first lst) (second lst)) (is_sorted (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst)) (not (empty? (rest lst))))\n     (if (< (first lst) (first (rest lst)))\n\
    \         (is_sorted (rest lst))\n         #f)]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (= (first lst) (second lst))\n          (is_sorted (rest lst)))\
    \ #f]\n    [(and (< (first lst) (second lst))\n          (is_sorted (rest lst)))\
    \ #t]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n\
    \    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n   \
    \ [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest\
    \ lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
