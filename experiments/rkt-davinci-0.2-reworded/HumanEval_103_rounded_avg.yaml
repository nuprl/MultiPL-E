name: HumanEval_103_rounded_avg
language: rkt
prompt: "#lang racket\n\n;; You are given two positive integers n and m, and your\
  \ task is to compute the\n;; average of the integers from n through m (including\
  \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
  ;; If n is greater than m, return -1.\n;; Example:\n;; >>> (rounded_avg 1 5)\n;;\
  \ \"0b11\"\n;; >>> (rounded_avg 7 5)\n;; -1\n;; >>> (rounded_avg 10 20)\n;; \"0b1111\"\
  \n;; >>> (rounded_avg 20 33)\n;; \"0b11010\"\n(define (rounded_avg n m)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
  \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
  \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
  \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851) \"\
  0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n    (check-equal?\
  \ (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate 350 902) \"\
  0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal?\
  \ (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal?\
  \ (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
completions: ["  (if (> n m)\n      -1\n      (define sum (+ n m))\n      (define\
    \ avg (/ sum 2))\n      (define rounded (round avg))\n      (define binary (number->string\
    \ rounded 2))\n      (string-append \"0b\" binary)))\n", "  (if (> n m)\n    \
    \  -1\n      (define (sum n m)\n        (if (= n m)\n            n\n         \
    \   (+ n (sum (+ n 1) m))))\n      (define (avg n m)\n        (round (/ (sum n\
    \ m) (- m n))))\n      (define (bin n)\n        (if (= n 0)\n            \"\"\n\
    \            (string-append (bin (quotient n 2)) (number->string (remainder n\
    \ 2)))))\n      (string-append \"0b\" (bin (avg n m)))))\n", "  (if (> n m) -1\n\
    \      (let ([sum (+ n m)])\n        (if (odd? sum)\n            (string-append\
    \ \"0b\" (integer->binary (quotient (+ sum 1) 2)))\n            (string-append\
    \ \"0b\" (integer->binary (/ sum 2)))))))\n", "  (if (> n m)\n      -1\n     \
    \ (define (sum n m)\n        (if (= n m)\n            n\n            (+ n (sum\
    \ (+ n 1) m))))\n      (define (avg n m)\n        (round (/ (sum n m) (- m n))))\n\
    \      (number->string (avg n m) 2)))\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond\n    [(> n m) -1]\n    [else (string->number\
    \ (number->string (round (/ (+ n m) 2))) 2)]))\n", "  (if (> n m)\n      -1\n\
    \      (integer->binary (round (/ (+ n m) 2)))))\n", "  (cond\n    [(> n m) -1]\n\
    \    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n  \
    \    -1\n      (let* ([sum (+ n m)]\n             [avg (/ sum 2)]\n          \
    \   [rounded (round avg)])\n        (number->string rounded 2))))\n", "  (if (>\
    \ n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", "  (if (>\
    \ n m)\n      -1\n      (let ([avg (/ (+ n m) 2.0)])\n        (string->symbol\
    \ (string-append \"0b\" (number->string (inexact->exact (round avg))))))))\n",
  "  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (if (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n\
    \            (string->symbol (string-append \"0b\" (number->string (round (/ sum\
    \ 2)))))\n            (string->symbol (string-append \"0b\" (number->string (round\
    \ (/ sum 2)))))))))\n", "  (if (> n m)\n      -1\n      (define (sum n m)\n  \
    \      (if (= n m)\n            n\n            (+ n (sum (+ n 1) m))))\n     \
    \ (define (avg n m)\n        (round (/ (sum n m) (- m n))))\n      (string->number\
    \ (number->string (avg n m) 2))))\n", "  (if (> n m)\n      -1\n      (let ([avg\
    \ (/ (+ n m) 2)])\n        (string->number (number->string avg 2)))))\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", " \
    \ (if (> n m)\n      -1\n      (define (sum-of-integers n m)\n        (if (= n\
    \ m)\n            n\n            (+ n (sum-of-integers (+ n 1) m))))\n      (define\
    \ (avg n m)\n        (/ (sum-of-integers n m) (- m n)))\n      (define (round-to-int\
    \ n)\n        (if (< n 0)\n            (round (- n 0.5))\n            (round (+\
    \ n 0.5))))\n      (define (int-to-binary n)\n        (if (= n 0)\n          \
    \  \"\"\n            (string-append (int-to-binary (quotient n 2)) (number->string\
    \ (remainder n 2)))))\n      (string-append \"0b\" (int-to-binary (round-to-int\
    \ (avg n m))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
