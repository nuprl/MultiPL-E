name: HumanEval_117_select_words
language: rkt
prompt: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
  \ tasked to implement \n;; a function that returns a list of all words from string\
  \ s that contain exactly \n;; n consonants, in order these words appear in the string\
  \ s.\n;; If the string s is empty then the function should return an empty list.\n\
  ;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n\
  ;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"little\")\n;; >>>\
  \ (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\" \"lamb\")\n;; >>>\
  \ (select_words \"simple white space\" 2)\n;; (list )\n;; >>> (select_words \"Hello\
  \ world\" 4)\n;; (list \"world\")\n;; >>> (select_words \"Uncle sam\" 3)\n;; (list\
  \ \"Uncle\")\n(define (select_words s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n \
    \     [(member (first s) '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants (rest\
    \ s))]\n      [else (+ 1 (count-consonants (rest s)))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is-consonant c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n\
    \      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is-consonant (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s\
    \ #\\space) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n      [else\
    \ (count-consonants (rest word))]))\n  (define (select-words-helper s n)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first s)))\n\
    \       (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let* ([words (string-split s)]\n             [consonants\
    \ (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n             [consonant-count\
    \ (lambda (word)\n                                (let loop ([word (string-&gt;list\
    \ word)]\n                                           [count 0])\n            \
    \                      (if (null? word)\n                                    \
    \  count\n                                      (if (member (car word) consonants)\n\
    \                                          (loop (cdr word) (+ count 1))\n   \
    \                                       (loop (cdr word) count)))))]\n       \
    \      [selected-words (filter (lambda (word)\n                              \
    \         (= (consonant-count word) n))\n                                    \
    \ words)])\n        selected-words)))\n</code>\n", "  (define (is_consonant? c)\n\
    \    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=?\
    \ c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else\
    \ #t]))\n  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n\
    \      [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n \
    \     [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n        (for/list\
    \ ([w (in-list w)])\n          (if (= (count-consonants w) n)\n              w)))))\n",
  "  (define (consonant? c)\n    (or (char=? c #\\b)\n        (char=? c #\\c)\n  \
    \      (char=? c #\\d)\n        (char=? c #\\f)\n        (char=? c #\\g)\n   \
    \     (char=? c #\\h)\n        (char=? c #\\j)\n        (char=? c #\\k)\n    \
    \    (char=? c #\\l)\n        (char=? c #\\m)\n        (char=? c #\\n)\n     \
    \   (char=? c #\\p)\n        (char=? c #\\q)\n        (char=? c #\\r)\n      \
    \  (char=? c #\\s)\n        (char=? c #\\t)\n        (char=? c #\\v)\n       \
    \ (char=? c #\\w)\n        (char=? c #\\x)\n        (char=? c #\\y)\n        (char=?\
    \ c #\\z)))\n  (define (count-consonants word)\n    (if (null? word)\n       \
    \ 0\n        (if (consonant? (car word))\n            (+ 1 (count-consonants (cdr\
    \ word)))\n            (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ words n)\n    (if (null? words)\n        '()\n        (if (= n (count-consonants\
    \ (car words)))\n            (cons (car words) (select-words-helper (cdr words)\
    \ n))\n            (select-words-helper (cdr words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is_consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  \
    \   (define (count-consonants w)\n       (cond\n         [(empty? w) 0]\n    \
    \     [else\n          (+ (if (is_consonant? (first w)) 1 0)\n             (count-consonants\
    \ (rest w)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [else\n          (define (select-words s n)\n          \
    \  (cond\n              [(empty? s) empty]\n              [else\n            \
    \   (define (select-words s n)\n                 (cond\n                   [(empty?\
    \ s) empty]\n                   [else\n                    (define (select-words\
    \ s n)\n                      (cond\n                        [(empty? s) empty]\n\
    \                        [else\n                         (define (select-words\
    \ s n)\n                           (cond\n                             [(empty?\
    \ s) empty]\n                             [else\n                            \
    \  (define (select-words s n)\n                                (cond\n       \
    \                           [(empty? s) empty]\n                             \
    \     [else\n                                   (define (select-words s n)\n \
    \                                    (cond\n                                 \
    \      [(empty? s) empty]\n                                       [else\n    \
    \                                    (define (select-words s n)\n            \
    \                              (cond\n                                       \
    \     [(empty? s) empty]\n                                            [else\n\
    \                                             (define (select-words s n)\n   \
    \                                            (cond\n                         \
    \                        [(empty? s) empty]\n                                \
    \                 [else\n                                                  (define\
    \ (select-words s n)\n                                                    (cond\n\
    \                                                      [(empty? s) empty]\n  \
    \                                                    [else\n                 \
    \                                      (define (select-words s n)\n          \
    \                                               (cond\n                      \
    \                                     [(empty? s) empty]\n                   \
    \                                        [else\n                             \
    \                               (define (select-words s n)\n                 \
    \                                             (cond\n                        \
    \                                        [(empty? s) empty]\n                \
    \                                                [else\n                     \
    \                           ", "  (if (string=? s \"\")\n      '()\n      (let*\
    \ ([words (string-split s)]\n             [consonants (list #\\b #\\c #\\d #\\\
    f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)]\n             [consonant-count (lambda (word)\n                     \
    \           (let loop ([word word]\n                                         \
    \  [count 0])\n                                  (if (string=? word \"\")\n  \
    \                                    count\n                                 \
    \     (if (member (string-ref word 0) consonants)\n                          \
    \                (loop (substring word 1) (+ count 1))\n                     \
    \                     (loop (substring word 1) count)))))]\n             [result\
    \ (filter (lambda (word)\n                               (= (consonant-count word)\
    \ n))\n                             words)])\n        result)))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (let* ([word (first (string-split s #\\\
    space))]\n            [consonants (count-consonants word)])\n       (if (= consonants\
    \ n)\n           (cons word (select_words (rest (string-split s #\\space)) n))\n\
    \           (select_words (rest (string-split s #\\space)) n)))]))\n", "  (define\
    \ (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n acc)\n    (cond\n      [(empty? s) acc]\n\
    \      [(count-consonants (first s)) (= n (count-consonants (first s)))\n    \
    \   (select-words-helper (rest s) n (append acc (list (first s))))]\n      [else\
    \ (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n (list)))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c\
    \ #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words-helper s n result)\n    (cond\n      [(empty? s) result]\n\
    \      [(= n (count_consonants (first s))) (select_words-helper (rest s) n (append\
    \ result (list (first s))))]\n      [else (select_words-helper (rest s) n result)]))\n\
    \  (select_words-helper (string-split s) n (list)))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let* ([word (first (string-split s #\\space))]\n\
    \            [consonants (count-consonants word)])\n       (if (= consonants n)\n\
    \           (cons word (select_words (rest (string-split s #\\space)) n))\n  \
    \         (select_words (rest (string-split s #\\space)) n)))]))\n", "  (define\
    \ (is-consonant? c)\n    (cond\n      [(char-alphabetic? c)\n       (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))]\n      [else\n       #f]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word)\n       0]\n      [else\n       (+ (if\
    \ (is-consonant? (first word)) 1 0)\n          (count-consonants (rest word)))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words)\n \
    \      empty]\n      [(= n (count-consonants (first words)))\n       (cons (first\
    \ words) (select-words-helper (rest words) n))]\n      [else\n       (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ s n words)\n    (cond\n      [(empty? s) words]\n      [(char=? (first s) #\\\
    \ ) (select_words_iter (rest s) n words)]\n      [else (select_words_iter (rest\
    \ s) n (cons (first s) words))]))\n  (define (select_words_iter2 s n words)\n\
    \    (cond\n      [(empty? s) words]\n      [(char=? (first s) #\\ ) (select_words_iter2\
    \ (rest s) n words)]\n      [else (select_words_iter2 (rest s) n (cons (first\
    \ s) words))]))\n  (define (select_words_iter3 s n words)\n    (cond\n      [(empty?\
    \ s) words]\n      [(char=? (first s) #\\ ) (select_words_iter3 (rest s) n words)]\n\
    \      [else (select_words_iter3 (rest s) n (cons (first s) words))]))\n  (define\
    \ (select_words_iter4 s n words)\n    (cond\n      [(empty? s) words]\n      [(char=?\
    \ (first s) #\\ ) (select_words_iter4 (rest s) n words)]\n      [else (select_words_iter4\
    \ (rest s) n (cons (first s) words))]))\n  (define (select_words_iter5 s n words)\n\
    \    (cond\n      [(empty? s) words]\n", "  (define (is-consonant? c)\n    (cond\n\
    \      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=?\
    \ c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count-consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (cond ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c\
    \ #\\o) (char=? c #\\u)) #f)\n          (else #t)))\n  (define (count_consonants\
    \ word)\n    (define (count_consonants_iter word count)\n      (cond ((string-empty?\
    \ word) count)\n            ((is_consonant? (string-ref word 0)) (count_consonants_iter\
    \ (substring word 1) (+ count 1)))\n            (else (count_consonants_iter (substring\
    \ word 1) count))))\n    (count_consonants_iter word 0))\n  (define (select_words_iter\
    \ s n result)\n    (cond ((string-empty? s) result)\n          ((= n (count_consonants\
    \ (string-trim (string-take-while (lambda (c) (not (char=? c #\\ ))) s))))\n \
    \          (select_words_iter (string-drop-while (lambda (c) (not (char=? c #\\\
    \ ))) s) n (cons (string-trim (string-take-while (lambda (c) (not (char=? c #\\\
    \ ))) s)) result)))\n          (else (select_words_iter (string-drop-while (lambda\
    \ (c) (not (char=? c #\\ ))) s) n result))))\n  (select_words_iter s n '()))\n",
  "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=?\
    \ c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count_consonants\
    \ word)\n    (cond [(empty? word) 0]\n          [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n          [else (count_consonants (rest\
    \ word))]))\n  (define (select_words_helper s n)\n    (cond [(empty? s) empty]\n\
    \          [(= n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n))]\n          [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\n\
    \         ([word (first (regexp-match #rx\"\\w+\" s))]\n          [rest (substring\
    \ s (add1 (string-length word)))]\n          [consonants (count-consonants word)])\n\
    \       (cond\n         [(= n consonants) (cons word (select_words rest n))]\n\
    \         [else (select_words rest n)]))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
