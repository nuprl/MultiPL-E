name: HumanEval_117_select_words
language: rkt
prompt: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
  \ tasked to implement \n;; a function that returns a list of all words from string\
  \ s that contain exactly \n;; n consonants, in order these words appear in the string\
  \ s.\n;; If the string s is empty then the function should return an empty list.\n\
  ;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n\
  ;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"little\")\n;; >>>\
  \ (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\" \"lamb\")\n;; >>>\
  \ (select_words \"simple white space\" 2)\n;; (list )\n;; >>> (select_words \"Hello\
  \ world\" 4)\n;; (list \"world\")\n;; >>> (select_words \"Uncle sam\" 3)\n;; (list\
  \ \"Uncle\")\n(define (select_words s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n\
    \      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\\
    o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(count_consonants (first s)) (= n (count_consonants (first s)))]\n     \
    \ [else (select_words_iter (rest s) n (cons (first s) acc))]))\n  (select_words_iter\
    \ (string-split s) n '()))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (string-empty? word)\n          count\n          (if\
    \ (is-vowel? (string-ref word 0))\n              (count-consonants-iter (substring\
    \ word 1) count)\n              (count-consonants-iter (substring word 1) (+ count\
    \ 1)))))\n    (count-consonants-iter word 0))\n  (define (select-words-iter s\
    \ n result)\n    (if (string-empty? s)\n        result\n        (let ((word (string-trim\
    \ s)))\n          (if (= n (count-consonants word))\n              (select-words-iter\
    \ (substring s (string-length word)) n (cons word result))\n              (select-words-iter\
    \ (substring s (string-length word)) n result)))))\n  (select-words-iter s n '()))\n",
  "  (if (string=? s \"\")\n      '()\n      (let ((words (string-split s \" \")))\n\
    \        (filter (lambda (word) (= n (count-consonants word))) words))))\n", " \
    \ (define (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (cond ((or (char=?\
    \ c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f)\n\
    \          (else #t)))\n  (define (count_consonants word)\n    (cond ((string-empty?\
    \ word) 0)\n          ((is_consonant? (string-ref word 0)) (+ 1 (count_consonants\
    \ (string-tail word))))\n          (else (count_consonants (string-tail word)))))\n\
    \  (define (select_words_iter s n acc)\n    (cond ((string-empty? s) acc)\n  \
    \        ((= n (count_consonants (string-take s (string-index #\\s s))))\n   \
    \        (select_words_iter (string-drop s (string-index #\\s s)) n (cons (string-take\
    \ s (string-index #\\s s)) acc)))\n          (else (select_words_iter (string-drop\
    \ s (string-index #\\s s)) n acc))))\n  (select_words_iter s n '()))\n", "  (define\
    \ (is_consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n\
    \  (define (count_consonants word)\n    (define (count_consonants_iter word count)\n\
    \      (if (empty? word)\n          count\n          (if (is_consonant? (first\
    \ word))\n              (count_consonants_iter (rest word) (+ count 1))\n    \
    \          (count_consonants_iter (rest word) count))))\n    (count_consonants_iter\
    \ word 0))\n  (define (select_words_iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (string-split s))))\n          (if (=\
    \ n (count_consonants word))\n              (select_words_iter (rest (string-split\
    \ s)) n (append result (list word)))\n              (select_words_iter (rest (string-split\
    \ s)) n result)))))\n  (select_words_iter (string-split s) n '()))\n", "  (define\
    \ (count-consonants s)\n    (define (is-consonant? c)\n      (member c '(#\\b\
    \ #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\n                  #\n      \
    \            n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n    (define\
    \ (count-consonants-iter s n)\n      (cond ((null? s) n)\n            ((is-consonant?\
    \ (car s)) (count-consonants-iter (cdr s) (+ n 1)))\n            (else (count-consonants-iter\
    \ (cdr s) n))))\n    (count-consonants-iter s 0))\n  (define (select-words-iter\
    \ s n result)\n    (cond ((null? s) result)\n          ((equal? n (count-consonants\
    \ (car s))) (select-words-iter (cdr s) n (append result (list (car s)))))\n  \
    \        (else (select-words-iter (cdr s) n result))))\n  (select-words-iter (string-split\
    \ s) n '()))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\\
    a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n result)\n    (cond\n      [(empty? s) result]\n\
    \      [(count_consonants (first s)) (= n (count_consonants (first s)))]\n   \
    \   [else (select_words_iter (rest s) n (append result (list (first s))))]))\n\
    \  (select_words_iter (string-split s) n (list)))\n", "  (define (is_consonant\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants w)\n    (cond\n      [(empty?\
    \ w) 0]\n      [(is_consonant (first w)) (+ 1 (count_consonants (rest w)))]\n\
    \      [else (count_consonants (rest w))]))\n  (define (select_words-iter s n\
    \ lst)\n    (cond\n      [(empty? s) lst]\n      [(count_consonants (first s))\
    \ (= n (count_consonants (first s)))]\n      [else (select_words-iter (rest s)\
    \ n (append lst (list (first s))))]))\n  (select_words-iter (string-split s) n\
    \ '()))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n\
    \      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\\
    o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is_consonant? (first\
    \ word)) 1 0)\n           (count_consonants (rest word)))))\n  (define (select_words_iter\
    \ s n words)\n    (cond\n      [(empty? s) words]\n      [(char=? (first s) #\\\
    \ ) (select_words_iter (rest s) n words)]\n      [else (select_words_iter (rest\
    \ s) n\n                               (if (= n (count_consonants (first words)))\n\
    \                                   (cons (first words) words)\n             \
    \                      words))]))\n  (select_words_iter s n (list)))\n", "  (define\
    \ (consonant? c)\n    (or (char=? c #\\b)\n        (char=? c #\\c)\n        (char=?\
    \ c #\\d)\n        (char=? c #\\f)\n        (char=? c #\\g)\n        (char=? c\
    \ #\\h)\n        (char=? c #\\j)\n        (char=? c #\\k)\n        (char=? c #\\\
    l)\n        (char=? c #\\m)\n        (char=? c #\\n)\n        (char=? c #\\p)\n\
    \        (char=? c #\\q)\n        (char=? c #\\r)\n        (char=? c #\\s)\n \
    \       (char=? c #\\t)\n        (char=? c #\\v)\n        (char=? c #\\w)\n  \
    \      (char=? c #\\x)\n        (char=? c #\\y)\n        (char=? c #\\z)))\n \
    \ (define (count-consonants word)\n    (if (empty? word)\n        0\n        (if\
    \ (consonant? (first word))\n            (+ 1 (count-consonants (rest word)))\n\
    \            (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ words n)\n    (if (empty? words)\n        '()\n        (if (= n (count-consonants\
    \ (first words)))\n            (cons (first words) (select-words-helper (rest\
    \ words) n))\n            (select-words-helper (rest words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\
    \ ([word (first (regexp-match #rx\"\\w+\" s))]\n            [rest (regexp-match\
    \ #rx\"\\s*\\w+\" (substring s (string-length word)))])\n       (cond\n      \
    \   [(= n (count-consonants word))\n          (cons word (select_words (substring\
    \ s (string-length word) (string-length s)) n))]\n         [else (select_words\
    \ (substring s (string-length word) (string-length s)) n)]))]))\n", "  (define\
    \ (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ word)\n    (cond ((null? word) 0)\n          ((consonant? (car word)) (+ 1 (count-consonants\
    \ (cdr word))))\n          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ words n)\n    (cond ((null? words) '())\n          ((= n (count-consonants (car\
    \ words))) (cons (car words) (select-words-helper (cdr words) n)))\n         \
    \ (else (select-words-helper (cdr words) n))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(member c '(#\\a\
    \ #\\e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count_consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1\
    \ (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n result)\n    (cond\n      [(empty? s) result]\n\
    \      [(= n (count_consonants (first s)))\n       (select_words_helper (rest\
    \ s) n (append result (list (first s))))]\n      [else (select_words_helper (rest\
    \ s) n result)]))\n  (select_words_helper (string-split s) n (list)))\n", "  (define\
    \ (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count-consonants\
    \ word)\n    (cond ((string=? word \"\") 0)\n          ((is-vowel? (string-ref\
    \ word 0)) (count-consonants (substring word 1)))\n          (else (+ 1 (count-consonants\
    \ (substring word 1))))))\n  (define (select-words-helper s n acc)\n    (cond\
    \ ((string=? s \"\") (reverse acc))\n          ((= n (count-consonants (car (string-split\
    \ s #\\space))))\n           (select-words-helper (cdr (string-split s #\\space))\
    \ n (cons (car (string-split s #\\space)) acc)))\n          (else (select-words-helper\
    \ (cdr (string-split s #\\space)) n acc))))\n  (select-words-helper s n '()))\n",
  "  (define (is-consonant? c)\n    (cond\n      [(or (char=? c #\\a) (char=? c #\\\
    e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f]\n      [else #t]))\n \
    \ (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper s n)\n    (cond\n      [(empty?\
    \ s) empty]\n      [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  \
    \   (define (count-consonants w)\n       (cond\n         [(empty? w) 0]\n    \
    \     [else\n          (+ (if (is-consonant? (first w)) 1 0)\n             (count-consonants\
    \ (rest w)))]))\n     (define (select-words-helper s n)\n       (cond\n      \
    \   [(empty? s) empty]\n         [(= n (count-consonants (first s)))\n       \
    \   (cons (first s) (select-words-helper (rest s) n))]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (select-words-helper (string-split s) n)]))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants w)\n    (cond\n\
    \      [(empty? w) 0]\n      [(is_consonant? (first w)) (+ 1 (count_consonants\
    \ (rest w)))]\n      [else (count_consonants (rest w))]))\n  (define (select_words_iter\
    \ s n l)\n    (cond\n      [(empty? s) l]\n      [(equal? n (count_consonants\
    \ (first s))) (select_words_iter (rest s) n (append l (list (first s))))]\n  \
    \    [else (select_words_iter (rest s) n l)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\\
    e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (if (empty? s)\n   \
    \     0\n        (+ (if (is-consonant? (first s)) 1 0)\n           (count-consonants\
    \ (rest s)))))\n  (define (select-words-helper s n)\n    (if (empty? s)\n    \
    \    '()\n        (let ((word (first s)))\n          (if (= n (count-consonants\
    \ word))\n              (cons word (select-words-helper (rest s) n))\n       \
    \       (select-words-helper (rest s) n)))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (is_consonant c)\n    (cond\n      [(char=? c #\\a) #f]\n\
    \      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\\
    o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is_consonant (first w)) (+ 1 (count_consonants\
    \ (rest w)))]\n      [else (count_consonants (rest w))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(empty? (rest s)) (if (=\
    \ n (count_consonants (first s))) (append acc (list (first s))) acc)]\n      [(is_consonant\
    \ (first s)) (select_words_iter (rest s) (+ n 1) acc)]\n      [(char=? (first\
    \ s) #\\ ) (select_words_iter (rest s) 0 (if (= n 0) acc (append acc (list (substring\
    \ (first s) 0 n))))) ]\n      [else (select_words_iter (rest s) 0 acc)]))\n  (select_words_iter\
    \ s 0 '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
