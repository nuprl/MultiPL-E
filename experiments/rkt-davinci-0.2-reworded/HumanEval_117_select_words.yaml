name: HumanEval_117_select_words
language: rkt
prompt: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
  \ tasked to implement \n;; a function that returns a list of all words from string\
  \ s that contain exactly \n;; n consonants, in order these words appear in the string\
  \ s.\n;; If the string s is empty then the function should return an empty list.\n\
  ;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n\
  ;; >>> (select_words \"Mary had a little lamb\" 4)\n;; (list \"little\")\n;; >>>\
  \ (select_words \"Mary had a little lamb\" 3)\n;; (list \"Mary\" \"lamb\")\n;; >>>\
  \ (select_words \"simple white space\" 2)\n;; (list )\n;; >>> (select_words \"Hello\
  \ world\" 4)\n;; (list \"world\")\n;; >>> (select_words \"Uncle sam\" 3)\n;; (list\
  \ \"Uncle\")\n(define (select_words s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n \
    \     [(member (first s) '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants (rest\
    \ s))]\n      [else (+ 1 (count-consonants (rest s)))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is-consonant c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n\
    \      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is-consonant (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s\
    \ #\\space) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n      [else\
    \ (count-consonants (rest word))]))\n  (define (select-words-helper s n)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first s)))\n\
    \       (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let* ([words (string-split s)]\n             [consonants\
    \ (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n             [consonant-count\
    \ (lambda (word)\n                                (let loop ([word (string-&gt;list\
    \ word)]\n                                           [count 0])\n            \
    \                      (if (null? word)\n                                    \
    \  count\n                                      (if (member (car word) consonants)\n\
    \                                          (loop (cdr word) (+ count 1))\n   \
    \                                       (loop (cdr word) count)))))]\n       \
    \      [selected-words (filter (lambda (word)\n                              \
    \         (= (consonant-count word) n))\n                                    \
    \ words)])\n        selected-words)))\n</code>\n", "  (define (is_consonant? c)\n\
    \    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=?\
    \ c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else\
    \ #t]))\n  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n\
    \      [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n \
    \     [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n        (for/list\
    \ ([w (in-list w)])\n          (if (= (count-consonants w) n)\n              w)))))\n",
  "  (define (consonant? c)\n    (or (char=? c #\\b)\n        (char=? c #\\c)\n  \
    \      (char=? c #\\d)\n        (char=? c #\\f)\n        (char=? c #\\g)\n   \
    \     (char=? c #\\h)\n        (char=? c #\\j)\n        (char=? c #\\k)\n    \
    \    (char=? c #\\l)\n        (char=? c #\\m)\n        (char=? c #\\n)\n     \
    \   (char=? c #\\p)\n        (char=? c #\\q)\n        (char=? c #\\r)\n      \
    \  (char=? c #\\s)\n        (char=? c #\\t)\n        (char=? c #\\v)\n       \
    \ (char=? c #\\w)\n        (char=? c #\\x)\n        (char=? c #\\y)\n        (char=?\
    \ c #\\z)))\n  (define (count-consonants word)\n    (if (null? word)\n       \
    \ 0\n        (if (consonant? (car word))\n            (+ 1 (count-consonants (cdr\
    \ word)))\n            (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ words n)\n    (if (null? words)\n        '()\n        (if (= n (count-consonants\
    \ (car words)))\n            (cons (car words) (select-words-helper (cdr words)\
    \ n))\n            (select-words-helper (cdr words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is_consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  \
    \   (define (count-consonants w)\n       (cond\n         [(empty? w) 0]\n    \
    \     [else\n          (+ (if (is_consonant? (first w)) 1 0)\n             (count-consonants\
    \ (rest w)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [else\n          (define (select-words s n)\n          \
    \  (cond\n              [(empty? s) empty]\n              [else\n            \
    \   (define (select-words s n)\n                 (cond\n                   [(empty?\
    \ s) empty]\n                   [else\n                    (define (select-words\
    \ s n)\n                      (cond\n                        [(empty? s) empty]\n\
    \                        [else\n                         (define (select-words\
    \ s n)\n                           (cond\n                             [(empty?\
    \ s) empty]\n                             [else\n                            \
    \  (define (select-words s n)\n                                (cond\n       \
    \                           [(empty? s) empty]\n                             \
    \     [else\n                                   (define (select-words s n)\n \
    \                                    (cond\n                                 \
    \      [(empty? s) empty]\n                                       [else\n    \
    \                                    (define (select-words s n)\n            \
    \                              (cond\n                                       \
    \     [(empty? s) empty]\n                                            [else\n\
    \                                             (define (select-words s n)\n   \
    \                                            (cond\n                         \
    \                        [(empty? s) empty]\n                                \
    \                 [else\n                                                  (define\
    \ (select-words s n)\n                                                    (cond\n\
    \                                                      [(empty? s) empty]\n  \
    \                                                    [else\n                 \
    \                                      (define (select-words s n)\n          \
    \                                               (cond\n                      \
    \                                     [(empty? s) empty]\n                   \
    \                                        [else\n                             \
    \                               (define (select-words s n)\n                 \
    \                                             (cond\n                        \
    \                                        [(empty? s) empty]\n                \
    \                                                [else\n                     \
    \                           ", "  (if (string=? s \"\")\n      '()\n      (let*\
    \ ([words (string-split s)]\n             [consonants (list #\\b #\\c #\\d #\\\
    f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)]\n             [consonant-count (lambda (word)\n                     \
    \           (let loop ([word word]\n                                         \
    \  [count 0])\n                                  (if (string=? word \"\")\n  \
    \                                    count\n                                 \
    \     (if (member (string-ref word 0) consonants)\n                          \
    \                (loop (substring word 1) (+ count 1))\n                     \
    \                     (loop (substring word 1) count)))))]\n             [result\
    \ (filter (lambda (word)\n                               (= (consonant-count word)\
    \ n))\n                             words)])\n        result)))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (let* ([word (first (string-split s #\\\
    space))]\n            [consonants (count-consonants word)])\n       (if (= consonants\
    \ n)\n           (cons word (select_words (rest (string-split s #\\space)) n))\n\
    \           (select_words (rest (string-split s #\\space)) n)))]))\n", "  (define\
    \ (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n acc)\n    (cond\n      [(empty? s) acc]\n\
    \      [(count-consonants (first s)) (= n (count-consonants (first s)))\n    \
    \   (select-words-helper (rest s) n (append acc (list (first s))))]\n      [else\
    \ (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n (list)))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c\
    \ #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words-helper s n result)\n    (cond\n      [(empty? s) result]\n\
    \      [(= n (count_consonants (first s))) (select_words-helper (rest s) n (append\
    \ result (list (first s))))]\n      [else (select_words-helper (rest s) n result)]))\n\
    \  (select_words-helper (string-split s) n (list)))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let* ([word (first (string-split s #\\space))]\n\
    \            [consonants (count-consonants word)])\n       (if (= consonants n)\n\
    \           (cons word (select_words (rest (string-split s #\\space)) n))\n  \
    \         (select_words (rest (string-split s #\\space)) n)))]))\n", "  (define\
    \ (is-consonant? c)\n    (cond\n      [(char-alphabetic? c)\n       (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))]\n      [else\n       #f]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word)\n       0]\n      [else\n       (+ (if\
    \ (is-consonant? (first word)) 1 0)\n          (count-consonants (rest word)))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words)\n \
    \      empty]\n      [(= n (count-consonants (first words)))\n       (cons (first\
    \ words) (select-words-helper (rest words) n))]\n      [else\n       (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ s n words)\n    (cond\n      [(empty? s) words]\n      [(char=? (first s) #\\\
    \ ) (select_words_iter (rest s) n words)]\n      [else (select_words_iter (rest\
    \ s) n (cons (first s) words))]))\n  (define (select_words_iter2 s n words)\n\
    \    (cond\n      [(empty? s) words]\n      [(char=? (first s) #\\ ) (select_words_iter2\
    \ (rest s) n words)]\n      [else (select_words_iter2 (rest s) n (cons (first\
    \ s) words))]))\n  (define (select_words_iter3 s n words)\n    (cond\n      [(empty?\
    \ s) words]\n      [(char=? (first s) #\\ ) (select_words_iter3 (rest s) n words)]\n\
    \      [else (select_words_iter3 (rest s) n (cons (first s) words))]))\n  (define\
    \ (select_words_iter4 s n words)\n    (cond\n      [(empty? s) words]\n      [(char=?\
    \ (first s) #\\ ) (select_words_iter4 (rest s) n words)]\n      [else (select_words_iter4\
    \ (rest s) n (cons (first s) words))]))\n  (define (select_words_iter5 s n words)\n\
    \    (cond\n      [(empty? s) words]\n", "  (define (is-consonant? c)\n    (cond\n\
    \      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=?\
    \ c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count-consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (cond ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c\
    \ #\\o) (char=? c #\\u)) #f)\n          (else #t)))\n  (define (count_consonants\
    \ word)\n    (define (count_consonants_iter word count)\n      (cond ((string-empty?\
    \ word) count)\n            ((is_consonant? (string-ref word 0)) (count_consonants_iter\
    \ (substring word 1) (+ count 1)))\n            (else (count_consonants_iter (substring\
    \ word 1) count))))\n    (count_consonants_iter word 0))\n  (define (select_words_iter\
    \ s n result)\n    (cond ((string-empty? s) result)\n          ((= n (count_consonants\
    \ (string-trim (string-take-while (lambda (c) (not (char=? c #\\ ))) s))))\n \
    \          (select_words_iter (string-drop-while (lambda (c) (not (char=? c #\\\
    \ ))) s) n (cons (string-trim (string-take-while (lambda (c) (not (char=? c #\\\
    \ ))) s)) result)))\n          (else (select_words_iter (string-drop-while (lambda\
    \ (c) (not (char=? c #\\ ))) s) n result))))\n  (select_words_iter s n '()))\n",
  "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=?\
    \ c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count_consonants\
    \ word)\n    (cond [(empty? word) 0]\n          [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n          [else (count_consonants (rest\
    \ word))]))\n  (define (select_words_helper s n)\n    (cond [(empty? s) empty]\n\
    \          [(= n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n))]\n          [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\n\
    \         ([word (first (regexp-match #rx\"\\w+\" s))]\n          [rest (substring\
    \ s (add1 (string-length word)))]\n          [consonants (count-consonants word)])\n\
    \       (cond\n         [(= n consonants) (cons word (select_words rest n))]\n\
    \         [else (select_words rest n)]))]))\n", "  (define (is-consonant? c)\n\
    \    (cond ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\\
    o) (char=? c #\\u)) #f)\n          (else #t)))\n  (define (count-consonants w)\n\
    \    (cond ((null? w) 0)\n          ((is-consonant? (car w)) (+ 1 (count-consonants\
    \ (cdr w))))\n          (else (count-consonants (cdr w)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s)))\
    \ (cons (car s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper\
    \ (cdr s) n))))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let* ([word (string-tokenize s)]\n             [consonants\
    \ (count-consonants word)])\n        (if (= n consonants)\n            (cons word\
    \ (select_words (substring s (string-length word)) n))\n            (select_words\
    \ (substring s (string-length word)) n)))))\n", "  (define (is-consonant? c)\n\
    \    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ w)\n    (for/fold ([count 0]) ([c (in-string w)])\n      (if (is-consonant?\
    \ c)\n          (add1 count)\n          count)))\n  (for/list ([w (in-list (string-split\
    \ s))]\n             #:when (= n (count-consonants w)))\n    w))\n", "  (define\
    \ (consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (cond\n      [(empty? word) 0]\n      [(consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper words n)\n    (cond\n      [(empty?\
    \ words) empty]\n      [(= n (count-consonants (first words)))\n       (cons (first\
    \ words) (select-words-helper (rest words) n))]\n      [else (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define\
    \ (count-consonants word)\n    (cond\n      [(empty? word) 0]\n      [(consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper s n words)\n    (cond\n    \
    \  [(empty? s) words]\n      [(empty? (rest s)) (if (= n (count-consonants (first\
    \ s)))\n                             (append words (list (first s)))\n       \
    \                      words)]\n      [(consonant? (first s)) (select-words-helper\
    \ (rest s) (+ 1 n) words)]\n      [(= n (count-consonants (first s))) (select-words-helper\
    \ (rest s) 0 (append words (list (first s))))]\n      [else (select-words-helper\
    \ (rest s) 0 words)]))\n  (select-words-helper (string-split s) 0 (list)))\n",
  "  (define (is_consonant? c)\n    (cond [(char-ci=? c #\\a) #f]\n          [(char-ci=?\
    \ c #\\e) #f]\n          [(char-ci=? c #\\i) #f]\n          [(char-ci=? c #\\\
    o) #f]\n          [(char-ci=? c #\\u) #f]\n          [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (string-empty? word)\n        0\n        (+ (if (is_consonant?\
    \ (string-ref word 0)) 1 0)\n           (count_consonants (substring word 1)))))\n\
    \  (define (select_words_iter s n result)\n    (cond [(string-empty? s) result]\n\
    \          [(= n (count_consonants (string-trim (car (string-split s #\\space)))))\n\
    \           (select_words_iter (string-trim (cdr (string-split s #\\space)))\n\
    \                              n\n                              (cons (string-trim\
    \ (car (string-split s #\\space)))\n                                    result))]\n\
    \          [else (select_words_iter (string-trim (cdr (string-split s #\\space)))\n\
    \                                   n\n                                   result)]))\n\
    \  (select_words_iter s n '()))\n", "  (if (string=? s \"\")\n      '()\n    \
    \  (let* ([words (string-split s)]\n             [consonants (cons 'b 'c 'd 'f\
    \ 'g 'h 'j 'k 'l 'm 'n 'p 'q 'r 's 't 'v 'w 'x 'y 'z)]\n             [consonant-count\
    \ (lambda (word)\n                                (let loop ([word word]\n   \
    \                                        [count 0])\n                        \
    \          (if (string=? word \"\")\n                                      count\n\
    \                                      (if (member (string-ref word 0) consonants)\n\
    \                                          (loop (substring word 1) (+ count 1))\n\
    \                                          (loop (substring word 1) count)))))]\n\
    \             [selected-words (filter (lambda (word) (= (consonant-count word)\
    \ n)) words)])\n        selected-words)))\n", "  (define (consonant? c)\n    (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants w)\n    (if (null?\
    \ w)\n        0\n        (+ (if (consonant? (car w)) 1 0)\n           (count-consonants\
    \ (cdr w)))))\n  (define (select-words-helper ws)\n    (if (null? ws)\n      \
    \  '()\n        (if (= n (count-consonants (car ws)))\n            (cons (car\
    \ ws) (select-words-helper (cdr ws)))\n            (select-words-helper (cdr ws)))))\n\
    \  (select-words-helper (string-split s)))\n", "  (define (is-consonant? c)\n\
    \    (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\"))))\n  (define (count-consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n          [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n          [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (let loop\
    \ ((s (string-split s))\n             (result '()))\n    (cond ((null? s) result)\n\
    \          ((= n (count-consonants (car s)))\n           (loop (cdr s) (cons (car\
    \ s) result)))\n          (else (loop (cdr s) result)))))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n     (define (count-consonants word)\n       (if\
    \ (empty? word)\n           0\n           (+ (if (is-consonant? (first word))\
    \ 1 0)\n              (count-consonants (rest word)))))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))", "  (define (is_consonant? c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words-helper s n acc)\n    (cond\n      [(empty? s) (reverse\
    \ acc)]\n      [(= n (count_consonants (first s))) (select_words-helper (rest\
    \ s) n (cons (first s) acc))]\n      [else (select_words-helper (rest s) n acc)]))\n\
    \  (select_words-helper (string-split s) n '()))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n\
    \      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count-consonants word)\n    (if (empty?\
    \ word)\n        0\n        (+ (if (is-consonant? (first word)) 1 0)\n       \
    \    (count-consonants (rest word)))))\n  (define (select-words-helper s n acc)\n\
    \    (if (empty? s)\n        acc\n        (let ([word (first s)])\n          (if\
    \ (= n (count-consonants word))\n              (select-words-helper (rest s) n\
    \ (append acc (list word)))\n              (select-words-helper (rest s) n acc)))))\n\
    \  (select-words-helper (string-split s) n (list)))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let*\n         ([word (first (regexp-match #rx\"\
    \\w+\" s))]\n          [rest (substring s (add1 (string-length word)))]\n    \
    \      [consonants (count-consonants word)])\n       (cond\n         [(= n consonants)\
    \ (cons word (select_words rest n))]\n         [else (select_words rest n)]))]))\n",
  "  (define (is_consonant? c)\n    (and (not (char-alphabetic? c))\n         (not\
    \ (char=? c #\\a))\n         (not (char=? c #\\e))\n         (not (char=? c #\\\
    i))\n         (not (char=? c #\\o))\n         (not (char=? c #\\u))))\n  (define\
    \ (count_consonants word)\n    (define (count_consonants_iter word count)\n  \
    \    (if (empty? word)\n          count\n          (if (is_consonant? (first word))\n\
    \              (count_consonants_iter (rest word) (+ count 1))\n             \
    \ (count_consonants_iter (rest word) count))))\n    (count_consonants_iter word\
    \ 0))\n  (define (select_words_iter s n result)\n    (if (empty? s)\n        result\n\
    \        (let ((word (string-trim (first (string-split s #\\space)))))\n     \
    \     (if (= n (count_consonants word))\n              (select_words_iter (string-trim\
    \ (string-join (rest (string-split s #\\space)) #\\space)) n (append result (list\
    \ word)))\n              (select_words_iter (string-trim (string-join (rest (string-split\
    \ s #\\space)) #\\space)) n result)))))\n  (select_words_iter s n '()))\n", " \
    \ (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\\
    k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define\
    \ (count-consonants word)\n    (if (empty? word)\n        0\n        (+ (if (consonant?\
    \ (first word)) 1 0)\n           (count-consonants (rest word)))))\n  (define\
    \ (select-words-helper words n)\n    (if (empty? words)\n        '()\n       \
    \ (if (= n (count-consonants (first words)))\n            (cons (first words)\
    \ (select-words-helper (rest words) n))\n            (select-words-helper (rest\
    \ words) n))))\n  (select-words-helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (and (not (char-alphabetic? c))\n         (not (char=? c #\\a))\n  \
    \       (not (char=? c #\\e))\n         (not (char=? c #\\i))\n         (not (char=?\
    \ c #\\o))\n         (not (char=? c #\\u))))\n  (define (count_consonants w)\n\
    \    (define (count_consonants_iter w i c)\n      (if (= i (string-length w))\n\
    \          c\n          (if (is_consonant? (string-ref w i))\n              (count_consonants_iter\
    \ w (+ i 1) (+ c 1))\n              (count_consonants_iter w (+ i 1) c))))\n \
    \   (count_consonants_iter w 0 0))\n  (define (select_words_iter s i l)\n    (if\
    \ (= i (string-length s))\n        l\n        (if (char=? (string-ref s i) #\\\
    \ )\n            (select_words_iter s (+ i 1) l)\n            (let ((w (string-trim\
    \ (string-take s i))))\n              (if (= n (count_consonants w))\n       \
    \           (select_words_iter s (+ i (string-length w)) (cons w l))\n       \
    \           (select_words_iter s (+ i (string-length w)) l))))))\n  (select_words_iter\
    \ s 0 '()))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\\
    a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is-consonant? (first\
    \ word)) 1 0)\n           (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ words n)\n    (if (empty? words)\n        '()\n        (if (= n (count-consonants\
    \ (first words)))\n            (cons (first words) (select-words-helper (rest\
    \ words) n))\n            (select-words-helper (rest words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant c)\n    (or (equal? c #\\\
    b) (equal? c #\\c) (equal? c #\\d) (equal? c #\\f) (equal? c #\\g)\n        (equal?\
    \ c #\\h) (equal? c #\\j) (equal? c #\\k) (equal? c #\\l) (equal? c #\\m)\n  \
    \      (equal? c #\\n) (equal? c #\\p) (equal? c #\\q) (equal? c #\\r) (equal?\
    \ c #\\s)\n        (equal? c #\\t) (equal? c #\\v) (equal? c #\\w) (equal? c #\\\
    x) (equal? c #\\y)\n        (equal? c #\\z)))\n  (define (count_consonants s)\n\
    \    (if (empty? s)\n        0\n        (if (is_consonant (first s))\n       \
    \     (+ 1 (count_consonants (rest s)))\n            (count_consonants (rest s)))))\n\
    \  (define (select_words_helper s n result)\n    (if (empty? s)\n        result\n\
    \        (if (= n (count_consonants (first s)))\n            (select_words_helper\
    \ (rest s) n (append result (list (first s))))\n            (select_words_helper\
    \ (rest s) n result))))\n  (select_words_helper (string-split s) n (list)))\n",
  "  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n   \
    \          [consonants (filter (lambda (x) (not (member x '(#\\a #\\e #\\i #\\\
    o #\\u)))) (string->list s))]\n             [words-with-n-consonants (filter (lambda\
    \ (x) (= n (length (filter (lambda (y) (not (member y '(#\\a #\\e #\\i #\\o #\\\
    u)))) (string->list x))))) words)])\n        words-with-n-consonants)))\n", " \
    \ (define (is-consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n   \
    \   [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n      [else\
    \ (count-consonants (rest s))]))\n  (define (select-words s n)\n    (cond\n  \
    \    [(empty? s) empty]\n      [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words (rest s) n))]\n      [else (select-words (rest s) n)]))\n \
    \ (select-words (string-split s) n))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants s)\n    (cond ((null?\
    \ s) 0)\n          ((is-vowel? (car s)) (count-consonants (cdr s)))\n        \
    \  (else (+ 1 (count-consonants (cdr s))))))\n  (define (select-words-helper s\
    \ n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s))) (cons\
    \ (car s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper\
    \ (cdr s) n))))\n  (select-words-helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (or (equal? c #\\b)\n        (equal? c #\\c)\n        (equal? c #\\\
    d)\n        (equal? c #\\f)\n        (equal? c #\\g)\n        (equal? c #\\h)\n\
    \        (equal? c #\\j)\n        (equal? c #\\k)\n        (equal? c #\\l)\n \
    \       (equal? c #\\m)\n        (equal? c #\\n)\n        (equal? c #\\p)\n  \
    \      (equal? c #\\q)\n        (equal? c #\\r)\n        (equal? c #\\s)\n   \
    \     (equal? c #\\t)\n        (equal? c #\\v)\n        (equal? c #\\w)\n    \
    \    (equal? c #\\x)\n        (equal? c #\\y)\n        (equal? c #\\z)))\n  (define\
    \ (count_consonants word)\n    (if (empty? word)\n        0\n        (if (is_consonant?\
    \ (first word))\n            (+ 1 (count_consonants (rest word)))\n          \
    \  (count_consonants (rest word)))))\n  (define (select_words_helper s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first s)))\n       \
    \   (if (= n (count_consonants word))\n              (select_words_helper (rest\
    \ s) n (append result (list word)))\n              (select_words_helper (rest\
    \ s) n result)))))\n  (select_words_helper (string-split s) n (list)))\n", " \
    \ (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n  \
    \           [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n       \
    \      [consonant-count (lambda (word)\n                                (count\
    \ (lambda (c) (member c consonants))\n                                       (string-&gt;list\
    \ word)))])\n        (filter (lambda (word) (= (consonant-count word) n))\n  \
    \              words))))\n</code>\n", "  (cond\n    [(empty? s) empty]\n    [else\n\
    \     (define (consonant? c)\n       (or (char=? c #\\b) (char=? c #\\c) (char=?\
    \ c #\\d) (char=? c #\\f)\n           (char=? c #\\g) (char=? c #\\h) (char=?\
    \ c #\\j) (char=? c #\\k)\n           (char=? c #\\l) (char=? c #\\m) (char=?\
    \ c #\\n) (char=? c #\\p)\n           (char=? c #\\q) (char=? c #\\r) (char=?\
    \ c #\\s) (char=? c #\\t)\n           (char=? c #\\v) (char=? c #\\w) (char=?\
    \ c #\\x) (char=? c #\\y)\n           (char=? c #\\z)))\n     (define (count-consonants\
    \ word)\n       (cond\n         [(empty? word) 0]\n         [(consonant? (first\
    \ word)) (+ 1 (count-consonants (rest word)))]\n         [else (count-consonants\
    \ (rest word))]))\n     (define (select-words-helper s n)\n       (cond\n    \
    \     [(empty? s) empty]\n         [(= n (count-consonants (first s)))\n     \
    \     (cons (first s) (select-words-helper (rest s) n))]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (select-words-helper (string-split s) n)]))\n", "  (if\
    \ (string=? s \"\")\n      '()\n      (let ([word (string-trim s)])\n        (if\
    \ (= (count-consonants word) n)\n            (cons word (select_words (string-drop\
    \ s (string-length word)) n))\n            (select_words (string-drop s (string-length\
    \ word)) n)))))\n", "  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(member (first s) '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants\
    \ (rest s))]\n      [else (+ 1 (count-consonants (rest s)))]))\n  (define (select-words-helper\
    \ s n lst)\n    (cond\n      [(empty? s) lst]\n      [(= n (count-consonants (first\
    \ s))) (select-words-helper (rest s) n (append lst (list (first s))))]\n     \
    \ [else (select-words-helper (rest s) n lst)]))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\\
    a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (string-empty? word)\n        0\n        (+ (if (is_consonant?\
    \ (string-ref word 0)) 1 0)\n           (count_consonants (substring word 1)))))\n\
    \  (define (select_words_iter s n acc)\n    (if (string-empty? s)\n        acc\n\
    \        (let ((word (string-trim s)))\n          (if (= n (count_consonants word))\n\
    \              (select_words_iter (substring s (string-length word)) n (cons word\
    \ acc))\n              (select_words_iter (substring s (string-length word)) n\
    \ acc)))))\n  (reverse (select_words_iter s n '())))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (if (string-empty?\
    \ word)\n        0\n        (+ (if (is_consonant? (string-ref word 0)) 1 0)\n\
    \           (count_consonants (substring word 1)))))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(string-empty? s) (reverse acc)]\n      [(= n (count_consonants\
    \ (string-trim s)))\n       (select_words_iter (string-trim (substring s (string-length\
    \ (string-trim s))))\n                          n\n                          (cons\
    \ (string-trim s) acc))]\n      [else (select_words_iter (string-trim (substring\
    \ s (string-length (string-trim s))))\n                               n\n    \
    \                           acc)]))\n  (select_words_iter s n (list)))\n", " \
    \ (define (is-consonant? c)\n    (cond [(char-ci=? c #\\a) #f]\n          [(char-ci=?\
    \ c #\\e) #f]\n          [(char-ci=? c #\\i) #f]\n          [(char-ci=? c #\\\
    o) #f]\n          [(char-ci=? c #\\u) #f]\n          [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond [(empty? word) 0]\n          [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n          [else (count-consonants (rest\
    \ word))]))\n  (define (select-words-helper s n acc)\n    (cond [(empty? s) acc]\n\
    \          [(count-consonants (first s)) (= n (count-consonants (first s)))\n\
    \           (select-words-helper (rest s) n (append acc (list (first s))))]\n\
    \          [else (select-words-helper (rest s) n acc)]))\n  (select-words-helper\
    \ (string-split s) n (list)))\n", "  (define (is_consonant c)\n    (cond\n   \
    \   ((or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u)) #f)\n      (else #t)))\n  (define (count_consonants word)\n    (define\
    \ (count_consonants_iter word count)\n      (cond\n        ((string-empty? word)\
    \ count)\n        ((is_consonant (string-ref word 0)) (count_consonants_iter (substring\
    \ word 1) (+ count 1)))\n        (else (count_consonants_iter (substring word\
    \ 1) count))))\n    (count_consonants_iter word 0))\n  (define (select_words_iter\
    \ s n words)\n    (cond\n      ((string-empty? s) words)\n      ((= n (count_consonants\
    \ (string-take-while (lambda (c) (not (char=? c #\\ ))) s)))\n       (select_words_iter\
    \ (string-drop-while (lambda (c) (not (char=? c #\\ ))) s) n (cons (string-take-while\
    \ (lambda (c) (not (char=? c #\\ ))) s) words)))\n      (else (select_words_iter\
    \ (string-drop-while (lambda (c) (not (char=? c #\\ ))) s) n words))))\n  (select_words_iter\
    \ s n '()))\n", "  (if (string=? s \"\")\n      '()\n      (let ([words (string-split\
    \ s)])\n        (filter (lambda (w) (= n (count-consonants w))) words))))\n",
  "  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n   \
    \          [consonants (lambda (word)\n                           (length (filter\
    \ (lambda (c)\n                                             (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n                                           (string->list\
    \ word))))]\n             [words-with-n-consonants (filter (lambda (word)\n  \
    \                                              (= (consonants word) n))\n    \
    \                                          words)])\n        words-with-n-consonants)))\n",
  "  (define (is_consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\\
    j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n \
    \ (define (count_consonants word)\n    (if (empty? word)\n        0\n        (+\
    \ (if (is_consonant? (first word)) 1 0)\n           (count_consonants (rest word)))))\n\
    \  (define (select_words_iter s n words)\n    (if (empty? s)\n        words\n\
    \        (let ((word (first (regexp-match #rx\"^[a-zA-Z]+\" s))))\n          (if\
    \ (= n (count_consonants word))\n              (select_words_iter (substring s\
    \ (string-length word)) n (append words (list word)))\n              (select_words_iter\
    \ (substring s (string-length word)) n words)))))\n  (select_words_iter s n '()))\n",
  "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (count_consonants word)\n    (define (count_consonants_iter word count)\n  \
    \    (if (string-empty? word)\n          count\n          (if (is_vowel? (string-ref\
    \ word 0))\n              (count_consonants_iter (substring word 1) count)\n \
    \             (count_consonants_iter (substring word 1) (+ count 1)))))\n    (count_consonants_iter\
    \ word 0))\n  (define (select_words_iter s n words)\n    (if (string-empty? s)\n\
    \        words\n        (let ((word (string-trim (string-take-while (lambda (c)\
    \ (not (char=? c #\\space))) s))))\n          (if (= n (count_consonants word))\n\
    \              (select_words_iter (string-drop s (string-length word)) n (cons\
    \ word words))\n              (select_words_iter (string-drop s (string-length\
    \ word)) n words)))))\n  (select_words_iter s n '()))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (define (count_consonants_iter\
    \ word count)\n      (cond\n        [(empty? word) count]\n        [(is_consonant?\
    \ (first word)) (count_consonants_iter (rest word) (+ count 1))]\n        [else\
    \ (count_consonants_iter (rest word) count)]))\n    (count_consonants_iter word\
    \ 0))\n  (define (select_words_iter s n words)\n    (cond\n      [(empty? s) words]\n\
    \      [(count_consonants (first s)) (select_words_iter (rest s) n (cons (first\
    \ s) words))]\n      [else (select_words_iter (rest s) n words)]))\n  (select_words_iter\
    \ (string-split s) n '()))\n", "  (define (is_consonant c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n result)\n    (cond\n      [(empty? s) result]\n\
    \      [(count_consonants (first s)) (= n (count_consonants (first s)))]\n   \
    \   [else (select_words_iter (rest s) n (append result (list (first s))))]))\n\
    \  (select_words_iter (string-split s) n (list)))\n", "  (define (is_consonant?\
    \ c)\n    (or (equal? c #\\b)\n        (equal? c #\\c)\n        (equal? c #\\\
    d)\n        (equal? c #\\f)\n        (equal? c #\\g)\n        (equal? c #\\h)\n\
    \        (equal? c #\\j)\n        (equal? c #\\k)\n        (equal? c #\\l)\n \
    \       (equal? c #\\m)\n        (equal? c #\\n)\n        (equal? c #\\p)\n  \
    \      (equal? c #\\q)\n        (equal? c #\\r)\n        (equal? c #\\s)\n   \
    \     (equal? c #\\t)\n        (equal? c #\\v)\n        (equal? c #\\w)\n    \
    \    (equal? c #\\x)\n        (equal? c #\\y)\n        (equal? c #\\z)))\n  (define\
    \ (count-consonants word)\n    (define (count-consonants-iter word count)\n  \
    \    (if (empty? word)\n          count\n          (if (is_consonant? (first word))\n\
    \              (count-consonants-iter (rest word) (+ count 1))\n             \
    \ (count-consonants-iter (rest word) count))))\n    (count-consonants-iter word\
    \ 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n        result\n\
    \        (if (= n (count-consonants (first s)))\n            (select-words-iter\
    \ (rest s) n (append result (list (first s))))\n            (select-words-iter\
    \ (rest s) n result))))\n  (select-words-iter (string-split s) n (list)))\n",
  "  (define (is_consonant c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count_consonants w)\n    (for/fold ([count 0]) ([c (in-string w)])\n\
    \      (if (is_consonant c)\n          (add1 count)\n          count)))\n  (define\
    \ (select_words-iter s n acc)\n    (cond\n      [(empty? s) (reverse acc)]\n \
    \     [(= n (count_consonants (car s)))\n       (select_words-iter (cdr s) n (cons\
    \ (car s) acc))]\n      [else (select_words-iter (cdr s) n acc)]))\n  (select_words-iter\
    \ (string-split s) n '()))\n", "  (define (is_consonant? c)\n    (cond\n     \
    \ [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n\
    \      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n \
    \ (define (count_consonants w)\n    (cond\n      [(empty? w) 0]\n      [(is_consonant?\
    \ (first w)) (+ 1 (count_consonants (rest w)))]\n      [else (count_consonants\
    \ (rest w))]))\n  (define (select_words_iter s n acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(count_consonants (first s)) (= n (count_consonants (first s)))]\n\
    \      [else (select_words_iter (rest s) n (cons (first s) acc))]))\n  (select_words_iter\
    \ (string-split s) n '()))\n", "  (define (consonant? c)\n    (member c '(\"b\"\
    \ \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\"\
    \ \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words (rest s) n))]\n      [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (define (consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ s)\n    (cond ((null? s) 0)\n          ((consonant? (car s)) (+ 1 (count-consonants\
    \ (cdr s))))\n          (else (count-consonants (cdr s)))))\n  (define (select-words-helper\
    \ s n acc)\n    (cond ((null? s) acc)\n          ((= n (count-consonants (car\
    \ s))) (select-words-helper (cdr s) n (cons (car s) acc)))\n          (else (select-words-helper\
    \ (cdr s) n acc))))\n  (select-words-helper (string-split s) n '()))\n", "  (define\
    \ (is_consonant c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants w)\n    (cond\n\
    \      [(empty? w) 0]\n      [(is_consonant (first w)) (+ 1 (count_consonants\
    \ (rest w)))]\n      [else (count_consonants (rest w))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count_consonants (first\
    \ s))) (select_words_iter (rest s) n (append acc (list (first s))))]\n      [else\
    \ (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split s)\
    \ n (list)))\n", "  (define (is_consonant? c)\n    (not (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u))))\n  (define (count-consonants w)\n    (define (count-consonants-iter\
    \ w i)\n      (if (is_consonant? (string-ref w i))\n          (+ 1 (count-consonants-iter\
    \ w (+ i 1)))\n          (count-consonants-iter w (+ i 1))))\n    (count-consonants-iter\
    \ w 0))\n  (define (select-words-iter s i)\n    (if (&lt; i (string-length s))\n\
    \        (let ((w (string-trim (substring s i (string-index-right s #\\space i)))))\n\
    \          (if (= n (count-consonants w))\n              (cons w (select-words-iter\
    \ s (+ i (string-length w))))\n              (select-words-iter s (+ i (string-length\
    \ w)))))\n        '()))\n  (select-words-iter s 0))\n</code>\n", "  (define (is_consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (and (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n         (not (char-whitespace? c))))\n  (define\
    \ (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is-consonant? (first\
    \ s)) (+ 1 (count-consonants (rest s)))]\n          [else (count-consonants (rest\
    \ s))]))\n  (define (select-words-helper s n acc)\n    (cond [(empty? s) acc]\n\
    \          [(and (char-whitespace? (first s))\n                (= n (count-consonants\
    \ (first acc))))\n           (select-words-helper (rest s) n (cons (first acc)\
    \ acc))]\n          [(char-whitespace? (first s))\n           (select-words-helper\
    \ (rest s) n (cons \"\" acc))]\n          [else (select-words-helper (rest s)\
    \ n\n                                     (cons (string-append (first acc)\n \
    \                                                         (string (first s)))\n\
    \                                           (rest acc)))]))\n  (select-words-helper\
    \ s n (list \"\")))\n", "  (define (is_consonant c)\n    (cond ((or (char=? c\
    \ #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f)\n\
    \          (else #t)))\n  (define (count_consonants s)\n    (cond ((string-empty?\
    \ s) 0)\n          ((is_consonant (string-ref s 0)) (+ 1 (count_consonants (string-tail\
    \ s))))\n          (else (count_consonants (string-tail s)))))\n  (define (select_words_iter\
    \ s n lst)\n    (cond ((string-empty? s) lst)\n          ((= n (count_consonants\
    \ (string-take s (string-index s #\\space))))\n           (select_words_iter (string-drop\
    \ s (string-index s #\\space)) n (cons (string-take s (string-index s #\\space))\
    \ lst)))\n          (else (select_words_iter (string-drop s (string-index s #\\\
    space)) n lst))))\n  (select_words_iter s n '()))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (consonant? c)\n    (and (not (char-alphabetic? c))\n   \
    \      (not (char=? c #\\space))))\n  (define (count-consonants s)\n    (define\
    \ (count-consonants-iter s i n)\n      (if (= i (string-length s))\n         \
    \ n\n          (if (consonant? (string-ref s i))\n              (count-consonants-iter\
    \ s (+ i 1) (+ n 1))\n              (count-consonants-iter s (+ i 1) n))))\n \
    \   (count-consonants-iter s 0 0))\n  (define (select-words-iter s i l)\n    (if\
    \ (= i (string-length s))\n        l\n        (if (char=? (string-ref s i) #\\\
    space)\n            (select-words-iter s (+ i 1) l)\n            (let ((word (string-trim\
    \ (substring s i (string-index-right s #\\space i)))))\n              (if (= n\
    \ (count-consonants word))\n                  (select-words-iter s (+ i (string-length\
    \ word)) (cons word l))\n                  (select-words-iter s (+ i (string-length\
    \ word)) l))))))\n  (select-words-iter s 0 '()))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (if (empty? word)\n\
    \        0\n        (+ (if (is_consonant? (first word)) 1 0)\n           (count_consonants\
    \ (rest word)))))\n  (define (select_words_iter s n words)\n    (if (empty? s)\n\
    \        words\n        (if (= n (count_consonants (first s)))\n            (select_words_iter\
    \ (rest s) n (cons (first s) words))\n            (select_words_iter (rest s)\
    \ n words))))\n  (select_words_iter (string-split s) n '()))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else\
    \ #t]))\n  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n\
    \      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n \
    \     [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(or\
    \ (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\u)) #f]\n      [else #t]))\n\
    \  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n      [else\
    \ (count_consonants (rest word))]))\n  (define (select_words_iter s n result)\n\
    \    (cond\n      [(empty? s) result]\n      [(= n (count_consonants (first s)))\
    \ (select_words_iter (rest s) n (append result (list (first s))))]\n      [else\
    \ (select_words_iter (rest s) n result)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (cond [(empty? s) empty]\n        [else (define (is-consonant?\
    \ c)\n                (cond [(char-ci=? c #\\a) #f]\n                      [(char-ci=?\
    \ c #\\e) #f]\n                      [(char-ci=? c #\\i) #f]\n               \
    \       [(char-ci=? c #\\o) #f]\n                      [(char-ci=? c #\\u) #f]\n\
    \                      [else #t]))\n              (define (count-consonants w)\n\
    \                (cond [(empty? w) 0]\n                      [else (+ (if (is-consonant?\
    \ (first w)) 1 0)\n                               (count-consonants (rest w)))]))\n\
    \              (define (select-words s n)\n                (cond [(empty? s) empty]\n\
    \                      [(= n (count-consonants (first s)))\n                 \
    \      (cons (first s) (select-words (rest s) n))]\n                      [else\
    \ (select-words (rest s) n)]))\n              (select-words (string-split s) n)]))\n",
  "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n      [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(= n (count-consonants (first s)))\n       (select-words-helper\
    \ (rest s) n (append acc (list (first s))))]\n      [else (select-words-helper\
    \ (rest s) n acc)]))\n  (select-words-helper (string-split s) n (list)))\n", " \
    \ (define (is_consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count-consonants s)\n    (cond ((string=? s \"\") 0)\n   \
    \       ((is_consonant? (string-ref s 0))\n           (+ 1 (count-consonants (substring\
    \ s 1))))\n          (else (count-consonants (substring s 1)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((string=? s \"\") '())\n          ((= n (count-consonants (string-take-while\
    \ char-alphabetic? s)))\n           (cons (string-take-while char-alphabetic?\
    \ s)\n                 (select-words-helper (string-drop-while char-alphabetic?\
    \ s) n)))\n          (else (select-words-helper (string-drop-while char-alphabetic?\
    \ s) n))))\n  (select-words-helper s n))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (is-consonant? c)\n       (not (member c (list #\\a #\\\
    e #\\i #\\o #\\u))))\n     (define (count-consonants s)\n       (cond\n      \
    \   [(empty? s) 0]\n         [else\n          (+ (if (is-consonant? (first s))\
    \ 1 0)\n             (count-consonants (rest s)))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n\
    \         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [else\n   \
    \  (define (is-consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n     (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n\
    \         [else\n          (+ (if (is-consonant? (first s)) 1 0)\n           \
    \  (count-consonants (rest s)))]))\n     (define (select-words-helper s n)\n \
    \      (cond\n         [(empty? s) empty]\n         [(= n (count-consonants (first\
    \ s)))\n          (cons (first s) (select-words-helper (rest s) n))]\n       \
    \  [else (select-words-helper (rest s) n)]))\n     (select-words-helper (string-split\
    \ s) n)]))\n", "  (define (count-consonants s)\n    (cond ((null? s) 0)\n    \
    \      ((member (car s) '(#\\a #\\e #\\i #\\o #\\u)) (count-consonants (cdr s)))\n\
    \          (else (+ 1 (count-consonants (cdr s))))))\n  (define (select-words\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s)))\
    \ (cons (car s) (select-words (cdr s) n)))\n          (else (select-words (cdr\
    \ s) n))))\n  (select-words (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(or (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\\
    u)) #f]\n      [else #t]))\n  (define (count_consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants (rest s)))]\n\
    \      [else (count_consonants (rest s))]))\n  (define (select_words-helper s\
    \ n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count_consonants (first\
    \ s))) (select_words-helper (rest s) n (append acc (list (first s))))]\n     \
    \ [else (select_words-helper (rest s) n acc)]))\n  (select_words-helper (string-split\
    \ s) n (list)))\n", "  (define (is_consonant c)\n    (cond\n      [(char=? c #\\\
    a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter word_list)\n    (cond\n      [(empty? word_list)\
    \ empty]\n      [(= n (count_consonants (first word_list))) (cons (first word_list)\
    \ (select_words_iter (rest word_list)))]\n      [else (select_words_iter (rest\
    \ word_list))]))\n  (select_words_iter (string-split s)))\n", "  (define (consonant?\
    \ c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ s)\n    (if (empty? s)\n        0\n        (+ (if (consonant? (first s)) 1 0)\n\
    \           (count-consonants (rest s)))))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ([word (first s)])\n       \
    \   (if (= n (count-consonants word))\n              (select-words-iter (rest\
    \ s) n (append result (list word)))\n              (select-words-iter (rest s)\
    \ n result)))))\n  (select-words-iter (string-split s) n '()))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count_consonants (first\
    \ s))) (select_words_helper (rest s) n (append acc (list (first s))))]\n     \
    \ [else (select_words_helper (rest s) n acc)]))\n  (select_words_helper (string-split\
    \ s) n (list)))\n", "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u)))\n  (define (count_consonants s)\n    (cond ((null? s) 0)\n         \
    \ ((is_vowel (car s)) (count_consonants (cdr s)))\n          (else (+ 1 (count_consonants\
    \ (cdr s))))))\n  (define (select_words_iter s n result)\n    (cond ((null? s)\
    \ result)\n          ((is_vowel (car s)) (select_words_iter (cdr s) n result))\n\
    \          ((eq? n 1) (select_words_iter (cdr s) 0 (cons (string-&gt;symbol (list\
    \ (car s))) result)))\n          (else (select_words_iter (cdr s) (- n 1) result))))\n\
    \  (select_words_iter s n '()))\n</code>\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (let*\n         ([words (string-split s)]\n          [consonants\
    \ (map (lambda (x) (count-consonants x)) words)]\n          [indexes (map (lambda\
    \ (x) (if (= x n) 1 0)) consonants)]\n          [index (index-of 1 indexes)]\n\
    \          [word (list-ref words index)])\n       (if (= index -1)\n         \
    \  empty\n           (cons word (select_words (string-drop s (+ 1 (string-length\
    \ word))) n))))]))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is_consonant? (first w)) (+ 1 (count_consonants\
    \ (rest w)))]\n      [else (count_consonants (rest w))]))\n  (define (select_words_helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count_consonants\
    \ (first words)))\n       (cons (first words) (select_words_helper (rest words)\
    \ n))]\n      [else (select_words_helper (rest words) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (define (is_consonant c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(count_consonants (first s)) (= n (count_consonants (first s)))]\n     \
    \ [else (select_words_iter (rest s) n (cons (first s) acc))]))\n  (select_words_iter\
    \ (string-split s) n '()))\n", "  (if (string=? s \"\")\n      '()\n      (let*\
    \ ([words (string-split s)]\n             [consonants (map (lambda (w) (count-consonants\
    \ w)) words)]\n             [indices (map (lambda (c) (if (= c n) 1 0)) consonants)]\n\
    \             [index (index-of 1 indices)]\n             [word (if index (list-ref\
    \ words index) \"\")])\n        (if (string=? word \"\")\n            '()\n  \
    \          (cons word (select_words (string-drop s (+ (string-length word) 1))\
    \ n))))))\n", "  (define (is_consonant c)\n    (cond\n      [(char=? c #\\a) #f]\n\
    \      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\\
    o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(count_consonants (first\
    \ s)) (+ 1 (count_consonants (rest s)))]\n      [else (select_words_iter (rest\
    \ s) n acc)]))\n  (select_words_iter (string-split s #\\space) n '()))\n", " \
    \ (define (is_consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count-consonants s)\n    (cond ((string=? s \"\") 0)\n   \
    \       ((is_consonant? (string-ref s 0)) (+ 1 (count-consonants (substring s\
    \ 1))))\n          (else (count-consonants (substring s 1)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((string=? s \"\") '())\n          ((= n (count-consonants (string-take\
    \ s (string-index s #\\space))))\n           (cons (string-take s (string-index\
    \ s #\\space))\n                 (select-words-helper (string-drop s (string-index\
    \ s #\\space)) n)))\n          (else (select-words-helper (string-drop s (string-index\
    \ s #\\space)) n))))\n  (select-words-helper s n))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n\
    \      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count-consonants w)\n    (cond\n\
    \      [(empty? w) 0]\n      [(is-consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ ws)\n    (cond\n      [(empty? ws) empty]\n      [(= n (count-consonants (first\
    \ ws))) (cons (first ws) (select-words-helper (rest ws)))]\n      [else (select-words-helper\
    \ (rest ws))]))\n  (select-words-helper (string-split s)))\n", "  (define (count_consonants\
    \ word)\n    (define (is_consonant? c)\n      (cond\n        [(char=? c #\\a)\
    \ #f]\n        [(char=? c #\\e) #f]\n        [(char=? c #\\i) #f]\n        [(char=?\
    \ c #\\o) #f]\n        [(char=? c #\\u) #f]\n        [else #t]))\n    (define\
    \ (count_consonants_iter word count)\n      (cond\n        [(empty? word) count]\n\
    \        [(is_consonant? (first word)) (count_consonants_iter (rest word) (+ count\
    \ 1))]\n        [else (count_consonants_iter (rest word) count)]))\n    (count_consonants_iter\
    \ word 0))\n  (define (select_words_iter s n result)\n    (cond\n      [(empty?\
    \ s) result]\n      [(empty? (rest s)) result]\n      [(= n (count_consonants\
    \ (first s))) (select_words_iter (rest s) n (append result (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n result)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (consonant? c)\n       (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n     (define\
    \ (count-consonants s)\n       (cond\n         [(empty? s) 0]\n         [else\n\
    \          (+ (if (consonant? (first s)) 1 0)\n             (count-consonants\
    \ (rest s)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [else\n          (define (select-words-helper s n)\n   \
    \         (cond\n              [(empty? s) empty]\n              [else\n     \
    \          (if (= n (count-consonants (first s)))\n                   (cons (first\
    \ s) (select-words-helper (rest s) n))\n                   (select-words-helper\
    \ (rest s) n))]))\n          (select-words-helper (string-split s #\\space) n)]))\n\
    \     (select-words s n)]))\n", "  (if (string=? s \"\")\n      '()\n      (let*\
    \ ([words (string-split s)]\n             [consonants (list #\\b #\\c #\\d #\\\
    f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)]\n             [consonant-count (lambda (word)\n                     \
    \           (let loop ([i 0] [count 0])\n                                  (if\
    \ (= i (string-length word))\n                                      count\n  \
    \                                    (if (member (string-ref word i) consonants)\n\
    \                                          (loop (+ i 1) (+ count 1))\n      \
    \                                    (loop (+ i 1) count)))))]\n             [selected-words\
    \ (filter (lambda (word) (= (consonant-count word) n)) words)])\n        selected-words)))\n",
  "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\\
    k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define\
    \ (count-consonants s)\n    (cond ((null? s) 0)\n          ((consonant? (car s))\
    \ (+ 1 (count-consonants (cdr s))))\n          (else (count-consonants (cdr s)))))\n\
    \  (define (select-words-helper s n)\n    (cond ((null? s) '())\n          ((=\
    \ n (count-consonants (car s))) (cons (car s) (select-words-helper (cdr s) n)))\n\
    \          (else (select-words-helper (cdr s) n))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant?\
    \ c)\n       (or (char=? c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\\
    f) (char=? c #\\g)\n           (char=? c #\\h) (char=? c #\\j) (char=? c #\\k)\
    \ (char=? c #\\l) (char=? c #\\m)\n           (char=? c #\\n) (char=? c #\\p)\
    \ (char=? c #\\q) (char=? c #\\r) (char=? c #\\s)\n           (char=? c #\\t)\
    \ (char=? c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y)\n          \
    \ (char=? c #\\z)))\n     (define (count-consonants word)\n       (cond\n    \
    \     [(empty? word) 0]\n         [(consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n         [else (count-consonants (rest word))]))\n     (define\
    \ (select-words-helper s n)\n       (cond\n         [(empty? s) empty]\n     \
    \    [(count-consonants (first s)) = n (cons (first s) (select-words-helper (rest\
    \ s) n))]\n         [else (select-words-helper (rest s) n)]))\n     (select-words-helper\
    \ (string-split s \" \") n)]))\n", "  (define (is-consonant? c)\n    (and (not\
    \ (member c '(#\\a #\\e #\\i #\\o #\\u)))\n         (not (char-whitespace? c))))\n\
    \  (define (count-consonants s)\n    (define (count-consonants-iter s n)\n   \
    \   (if (string-empty? s)\n          n\n          (if (is-consonant? (string-ref\
    \ s 0))\n              (count-consonants-iter (substring s 1) (+ n 1))\n     \
    \         (count-consonants-iter (substring s 1) n))))\n    (count-consonants-iter\
    \ s 0))\n  (define (select-words-iter s n words)\n    (if (string-empty? s)\n\
    \        words\n        (let ((word (string-trim s)))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-iter (substring s (string-length word))\
    \ n (cons word words))\n              (select-words-iter (substring s (string-length\
    \ word)) n words)))))\n  (select-words-iter s n '()))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else\
    \ #t]))\n  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n   \
    \   [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n      [else\
    \ (count-consonants (rest s))]))\n  (define (select-words-helper s n)\n    (cond\n\
    \      [(empty? s) empty]\n      [(= n (count-consonants (first s)))\n       (cons\
    \ (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s #\\space) n))\n", " \
    \ (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\n             (char-ci=?\
    \ c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=? c #\\o)\n\
    \             (char-ci=? c #\\u))))\n  (define (count-consonants word)\n    (define\
    \ (count-consonants-iter word count)\n      (if (empty? word)\n          count\n\
    \          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first (regexp-match\
    \ #rx\"^[a-zA-Z]+\" s))))\n          (if (= n (count-consonants word))\n     \
    \         (select-words-iter (substring s (string-length word)) n (append result\
    \ (list word)))\n              (select-words-iter (substring s (string-length\
    \ word)) n result)))))\n  (select-words-iter s n (list)))\n", "  (if (empty? s)\n\
    \      (list)\n      (let ((word (string-trim s)))\n        (if (= n (count-consonants\
    \ word))\n            (cons word (select_words (string-trim (string-drop s (string-length\
    \ word))) n))\n            (select_words (string-trim (string-drop s (string-length\
    \ word))) n)))))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\\
    e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (foldl (lambda (c n)\
    \ (if (is-consonant? c) (+ n 1) n)) 0 s))\n  (define (select-words s n)\n    (cond\
    \ [(empty? s) empty]\n          [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words (rest s) n))]\n          [else (select-words (rest s) n)]))\n\
    \  (select-words (string-split s) n))\n", "  (define (count-consonants s)\n  \
    \  (define (is-consonant? c)\n      (cond\n        [(char=? c #\\a) #f]\n    \
    \    [(char=? c #\\e) #f]\n        [(char=? c #\\i) #f]\n        [(char=? c #\\\
    o) #f]\n        [(char=? c #\\u) #f]\n        [else #t]))\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \      [else (count-consonants (rest s))]))\n  (define (select_words-iter s n\
    \ acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count-consonants (first\
    \ s))) (select_words-iter (rest s) n (append acc (list (first s))))]\n      [else\
    \ (select_words-iter (rest s) n acc)]))\n  (select_words-iter (string-split s)\
    \ n (list)))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\\
    a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count_consonants (first\
    \ s))) (select_words_iter (rest s) n (append acc (list (first s))))]\n      [else\
    \ (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split s)\
    \ n (list)))\n", "  (define (is_consonant c)\n    (cond\n      [(member c '(#\\\
    a #\\e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count_consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words (rest s) n))]\n      [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (define (is_consonant\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is_consonant (first word)) (+ 1 (count_consonants (rest word)))]\n\
    \      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (is_consonant\
    \ c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n\
    \      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count-consonants s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is_consonant (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words (rest s) n))]\n      [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (let*\n         ([word (first (regexp-match #rx\"\
    ^[a-zA-Z]+\" s))]\n          [rest (substring s (string-length word))]\n     \
    \     [consonants (count-consonants word)])\n       (if (= consonants n)\n   \
    \        (cons word (select_words rest n))\n           (select_words rest n)))]))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (let ([w (first (string-split\
    \ s #\\space))]\n           [r (rest (string-split s #\\space))])\n       (cond\n\
    \         [(= n (count-consonants w))\n          (cons w (select_words (string-join\
    \ r #\\space) n))]\n         [else (select_words (string-join r #\\space) n)]))]))\n",
  "  (define (consonant? c)\n    (cond\n      [(member c '(#\\b #\\c #\\d #\\f #\\\
    g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z)) #t]\n      [else #f]))\n  (define (count-consonants w)\n    (let loop ([i\
    \ 0] [c 0])\n      (if (= i (string-length w))\n          c\n          (if (consonant?\
    \ (string-ref w i))\n              (loop (+ i 1) (+ c 1))\n              (loop\
    \ (+ i 1) c)))))\n  (define (select-words-helper ws)\n    (cond\n      [(empty?\
    \ ws) empty]\n      [(= n (count-consonants (first ws))) (cons (first ws) (select-words-helper\
    \ (rest ws)))]\n      [else (select-words-helper (rest ws))]))\n  (select-words-helper\
    \ (string-split s)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\
    \ ([word (first (regexp-match #rx\"\\w+\" s))]\n            [rest (regexp-match\
    \ #rx\"\\s*\\w+\" (substring s (string-length word)))])\n       (if (= n (count-consonants\
    \ word))\n           (cons word (select_words (substring s (string-length word))\
    \ n))\n           (select_words (substring s (string-length word)) n)))]))\n",
  "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=?\
    \ c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (if (string-empty?\
    \ word)\n        0\n        (+ (if (is_consonant? (string-ref word 0)) 1 0)\n\
    \           (count_consonants (substring word 1)))))\n  (define (select_words_helper\
    \ s n acc)\n    (if (string-empty? s)\n        acc\n        (let ([word (string-trim\
    \ (string-take-while (lambda (c) (not (char=? c #\\space))) s))])\n          (if\
    \ (= n (count_consonants word))\n              (select_words_helper (string-drop-while\
    \ (lambda (c) (not (char=? c #\\space))) s) n (cons word acc))\n             \
    \ (select_words_helper (string-drop-while (lambda (c) (not (char=? c #\\space)))\
    \ s) n acc)))))\n  (reverse (select_words_helper s n '())))\n", "  (if (empty?\
    \ s)\n      (list)\n      (let ([words (string-split s \" \")])\n        (filter\
    \ (lambda (w) (= n (count-consonants w))) words))))\n", "  (define (is_consonant?\
    \ c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n  (define (count_consonants\
    \ w)\n    (define (count_consonants_iter w c)\n      (if (empty? w)\n        \
    \  c\n          (if (is_consonant? (first w))\n              (count_consonants_iter\
    \ (rest w) (+ c 1))\n              (count_consonants_iter (rest w) c))))\n   \
    \ (count_consonants_iter w 0))\n  (define (select_words_iter s n l)\n    (if (empty?\
    \ s)\n        l\n        (let ((w (first (string-split s #\\space))))\n      \
    \    (if (= n (count_consonants w))\n              (select_words_iter (string-trim\
    \ (string-trim-right s (string-length w))) n (cons w l))\n              (select_words_iter\
    \ (string-trim (string-trim-right s (string-length w))) n l)))))\n  (select_words_iter\
    \ s n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define (is_consonant?\
    \ c)\n       (cond\n         [(char-ci=? c #\\a) false]\n         [(char-ci=?\
    \ c #\\e) false]\n         [(char-ci=? c #\\i) false]\n         [(char-ci=? c\
    \ #\\o) false]\n         [(char-ci=? c #\\u) false]\n         [else true]))\n\
    \     (define (count_consonants word)\n       (cond\n         [(empty? word) 0]\n\
    \         [else\n          (if (is_consonant? (first word))\n              (+\
    \ 1 (count_consonants (rest word)))\n              (count_consonants (rest word)))]))\n\
    \     (define (select_words_helper s n)\n       (cond\n         [(empty? s) empty]\n\
    \         [(count_consonants (first s)) n]\n         [else (select_words_helper\
    \ (rest s) n)]))\n     (select_words_helper (string-split s) n)]))\n", "  (define\
    \ (vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (consonant?\
    \ c)\n    (and (char-alphabetic? c) (not (vowel? c))))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (if (empty? word)\n\
    \          count\n          (if (consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first (string-split\
    \ s))))\n          (if (= n (count-consonants word))\n              (select-words-iter\
    \ (string-drop s (string-length word)) n (append result (list word)))\n      \
    \        (select-words-iter (string-drop s (string-length word)) n result)))))\n\
    \  (select-words-iter s n (list)))\n</code>\n", "  (define (is-consonant? c)\n\
    \    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n   \
    \   [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count-consonants word)\n    (define\
    \ (count-consonants-iter word count)\n      (cond\n        [(empty? word) count]\n\
    \        [(is-consonant? (first word)) (count-consonants-iter (rest word) (+ count\
    \ 1))]\n        [else (count-consonants-iter (rest word) count)]))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (cond\n      [(empty?\
    \ s) result]\n      [(= n (count-consonants (first s))) (select-words-iter (rest\
    \ s) n (append result (list (first s))))]\n      [else (select-words-iter (rest\
    \ s) n result)]))\n  (select-words-iter (string-split s) n (list)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-consonant?\
    \ c)\n    (and (char-alphabetic? c) (not (is-vowel? c))))\n  (define (count-consonants\
    \ w)\n    (for/fold ([n 0]) ([c (in-string w)])\n      (if (is-consonant? c)\n\
    \          (+ n 1)\n          n)))\n  (define (select-words-helper ws)\n    (cond\
    \ [(empty? ws) empty]\n          [(= n (count-consonants (first ws)))\n      \
    \     (cons (first ws) (select-words-helper (rest ws)))]\n          [else (select-words-helper\
    \ (rest ws))]))\n  (select-words-helper (string-split s)))\n", "  (define (is-consonant?\
    \ c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (if (string-empty?\
    \ word)\n          count\n          (if (is-consonant? (string-ref word 0))\n\
    \              (count-consonants-iter (substring word 1) (+ count 1))\n      \
    \        (count-consonants-iter (substring word 1) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (string-empty? s)\n\
    \        result\n        (let ((word (string-trim (string-take-while char-alphabetic?\
    \ s))))\n          (if (= n (count-consonants word))\n              (select-words-iter\
    \ (substring s (string-length word)) n (cons word result))\n              (select-words-iter\
    \ (substring s (string-length word)) n result)))))\n  (select-words-iter s n '()))\n",
  "  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\n             (char-ci=?\
    \ c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=? c #\\o)\n\
    \             (char-ci=? c #\\u))))\n  (define (count-consonants word)\n    (define\
    \ (count-consonants-iter word count)\n      (if (empty? word)\n          count\n\
    \          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first (regexp-match\
    \ #rx\"\\w+\" s))))\n          (if (= n (count-consonants word))\n           \
    \   (select-words-iter (regexp-replace #rx\"\\w+\" s \"\") n (append result (list\
    \ word)))\n              (select-words-iter (regexp-replace #rx\"\\w+\" s \"\"\
    ) n result)))))\n  (select-words-iter s n '()))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [else\n     (let ([word (first (string-split s #\\space))]\n   \
    \        [rest (rest (string-split s #\\space))])\n       (if (= n (count-consonants\
    \ word))\n           (cons word (select_words (string-join rest #\\space) n))\n\
    \           (select_words (string-join rest #\\space) n)))]))\n", "  (define (consonant?\
    \ c)\n    (or (char=? c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\f)\n\
    \        (char=? c #\\g) (char=? c #\\h) (char=? c #\\j) (char=? c #\\k)\n   \
    \     (char=? c #\\l) (char=? c #\\m) (char=? c #\\n) (char=? c #\\p)\n      \
    \  (char=? c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\t)\n        (char=?\
    \ c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y)\n        (char=? c #\\\
    z)))\n  (define (count-consonants word)\n    (cond ((null? word) 0)\n        \
    \  ((consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n          (else\
    \ (count-consonants (cdr word)))))\n  (define (select-words-helper words n)\n\
    \    (cond ((null? words) '())\n          ((= n (count-consonants (car words)))\n\
    \           (cons (car words) (select-words-helper (cdr words) n)))\n        \
    \  (else (select-words-helper (cdr words) n))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (is_consonant? c)\n    (not (member c '(#\\a #\\e #\\\
    i #\\o #\\u))))\n  (define (count-consonants word)\n    (for/sum ([c (in-string\
    \ word)])\n      (if (is_consonant? c) 1 0)))\n  (for/list ([word (in-string s)])\n\
    \    (if (= n (count-consonants word))\n        word)))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else (cons (first (split s #\\space)) (select_words (rest (split\
    \ s #\\space)) n))]))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (if (string-empty? word)\n        0\n\
    \        (+ (if (is-consonant? (string-ref word 0)) 1 0)\n           (count-consonants\
    \ (substring word 1)))))\n  (define (select-words-helper s n)\n    (cond\n   \
    \   [(string-empty? s) '()]\n      [(= n (count-consonants (car (string-split\
    \ s #\\space))))\n       (cons (car (string-split s #\\space))\n             (select-words-helper\
    \ (string-join (cdr (string-split s #\\space)) #\\space) n))]\n      [else (select-words-helper\
    \ (string-join (cdr (string-split s #\\space)) #\\space) n)]))\n  (select-words-helper\
    \ s n))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n\
    \      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\\
    o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (string-empty? word)\n        0\n        (+ (if (is_consonant?\
    \ (string-ref word 0)) 1 0)\n           (count_consonants (substring word 1)))))\n\
    \  (define (select_words_iter s n words)\n    (if (string-empty? s)\n        words\n\
    \        (let ((word (string-trim s)))\n          (if (= n (count_consonants word))\n\
    \              (select_words_iter (substring s (string-length word)) n (cons word\
    \ words))\n              (select_words_iter (substring s (string-length word))\
    \ n words)))))\n  (reverse (select_words_iter s n '())))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n\
    \      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(count_consonants (first\
    \ s)) (= n (count_consonants (first s)))\n       (select_words_helper (rest s)\
    \ n (append acc (list (first s))))]\n      [else (select_words_helper (rest s)\
    \ n acc)]))\n  (select_words_helper (string-split s) n '()))\n", "  (define (is_consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (for/sum ([c (in-string word)])\n      (if (is_consonant? c) 1 0)))\n\
    \  (define (select-words-iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(= n (count-consonants (first s)))\n       (select-words-iter (rest s) n\
    \ (cons (first s) acc))]\n      [else (select-words-iter (rest s) n acc)]))\n\
    \  (select-words-iter (string-split s) n '()))\n", "  (if (string=? s \"\")\n\
    \      '()\n      (let ([w (string-tokenize s)])\n        (if (and (string-contains?\
    \ (car w) #\\a)\n                 (string-contains? (car w) #\\e)\n          \
    \       (string-contains? (car w) #\\i)\n                 (string-contains? (car\
    \ w) #\\o)\n                 (string-contains? (car w) #\\u))\n            (select_words\
    \ (string-join (cdr w) \" \") n)\n            (if (= (count-consonants (car w))\
    \ n)\n                (cons (car w) (select_words (string-join (cdr w) \" \")\
    \ n))\n                (select_words (string-join (cdr w) \" \") n))))))\n", " \
    \ (define (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (if (string-empty? word)\n        0\n        (+ (if (is-consonant?\
    \ (string-ref word 0)) 1 0)\n           (count-consonants (substring word 1)))))\n\
    \  (define (select-words-helper s n acc)\n    (cond\n      [(string-empty? s)\
    \ acc]\n      [(= n (count-consonants (car (string-split s #\\space))))\n    \
    \   (select-words-helper (cdr (string-split s #\\space)) n (cons (car (string-split\
    \ s #\\space)) acc))]\n      [else (select-words-helper (cdr (string-split s #\\\
    space)) n acc)]))\n  (select-words-helper s n '()))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [else\n     (define (is-consonant? c)\n       (not (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u))))\n     (define (count-consonants w)\n       (cond\n\
    \         [(empty? w) 0]\n         [else\n          (+ (if (is-consonant? (first\
    \ w)) 1 0)\n             (count-consonants (rest w)))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [else\n          (define\
    \ (select-words s n)\n            (cond\n              [(empty? s) empty]\n  \
    \            [else\n               (define (select-words s n)\n              \
    \   (cond\n                   [(empty? s) empty]\n                   [else\n \
    \                   (define (select-words s n)\n                      (cond\n\
    \                        [(empty? s) empty]\n                        [else\n \
    \                        (define (select-words s n)\n                        \
    \   (cond\n                             [(empty? s) empty]\n                 \
    \            [else\n                              (define (select-words s n)\n\
    \                                (cond\n                                  [(empty?\
    \ s) empty]\n                                  [else\n                       \
    \            (define (select-words s n)\n                                    \
    \ (cond\n                                       [(empty? s) empty]\n         \
    \                              [else\n                                       \
    \ (define (select-words s n)\n                                          (cond\n\
    \                                            [(empty? s) empty]\n            \
    \                                [else\n                                     \
    \        (define (select-words s n)\n                                        \
    \       (cond\n                                                 [(empty? s) empty]\n\
    \                                                 [else\n                    \
    \                              (define (select-words s n)\n                  \
    \                                  (cond\n                                   \
    \                   [(empty? s) empty]\n                                     \
    \                 [else\n                                                    \
    \   (define (select-words s n)\n                                             \
    \            (cond\n                                                         \
    \  [(empty? s) empty]\n                                                      \
    \     [else\n                                                            (define\
    \ (select-words s n)\n                                                       \
    \       (cond\n                                                              \
    \  [(empty? s) empty]\n                                                      \
    \          [else\n                                                ", "  (cond\n\
    \    [(empty? s) empty]\n    [else\n     (let ([w (first (regexp-match #rx\"\\\
    w+\" s))])\n       (if (= n (count-consonants w))\n           (cons w (select_words\
    \ (substring s (add1 (string-length w))) n))\n           (select_words (substring\
    \ s (add1 (string-length w))) n)))]))\n", "  (define (is_consonant? c)\n    (cond\n\
    \      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\\
    i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n      [else\
    \ (count_consonants (rest word))]))\n  (define (select_words_helper s n result)\n\
    \    (cond\n      [(empty? s) result]\n      [(equal? n (count_consonants (first\
    \ s))) (select_words_helper (rest s) n (append result (list (first s))))]\n  \
    \    [else (select_words_helper (rest s) n result)]))\n  (select_words_helper\
    \ (string-split s) n (list)))\n", "  (define (is_consonant? c)\n    (cond\n  \
    \    [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i)\
    \ #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n      [else\
    \ (count_consonants (rest word))]))\n  (define (select_words_helper s n)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first s))) (cons\
    \ (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [else\n     (define (consonant? c)\n       (or (char=?\
    \ c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\f)\n           (char=?\
    \ c #\\g) (char=? c #\\h) (char=? c #\\j) (char=? c #\\k)\n           (char=?\
    \ c #\\l) (char=? c #\\m) (char=? c #\\n) (char=? c #\\p)\n           (char=?\
    \ c #\\q) (char=? c #\\r) (char=? c #\\s) (char=? c #\\t)\n           (char=?\
    \ c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y)\n           (char=?\
    \ c #\\z)))\n     (define (count-consonants s)\n       (cond\n         [(empty?\
    \ s) 0]\n         [(consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \         [else (count-consonants (rest s))]))\n     (define (select-words s n)\n\
    \       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words (rest s) n))]\n         [else (select-words\
    \ (rest s) n)]))\n     (select-words (string-split s) n)]))\n", "  (define (is_consonant\
    \ c)\n    (and (not (char-alphabetic? c))\n         (not (char=? c #\\a))\n  \
    \       (not (char=? c #\\e))\n         (not (char=? c #\\i))\n         (not (char=?\
    \ c #\\o))\n         (not (char=? c #\\u))))\n  (define (count_consonants word)\n\
    \    (cond ((null? word) 0)\n          ((is_consonant (car word)) (+ 1 (count_consonants\
    \ (cdr word))))\n          (else (count_consonants (cdr word)))))\n  (define (select_words_iter\
    \ s n result)\n    (cond ((null? s) result)\n          ((= n (count_consonants\
    \ (car s))) (select_words_iter (cdr s) n (cons (car s) result)))\n          (else\
    \ (select_words_iter (cdr s) n result))))\n  (select_words_iter (string-split\
    \ s) n '()))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (string-empty? word)\n          count\n          (if\
    \ (is_vowel? (string-ref word 0))\n              (count-consonants-iter (substring\
    \ word 1) count)\n              (count-consonants-iter (substring word 1) (+ count\
    \ 1)))))\n    (count-consonants-iter word 0))\n  (define (select-words-iter s\
    \ n result)\n    (if (string-empty? s)\n        result\n        (let ((word (string-trim\
    \ s)))\n          (if (= n (count-consonants word))\n              (select-words-iter\
    \ (substring s (string-length word)) n (cons word result))\n              (select-words-iter\
    \ (substring s (string-length word)) n result)))))\n  (select-words-iter s n '()))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant? c)\n     \
    \  (or (char=? c #\\b) (char=? c #\\c) (char=? c #\\d) (char=? c #\\f) (char=?\
    \ c #\\g)\n           (char=? c #\\h) (char=? c #\\j) (char=? c #\\k) (char=?\
    \ c #\\l) (char=? c #\\m)\n           (char=? c #\\n) (char=? c #\\p) (char=?\
    \ c #\\q) (char=? c #\\r) (char=? c #\\s)\n           (char=? c #\\t) (char=?\
    \ c #\\v) (char=? c #\\w) (char=? c #\\x) (char=? c #\\y)\n           (char=?\
    \ c #\\z)))\n     (define (count-consonants word)\n       (cond\n         [(empty?\
    \ word) 0]\n         [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \         [else (count-consonants (rest word))]))\n     (define (select-words-helper\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(count-consonants\
    \ (first s)) = n (cons (first s) (select-words-helper (rest s) n))]\n        \
    \ [else (select-words-helper (rest s) n)]))\n     (select-words-helper (string-split\
    \ s #\\space) n)]))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n      [else\
    \ (count-consonants (rest word))]))\n  (define (select-words-helper words n)\n\
    \    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants (first\
    \ words)))\n       (cons (first words) (select-words-helper (rest words) n))]\n\
    \      [else (select-words-helper (rest words) n)]))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (cond\n    [(string=? s \"\") '()]\n    [else\n     (let ([word\
    \ (regexp-match #rx\"^[a-zA-Z]+\" s)])\n       (if (= n (count-consonants word))\n\
    \           (cons word (select_words (substring s (string-length word)) n))\n\
    \           (select_words (substring s (string-length word)) n)))]))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\\
    e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s #\\space) n))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [else\n     (let* ([word (first (regexp-match\
    \ #rx\"^[a-zA-Z]+\" s))]\n            [rest (regexp-match #rx\"[a-zA-Z]+\" (substring\
    \ s (string-length word) (string-length s))))])\n       (if (= n (count-consonants\
    \ word))\n           (cons word (select_words (string-join rest) n))\n       \
    \    (select_words (string-join rest) n)))]))\n", "  (define (is_consonant? c)\n\
    \    (and (not (char-alphabetic? c))\n         (not (char=? c #\\a))\n       \
    \  (not (char=? c #\\e))\n         (not (char=? c #\\i))\n         (not (char=?\
    \ c #\\o))\n         (not (char=? c #\\u))))\n  (define (count_consonants word)\n\
    \    (let loop ((i 0) (count 0))\n      (if (= i (string-length word))\n     \
    \     count\n          (loop (+ i 1) (if (is_consonant? (string-ref word i))\n\
    \                            (+ count 1)\n                            count)))))\n\
    \  (define (select_words_helper words n)\n    (cond ((null? words) '())\n    \
    \      ((= n (count_consonants (car words)))\n           (cons (car words) (select_words_helper\
    \ (cdr words) n)))\n          (else (select_words_helper (cdr words) n))))\n \
    \ (select_words_helper (string-split s) n))\n", "  (define (consonant? c)\n  \
    \  (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words (rest s) n))]\n      [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n\
    \      [else (count_consonants (rest word))]))\n  (define (select_words_iter s\
    \ n result)\n    (cond\n      [(empty? s) result]\n      [(equal? n (count_consonants\
    \ (first s))) (select_words_iter (rest s) n (append result (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n result)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n</code>\n", "  (cond [(empty? s) empty]\n        [else (cond\
    \ [(= n (count-consonants (first (string-split s #\\space))))\n              \
    \       (cons (first (string-split s #\\space)) (select_words (rest (string-split\
    \ s #\\space)) n))]\n                    [else (select_words (rest (string-split\
    \ s #\\space)) n)])]))\n", "  (define (is_consonant c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (string-empty? word)\n        0\n        (+ (if (is_consonant\
    \ (string-ref word 0)) 1 0)\n           (count_consonants (substring word 1)))))\n\
    \  (define (select_words_helper s n)\n    (if (string-empty? s)\n        '()\n\
    \        (let ([word (string-trim s)])\n          (if (= n (count_consonants word))\n\
    \              (cons word (select_words_helper (substring s (string-length word))\
    \ n))\n              (select_words_helper (substring s (string-length word)) n)))))\n\
    \  (select_words_helper s n))\n", "  (define (is_consonant c)\n    (or (equal?\
    \ c #\\b)\n        (equal? c #\\c)\n        (equal? c #\\d)\n        (equal? c\
    \ #\\f)\n        (equal? c #\\g)\n        (equal? c #\\h)\n        (equal? c #\\\
    j)\n        (equal? c #\\k)\n        (equal? c #\\l)\n        (equal? c #\\m)\n\
    \        (equal? c #\\n)\n        (equal? c #\\p)\n        (equal? c #\\q)\n \
    \       (equal? c #\\r)\n        (equal? c #\\s)\n        (equal? c #\\t)\n  \
    \      (equal? c #\\v)\n        (equal? c #\\w)\n        (equal? c #\\x)\n   \
    \     (equal? c #\\y)\n        (equal? c #\\z)))\n  (define (count_consonants\
    \ word)\n    (cond ((empty? word) 0)\n          ((is_consonant (first word)) (+\
    \ 1 (count_consonants (rest word))))\n          (else (count_consonants (rest\
    \ word)))))\n  (define (select_words_helper s n)\n    (cond ((empty? s) empty)\n\
    \          ((equal? n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n)))\n          (else (select_words_helper (rest s) n))))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (define (is_vowel c)\n    (or (equal? c #\\a)\n\
    \        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n \
    \       (equal? c #\\u)))\n  (define (count_consonants s)\n    (cond ((empty?\
    \ s) 0)\n          ((is_vowel (first s)) (count_consonants (rest s)))\n      \
    \    (else (+ 1 (count_consonants (rest s))))))\n  (define (select_words_iter\
    \ s n acc)\n    (cond ((empty? s) (reverse acc))\n          ((equal? n (count_consonants\
    \ (first s))) (select_words_iter (rest s) n (cons (first s) acc)))\n         \
    \ (else (select_words_iter (rest s) n acc))))\n  (select_words_iter (string-split\
    \ s) n '()))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\\
    f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)))\n  (define (count-consonants s)\n    (cond ((null? s) 0)\n         \
    \ ((consonant? (car s)) (+ 1 (count-consonants (cdr s))))\n          (else (count-consonants\
    \ (cdr s)))))\n  (define (select-words-helper s n acc)\n    (cond ((null? s) acc)\n\
    \          ((= n (count-consonants (car s))) (select-words-helper (cdr s) n (cons\
    \ (car s) acc)))\n          (else (select-words-helper (cdr s) n acc))))\n  (select-words-helper\
    \ (string-split s) n '()))\n", "  (define (is_consonant? c)\n    (cond\n     \
    \ [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n\
    \      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n \
    \ (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant?\
    \ (first word)) (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants\
    \ (rest word))]))\n  (define (select_words_iter word words)\n    (cond\n     \
    \ [(empty? words) (list word)]\n      [(= n (count_consonants (first words)))\
    \ (cons word (select_words_iter word (rest words)))]\n      [else (select_words_iter\
    \ word (rest words))]))\n  (define (select_words_iter_words words)\n    (cond\n\
    \      [(empty? words) (list)]\n      [(= n (count_consonants (first words)))\
    \ (select_words_iter (first words) (rest words))]\n      [else (select_words_iter_words\
    \ (rest words))]))\n  (select_words_iter_words (string-split s)))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(or (= c #\\a) (= c #\\e) (= c #\\i) (=\
    \ c #\\o) (= c #\\u)) #f]\n      [else #t]))\n  (define (count_consonants s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count_consonants (first\
    \ s)))\n       (select_words_iter (rest s) n (append acc (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (count-consonants\
    \ (rest s))]\n      [else (+ 1 (count-consonants (rest s)))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is_consonant? c)\n    (cond\n      [(member c '(#\\a #\\\
    e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count_consonants s)\n  \
    \  (cond\n      [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n    \
    \  [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants w)\n    (cond\n      [(empty?\
    \ w) 0]\n      [(is_consonant? (first w)) (+ 1 (count_consonants (rest w)))]\n\
    \      [else (count_consonants (rest w))]))\n  (define (select_words_iter s n\
    \ acc)\n    (cond\n      [(empty? s) acc]\n      [(count_consonants (first s))\
    \ (= n (count_consonants (first s)))]\n      [else (select_words_iter (rest s)\
    \ n (cons (first s) acc))]))\n  (select_words_iter (string-split s) n '()))\n",
  "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n      [(char=?\
    \ c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\o) #f]\n      [(char=?\
    \ c #\\u) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count_consonants\
    \ (first words)))\n       (cons (first words) (select_words_iter (rest words)\
    \ n))]\n      [else (select_words_iter (rest words) n)]))\n  (select_words_iter\
    \ (string-split s #\\space) n))\n", "  (define (is_consonant? c)\n    (cond\n\
    \      [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\\
    i) #f]\n      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count_consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant?\
    \ (first s)) (+ 1 (count_consonants (rest s)))]\n      [else (count_consonants\
    \ (rest s))]))\n  (define (select_words-iter s n acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(count_consonants (first s)) (+ 1 (count_consonants (rest s)))]\n\
    \      [else (select_words-iter (rest s) n acc)]))\n  (select_words-iter (string-split\
    \ s) n '()))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\\
    a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is_consonant? (first\
    \ word)) 1 0)\n           (count_consonants (rest word)))))\n  (define (select_words-iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(empty? (rest s)) acc]\n\
    \      [else\n       (let* ([word (string-&gt;symbol (string-trim (string-trim-both\
    \ (first s) #\\space) #\\space))]\n              [word-consonants (count_consonants\
    \ word)])\n         (if (= word-consonants n)\n             (select_words-iter\
    \ (rest s) n (cons word acc))\n             (select_words-iter (rest s) n acc)))]))\n\
    \  (reverse (select_words-iter (string-split s #\\space) n '())))\n</code>\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (let*\n         ([word (first\
    \ (regexp-match #rx\"^[a-zA-Z]+\" s))]\n          [rest (regexp-match #rx\"\\\
    s*[a-zA-Z]+\" s)]\n          [rest (if (empty? rest) empty (second rest))])\n\
    \       (if (= n (count-consonants word))\n           (cons word (select_words\
    \ rest n))\n           (select_words rest n)))]))\n", "  (define (count-consonants\
    \ w)\n    (define (is-consonant? c)\n      (not (member c '(#\\a #\\e #\\i #\\\
    o #\\u))))\n    (length (filter is-consonant? (string->list w))))\n  (define (is-n-consonants?\
    \ w)\n    (= n (count-consonants w)))\n  (filter is-n-consonants? (string-split\
    \ s #\\space)))\n", "  (define (is-consonant? c)\n    (cond\n      [(member c\
    \ '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (if (empty? word)\n        0\n       \
    \ (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants (rest\
    \ word)))))\n  (define (select-words-helper s n acc)\n    (if (empty? s)\n   \
    \     acc\n        (let ([word (first s)])\n          (if (= n (count-consonants\
    \ word))\n              (select-words-helper (rest s) n (append acc (list word)))\n\
    \              (select-words-helper (rest s) n acc)))))\n  (select-words-helper\
    \ (string-split s) n '()))\n", "  (define (count-consonants s)\n    (define (is-consonant?\
    \ c)\n      (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\n\
    \                  #\n                  n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\\
    x #\\y #\\z)))\n    (define (count-consonants-helper s n)\n      (cond ((string-empty?\
    \ s) n)\n            ((is-consonant? (string-ref s 0))\n             (count-consonants-helper\
    \ (substring s 1) (+ n 1)))\n            (else (count-consonants-helper (substring\
    \ s 1) n))))\n    (count-consonants-helper s 0))\n  (define (select-words-helper\
    \ s n l)\n    (cond ((string-empty? s) l)\n          ((= n (count-consonants (string-take-while\
    \ (lambda (c) (not (char=? c #\\space))) s)))\n           (select-words-helper\
    \ (string-drop-while (lambda (c) (not (char=? c #\\space))) s) n (cons (string-take-while\
    \ (lambda (c) (not (char=? c #\\space))) s) l)))\n          (else (select-words-helper\
    \ (string-drop-while (lambda (c) (not (char=? c #\\space))) s) n l))))\n  (select-words-helper\
    \ s n '()))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\\
    a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is_consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ ws)\n    (cond\n      [(empty? ws) empty]\n      [(= n (count-consonants (first\
    \ ws))) (cons (first ws) (select-words-helper (rest ws)))]\n      [else (select-words-helper\
    \ (rest ws))]))\n  (select-words-helper (string-split s)))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (if (empty? word)\n\
    \          count\n          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first s)))\n       \
    \   (if (= n (count-consonants word))\n              (select-words-iter (rest\
    \ s) n (append result (list word)))\n              (select-words-iter (rest s)\
    \ n result)))))\n  (select-words-iter (string-split s) n '()))\n", "  (define\
    \ (is-consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n\
    \  (define (count-consonants word)\n    (if (string-empty? word)\n        0\n\
    \        (+ (if (is-consonant? (string-ref word 0)) 1 0)\n           (count-consonants\
    \ (substring word 1)))))\n  (define (select-words-helper s n result)\n    (if\
    \ (string-empty? s)\n        result\n        (let ((word (string-trim s)))\n \
    \         (if (= n (count-consonants word))\n              (select-words-helper\
    \ (substring s (string-length word)) n (cons word result))\n              (select-words-helper\
    \ (substring s (string-length word)) n result)))))\n  (select-words-helper s n\
    \ '()))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (if (= n (count-consonants\
    \ (first (string-split s #\\space))))\n         (cons (first (string-split s #\\\
    space)) (select_words (rest (string-split s #\\space)) n))\n         (select_words\
    \ (rest (string-split s #\\space)) n))]))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [else\n     (define (consonant? c)\n       (member c '(#\\b #\\c #\\d #\\\
    f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\\
    y #\\z)))\n     (define (count-consonants w)\n       (if (empty? w)\n        \
    \   0\n           (+ (if (consonant? (first w)) 1 0)\n              (count-consonants\
    \ (rest w)))))\n     (define (select-words-helper s n)\n       (cond\n       \
    \  [(empty? s) empty]\n         [(= n (count-consonants (first s)))\n        \
    \  (cons (first s) (select-words-helper (rest s) n))]\n         [else (select-words-helper\
    \ (rest s) n)]))\n     (select-words-helper (string-split s) n)]))\n", "  (define\
    \ (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count_consonants\
    \ w)\n    (define (count_consonants-iter w i)\n      (if (= i (string-length w))\n\
    \          0\n          (if (is_vowel (string-ref w i))\n              (count_consonants-iter\
    \ w (+ i 1))\n              (+ 1 (count_consonants-iter w (+ i 1))))))\n    (count_consonants-iter\
    \ w 0))\n  (define (select_words-iter s n i)\n    (if (= i (string-length s))\n\
    \        '()\n        (let ((w (string-trim (string-take s i (string-index-right\
    \ s #\\space i)))))\n          (if (= n (count_consonants w))\n              (cons\
    \ w (select_words-iter s n (+ i (string-length w))))\n              (select_words-iter\
    \ s n (+ i (string-length w)))))))\n  (select_words-iter s n 0))\n", "  (define\
    \ (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\n             (char-ci=?\
    \ c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=? c #\\o)\n\
    \             (char-ci=? c #\\u))))\n  (define (count-consonants s)\n    (if (empty?\
    \ s)\n        0\n        (+ (if (is-consonant? (first s)) 1 0)\n           (count-consonants\
    \ (rest s)))))\n  (define (select-words s n)\n    (if (empty? s)\n        empty\n\
    \        (if (= n (count-consonants (first s)))\n            (cons (first s) (select-words\
    \ (rest s) n))\n            (select-words (rest s) n))))\n  (select-words (string-split\
    \ s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n\
    \      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\\
    o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (if (string=? s \"\")\n      '()\n      (let* ([words\
    \ (string-split s)]\n             [consonants (lambda (word)\n               \
    \            (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n               \
    \              (for/fold ([count 0]) ([c (in-string word)])\n                \
    \               (if (member c vowels)\n                                   count\n\
    \                                   (+ count 1)))))]\n             [selected-words\
    \ (filter (lambda (word) (= (consonants word) n)) words)])\n        selected-words)))\n",
  "  (if (string=? s \"\")\n      (list)\n      (let* ([words (string-split s)]\n\
    \             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n     \
    \        [consonant-count (lambda (word)\n                                (for/fold\
    \ ([count 0]) ([letter (in-string word)])\n                                  (if\
    \ (member letter consonants)\n                                      (+ count 1)\n\
    \                                      count)))])\n        (for/list ([word (in-list\
    \ words)]\n                   #:when (= n (consonant-count word)))\n         \
    \ word))))\n</code>\n", "  (define (is_consonant c)\n    (and (not (char-vowel?\
    \ c))\n         (not (char=? c #\\y))))\n  (define (count_consonants s)\n    (cond\
    \ ((string=? s \"\") 0)\n          ((is_consonant (string-ref s 0))\n        \
    \   (+ 1 (count_consonants (substring s 1))))\n          (else (count_consonants\
    \ (substring s 1)))))\n  (define (select_words_helper s n acc)\n    (cond ((string=?\
    \ s \"\") (reverse acc))\n          ((= n (count_consonants s))\n           (select_words_helper\
    \ (substring s (string-length s))\n                                n\n       \
    \                         (cons s acc)))\n          (else (select_words_helper\
    \ (substring s (string-length s))\n                                     n\n  \
    \                                   acc))))\n  (select_words_helper s n '()))\n",
  "  (define (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s)))\n       (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (cond\n       \
    \ [(empty? word) count]\n        [(is-consonant? (first word)) (count-consonants-iter\
    \ (rest word) (+ count 1))]\n        [else (count-consonants-iter (rest word)\
    \ count)]))\n    (count-consonants-iter word 0))\n  (define (select-words-iter\
    \ s n words)\n    (cond\n      [(empty? s) words]\n      [(= n (count-consonants\
    \ (first s))) (select-words-iter (rest s) n (append words (list (first s))))]\n\
    \      [else (select-words-iter (rest s) n words)]))\n  (select-words-iter (string-split\
    \ s) n (list)))\n", "  (define (is_consonant c)\n    (cond\n      [(char=? c #\\\
    a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n result)\n    (cond\n      [(empty? s) result]\n\
    \      [(count_consonants (first s)) (= n (count_consonants (first s)))]\n   \
    \   [else (select_words_iter (rest s) n (append result (list (first s))))]))\n\
    \  (select_words_iter (string-split s) n (list)))\n", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(or (= c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\\
    u)) #f]\n      [else #t]))\n  (define (count_consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants (rest s)))]\n\
    \      [else (count_consonants (rest s))]))\n  (define (select_words-helper s\
    \ n lst)\n    (cond\n      [(empty? s) lst]\n      [(= n (count_consonants (first\
    \ s))) (select_words-helper (rest s) n (append lst (list (first s))))]\n     \
    \ [else (select_words-helper (rest s) n lst)]))\n  (select_words-helper (string-split\
    \ s) n (list)))\n", "  (if (string=? s \"\")\n      '()\n      (let ((words (string-split\
    \ s \" \")))\n        (filter (lambda (word) (= n (count-consonants word))) words))))\n",
  "  (cond\n    [(empty? s) empty]\n    [else\n     (define (consonant? c)\n     \
    \  (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n     (define (count-consonants w)\n\
    \       (cond\n         [(empty? w) 0]\n         [else\n          (+ (if (consonant?\
    \ (first w)) 1 0) (count-consonants (rest w)))]))\n     (define (select-words\
    \ s n)\n       (cond\n         [(empty? s) empty]\n         [(= n (count-consonants\
    \ (first s)))\n          (cons (first s) (select-words (rest s) n))]\n       \
    \  [else (select-words (rest s) n)]))\n     (select-words (string-split s) n)]))\n",
  "  (define (is_consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\\
    j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n \
    \ (define (count_consonants s)\n    (cond [(empty? s) 0]\n          [(is_consonant?\
    \ (first s)) (+ 1 (count_consonants (rest s)))]\n          [else (count_consonants\
    \ (rest s))]))\n  (define (select_words_helper s n acc)\n    (cond [(empty? s)\
    \ (reverse acc)]\n          [(= n (count_consonants (first s))) (select_words_helper\
    \ (rest s) n (cons (first s) acc))]\n          [else (select_words_helper (rest\
    \ s) n acc)]))\n  (select_words_helper (string-split s) n '()))\n", "  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (count-consonants\
    \ s)\n    (cond ((string=? s \"\") 0)\n          ((is_vowel? (string-ref s 0))\
    \ (count-consonants (substring s 1)))\n          (else (+ 1 (count-consonants\
    \ (substring s 1))))))\n  (define (select-words-helper s n acc)\n    (cond ((string=?\
    \ s \"\") acc)\n          ((= n (count-consonants s))\n           (select-words-helper\
    \ (substring s (string-length s)) n (cons s acc)))\n          (else (select-words-helper\
    \ (substring s (string-length s)) n acc))))\n  (select-words-helper s n '()))\n",
  "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants word)\n    (if (empty? word)\n        0\n       \
    \ (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants (rest\
    \ word)))))\n  (define (select-words-iter s n acc)\n    (if (empty? s)\n     \
    \   acc\n        (let ((word (first s)))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-iter (rest s) n (cons word acc))\n     \
    \         (select-words-iter (rest s) n acc)))))\n  (reverse (select-words-iter\
    \ (string-split s) n '())))\n", "  (define (is_consonant? c)\n    (cond\n    \
    \  [(char=? c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n\
    \      [(char=? c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n \
    \ (define (count_consonants w)\n    (if (empty? w)\n        0\n        (+ (if\
    \ (is_consonant? (first w)) 1 0)\n           (count_consonants (rest w)))))\n\
    \  (define (select_words_iter s n lst)\n    (if (empty? s)\n        lst\n    \
    \    (let ((w (first s)))\n          (if (= n (count_consonants w))\n        \
    \      (select_words_iter (rest s) n (cons w lst))\n              (select_words_iter\
    \ (rest s) n lst)))))\n  (select_words_iter (string-split s) n '()))\n", "  (define\
    \ (consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace? c))))\n\
    \  (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (if (empty? word)\n          count\n          (if (consonant? (first word))\n\
    \              (count-consonants-iter (rest word) (+ count 1))\n             \
    \ (count-consonants-iter (rest word) count))))\n    (count-consonants-iter word\
    \ 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n        result\n\
    \        (let ((word (first (string-split s))))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-iter (string-join (rest (string-split s)))\
    \ n (append result (list word)))\n              (select-words-iter (string-join\
    \ (rest (string-split s))) n result)))))\n  (select-words-iter s n (list)))\n",
  "  (define (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=?\
    \ c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n\
    \      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (if (empty? w)\n        0\n        (+ (if (is-consonant? (first w))\
    \ 1 0)\n           (count-consonants (rest w)))))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is_consonant? c)\n    (cond ((or (char=? c #\\a) (char=?\
    \ c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f)\n          (else\
    \ #t)))\n  (define (count_consonants s)\n    (cond ((string-empty? s) 0)\n   \
    \       ((is_consonant? (string-ref s 0)) (+ 1 (count_consonants (string-tail\
    \ s))))\n          (else (count_consonants (string-tail s)))))\n  (define (select_words_iter\
    \ s n result)\n    (cond ((string-empty? s) result)\n          ((= n (count_consonants\
    \ (string-take s (string-index s #\\space))))\n           (select_words_iter (string-drop\
    \ s (string-index s #\\space)) n (cons (string-take s (string-index s #\\space))\
    \ result)))\n          (else (select_words_iter (string-drop s (string-index s\
    \ #\\space)) n result))))\n  (select_words_iter s n '()))\n", "  (define (is_consonant\
    \ c)\n    (cond [(char-ci=? c #\\a) #f]\n          [(char-ci=? c #\\e) #f]\n \
    \         [(char-ci=? c #\\i) #f]\n          [(char-ci=? c #\\o) #f]\n       \
    \   [(char-ci=? c #\\u) #f]\n          [else #t]))\n  (define (count_consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is_consonant (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n          [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(= n (count_consonants (first\
    \ s))) (select_words_iter (rest s) n (append acc (list (first s))))]\n       \
    \   [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n (list)))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c\
    \ #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(= n (count_consonants (first s))) (select_words_iter (rest s) n (append\
    \ acc (list (first s))))]\n      [else (select_words_iter (rest s) n acc)]))\n\
    \  (select_words_iter (string-split s) n (list)))", "  (define (is_consonant?\
    \ c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else\
    \ #t]))\n  (define (count_consonants s)\n    (cond\n      [(empty? s) 0]\n   \
    \   [(is_consonant? (first s)) (+ 1 (count_consonants (rest s)))]\n      [else\
    \ (count_consonants (rest s))]))\n  (define (select_words-iter s n acc)\n    (cond\n\
    \      [(empty? s) acc]\n      [(= n (count_consonants (first s)))\n       (select_words-iter\
    \ (rest s) n (append acc (list (first s))))]\n      [else (select_words-iter (rest\
    \ s) n acc)]))\n  (select_words-iter (string-split s) n '()))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([w (string-split s #\\space)])\n        (filter\
    \ (lambda (x) (= n (count-consonants x))) w))))\n", "  (if (string=? s \"\")\n\
    \      (list)\n      (let* ([words (string-split s)]\n             [consonants\
    \ (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r\
    \ #\\s #\\t #\\v #\\w #\\x #\\y #\\z)]\n             [consonant-count (lambda\
    \ (word)\n                                (let loop ([word word] [count 0])\n\
    \                                  (if (string-empty? word)\n                \
    \                      count\n                                      (if (member\
    \ (string-ref word 0) consonants)\n                                          (loop\
    \ (substring word 1) (+ count 1))\n                                          (loop\
    \ (substring word 1) count)))))]\n             [selected-words (filter (lambda\
    \ (word) (= (consonant-count word) n)) words)])\n        selected-words)))\n",
  "  (define (is_consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o\
    \ #\\u)) #f]\n      [else #t]))\n  (define (count_consonants s)\n    (cond\n \
    \     [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count_consonants (first\
    \ s)))\n       (select_words_iter (rest s) n (append acc (list (first s))))]\n\
    \      [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n '()))\n", "  (cond\n    [(empty? s) empty]\n    [else (cons (first s) (select_words\
    \ (rest s) n))]))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))\n  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(is_vowel? (first s)) (count-consonants (rest s))]\n      [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words-iter s n result)\n    (cond\n      [(empty?\
    \ s) result]\n      [(equal? n (count-consonants (first s)))\n       (select-words-iter\
    \ (rest s) n (append result (list (first s))))]\n      [else (select-words-iter\
    \ (rest s) n result)]))\n  (select-words-iter (string-split s) n '()))\n", " \
    \ (define (is_consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants w)\n    (define (count-consonants-iter w i)\n   \
    \   (if (= i (string-length w))\n          0\n          (+ (if (is_consonant?\
    \ (string-ref w i)) 1 0)\n             (count-consonants-iter w (+ i 1)))))\n\
    \    (count-consonants-iter w 0))\n  (define (select-words-iter s i)\n    (if\
    \ (= i (string-length s))\n        '()\n        (let ((w (string-trim (substring\
    \ s i (string-index-right s #\\space i)))))\n          (if (= n (count-consonants\
    \ w))\n              (cons w (select-words-iter s (+ i (string-length w))))\n\
    \              (select-words-iter s (+ i (string-length w)))))))\n  (select-words-iter\
    \ s 0))\n", "  (define (is_consonant? c)\n    (cond\n      [(char=? c #\\a) #f]\n\
    \      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=? c #\\\
    o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is_consonant? (first\
    \ word)) 1 0)\n           (count_consonants (rest word)))))\n  (define (select_words-iter\
    \ words n)\n    (if (empty? words)\n        '()\n        (if (= n (count_consonants\
    \ (first words)))\n            (cons (first words) (select_words-iter (rest words)\
    \ n))\n            (select_words-iter (rest words) n))))\n  (select_words-iter\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count-consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n      [else\
    \ (count-consonants (rest word))]))\n  (define (select-words-helper words n)\n\
    \    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants (first\
    \ words)))\n       (cons (first words) (select-words-helper (rest words) n))]\n\
    \      [else (select-words-helper (rest words) n)]))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (consonant? c)\n    (or (equal? c #\\b)\n        (equal?\
    \ c #\\c)\n        (equal? c #\\d)\n        (equal? c #\\f)\n        (equal? c\
    \ #\\g)\n        (equal? c #\\h)\n        (equal? c #\\j)\n        (equal? c #\\\
    k)\n        (equal? c #\\l)\n        (equal? c #\\m)\n        (equal? c #\\n)\n\
    \        (equal? c #\\p)\n        (equal? c #\\q)\n        (equal? c #\\r)\n \
    \       (equal? c #\\s)\n        (equal? c #\\t)\n        (equal? c #\\v)\n  \
    \      (equal? c #\\w)\n        (equal? c #\\x)\n        (equal? c #\\y)\n   \
    \     (equal? c #\\z)))\n  (define (count-consonants w)\n    (define (count-consonants-iter\
    \ w count)\n      (if (empty? w)\n          count\n          (if (consonant? (first\
    \ w))\n              (count-consonants-iter (rest w) (+ count 1))\n          \
    \    (count-consonants-iter (rest w) count))))\n    (count-consonants-iter w 0))\n\
    \  (define (select-words-iter s n result)\n    (if (empty? s)\n        result\n\
    \        (let ((w (first s)))\n          (if (= n (count-consonants w))\n    \
    \          (select-words-iter (rest s) n (append result (list w)))\n         \
    \     (select-words-iter (rest s) n result)))))\n  (select-words-iter (string-split\
    \ s) n (list)))\n", "  (cond\n    [(empty? s) empty]\n    [else\n     (define\
    \ (is-consonant? c)\n       (and (char-alphabetic? c) (not (char-vowel? c))))\n\
    \     (define (count-consonants s)\n       (cond\n         [(empty? s) 0]\n  \
    \       [else\n          (+ (if (is-consonant? (first s)) 1 0)\n             (count-consonants\
    \ (rest s)))]))\n     (define (select-words s n)\n       (cond\n         [(empty?\
    \ s) empty]\n         [else\n          (define (select-words-helper s n acc)\n\
    \            (cond\n              [(empty? s) acc]\n              [else\n    \
    \           (define (is-word? s)\n                 (and (not (empty? s))\n   \
    \                   (not (char-whitespace? (first s)))))\n               (define\
    \ (get-word s)\n                 (cond\n                   [(empty? s) empty]\n\
    \                   [else\n                    (cons (first s)\n             \
    \             (get-word (rest s)))]))\n               (define (skip-word s)\n\
    \                 (cond\n                   [(empty? s) empty]\n             \
    \      [(char-whitespace? (first s)) (rest s)]\n                   [else (skip-word\
    \ (rest s))]))\n               (define (skip-whitespace s)\n                 (cond\n\
    \                   [(empty? s) empty]\n                   [(char-whitespace?\
    \ (first s)) (skip-whitespace (rest s))]\n                   [else s]))\n    \
    \           (cond\n                 [(empty? s) acc]\n                 [(is-word?\
    \ s)\n                  (select-words-helper (skip-word s)\n                 \
    \                      n\n                                       (cons (get-word\
    \ s) acc))]\n                 [else\n                  (select-words-helper (skip-whitespace\
    \ s)\n                                       n\n                             \
    \          acc)])])\n            (select-words-helper s n empty))\n          (select-words-helper\
    \ s n empty)]))\n     (define (filter-words words n)\n       (cond\n         [(empty?\
    \ words) empty]\n         [", "  (define (is_consonant? c)\n    (cond\n      [(char=?\
    \ c #\\a) #f]\n      [(char=? c #\\e) #f]\n      [(char=? c #\\i) #f]\n      [(char=?\
    \ c #\\o) #f]\n      [(char=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n words)\n    (cond\n      [(empty? s) words]\n\
    \      [(char=? (first s) #\\ ) (select_words_helper (rest s) n words)]\n    \
    \  [else (select_words_helper (rest s) n (cons (first s) words))]))\n  (define\
    \ (select_words_helper2 words n result)\n    (cond\n      [(empty? words) result]\n\
    \      [(char=? (first words) #\\ ) (select_words_helper2 (rest words) n result)]\n\
    \      [(= n (count_consonants words)) (select_words_helper2 (rest words) n (cons\
    \ words result))]\n      [else (select_words_helper2 (rest words) n result)]))\n\
    \  (select_words_helper2 (select_words_helper s n '()) n '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
