name: HumanEval_54_same_chars
language: rkt
prompt: "#lang racket\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
  \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\"\
  )\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
  \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
  )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f\n(define\
  \ (same_chars s0 s1)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate same_chars))\n\
  \    (check-equal? (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") #t)\n    (check-equal?\
  \ (candidate \"abcd\" \"dddddddabc\") #t)\n    (check-equal? (candidate \"dddddddabc\"\
  \ \"abcd\") #t)\n    (check-equal? (candidate \"eabcd\" \"dddddddabc\") #f)\n  \
  \  (check-equal? (candidate \"abcd\" \"dddddddabcf\") #f)\n    (check-equal? (candidate\
  \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\") #f)\n    (check-equal? (candidate \"aabb\"\
  \ \"aaccc\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (count-chars s)\n    (for/fold ([counts (make-hash)])\n \
    \             ([c (in-string s)])\n      (hash-update counts c add1 0)))\n  (define\
    \ (count-chars-equal? c0 c1)\n    (for/and ([c (in-hash c0)])\n      (= (hash-ref\
    \ c0 c) (hash-ref c1 c))))\n  (count-chars-equal? (count-chars s0) (count-chars\
    \ s1)))\n", "  (define (same-chars-iter s0 s1)\n    (cond\n      [(empty? s0)\
    \ #t]\n      [(empty? s1) #f]\n      [(char=? (first s0) (first s1)) (same-chars-iter\
    \ (rest s0) (rest s1))]\n      [else (same-chars-iter s0 (rest s1))]))\n  (same-chars-iter\
    \ s0 s1))\n", "  (define (same-chars-helper s0 s1)\n    (cond\n      [(empty?\
    \ s0) #t]\n      [(empty? s1) #f]\n      [(char=? (first s0) (first s1)) (same-chars-helper\
    \ (rest s0) (rest s1))]\n      [else (same-chars-helper (rest s0) s1)]))\n  (same-chars-helper\
    \ (string->list s0) (string->list s1)))\n", "  (define (count-chars s)\n    (let\
    \ loop ([s s] [counts (make-hash)])\n      (cond [(empty? s) counts]\n       \
    \     [else (let ([c (first s)])\n                    (hash-update counts c add1\
    \ 0)\n                    (loop (rest s) counts))])))\n  (define (same-counts?\
    \ s0 s1)\n    (let loop ([s0 s0] [s1 s1])\n      (cond [(and (empty? s0) (empty?\
    \ s1)) #t]\n            [(or (empty? s0) (empty? s1)) #f]\n            [else (let\
    \ ([c0 (first s0)]\n                       [c1 (first s1)])\n                \
    \    (and (= c0 c1)\n                         (loop (rest s0) (rest s1))))])))\n\
    \  (same-counts? (count-chars s0) (count-chars s1)))\n", "  (define (same-chars-helper\
    \ s0 s1)\n    (cond ((null? s0) #t)\n          ((null? s1) #f)\n          ((equal?\
    \ (car s0) (car s1)) (same-chars-helper (cdr s0) (cdr s1)))\n          (else (same-chars-helper\
    \ (cdr s0) s1))))\n  (same-chars-helper (string->list s0) (string->list s1)))\n",
  "  (and (every (lambda (c) (string-contains? s0 c)) s1)\n       (every (lambda (c)\
    \ (string-contains? s1 c)) s0)))\n", "  (define (same-chars-helper s0 s1)\n  \
    \  (cond\n      [(empty? s0) #t]\n      [(empty? s1) #f]\n      [(char=? (first\
    \ s0) (first s1)) (same-chars-helper (rest s0) (rest s1))]\n      [else (same-chars-helper\
    \ (rest s0) s1)]))\n  (same-chars-helper (string->list s0) (string->list s1)))\n",
  "  (cond\n    [(empty? s0) (empty? s1)]\n    [(empty? s1) #f]\n    [else\n     (and\
    \ (member (first s0) s1)\n          (same_chars (rest s0) (remove (first s0) s1)))]))\n",
  "  (define (same_chars_iter s0 s1)\n    (cond\n      [(empty? s0) #t]\n      [(empty?\
    \ s1) #f]\n      [(char=? (first s0) (first s1)) (same_chars_iter (rest s0) (rest\
    \ s1))]\n      [else (same_chars_iter s0 (rest s1))]))\n  (same_chars_iter s0\
    \ s1))\n", "  (define (count-chars s)\n    (let loop ([s s] [counts (make-hash)])\n\
    \      (cond [(empty? s) counts]\n            [else (let ([c (first s)])\n   \
    \                 (hash-update counts c add1 0)\n                    (loop (rest\
    \ s) counts))])))\n  (let ([counts0 (count-chars s0)]\n        [counts1 (count-chars\
    \ s1)])\n    (andmap (lambda (c) (= (hash-ref counts0 c 0) (hash-ref counts1 c\
    \ 0)))\n            (hash-keys counts0))))\n", "  (define (same_chars_helper s0\
    \ s1)\n    (cond\n      [(empty? s0) #t]\n      [(empty? s1) #f]\n      [(char=?\
    \ (first s0) (first s1)) (same_chars_helper (rest s0) (rest s1))]\n      [else\
    \ (same_chars_helper s0 (rest s1))]))\n  (same_chars_helper (string->list s0)\
    \ (string->list s1)))\n", "  (define (same-chars-helper s0 s1)\n    (cond\n  \
    \    [(empty? s0) #t]\n      [(empty? s1) #f]\n      [(char=? (first s0) (first\
    \ s1)) (same-chars-helper (rest s0) (rest s1))]\n      [else (same-chars-helper\
    \ (rest s0) s1)]))\n  (same-chars-helper (string->list s0) (string->list s1)))\n",
  "  (define (helper s0 s1)\n    (cond\n      [(empty? s0) #t]\n      [(empty? s1)\
    \ #f]\n      [(char=? (first s0) (first s1)) (helper (rest s0) (rest s1))]\n \
    \     [else (helper (rest s0) s1)]))\n  (helper (string->list s0) (string->list\
    \ s1)))\n", "  (define (count-chars s)\n    (let loop ([s s] [counts (make-hash)])\n\
    \      (cond [(empty? s) counts]\n            [else (let ([c (first s)])\n   \
    \                 (hash-update! counts c add1 0)\n                    (loop (rest\
    \ s) counts))])))\n  (let ([c0 (count-chars s0)]\n        [c1 (count-chars s1)])\n\
    \    (andmap (lambda (k) (= (hash-ref c0 k 0) (hash-ref c1 k 0)))\n          \
    \  (hash-keys c0))))\n", "  (andmap (lambda (c) (andmap (lambda (c1) (equal? c\
    \ c1)) s1)) s0))\n", "  (define (same_chars-iter s0 s1)\n    (cond\n      [(empty?\
    \ s0) #t]\n      [(empty? s1) #f]\n      [(char=? (first s0) (first s1)) (same_chars-iter\
    \ (rest s0) (rest s1))]\n      [else (same_chars-iter s0 (rest s1))]))\n  (same_chars-iter\
    \ s0 s1))\n", "  (let ([s0 (string->list s0)]\n        [s1 (string->list s1)])\n\
    \    (and (every (lambda (c) (member c s0)) s1)\n         (every (lambda (c) (member\
    \ c s1)) s0))))\n", "  (define (same-chars-helper s0 s1)\n    (cond\n      [(empty?\
    \ s0) #t]\n      [(empty? s1) #f]\n      [(char=? (first s0) (first s1)) (same-chars-helper\
    \ (rest s0) (rest s1))]\n      [else (same-chars-helper (rest s0) s1)]))\n  (same-chars-helper\
    \ (string->list s0) (string->list s1)))\n", "  (define (same_chars_helper s0 s1)\n\
    \    (cond\n      [(empty? s0) (empty? s1)]\n      [(empty? s1) #f]\n      [else\
    \ (and (member (first s0) s1)\n                 (same_chars_helper (rest s0) (remove\
    \ (first s0) s1)))]))\n  (same_chars_helper (string->list s0) (string->list s1)))\n",
  "  (define (same-chars-helper s0 s1)\n    (cond\n      [(empty? s0) (empty? s1)]\n\
    \      [(empty? s1) #f]\n      [else (and (member (first s0) s1)\n           \
    \      (same-chars-helper (rest s0) (remove (first s0) s1)))]))\n  (same-chars-helper\
    \ (string->list s0) (string->list s1)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
