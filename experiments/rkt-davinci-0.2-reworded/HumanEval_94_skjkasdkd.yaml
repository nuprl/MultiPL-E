name: HumanEval_94_skjkasdkd
language: rkt
prompt: "#lang racket\n\n;; You are given a list of integers.\n;; You need to find\
  \ the largest prime value and return the sum of its digits.\n;; Examples:\n;; >>>\
  \ (skjkasdkd (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3))\n;; 10\n\
  ;; >>> (skjkasdkd (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1))\n;; 25\n;; >>>\
  \ (skjkasdkd (list 1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3))\n;; 13\n\
  ;; >>> (skjkasdkd (list 0 724 32 71 99 32 6 0 5 91 83 0 5 6))\n;; 11\n;; >>> (skjkasdkd\
  \ (list 0 81 12 3 1 21))\n;; 3\n;; >>> (skjkasdkd (list 0 8 1 2 1 7))\n;; 7\n(define\
  \ (skjkasdkd lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate skjkasdkd))\n\
  \    (check-equal? (candidate (list 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324\
  \ 4 3)) 10)\n    (check-equal? (candidate (list 1 0 1 8 2 4597 2 1 3 40 1 2 1 2\
  \ 4 2 5 1)) 25)\n    (check-equal? (candidate (list 1 3 1 32 5107 34 83278 109 163\
  \ 23 2323 32 30 1 9 3)) 13)\n    (check-equal? (candidate (list 0 724 32 71 99 32\
  \ 6 0 5 91 83 0 5 6)) 11)\n    (check-equal? (candidate (list 0 81 12 3 1 21)) 3)\n\
  \    (check-equal? (candidate (list 0 8 1 2 1 7)) 7)\n    (check-equal? (candidate\
  \ (list 8191)) 19)\n    (check-equal? (candidate (list 8191 123456 127 7)) 19)\n\
  \    (check-equal? (candidate (list 127 97 8192)) 10)\n))\n\n(test-humaneval)"
completions: ["  (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+\
    \ (modulo n 10) (sum-digits (quotient n 10)))))\n  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (if (> i (quotient n 2))\n          #t\n          (if\
    \ (zero? (modulo n i))\n              #f\n              (iter (+ i 1)))))\n  \
    \  (iter 2))\n  (define (largest-prime lst)\n    (if (null? lst)\n        0\n\
    \        (if (is-prime? (car lst))\n            (max (car lst) (largest-prime\
    \ (cdr lst)))\n            (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (prime? n)\n    (define (helper i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (helper (-\
    \ i 1)))))\n    (helper (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0)\
    \ 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n \
    \ (define (helper lst)\n    (cond ((null? lst) 0)\n          ((prime? (car lst))\
    \ (max (car lst) (helper (cdr lst))))\n          (else (helper (cdr lst)))))\n\
    \  (sum-digits (helper lst)))\n", "  (define (prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (+ i 1)))))\n    (iter 2))\n  (define (largest-prime lst)\n   \
    \ (cond ((null? lst) 0)\n          ((prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-iter? n i)\n      (cond\n        [(= i 1) #t]\n       \
    \ [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter?\
    \ n (floor (/ n 2))))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n\
    \      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define (largest-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (car lst)]\n\
    \      [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n     \
    \ [(even? n) #f]\n      [else\n       (let loop ([i 3])\n         (cond\n    \
    \       [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (loop (+ i 2))]))]))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n\
    \      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define (max-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(prime? (car lst)) (max (car\
    \ lst) (max-prime (cdr lst)))]\n      [else (max-prime (cdr lst))]))\n  (sum-digits\
    \ (max-prime lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n\
    \          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n          ((and (is-prime\
    \ (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n          (else (iter\
    \ (cdr lst) max))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-list lst)\n\
    \    (cond ((null? lst) '())\n          ((is-prime? (car lst)) (cons (car lst)\
    \ (prime-list (cdr lst))))\n          (else (prime-list (cdr lst)))))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (sum-digits (apply max (prime-list lst))))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper? n i)\n      (cond\n        [(=\
    \ i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper? n\
    \ (- i 1))]))\n    (is-prime-helper? n (- n 1)))\n  (define (sum-digits n)\n \
    \   (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter\
    \ (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n     \
    \ [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else\
    \ (largest-prime (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n      [(<\
    \ n 10) n]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n    (define (prime-helper\
    \ n div)\n      (cond ((= n 1) #f)\n            ((= n 2) #t)\n            ((=\
    \ n div) #t)\n            ((= (modulo n div) 0) #f)\n            (else (prime-helper\
    \ n (+ div 1)))))\n    (prime-helper n 2))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-digits\
    \ n)\n    (define (iter i)\n      (cond ((= i 0) '())\n            ((is-prime?\
    \ i) (cons i (iter (- i 1))))\n            (else (iter (- i 1)))))\n    (iter\
    \ n))\n  (define (sum-digits n)\n    (define (iter i)\n      (cond ((= i 0) 0)\n\
    \            (else (+ (modulo i 10) (iter (/ i 10))))))\n    (iter n))\n  (define\
    \ (sum-primes lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst))\
    \ (+ (car lst) (sum-primes (cdr lst))))\n          (else (sum-primes (cdr lst)))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n d)\n      (cond\n        [(= d 1) #t]\n \
    \       [(= (modulo n d) 0) #f]\n        [else (is-prime-helper n (- d 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (prime-digits n)\n    (cond\n   \
    \   [(= n 0) 0]\n      [else (+ (modulo n 10) (prime-digits (quotient n 10)))]))\n\
    \  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (prime-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (prime-digits\
    \ (quotient n 10)))]))\n  (define (iter lst max)\n    (cond\n      [(empty? lst)\
    \ max]\n      [(and (is-prime? (first lst))\n            (> (prime-digits (first\
    \ lst)) max))\n       (iter (rest lst) (prime-digits (first lst)))]\n      [else\
    \ (iter (rest lst) max)]))\n  (iter lst 0))\n", "  (define (is-prime? n)\n   \
    \ (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0)\
    \ #f]\n      [else\n       (define (iter i)\n         (cond\n           [(> (*\
    \ i i) n) #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+\
    \ i 1))]))\n       (iter 3)]))\n  (define (prime-list lst)\n    (cond\n      [(null?\
    \ lst) '()]\n      [(is-prime? (car lst)) (cons (car lst) (prime-list (cdr lst)))]\n\
    \      [else (prime-list (cdr lst))]))\n  (define (max-prime lst)\n    (cond\n\
    \      [(null? lst) 0]\n      [(null? (cdr lst)) (car lst)]\n      [else\n   \
    \    (define (iter lst max)\n         (cond\n           [(null? lst) max]\n  \
    \         [(> (car lst) max) (iter (cdr lst) (car lst))]\n           [else (iter\
    \ (cdr lst) max)]))\n       (iter (cdr lst) (car lst))]))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (sum-digits (max-prime (prime-list lst))))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (max-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime?\
    \ (car lst)) (max (car lst) (max-prime (cdr lst)))]\n      [else (max-prime (cdr\
    \ lst))]))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n\
    \        [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder\
    \ n 10)))]))\n    (iter n 0))\n  (sum-digits (max-prime lst)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((and\
    \ (is-prime (car lst))\n                (> (car lst) acc))\n           (iter (cdr\
    \ lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n  (sum-digits (iter\
    \ lst 0)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter i)\n  \
    \    (cond ((= i 0) 0)\n            (else (+ (remainder i 10) (iter (quotient\
    \ i 10))))))\n    (iter n))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (find-largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (max (car lst)\
    \ (find-largest-prime (cdr lst))))\n          (else (find-largest-prime (cdr lst)))))\n\
    \  (sum-digits (find-largest-prime lst)))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime (car lst))\n\
    \                (> (car lst) acc))\n           (iter (cdr lst) (car lst)))\n\
    \          (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (/\
    \ n 2)))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n  \
    \    [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n     \
    \ [else (largest-prime (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n  \
    \    [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-helper? n (- i 1)))))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (find-largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (find-largest-prime (cdr lst)))))\n \
    \ (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (sum-digits (find-largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(=\
    \ n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n\
    \      [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n  \
    \         [(= i n) #t]\n           [(= (modulo n i) 0) #f]\n           [else (iter\
    \ (+ i 1))]))\n       (iter 3)]))\n  (define (iter lst)\n    (cond\n      [(null?\
    \ lst) 0]\n      [(is-prime? (car lst)) (car lst)]\n      [else (iter (cdr lst))]))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (sum-digits (iter lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(=\
    \ n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n\
    \      [(and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst))]\n\
    \      [else (iter (cdr lst) acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define\
    \ (prime? n)\n    (define (prime-helper n i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (prime-helper n (- i 1))]))\n\
    \    (prime-helper n (- n 1)))\n  (define (sum-digits n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define (largest-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0)\
    \ #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (car lst)]\n      [else (largest-prime (cdr lst))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper? n d)\n      (cond ((= d 1) #t)\n            ((= (modulo n\
    \ d) 0) #f)\n            (else (is-prime-helper? n (- d 1)))))\n    (is-prime-helper?\
    \ n (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n    \
    \      (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter i)\n      (cond ((= i 0) 0)\n\
    \            (else (+ (remainder i 10) (iter (quotient i 10))))))\n    (iter n))\n\
    \  (define (largest-prime lst)\n    (define (iter lst)\n      (cond ((null? lst)\
    \ 0)\n            ((is-prime (car lst)) (max (car lst) (iter (cdr lst))))\n  \
    \          (else (iter (cdr lst)))))\n    (iter lst))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(= i n) #t]\n           [(= (remainder n i)\
    \ 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (iter lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (max (sum-digits (car lst)) (iter (cdr lst)))]\n\
    \      [else (iter (cdr lst))]))\n  (iter lst))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n\
    \ i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((and (is-prime (car lst))\
    \ (> (car lst) acc)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst)\
    \ acc))))\n  (sum-digits (iter lst 0)))\n", "  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n sum)\n      (cond\n     \
    \   [(= n 0) sum]\n        [else (iter (quotient n 10) (+ sum (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (max-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (max-prime (cdr lst))]\n      [else (max (car lst)\
    \ (max-prime (cdr lst)))]))\n  (sum-digits (max-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (helper i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (helper (- i 1)))))\n    (helper (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else\
    \ (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (helper i)\n      (cond ((= i 1) #t)\n          \
    \  ((= (modulo n i) 0) #f)\n            (else (helper (- i 1)))))\n    (helper\
    \ (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (helper lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (helper\
    \ (cdr lst))))\n          (else (helper (cdr lst)))))\n  (sum-digits (helper lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond ((null? lst) acc)\n            ((is-prime (car lst)) (iter (cdr lst)\
    \ (car lst)))\n            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime? (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (helper i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n\
    \            (else (helper (- i 1)))))\n    (helper (quotient n 2)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter s n)\n      (cond ((= n 0) s)\n            (else (iter\
    \ (+ s (remainder n 10)) (/ n 10)))))\n    (iter 0 n))\n  (define (iter lst max)\n\
    \    (cond ((null? lst) (sum-digits max))\n          ((is-prime? (car lst)) (iter\
    \ (cdr lst) (car lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst\
    \ 0))\n", "  (let ([max-prime (apply max (filter prime? lst))])\n    (apply +\
    \ (map digit-value (string->list (number->string max-prime))))))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(=\
    \ n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n\
    \      [(is-prime? (car lst)) (iter (cdr lst) (sum-digits (car lst)))]\n     \
    \ [else (iter (cdr lst) acc)]))\n  (iter lst 0))\n", "  (define (is-prime n)\n\
    \    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n  \
    \        (else\n           (let loop ((i 3))\n             (cond ((&gt; (* i i)\
    \ n) #t)\n                   ((= (remainder n i) 0) #f)\n                   (else\
    \ (loop (+ i 2))))))))\n  (define (sum-digits n)\n    (cond ((zero? n) 0)\n  \
    \        (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (sum-digits\
    \ (apply max (filter is-prime lst))))\n</code>\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (find-largest-prime lst)\n    (define (iter lst acc)\n      (cond ((null?\
    \ lst) acc)\n            ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (find-largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter\
    \ lst acc)\n      (cond ((null? lst) acc)\n            ((is-prime? (car lst))\
    \ (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n   \
    \ (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (let ([prime (apply max (filter prime?\
    \ lst))])\n    (apply + (map digit->integer (string->list (number->string prime))))))\n",
  "  (let ([primes (filter prime? lst)])\n    (sum-digits (apply max primes))))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n  \
    \      [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n\
    \ 10)))]))\n    (iter n 0))\n  (define (largest-prime lst)\n    (cond\n      [(null?\
    \ lst) 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n\
    \      [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (cond\n \
    \     [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n   \
    \   [else\n       (define (iter i)\n         (cond\n           [(> (* i i) n)\
    \ #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n\
    \       (iter 3)]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n\
    \      [else (largest-prime (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0)\
    \ #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (iter lst max)\n    (cond\n      [(null? lst) (sum-digits\
    \ max)]\n      [(and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst)\
    \ (car lst))]\n      [else (iter (cdr lst) max)]))\n  (iter lst 0))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n          (else\
    \ (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(=\
    \ n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n\
    \      [(is-prime? (car lst)) (iter (cdr lst) (sum-digits (car lst)))]\n     \
    \ [else (iter (cdr lst) acc)]))\n  (iter lst 0))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (if (= n 0)\n        0\n        (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))))\n  (define (iter lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (sum-digits (car lst)))\n        \
    \  (else (iter (cdr lst)))))\n  (iter lst))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (if (= i n) #t\n          (if (= (remainder n i) 0)\
    \ #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-lst lst)\n\
    \    (cond ((null? lst) '())\n          ((is-prime? (car lst)) (cons (car lst)\
    \ (prime-lst (cdr lst))))\n          (else (prime-lst (cdr lst)))))\n  (define\
    \ (max-prime lst)\n    (cond ((null? (cdr lst)) (car lst))\n          ((> (car\
    \ lst) (car (cdr lst))) (max-prime (cons (car lst) (cddr lst))))\n          (else\
    \ (max-prime (cdr lst)))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n\
    \          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (sum-digits\
    \ (max-prime (prime-lst lst))))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n d)\n      (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n      \
    \      (else (is-prime-helper? n (- d 1)))))\n    (is-prime-helper? n (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (quotient n 10))))))\n  (define (iter lst largest)\n    (cond\
    \ ((null? lst) (sum-digits largest))\n          ((is-prime? (car lst)) (iter (cdr\
    \ lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n  (iter lst 0))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter s n)\n      (cond ((= n 0)\
    \ s)\n            (else (iter (+ s (remainder n 10)) (/ n 10)))))\n    (iter 0\
    \ n))\n  (define (largest-prime lst)\n    (define (iter lst max)\n      (cond\
    \ ((null? lst) max)\n            ((and (is-prime (car lst)) (> (car lst) max))\
    \ (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) max))))\n   \
    \ (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else\
    \ (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define\
    \ (largest-prime lst)\n    (define (iter lst acc)\n      (cond\n        [(null?\
    \ lst) acc]\n        [(and (is-prime (car lst)) (> (car lst) acc)) (iter (cdr\
    \ lst) (car lst))]\n        [else (iter (cdr lst) acc)]))\n    (iter lst 0))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (cond ((=\
    \ n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n\
    \           (let loop ((i 3))\n             (cond ((= i n) #t)\n             \
    \      ((= (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else\
    \ (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime?\
    \ (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n          (else (iter (cdr\
    \ lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n  \
    \  (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond\n      [(null? lst) acc]\n      [(is-prime? (car lst)) (iter\
    \ (cdr lst) (sum-digits (car lst)))]\n      [else (iter (cdr lst) acc)]))\n  (iter\
    \ lst 0))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (/ n 2)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n      \
    \    (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (max-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime (car lst))\n           (max (car\
    \ lst) (max-prime (cdr lst))))\n          (else (max-prime (cdr lst)))))\n  (sum-digits\
    \ (max-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n     \
    \ (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter\
    \ (- i 1)))))\n    (iter (quotient n 2)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n      \
    \    (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\n     \
    \   [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond\n        [(null? lst) acc]\n        [(is-prime? (car lst)) (iter\
    \ (cdr lst) (car lst))]\n        [else (iter (cdr lst) acc)]))\n    (iter lst\
    \ 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (cond\n\
    \      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n  \
    \    [else\n       (define (iter i)\n         (cond\n           [(> (* i i) n)\
    \ #t]\n           [(= (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n\
    \       (iter 3)]))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n\
    \      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define (max-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst))\n     \
    \  (max (car lst) (max-prime (cdr lst)))]\n      [else (max-prime (cdr lst))]))\n\
    \  (sum-digits (max-prime lst)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n\
    \          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (find-largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car\
    \ lst)) (car lst))\n          (else (find-largest-prime (cdr lst)))))\n  (sum-digits\
    \ (find-largest-prime lst)))\n", "  (define (is-prime n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (define (sum-digits n)\n    (define (helper\
    \ n acc)\n      (if (= n 0)\n          acc\n          (helper (quotient n 10)\
    \ (+ acc (remainder n 10)))))\n    (helper n 0))\n  (define (helper lst acc)\n\
    \    (cond ((null? lst) acc)\n          ((and (is-prime (car lst)) (> (car lst)\
    \ acc)) (helper (cdr lst) (car lst)))\n          (else (helper (cdr lst) acc))))\n\
    \  (sum-digits (helper lst 0)))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n     \
    \       (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n   \
    \ (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient\
    \ n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n sum)\n      (cond ((= n 0) sum)\n            (else (iter\
    \ (quotient n 10) (+ sum (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst max)\n      (cond ((null? lst) max)\n          \
    \  ((and (is-prime (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) max))))\n    (iter lst 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(> i (sqrt n)) #t]\n           [(= (remainder\
    \ n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (iter lst max)\n    (cond\n    \
    \  [(null? lst) (sum-digits max)]\n      [(and (is-prime? (car lst)) (> (car lst)\
    \ max)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) max)]))\n  (iter\
    \ lst 0))\n", "  (define (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else (let loop ((i 3))\n         \
    \         (cond ((&gt; (* i i) n) #t)\n                        ((= (modulo n i)\
    \ 0) #f)\n                        (else (loop (+ i 2))))))))\n  (define (sum-digits\
    \ n)\n    (cond ((&lt; n 10) n)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst)\
    \ 0)\n          ((prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n\
    </code>\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n    \
    \  (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else\
    \ (is-prime-helper n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (/ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n  \
    \        ((is-prime? (car lst)) (car lst))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(> (* i i) n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n   \
    \   [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper? n i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper?\
    \ n (- i 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define (sum-digits n)\n\
    \    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (isPrime n)\n    (define (iter i)\n   \
    \   (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (sumDigits n)\n    (cond\n     \
    \ [(= n 0) 0]\n      [else (+ (modulo n 10) (sumDigits (quotient n 10)))]))\n\
    \  (define (largestPrime lst)\n    (cond\n      [(null? lst) 0]\n      [(isPrime\
    \ (car lst)) (max (car lst) (largestPrime (cdr lst)))]\n      [else (largestPrime\
    \ (cdr lst))]))\n  (sumDigits (largestPrime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (prime-digits (quotient\
    \ n 10))))))\n  (define (iter lst largest)\n    (cond ((null? lst) (prime-digits\
    \ largest))\n          ((and (is-prime? (car lst)) (> (car lst) largest))\n  \
    \         (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n\
    \  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter\
    \ (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond\n        [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc\
    \ (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond\n\
    \      [(null? lst) acc]\n      [(and (is-prime? (car lst)) (> (car lst) acc))\
    \ (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) acc)]))\n  (sum-digits\
    \ (iter lst 0)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else\
    \ (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper? n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper? n (-\
    \ i 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define (get-largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (get-largest-prime\
    \ (cdr lst))))\n          (else (get-largest-prime (cdr lst)))))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n\
    \ 10))))))\n  (sum-digits (get-largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper? n i)\n      (cond ((= i 1) #t)\n         \
    \   ((= (modulo n i) 0) #f)\n            (else (is-prime-helper? n (- i 1)))))\n\
    \    (is-prime-helper? n (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n\
    \ 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define\
    \ (find-largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car\
    \ lst)) (car lst))\n          (else (find-largest-prime (cdr lst)))))\n  (sum-digits\
    \ (find-largest-prime lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst))\
    \ (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(> i (sqrt n)) #t]\n           [(= (remainder\
    \ n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n      [(is-prime? (car\
    \ lst)) (max (car lst) (largest-prime (cdr lst)))]\n      [else (largest-prime\
    \ (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n    \
    \  [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (is-prime-helper? n d)\n  \
    \    (cond\n        [(= d 1) #t]\n        [(= (modulo n d) 0) #f]\n        [else\
    \ (is-prime-helper? n (- d 1))]))\n    (is-prime-helper? n (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits\
    \ (/ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n\
    \      [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))))\n  (define (is-prime? n)\n    (cond ((= n 1)\
    \ #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n   \
    \        (let loop ((i 3))\n             (cond ((= i n) #t)\n                \
    \   ((= (modulo n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n \
    \ (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n\
    \          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n         \
    \  (define (iter i)\n             (cond ((> (* i i) n) #t)\n                 \
    \  ((= (modulo n i) 0) #f)\n                   (else (iter (+ i 2)))))\n     \
    \      (iter 3))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n        \
    \  (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime-value\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n\
    \          (else (largest-prime-value (cdr lst)))))\n  (sum-digits (largest-prime-value\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n   \
    \   (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst)\
    \ acc)\n          ((is-prime? (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n\
    \          (else (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (iter lst)\n    (cond ((null? lst) 0)\n    \
    \      ((is-prime (car lst)) (max (sum-digits (car lst)) (iter (cdr lst))))\n\
    \          (else (iter (cdr lst)))))\n  (iter lst))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n\
    \    (is-prime-helper n (quotient n 2)))\n  (define (get-largest-prime lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst)\
    \ (get-largest-prime (cdr lst)))]\n      [else (get-largest-prime (cdr lst))]))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (sum-digits (get-largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n sum)\n      (cond ((= n 0)\
    \ sum)\n            (else (iter (quotient n 10) (+ sum (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst max)\n    (cond ((null? lst) (sum-digits\
    \ max))\n          ((and (is-prime (car lst)) (> (car lst) max)) (iter (cdr lst)\
    \ (car lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (sum-digits n)\n    (if (zero? n)\n        0\n       \
    \ (+ (modulo n 10) (sum-digits (quotient n 10)))))\n  (define (is-prime? n)\n\
    \    (if (= n 2)\n        #t\n        (if (= (modulo n 2) 0)\n            #f\n\
    \            (let loop ((i 3))\n              (if (> (* i i) n)\n            \
    \      #t\n                  (if (= (modulo n i) 0)\n                      #f\n\
    \                      (loop (+ i 2))))))))\n  (define (largest-prime lst)\n \
    \   (if (null? lst)\n        0\n        (if (is-prime? (car lst))\n          \
    \  (car lst)\n            (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n acc)\n   \
    \   (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst)\
    \ acc)\n          ((and (is-prime (car lst))\n                (> (sum-digits (car\
    \ lst)) (sum-digits acc)))\n           (iter (cdr lst) (car lst)))\n         \
    \ (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", "  (define (prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else\
    \ (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define\
    \ (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(prime? (car lst))\
    \ (iter (cdr lst) (sum-digits (car lst)))]\n      [else (iter (cdr lst) acc)]))\n\
    \  (iter lst 0))\n", "  (cond\n    [(empty? lst) 0]\n    [(prime? (first lst))\
    \ (skjkasdkd (rest lst))]\n    [else (skjkasdkd (rest lst))]))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime\
    \ (car lst)) (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) acc))))\n\
    \  (sum-digits (iter lst 0)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime\
    \ (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (if (= i n) #t\n          (if (= (remainder n i) 0) #f\n              (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n s)\n\
    \      (if (= n 0) s\n          (iter (quotient n 10) (+ s (remainder n 10)))))\n\
    \    (iter n 0))\n  (define (iter lst max)\n    (if (null? lst) max\n        (if\
    \ (and (is-prime? (car lst)) (> (car lst) max))\n            (iter (cdr lst) (car\
    \ lst))\n            (iter (cdr lst) max))))\n  (sum-digits (iter lst 0)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (define (iter n s)\n      (cond ((=\
    \ n 0) s)\n            (else (iter (quotient n 10) (+ s (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst max)\n\
    \      (cond ((null? lst) max)\n            ((and (is-prime? (car lst)) (> (car\
    \ lst) max)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) max))))\n\
    \    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper? n i)\n      (cond ((= i n) #t)\n         \
    \   ((= (modulo n i) 0) #f)\n            (else (is-prime-helper? n (+ i 1)))))\n\
    \    (is-prime-helper? n 2))\n  (define (get-largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else (get-largest-prime\
    \ (cdr lst)))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (sum-digits (get-largest-prime\
    \ lst)))\n", "  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else\
    \ (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (is-prime? n)\n\
    \    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n     \
    \ [(= n 5) #t]\n      [(= n 7) #t]\n      [(= n 11) #t]\n      [(= n 13) #t]\n\
    \      [(= n 17) #t]\n      [(= n 19) #t]\n      [(= n 23) #t]\n      [(= n 29)\
    \ #t]\n      [(= n 31) #t]\n      [(= n 37) #t]\n      [(= n 41) #t]\n      [(=\
    \ n 43) #t]\n      [(= n 47) #t]\n      [(= n 53) #t]\n      [(= n 59) #t]\n \
    \     [(= n 61) #t]\n      [(= n 67) #t]\n      [(= n 71) #t]\n      [(= n 73)\
    \ #t]\n      [(= n 79) #t]\n      [(= n 83) #t]\n      [(= n 89) #t]\n      [(=\
    \ n 97) #t]\n      [(= n 101) #t]\n      [(= n 103) #t]\n      [(= n 107) #t]\n\
    \      [(= n 109) #t]\n      [(= n 113) #t]\n      [(= n 127) #t]\n      [(= n\
    \ 131) #t]\n      [(= n 137) #t]\n      [(= n 139) #t]\n      [(= n 149) #t]\n\
    \      [(= n 151) #t]\n      [(= n 157) #t]\n      [(= n 163) #t]\n      [(= n\
    \ 167) #t]\n      [(= n 173) #t]\n      [(= n 179) #t]\n      [(= n 181) #t]\n\
    \      [(= n 191) #t]\n      [(= n 193) #", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (floor (/ n 2))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n     \
    \     (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i)\
    \ 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (if (= n 0)\n          acc\n\
    \          (iter (quotient n 10) (+ acc (remainder n 10)))))\n    (iter n 0))\n\
    \  (define (iter lst acc)\n    (if (null? lst)\n        acc\n        (if (is-prime?\
    \ (car lst))\n            (iter (cdr lst) (sum-digits (car lst)))\n          \
    \  (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime-in-list\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime-in-list\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (define (sum-digits n)\n    (if (= n 0)\n        0\n        (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else\
    \ (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (is-prime? n)\n    (cond\n     \
    \ [(< n 2) #f]\n      [(= n 2) #t]\n      [(zero? (modulo n 2)) #f]\n      [else\n\
    \       (define (iter i)\n         (cond\n           [(> i (quotient n 2)) #t]\n\
    \           [(zero? (modulo n i)) #f]\n           [else (iter (+ i 1))]))\n  \
    \     (iter 3)]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime? (car lst)) (car lst)]\n      [else (largest-prime (cdr\
    \ lst))]))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n\
    \        [else (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n\
    \ 0))\n  (define (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(is-prime\
    \ (car lst)) (iter (cdr lst) (max acc (car lst)))]\n      [else (iter (cdr lst)\
    \ acc)]))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (find-largest-prime lst)\n    (cond ((null? lst) 0)\n\
    \          ((is-prime? (car lst)) (max (car lst) (find-largest-prime (cdr lst))))\n\
    \          (else (find-largest-prime (cdr lst)))))\n  (sum-digits (find-largest-prime\
    \ lst)))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((> i (/\
    \ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst)\
    \ acc)\n          ((prime? (car lst)) (iter (cdr lst) (car lst)))\n          (else\
    \ (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", "  (define (is-prime\
    \ n)\n    (define (helper i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (helper (- i 1)))))\n    (helper (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (quotient n 10))))))\n  (define (helper lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime (car lst)) (max (car lst) (helper (cdr lst))))\n\
    \          (else (helper (cdr lst)))))\n  (sum-digits (helper lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n sum)\n      (cond ((= n 0) sum)\n\
    \            (else (iter (quotient n 10) (+ sum (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (largest-prime lst)\n    (define (iter lst largest)\n     \
    \ (cond ((null? lst) largest)\n            ((and (is-prime? (car lst))\n     \
    \             (> (car lst) largest))\n             (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) largest))))\n    (iter lst 0))\n  (sum-digits\
    \ (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n \
    \     (cond ((< i n)\n             (if (zero? (modulo n i))\n                \
    \ #f\n                 (iter (+ i 1))))\n            (else #t)))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((< n 10) (+\
    \ acc n))\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime? (car lst)) (car lst))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (/ n 2)))\n  (define\
    \ (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits\
    \ (/ n 10)))]))\n  (define (iter lst largest)\n    (cond\n      [(null? lst) (sum-digits\
    \ largest)]\n      [(and (is-prime? (car lst)) (> (car lst) largest)) (iter (cdr\
    \ lst) (car lst))]\n      [else (iter (cdr lst) largest)]))\n  (iter lst 0))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime (car lst)) (max (car lst) (largest-prime (cdr lst))))\n \
    \         (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond ((null? lst) acc)\n            ((is-prime? (car lst)) (iter (cdr\
    \ lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (iter lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (sum-digits (car lst)) (iter (cdr lst))))\n          (else (iter\
    \ (cdr lst)))))\n  (iter lst))\n", "  (define (is-prime n)\n    (define (is-prime-iter\
    \ n div)\n      (cond\n        [(= div 1) #t]\n        [(= (modulo n div) 0) #f]\n\
    \        [else (is-prime-iter n (- div 1))]))\n    (is-prime-iter n (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (/ n 10)))]))\n  (define (find-largest-prime lst)\n    (cond\n\
    \      [(null? lst) 0]\n      [(is-prime (car lst)) (car lst)]\n      [else (find-largest-prime\
    \ (cdr lst))]))\n  (sum-digits (find-largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (helper i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (helper (- i 1)))))\n    (helper (quotient n 2)))\n  (define\
    \ (sum-digits n)\n    (define (helper n acc)\n      (cond ((= n 0) acc)\n    \
    \        (else (helper (quotient n 10) (+ acc (remainder n 10))))))\n    (helper\
    \ n 0))\n  (define (helper lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime?\
    \ (car lst)) (helper (cdr lst) (car lst)))\n          (else (helper (cdr lst)\
    \ acc))))\n  (sum-digits (helper lst 0)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime? (car lst)) (iter\
    \ (cdr lst) (sum-digits (car lst))))\n          (else (iter (cdr lst) acc))))\n\
    \  (iter lst 0))\n", "  (define (prime? n)\n    (define (prime-helper n i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (prime-helper n (- i 1)))))\n    (prime-helper n (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n\
    \ 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n       \
    \   ((prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n         \
    \ (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (prime-list lst)\n    (cond ((null? lst) '())\n       \
    \   ((is-prime? (car lst)) (cons (car lst) (prime-list (cdr lst))))\n        \
    \  (else (prime-list (cdr lst)))))\n  (define (sum-digits n)\n    (cond ((= n\
    \ 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (sum-digits\
    \ (apply max (prime-list lst))))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n\
    \        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-list lst)\n\
    \    (cond\n      [(empty? lst) empty]\n      [(is-prime? (first lst)) (cons (first\
    \ lst) (prime-list (rest lst)))]\n      [else (prime-list (rest lst))]))\n  (define\
    \ (largest-prime lst)\n    (cond\n      [(empty? lst) 0]\n      [(> (first lst)\
    \ (largest-prime (rest lst))) (first lst)]\n      [else (largest-prime (rest lst))]))\n\
    \  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (sum-digits (largest-prime (prime-list\
    \ lst))))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter\
    \ lst acc)\n      (cond ((null? lst) acc)\n            ((is-prime? (car lst))\
    \ (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) acc))))\n   \
    \ (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (helper d)\n      (cond ((= d 1) #t)\n            ((= (remainder\
    \ n d) 0) #f)\n            (else (helper (- d 1)))))\n    (helper (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (helper lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime (car lst)) (max (car lst) (helper (cdr lst))))\n\
    \          (else (helper (cdr lst)))))\n  (sum-digits (helper lst)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((&gt; i (/ n 2)) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (get-primes lst)\n    (cond ((null? lst) '())\n          ((is-prime\
    \ (car lst)) (cons (car lst) (get-primes (cdr lst))))\n          (else (get-primes\
    \ (cdr lst)))))\n  (define (sum-digits n)\n    (cond ((&lt; n 10) n)\n       \
    \   (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (get-max-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((null? (cdr lst)) (car lst))\n \
    \         ((&gt; (car lst) (car (cdr lst))) (get-max-prime (cons (car lst) (cdr\
    \ (cdr lst)))))\n          (else (get-max-prime (cdr lst)))))\n  (sum-digits (get-max-prime\
    \ (get-primes lst))))\n</code>\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n     \
    \       (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n   \
    \ (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient\
    \ n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((is-prime? (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter\
    \ (cdr lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (iter lst largest)\n\
    \    (cond ((null? lst) (sum-digits largest))\n          ((is-prime? (car lst))\
    \ (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n \
    \ (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr\
    \ lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n   \
    \     [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (- i\
    \ 1))]))\n    (iter (- n 1)))\n  (define (prime-list lst)\n    (cond\n      [(null?\
    \ lst) '()]\n      [(is-prime? (car lst)) (cons (car lst) (prime-list (cdr lst)))]\n\
    \      [else (prime-list (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (/ n 10)))]))\n \
    \ (define (max-prime-sum lst)\n    (cond\n      [(null? lst) 0]\n      [(> (car\
    \ lst) (max-prime-sum (cdr lst))) (car lst)]\n      [else (max-prime-sum (cdr\
    \ lst))]))\n  (sum-digits (max-prime-sum (prime-list lst))))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (max (car lst)\
    \ (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0)\
    \ #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter\
    \ (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond\n      [(null? lst) acc]\n      [(is-prime? (car lst)) (iter\
    \ (cdr lst) (sum-digits (car lst)))]\n      [else (iter (cdr lst) acc)]))\n  (iter\
    \ lst 0))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond ((&gt;\
    \ i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper\
    \ (+ i 1)))))\n    (helper 2))\n  (define (sum-digits n)\n    (cond ((&lt; n 10)\
    \ n)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (helper lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max\
    \ (sum-digits (car lst)) (helper (cdr lst))))\n          (else (helper (cdr lst)))))\n\
    \  (helper lst))\n</code>\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define\
    \ (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient n\
    \ 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter lst acc)\n\
    \    (cond ((null? lst) acc)\n          ((is-prime? (car lst)) (iter (cdr lst)\
    \ (sum-digits (car lst))))\n          (else (iter (cdr lst) acc))))\n  (iter lst\
    \ 0))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n      \
    \    (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (if (= i n)\n          #t\n \
    \         (if (= (remainder n i) 0)\n              #f\n              (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (if (= n 0)\n       \
    \ 0\n        (+ (remainder n 10) (sum-digits (quotient n 10)))))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst)\n      (if (null? lst)\n          0\n         \
    \ (if (prime? (car lst))\n              (car lst)\n              (iter (cdr lst)))))\n\
    \    (iter lst))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (is-prime-iter n i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-iter n (- i 1)))))\n    (is-prime-iter\
    \ n (- n 1)))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n    \
    \      ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (/ n 10))))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n\
    \ 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n          (else\
    \ (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n\
    \ 1)))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+\
    \ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define (largest-prime lst)\n   \
    \ (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (max (car lst) (largest-prime\
    \ (cdr lst)))]\n      [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter i)\n    \
    \  (cond ((= i 0) 0)\n            (else (+ (remainder i 10) (iter (quotient i\
    \ 10))))))\n    (iter n))\n  (define (max-prime lst)\n    (define (iter lst max)\n\
    \      (cond ((null? lst) max)\n            ((and (is-prime? (car lst)) (> (car\
    \ lst) max)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) max))))\n\
    \    (iter lst 0))\n  (sum-digits (max-prime lst)))\n", "  (define (prime? n)\n\
    \    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= (remainder n 2)\
    \ 0) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((=\
    \ i (sqrt n)) #t)\n                   ((= (remainder n i) 0) #f)\n           \
    \        (else (loop (+ i 2))))))))\n  (define (sum-digits n)\n    (if (= n 0)\n\
    \        0\n        (+ (remainder n 10) (sum-digits (quotient n 10)))))\n  (define\
    \ (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((prime? (car lst))\
    \ (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (sum-digits n)\n\
    \    (if (zero? n)\n        0\n        (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))))\n  (define (is-prime? n)\n    (define (helper d)\n      (if (= d 1)\n\
    \          #t\n          (if (= (modulo n d) 0)\n              #f\n          \
    \    (helper (- d 1)))))\n    (helper (- n 1)))\n  (define (largest-prime-value\
    \ lst)\n    (define (helper lst max)\n      (if (null? lst)\n          max\n \
    \         (if (and (is-prime? (car lst)) (> (car lst) max))\n              (helper\
    \ (cdr lst) (car lst))\n              (helper (cdr lst) max))))\n    (helper lst\
    \ 0))\n  (sum-digits (largest-prime-value lst)))\n", "  (define (prime? n)\n \
    \   (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n   \
    \       (else (let loop ((i 3))\n                  (cond ((= i n) #t)\n      \
    \                  ((= (remainder n i) 0) #f)\n                        (else (loop\
    \ (+ i 2))))))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (sum-digits (apply max\
    \ (filter prime? lst))))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n     \
    \   [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-list lst)\n    (cond\n\
    \      [(null? lst) '()]\n      [(is-prime? (car lst)) (cons (car lst) (prime-list\
    \ (cdr lst)))]\n      [else (prime-list (cdr lst))]))\n  (define (max-prime lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(null? (cdr lst)) (car lst)]\n     \
    \ [(> (car lst) (car (cdr lst))) (max-prime (cons (car lst) (cdr (cdr lst))))]\n\
    \      [else (max-prime (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n \
    \     [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (sum-digits (max-prime (prime-list lst))))\n", "  (define (is-prime? n)\n \
    \   (define (is-prime-helper? n d)\n      (cond ((= d 1) #t)\n            ((=\
    \ (modulo n d) 0) #f)\n            (else (is-prime-helper? n (- d 1)))))\n   \
    \ (is-prime-helper? n (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0)\
    \ 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else\
    \ (+ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define (iter lst max)\n    (cond\n\
    \      [(null? lst) (sum-digits max)]\n      [(and (is-prime? (car lst)) (> (car\
    \ lst) max)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr lst) max)]))\n\
    \  (iter lst 0))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (prime-lst lst)\n    (cond ((null? lst)\
    \ '())\n          ((is-prime (car lst)) (cons (car lst) (prime-lst (cdr lst))))\n\
    \          (else (prime-lst (cdr lst)))))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (sum-digits (apply max (prime-lst lst))))\n", "  (define (is-prime? n)\n  \
    \  (define (iter i)\n      (cond ((< i n)\n             (if (zero? (modulo n i))\n\
    \                 #f\n                 (iter (+ i 1))))\n            (else #t)))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (cond ((< n 10) n)\n          (else\
    \ (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n        \
    \  ((even? n) #f)\n          (else (let loop ((i 3))\n                  (cond\
    \ ((= i n) #t)\n                        ((= (remainder n i) 0) #f)\n         \
    \               (else (loop (+ i 2))))))))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (prime? n i)\n      (cond\n        [(= i 1) #t]\n        [(=\
    \ (modulo n i) 0) #f]\n        [else (prime? n (- i 1))]))\n    (prime? n (- n\
    \ 1)))\n  (define (sum-digits n)\n    (cond\n      [(= n 0) 0]\n      [else (+\
    \ (modulo n 10) (sum-digits (/ n 10)))]))\n  (define (largest-prime lst)\n   \
    \ (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (car lst)]\n    \
    \  [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \      ((and (is-prime (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n\
    \          (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n\
    ```\n\n## \u0417\u0430\u0434\u0430\u0447\u0430 2\n\n\u0414\u0430 \u0441\u0435\
    \ \u0434\u0435\u0444\u0438\u043D\u0438\u0440\u0430 \u0444\u0443\u043D\u043A\u0446\
    \u0438\u044F `(skjkasdkd lst)`, \u043A\u043E\u044F\u0442\u043E \u043F\u0440\u0438\
    \u0435\u043C\u0430 \u0441\u043F\u0438\u0441\u044A\u043A \u043E\u0442 \u0446\u0435\
    \u043B\u0438 \u0447\u0438\u0441\u043B\u0430 \u0438 \u0432\u0440\u044A\u0449\u0430\
    \ \u0441\u043F\u0438\u0441\u044A\u043A \u043E\u0442 \u0446\u0435\u043B\u0438 \u0447\
    \u0438\u0441\u043B\u0430, \u043A\u043E\u0438\u0442\u043E \u0441\u0430 \u043F\u0440\
    \u043E\u0441\u0442\u0438 \u0438 \u043F\u043E-\u0433\u043E\u043B\u0435\u043C\u0438\
    \ \u043E\u0442 \u043D\u0430\u0439-\u0433\u043E\u043B\u044F\u043C\u043E\u0442\u043E\
    \ \u043F\u0440\u043E\u0441\u0442\u043E \u0447\u0438\u0441\u043B\u043E \u0432 \u0434\
    \u0430\u0434\u0435\u043D\u0438\u044F \u0441\u043F\u0438\u0441\u044A\u043A.\n\n\
    \u041F\u0440\u0438\u043C\u0435\u0440\u0438:\n\n```racket\n>>> (skjkasdkd (list\
    \ 0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3))\n'(181 191 193 197 199\
    \ 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313\
    \ 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \        ((and (is-prime? (car lst)) (> (car lst) acc)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) acc))))\n  (sum-digits (iter lst 0)))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst))))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (define (iter lst acc)\n\
    \      (cond ((null? lst) acc)\n            ((is-prime (car lst)) (iter (cdr lst)\
    \ (car lst)))\n            (else (iter (cdr lst) acc))))\n    (iter lst 0))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (cond ((= n 0) 0)\n          (else (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime? (car lst)) (car lst))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0)\
    \ #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter i)\n      (cond\n        [(= i 0) 0]\n        [else (+ (remainder\
    \ i 10) (iter (quotient i 10)))]))\n    (iter n))\n  (define (iter lst max)\n\
    \    (cond\n      [(null? lst) (sum-digits max)]\n      [(and (is-prime? (car\
    \ lst)) (> (car lst) max)) (iter (cdr lst) (car lst))]\n      [else (iter (cdr\
    \ lst) max)]))\n  (iter lst 0))\n", "  (define (prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n          \
    \  (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits n)\n  \
    \  (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter (quotient\
    \ n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (largest-prime\
    \ lst)\n    (define (iter lst acc)\n      (cond ((null? lst) acc)\n          \
    \  ((prime? (car lst)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr\
    \ lst) acc))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (car lst))\n\
    \          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n sum)\n      (cond ((= n 0)\
    \ sum)\n            (else (iter (quotient n 10) (+ sum (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (max-prime lst)\n    (cond ((null? lst) 0)\n     \
    \     ((is-prime (car lst)) (max-prime (cdr lst)))\n          (else (max (car\
    \ lst) (max-prime (cdr lst))))))\n  (sum-digits (max-prime lst)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (max-prime\
    \ lst)\n    (define (iter lst max)\n      (cond ((null? lst) max)\n          \
    \  ((and (is-prime (car lst)) (> (car lst) max)) (iter (cdr lst) (car lst)))\n\
    \            (else (iter (cdr lst) max))))\n    (iter lst 0))\n  (sum-digits (max-prime\
    \ lst)))\n", "  (define (sum-digits n)\n    (if (= n 0)\n        0\n        (+\
    \ (modulo n 10) (sum-digits (quotient n 10)))))\n  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (modulo\
    \ n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n\
    \  (define (largest-prime lst)\n    (define (iter lst largest)\n      (if (null?\
    \ lst)\n          largest\n          (if (and (is-prime? (car lst)) (> (car lst)\
    \ largest))\n              (iter (cdr lst) (car lst))\n              (iter (cdr\
    \ lst) largest))))\n    (iter lst 0))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (divisors n)\n      (for/list ([i (in-range\
    \ 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (null?\
    \ (divisors n)))\n  (define (digits n)\n    (if (zero? n) '()\n        (cons (remainder\
    \ n 10) (digits (quotient n 10)))))\n  (define (sum-digits lst)\n    (if (null?\
    \ lst) 0\n        (+ (car lst) (sum-digits (cdr lst)))))\n  (sum-digits (digits\
    \ (apply max (filter is-prime? lst)))))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n\
    \    (define (iter n acc)\n      (cond ((= n 0) acc)\n            (else (iter\
    \ (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n  (define (iter\
    \ lst acc)\n    (cond ((null? lst) acc)\n          ((is-prime? (car lst)) (iter\
    \ (cdr lst) (sum-digits (car lst))))\n          (else (iter (cdr lst) acc))))\n\
    \  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (prime-digits n)\n    (cond ((= n 0) 0)\n\
    \          (else (+ (remainder n 10) (prime-digits (quotient n 10))))))\n  (define\
    \ (iter lst max)\n    (cond ((null? lst) max)\n          ((is-prime? (car lst))\
    \ (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) max))))\n  (prime-digits\
    \ (iter lst 0)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (-\
    \ i 1))]))\n    (iter (- n 1)))\n  (define (sum-digits n)\n    (define (iter n\
    \ acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter (quotient n 10)\
    \ (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n  \
    \  (cond\n      [(empty? lst) acc]\n      [(is-prime? (first lst)) (iter (rest\
    \ lst) (sum-digits (first lst)))]\n      [else (iter (rest lst) acc)]))\n  (iter\
    \ lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond\n        [(= n 0) acc]\n        [else (iter (quotient n 10) (+ acc\
    \ (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n    (cond\n\
    \      [(null? lst) acc]\n      [(is-prime? (car lst)) (iter (cdr lst) (sum-digits\
    \ (car lst)))]\n      [else (iter (cdr lst) acc)]))\n  (iter lst 0))\n", "  (define\
    \ (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (is-prime? n)\n    (cond\n     \
    \ [(zero? n) false]\n      [(= n 1) false]\n      [(= n 2) true]\n      [(= n\
    \ 3) true]\n      [(= n 5) true]\n      [(= n 7) true]\n      [(= n 11) true]\n\
    \      [(= n 13) true]\n      [(= n 17) true]\n      [(= n 19) true]\n      [(=\
    \ n 23) true]\n      [(= n 29) true]\n      [(= n 31) true]\n      [(= n 37) true]\n\
    \      [(= n 41) true]\n      [(= n 43) true]\n      [(= n 47) true]\n      [(=\
    \ n 53) true]\n      [(= n 59) true]\n      [(= n 61) true]\n      [(= n 67) true]\n\
    \      [(= n 71) true]\n      [(= n 73) true]\n      [(= n 79) true]\n      [(=\
    \ n 83) true]\n      [(= n 89) true]\n      [(= n 97) true]\n      [(= n 101)\
    \ true]\n      [(= n 103) true]\n      [(= n 107) true]\n      [(= n 109) true]\n\
    \      [(= n 113) true]\n      [(= n 127) true]\n      [(= n 131) true]\n    \
    \  [(= n 137) true]\n      [(= n 139) true]\n      [(= n 149) true]\n      [(=\
    \ n 151) true]\n      [(= n 157) true]\n      [(= n 163) true]\n      [(= n 167)\
    \ true]\n      [(= n 173) true]\n      [(= n 179) true]\n      [(= n 181) true]\n\
    \      [(= n 191) true]\n      [(= n 193) true]\n      [(= n 197) true]\n    \
    \  [(= n 199) true]\n      [(= n 211) true]\n      [(= n 223)", "  (define (is-prime\
    \ n)\n    (define (helper i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (helper (+ i 1))]))\n    (helper 2))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (helper lst)\n    (cond\n      [(null? lst)\
    \ 0]\n      [(is-prime (car lst)) (max (car lst) (helper (cdr lst)))]\n      [else\
    \ (helper (cdr lst))]))\n  (sum-digits (helper lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (iter lst largest)\n    (cond ((null? lst) (sum-digits\
    \ largest))\n          ((and (is-prime? (car lst)) (> (car lst) largest))\n  \
    \         (iter (cdr lst) (car lst)))\n          (else (iter (cdr lst) largest))))\n\
    \  (iter lst 0))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n\
    \      (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime (car lst)) (max (car lst) (largest-prime (cdr\
    \ lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n      \
    \    (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((is-prime? (car lst)) (max (car\
    \ lst) (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (quotient n 2)))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (largest-prime lst)\n    (cond\n      [(null? lst) 0]\n\
    \      [(is-prime? (car lst)) (max (car lst) (largest-prime (cdr lst)))]\n   \
    \   [else (largest-prime (cdr lst))]))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime n)\n    (define (is-prime-iter n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter n (- i\
    \ 1)))))\n    (is-prime-iter n (- n 1)))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define\
    \ (max-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime (car lst))\
    \ (max-prime (cdr lst)))\n          (else (max (car lst) (max-prime (cdr lst))))))\n\
    \  (sum-digits (max-prime lst)))", "  (define (is-prime n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits n)\n    (define\
    \ (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else (iter (quotient\
    \ n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define (iter lst acc)\n\
    \    (cond\n      [(empty? lst) acc]\n      [(is-prime (car lst)) (iter (cdr lst)\
    \ (car lst))]\n      [else (iter (cdr lst) acc)]))\n  (sum-digits (iter lst 0)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (max-prime lst)\n    (define (iter lst max)\n    \
    \  (cond ((null? lst) max)\n            ((and (is-prime? (car lst)) (> (car lst)\
    \ max)) (iter (cdr lst) (car lst)))\n            (else (iter (cdr lst) max))))\n\
    \    (iter lst 0))\n  (sum-digits (max-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define\
    \ (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n      \
    \      (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter n 0))\n\
    \  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n\
    \    (define (prime-helper n div)\n      (cond ((= n 1) #f)\n            ((= div\
    \ 1) #t)\n            ((= (modulo n div) 0) #f)\n            (else (prime-helper\
    \ n (- div 1)))))\n    (prime-helper n (- n 1)))\n  (define (sum-digits n)\n \
    \   (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (/ n 10))))))\n\
    \  (define (largest-prime-value lst)\n    (cond ((null? lst) 0)\n          ((prime?\
    \ (car lst)) (max (car lst) (largest-prime-value (cdr lst))))\n          (else\
    \ (largest-prime-value (cdr lst)))))\n  (sum-digits (largest-prime-value lst)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n        \
    \    ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (largest-prime lst)\n    (cond\
    \ ((null? lst) 0)\n          ((prime? (car lst)) (car lst))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient n 2)))\n\
    \  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0) acc)\n\
    \            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n    (iter\
    \ n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n          ((is-prime?\
    \ (car lst)) (max (car lst) (largest-prime (cdr lst))))\n          (else (largest-prime\
    \ (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (prime? n)\n\
    \    (define (prime-helper n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (prime-helper n (- i 1)))))\n    (prime-helper\
    \ n (- n 1)))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else\
    \ (+ (modulo n 10) (sum-digits (/ n 10))))))\n  (define (largest-prime lst)\n\
    \    (cond ((null? lst) 0)\n          ((prime? (car lst)) (car lst))\n       \
    \   (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (quotient n 2)))\n  (define (sum-digits n)\n    (define (iter n acc)\n     \
    \ (cond ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder\
    \ n 10))))))\n    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null?\
    \ lst) 0)\n          ((is-prime? (car lst)) (max (car lst) (largest-prime (cdr\
    \ lst))))\n          (else (largest-prime (cdr lst)))))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime n)\n    (cond ((= n 1) #f)\n          ((= n\
    \ 2) #t)\n          ((= (remainder n 2) 0) #f)\n          (else\n           (let\
    \ loop ((i 3))\n             (cond ((&gt; (* i i) n) #t)\n                   ((=\
    \ (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define\
    \ (prime-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder n 10)\
    \ (prime-digits (quotient n 10))))))\n  (define (prime-list lst)\n    (cond ((null?\
    \ lst) '())\n          ((is-prime (car lst)) (cons (car lst) (prime-list (cdr\
    \ lst))))\n          (else (prime-list (cdr lst)))))\n  (define (max-prime lst)\n\
    \    (cond ((null? (cdr lst)) (car lst))\n          ((&gt; (car lst) (car (cdr\
    \ lst))) (max-prime (cons (car lst) (cddr lst))))\n          (else (max-prime\
    \ (cdr lst)))))\n  (prime-digits (max-prime (prime-list lst))))\n</code>\n", " \
    \ (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond ((= n 0)\
    \ acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (largest-prime lst)\n    (cond ((null? lst) 0)\n \
    \         ((is-prime (car lst)) (car lst))\n          (else (largest-prime (cdr\
    \ lst)))))\n  (sum-digits (largest-prime lst)))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (sum-digits\
    \ n)\n    (define (iter n acc)\n      (cond\n        [(= n 0) acc]\n        [else\
    \ (iter (quotient n 10) (+ acc (remainder n 10)))]))\n    (iter n 0))\n  (define\
    \ (iter lst acc)\n    (cond\n      [(null? lst) acc]\n      [(is-prime? (car lst))\
    \ (iter (cdr lst) (sum-digits (car lst)))]\n      [else (iter (cdr lst) acc)]))\n\
    \  (iter lst 0))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (prime-list lst)\n    (cond ((null? lst)\
    \ '())\n          ((is-prime? (car lst)) (cons (car lst) (prime-list (cdr lst))))\n\
    \          (else (prime-list (cdr lst)))))\n  (define (sum-digits n)\n    (cond\
    \ ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n\
    \  (sum-digits (apply max (prime-list lst))))\n", "  (define (is-prime? n)\n \
    \   (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (sum-digits\
    \ n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (iter lst max)\n    (cond ((null? lst) (sum-digits max))\n\
    \          ((and (is-prime? (car lst)) (> (car lst) max)) (iter (cdr lst) (car\
    \ lst)))\n          (else (iter (cdr lst) max))))\n  (iter lst 0))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n        [(= i\
    \ 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (-\
    \ i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (largest-prime lst)\n \
    \   (define (largest-prime-iter lst largest)\n      (cond\n        [(null? lst)\
    \ largest]\n        [(is-prime? (car lst)) (largest-prime-iter (cdr lst) (car\
    \ lst))]\n        [else (largest-prime-iter (cdr lst) largest)]))\n    (largest-prime-iter\
    \ lst 0))\n  (define (sum-digits n)\n    (define (sum-digits-iter n sum)\n   \
    \   (cond\n        [(= n 0) sum]\n        [else (sum-digits-iter (/ n 10) (+ sum\
    \ (modulo n 10)))]))\n    (sum-digits-iter n 0))\n  (sum-digits (largest-prime\
    \ lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (sum-digits n)\n    (define (iter n acc)\n      (cond\
    \ ((= n 0) acc)\n            (else (iter (quotient n 10) (+ acc (remainder n 10))))))\n\
    \    (iter n 0))\n  (define (iter lst acc)\n    (cond ((null? lst) acc)\n    \
    \        ((is-prime? (car lst)) (iter (cdr lst) (sum-digits (car lst))))\n   \
    \         (else (iter (cdr lst) acc))))\n  (iter lst 0))\n", "  (define (prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (largest-prime\
    \ lst)\n    (cond ((null? lst) 0)\n          ((prime? (car lst)) (max (car lst)\
    \ (largest-prime (cdr lst))))\n          (else (largest-prime (cdr lst)))))\n\
    \  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (sum-digits (largest-prime lst)))\n",
  "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n  \
    \    [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter i)\n      \
    \   (cond\n           [(> i (sqrt n)) #t]\n           [(= (remainder n i) 0) #f]\n\
    \           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter lst)\n\
    \    (cond\n      [(null? lst) 0]\n      [(is-prime? (car lst)) (car lst)]\n \
    \     [else (iter (cdr lst))]))\n  (define (sum-digits n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (sum-digits (iter lst)))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n     \
    \   [else (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-list lst)\n    (cond\n\
    \      [(null? lst) '()]\n      [(is-prime? (car lst)) (cons (car lst) (prime-list\
    \ (cdr lst)))]\n      [else (prime-list (cdr lst))]))\n  (define (largest-prime\
    \ lst)\n    (cond\n      [(null? lst) 0]\n      [(null? (cdr lst)) (car lst)]\n\
    \      [else (max (car lst) (largest-prime (cdr lst)))]))\n  (define (sum-digits\
    \ n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (sum-digits (largest-prime (prime-list lst))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
