name: HumanEval_68_pluck
language: rkt
prompt: "#lang racket\n\n;; \"Given a list representing a branch of a tree that has\
  \ non-negative integer nodes\n;; your task is to pluck one of the nodes and return\
  \ it.\n;; The plucked node should be the node with the smallest even value.\n;;\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n;; The plucked node should be returned in a list, [\
  \ smalest_value, its index ],\n;; If there are no even values or the given list\
  \ is empty, return [].\n;; Example 1:\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n\
  ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n;;\
  \ Example 2:\n;; >>> (pluck (list 1 2 3))\n;; (list 2 1)\n;; Explanation: 2 has\
  \ the smallest even value, and 2 has the smallest index.\n;; Example 3:\n;; >>>\
  \ (pluck (list ))\n;; (list )\n;; Example 4:\n;; >>> (pluck (list 5 0 3 0 4 2))\n\
  ;; (list 0 1)\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n\
  ;; so we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
  ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
  \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
  \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n  \
  \  (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate\
  \ (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8))\
  \ (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
  \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
completions: ["  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first\
    \ arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ (list)]\n    [(and (even? (first arr)) (or (empty? (rest arr)) (not (even? (second\
    \ arr))))) (list (first arr) 0)]\n    [else (let ([rest-pluck (pluck (rest arr))])\n\
    \            (if (empty? rest-pluck)\n                (list)\n               \
    \ (if (< (first rest-pluck) (first arr))\n                    (cons (first rest-pluck)\
    \ (add1 (second rest-pluck)))\n                    (cons (first arr) 1))))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n", "  (define (pluck-helper arr min-index\
    \ min-value)\n    (cond [(empty? arr) (list min-value min-index)]\n          [(even?\
    \ (first arr))\n           (if (< min-value (first arr))\n               (pluck-helper\
    \ (rest arr) (add1 min-index) (first arr))\n               (pluck-helper (rest\
    \ arr) (add1 min-index) min-value))]\n          [else (pluck-helper (rest arr)\
    \ (add1 min-index) min-value)]))\n  (pluck-helper arr 0 10000))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (null? evens)\n        '()\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 1 empty))]\n        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 1)]\n    [(pluck (rest arr))]\n\
    \    [else (list)]))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first\
    \ arr)) (list (first arr) 0)]\n        [else (list (first arr) 1)]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr)]\n    [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 1)]\n \
    \   [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even?\
    \ (first arr)) (cons (first arr) (cons 1 empty))]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (define (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr)\
    \ (list min-value min-index)]\n      [(even? (first arr))\n       (if (< (first\
    \ arr) min-value)\n           (pluck-helper (rest arr) 0 (first arr))\n      \
    \     (pluck-helper (rest arr) (+ min-index 1) min-value))]\n      [else (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value)]))\n  (pluck-helper arr 10000 0))\n",
  "  (let ([evens (filter even? arr)])\n    (if (null? evens)\n        '()\n     \
    \   (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n",
  "  (define (helper arr min-index min-value)\n    (cond [(empty? arr) (list min-value\
    \ min-index)]\n          [(and (even? (first arr)) (< (first arr) min-value))\n\
    \           (helper (rest arr) (add1 min-index) (first arr))]\n          [else\
    \ (helper (rest arr) (add1 min-index) min-value)]))\n  (if (empty? arr) (list)\n\
    \      (helper arr 0 10000)))\n", "  (if (empty? arr)\n      (list)\n      (define\
    \ evens (filter even? arr))\n      (if (empty? evens)\n          (list)\n    \
    \      (list (apply min evens) (index-of (apply min evens) arr)))))\n", "  (cond\
    \ [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (list (first arr) 1)]))\n", "  (cond\n    [(empty? arr) '()]\n\
    \    [(even? (first arr)) (pluck-even arr)]\n    [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (pluck-even arr (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (pluck\
    \ (rest arr))]\n    [else (cons (first arr) (pluck (rest arr)))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 1)]\n  \
    \  [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let*\
    \ ([evens (filter even? arr)]\n             [smallest-even (apply min evens)]\n\
    \             [index (index-of arr smallest-even)])\n        (list smallest-even\
    \ index))))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n \
    \     (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index-of min-even arr)))))))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (list\
    \ (first arr) 0)]))\n", "  (define (pluck-helper arr min-index min-value)\n  \
    \  (cond [(empty? arr) (list min-value min-index)]\n          [(and (even? (first\
    \ arr)) (< (first arr) min-value))\n           (pluck-helper (rest arr) 0 (first\
    \ arr))]\n          [(and (even? (first arr)) (= (first arr) min-value))\n   \
    \        (pluck-helper (rest arr) (+ 1 min-index) min-value)]\n          [else\
    \ (pluck-helper (rest arr) (+ 1 min-index) min-value)]))\n  (pluck-helper arr\
    \ 10000 0))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list\
    \ (first arr) 1)]\n        [else (pluck (rest arr))]))\n", "  (cond [(empty? arr)\
    \ empty]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond [(empty?\
    \ arr) empty]\n        [(even? (first arr))\n         (let ([min (first arr)])\n\
    \           (for/fold ([min (first arr)]) ([i (in-list (rest arr))])\n       \
    \      (cond [(even? i)\n                    (if (< i min)\n                 \
    \       (values i i)\n                        (values min min))]\n           \
    \        [else min])))]\n        [else (pluck (rest arr))]))\n", "  (define (pluck-helper\
    \ arr min-index min-value)\n    (cond\n      [(empty? arr) (list min-value min-index)]\n\
    \      [(and (even? (first arr)) (< (first arr) min-value))\n       (pluck-helper\
    \ (rest arr) 0 (first arr))]\n      [(and (even? (first arr)) (= (first arr) min-value))\n\
    \       (pluck-helper (rest arr) (+ 1 min-index) min-value)]\n      [else (pluck-helper\
    \ (rest arr) (+ 1 min-index) min-value)]))\n  (pluck-helper arr 10000 0))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (cons (first arr) (cons\
    \ 1 empty))]\n        [else (pluck (rest arr))]))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        (list)\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr) (cons\
    \ 1 empty))]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n \
    \     (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([smallest (apply min evens)])\n       \
    \       (list smallest (index arr smallest)))))))\n", "  (define (helper arr min-index\
    \ min-value)\n    (cond\n      [(empty? arr) (list min-value min-index)]\n   \
    \   [(and (even? (first arr)) (< (first arr) min-value))\n       (helper (rest\
    \ arr) 0 (first arr))]\n      [(and (even? (first arr)) (= (first arr) min-value))\n\
    \       (helper (rest arr) (+ min-index 1) min-value)]\n      [else (helper (rest\
    \ arr) (+ min-index 1) min-value)]))\n  (helper arr 10000 0))\n", "  (if (empty?\
    \ arr)\n      (list)\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            (list)\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index arr min-even)))))))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (pluck-even arr)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(empty? (filter even? arr)) (list)]\n    [else (list (apply\
    \ min (filter even? arr)) (index-of (apply min (filter even? arr)) arr))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n    \
    \    (let ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons\
    \ (first arr) (cons 1 empty))]\n    [else (pluck (rest arr))]))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        (list)\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n  \
    \    (let ([evens (filter even? arr)])\n        (if (empty? evens)\n         \
    \   '()\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (pluck-even arr (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (let* ([plucked (pluck (rest arr))]\n           \
    \      [index (second plucked)])\n             (if (empty? plucked)\n        \
    \         (list (first arr) 0)\n                 (if (even? (first arr))\n   \
    \                  (if (< (first arr) (first plucked))\n                     \
    \    (list (first arr) 0)\n                         (list (first plucked) (+ index\
    \ 1)))\n                     (list (first plucked) (+ index 1)))))]))\n", "  (cond\
    \ [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n \
    \       [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n   \
    \ [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) empty]\n        [(empty? (filter even? arr)) empty]\n   \
    \     [else (list (apply min (filter even? arr)) (index (apply min (filter even?\
    \ arr)) arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr))\
    \ (cons (first arr) (cons 1 empty))]\n        [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n   \
    \          [min-even (apply min evens)]\n             [index (index-of arr min-even)])\n\
    \        (list min-even index))))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(even? (first arr))\n     (let ([min (first arr)])\n       (for/fold ([min\
    \ (first arr)]) ([i (in-list (rest arr))])\n         (if (and (even? i) (< i min))\n\
    \             i\n             min)))]\n    [else (pluck (rest arr))]))\n", " \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (list (first arr) 0)]))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let* ([evens (filter even? arr)]\n             [min-even (apply min evens)]\n\
    \             [min-even-index (index-of min-even arr)])\n        (list min-even\
    \ min-even-index))))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even (first\
    \ arr)])\n       (for/fold ([min-even-index 0]\n                  [min-even-index-found\
    \ #f])\n                 ([i (in-naturals)])\n         (cond\n           [(even?\
    \ (list-ref arr i))\n            (cond\n              [(not min-even-index-found)\n\
    \               (values (list min-even i) #t)]\n              [(< min-even (list-ref\
    \ arr i))\n               (values (list min-even min-even-index) #t)]\n      \
    \        [else\n               (values (list (list-ref arr i) i) #t)])]\n    \
    \       [else\n            (values (list min-even min-even-index) min-even-index-found)])))]\n\
    \    [else\n     (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 1)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even?\
    \ (first arr)) (list (first arr) 1)]\n        [else (list (first arr) 1)]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (define (pluck-helper arr smallest-index\
    \ smallest-value)\n    (cond\n      [(empty? arr) (list smallest-value smallest-index)]\n\
    \      [(and (even? (first arr))\n            (or (= smallest-value -1)\n    \
    \            (< (first arr) smallest-value)))\n       (pluck-helper (rest arr)\
    \ 0 (first arr))]\n      [(and (even? (first arr))\n            (= smallest-value\
    \ (first arr)))\n       (pluck-helper (rest arr) (+ 1 smallest-index) smallest-value)]\n\
    \      [else (pluck-helper (rest arr) (+ 1 smallest-index) smallest-value)]))\n\
    \  (pluck-helper arr -1 -1))\n", "  (cond [(empty? arr) empty]\n        [(even?\
    \ (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (list (first arr) 0)]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (cons (first arr) 1)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even?\
    \ (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(empty? (filter even? arr)) empty]\n    [else\
    \ (list (min (filter even? arr)) (index (min (filter even? arr)) arr))]))\n",
  "  (cond [(empty? arr) empty]\n        [(empty? (filter even? arr)) empty]\n   \
    \     [else (list (min (filter even? arr))\n                     (index (min (filter\
    \ even? arr)) arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (let ([plucked (pluck (rest arr))])\n\
    \            (if (empty? plucked)\n                (list)\n                (if\
    \ (even? (first plucked))\n                    (if (< (first plucked) (first arr))\n\
    \                        plucked\n                        (list (first arr) 0))\n\
    \                    (list (first plucked) (+ 1 (second plucked))))))]))\n", " \
    \ (cond\n    [(null? arr) (list)]\n    [(even? (car arr)) (list (car arr) 1)]\n\
    \    [(pluck (cdr arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(and (even?\
    \ (first arr)) (empty? (rest arr))) (list (first arr) 0)]\n    [(and (even? (first\
    \ arr)) (not (empty? (rest arr))))\n     (if (< (first arr) (first (pluck (rest\
    \ arr))))\n         (list (first arr) 0)\n         (cons (first (pluck (rest arr)))\
    \ (add1 (second (pluck (rest arr))))))]\n    [else (pluck (rest arr))]))\n", " \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (pluck-even arr)]\n\
    \    [else (pluck (rest arr))]))\n", "  (define (pluck-helper arr min-index min-value)\n\
    \    (cond\n      [(empty? arr) (list min-value min-index)]\n      [(even? (first\
    \ arr))\n       (if (< (first arr) min-value)\n           (pluck-helper (rest\
    \ arr) 0 (first arr))\n           (pluck-helper (rest arr) (+ min-index 1) min-value))]\n\
    \      [else (pluck-helper (rest arr) (+ min-index 1) min-value)]))\n  (pluck-helper\
    \ arr 10000 0))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\
    \ (cons (first arr) (cons 1 empty))]\n    [else (pluck (rest arr))]))\n", "  (if\
    \ (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n        (if\
    \ (empty? evens)\n            '()\n            (let ([min-even (apply min evens)])\n\
    \              (let ([min-even-index (index-of min-even arr)])\n             \
    \   (list min-even min-even-index)))))))\n", "  (cond\n    [(empty? arr) '()]\n\
    \    [(even? (car arr)) (list (car arr) 0)]\n    [else (pluck (cdr arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n   \
    \     [(even? (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (let loop ([arr arr] [min-even-value (expt 2 31)] [min-even-index (expt 2 31)])\n\
    \    (cond [(empty? arr) (list min-even-value min-even-index)]\n          [(and\
    \ (even? (first arr)) (< (first arr) min-even-value))\n           (loop (rest\
    \ arr) (first arr) (add1 (length arr)))]\n          [else (loop (rest arr) min-even-value\
    \ min-even-index)])))\n", "  (if (empty? arr)\n      '()\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            '()\n            (let\
    \ ([min-even (apply min evens)])\n              (list min-even (index arr min-even)))))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [(pluck (rest arr))]\n    [else (list (first arr) 1)]))\n", "  (cond\
    \ [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n \
    \       [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n  \
    \    (let* ([evens (filter even? arr)]\n             [min-even (apply min evens)]\n\
    \             [min-even-index (index-of min-even arr)])\n        (list min-even\
    \ min-even-index))))\n", "  (define (pluck-helper arr min-index min-value)\n \
    \   (cond\n      [(empty? arr) (list min-value min-index)]\n      [(and (even?\
    \ (first arr)) (< (first arr) min-value))\n       (pluck-helper (rest arr) 0 (first\
    \ arr))]\n      [(and (even? (first arr)) (= (first arr) min-value))\n       (pluck-helper\
    \ (rest arr) (+ 1 min-index) min-value)]\n      [else (pluck-helper (rest arr)\
    \ (+ 1 min-index) min-value)]))\n  (pluck-helper arr 10000 0))\n", "  (define\
    \ (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list min-value\
    \ min-index)]\n          [(and (even? (first arr)) (< (first arr) min-value))\n\
    \           (pluck-helper (rest arr) 0 (first arr))]\n          [(and (even? (first\
    \ arr)) (= (first arr) min-value))\n           (pluck-helper (rest arr) (+ 1 min-index)\
    \ min-value)]\n          [else (pluck-helper (rest arr) (+ 1 min-index) min-value)]))\n\
    \  (pluck-helper arr 10000 0))\n", "  (cond [(empty? arr) empty]\n        [(even?\
    \ (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n   \
    \     [(even? (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n   \
    \     [(and (even? (first arr)) (empty? (rest arr))) (list (first arr) 0)]\n \
    \       [(and (even? (first arr)) (not (empty? (rest arr))))\n         (let* ([rest-pluck\
    \ (pluck (rest arr))]\n                [rest-value (first rest-pluck)]\n     \
    \           [rest-index (second rest-pluck)])\n           (if (and (even? rest-value)\
    \ (< (first arr) rest-value))\n               (list (first arr) 0)\n         \
    \      (list rest-value (+ rest-index 1))))]\n        [else (pluck (rest arr))]))\n",
  "  (define (helper arr min-val min-index)\n    (cond [(empty? arr) (list min-val\
    \ min-index)]\n          [(and (even? (first arr)) (< (first arr) min-val))\n\
    \           (helper (rest arr) (first arr) (add1 min-index))]\n          [else\
    \ (helper (rest arr) min-val (add1 min-index))]))\n  (if (empty? arr)\n      (list)\n\
    \      (helper arr 10000 0)))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even?\
    \ (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\
    \ [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n \
    \       [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n     \
    \   [(empty? (filter even? arr)) empty]\n        [else (list (min (filter even?\
    \ arr))\n                     (index-of (min (filter even? arr)) arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min (apply min\
    \ evens)])\n              (list min (index arr min)))))))\n", "  (define (pluck-helper\
    \ arr min-index min-value)\n    (cond\n      [(empty? arr) (list min-value min-index)]\n\
    \      [(even? (first arr))\n       (if (< min-value (first arr))\n          \
    \ (pluck-helper (rest arr) (+ min-index 1) (first arr))\n           (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value))]\n      [else (pluck-helper (rest arr)\
    \ (+ min-index 1) min-value)]))\n  (pluck-helper arr 0 10000))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr)) (pluck-even arr)]\n    [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first\
    \ arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 1)]\n \
    \   [else (pluck (rest arr))]))\n", "  (define (pluck-helper arr smallest-index\
    \ smallest-value)\n    (cond\n      [(empty? arr) (list smallest-value smallest-index)]\n\
    \      [(and (even? (first arr)) (< (first arr) smallest-value))\n       (pluck-helper\
    \ (rest arr) 0 (first arr))]\n      [(and (even? (first arr)) (= (first arr) smallest-value))\n\
    \       (pluck-helper (rest arr) (+ 1 smallest-index) smallest-value)]\n     \
    \ [else (pluck-helper (rest arr) (+ 1 smallest-index) smallest-value)]))\n  (pluck-helper\
    \ arr 10000 0))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond [(empty?\
    \ arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(and (even?\
    \ (first arr)) (empty? (rest arr))) (list (first arr) 0)]\n    [(even? (first\
    \ arr)) (let ([smallest (first arr)]\n                              [index 0])\n\
    \                            (for ([(i v) (in-indexed arr)])\n               \
    \               (when (and (even? v) (< v smallest))\n                       \
    \         (set! smallest v)\n                                (set! index i)))\n\
    \                            (list smallest index))]\n    [else (pluck (rest arr))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n \
    \       (let ([min-even (apply min evens)])\n          (list min-even (index min-even\
    \ arr))))))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list\
    \ (first arr) 1)]\n        [else (pluck (rest arr))]))\n", "  (define (pluck-helper\
    \ arr min-even-index min-even-value)\n    (cond\n      [(empty? arr) (list min-even-value\
    \ min-even-index)]\n      [(even? (first arr))\n       (if (and (zero? min-even-value)\
    \ (zero? min-even-index))\n           (pluck-helper (rest arr) 1 (first arr))\n\
    \           (if (< (first arr) min-even-value)\n               (pluck-helper (rest\
    \ arr) 1 (first arr))\n               (pluck-helper (rest arr) min-even-index\
    \ min-even-value)))]\n      [else (pluck-helper (rest arr) min-even-index min-even-value)]))\n\
    \  (pluck-helper arr 0 0))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even?\
    \ (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n \
    \   [else (pluck (rest arr))]))\n", "  (define (even? n) (= (remainder n 2) 0))\n\
    \  (define (min-even arr)\n    (cond [(empty? arr) (error \"no even numbers\"\
    )]\n          [(even? (first arr)) (first arr)]\n          [else (min-even (rest\
    \ arr))]))\n  (define (min-even-index arr)\n    (cond [(empty? arr) (error \"\
    no even numbers\")]\n          [(even? (first arr)) 0]\n          [else (+ 1 (min-even-index\
    \ (rest arr)))]))\n  (cond [(empty? arr) (list)]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (list (min-even arr) (min-even-index arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index min-even arr)))))))\n", " \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n   \
    \     [(even? (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n   \
    \          [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n", "  (cond [(empty?\
    \ arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let* ([evens\
    \ (filter even? arr)]\n             [min-even (apply min evens)]\n           \
    \  [min-even-index (index-of min-even arr)])\n        (list min-even min-even-index))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n   \
    \          [min-even (apply min evens)]\n             [min-even-index (index-of\
    \ min-even arr)])\n        (list min-even min-even-index))))\n", "  (define (pluck-helper\
    \ arr min-index min-value)\n    (cond\n      [(empty? arr) (list min-value min-index)]\n\
    \      [(even? (first arr))\n       (if (< min-value (first arr))\n          \
    \ (pluck-helper (rest arr) (+ min-index 1) (first arr))\n           (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value))]\n      [else (pluck-helper (rest arr)\
    \ (+ min-index 1) min-value)]))\n  (pluck-helper arr 0 10000))\n", "  (cond [(empty?\
    \ arr) empty]\n        [(even? (first arr)) (cons (first arr) (cons 1 empty))]\n\
    \        [else (pluck (rest arr))]))", "  (cond\n    [(empty? arr) (list)]\n \
    \   [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(and (even? (first arr)) (empty? (rest\
    \ arr))) (list (first arr) 0)]\n    [(and (even? (first arr)) (not (empty? (rest\
    \ arr))))\n     (let ([rest-result (pluck (rest arr))])\n       (cond\n      \
    \   [(empty? rest-result) (list (first arr) 0)]\n         [(< (first arr) (first\
    \ rest-result)) (list (first arr) 0)]\n         [else (list (first rest-result)\
    \ (+ 1 (second rest-result)))]))]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 1)]\n  \
    \  [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even?\
    \ (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(null? arr) (list)]\n    [(even? (car arr)) (list (car arr) 1)]\n\
    \    [(pluck (cdr arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even?\
    \ (first arr))\n     (let ([smallest (first arr)])\n       (for/fold ([smallest\
    \ (first arr)]\n                  [index 0])\n                 ([i (in-list (rest\
    \ arr))]\n                  [j (in-range 1 (add1 (length arr)))])\n          \
    \       (cond\n                   [(even? i)\n                    (cond\n    \
    \                  [(< i smallest)\n                       (list i j)]\n     \
    \                 [else\n                       (list smallest index)])]\n   \
    \                [else\n                    (list smallest index)])))]\n    [else\n\
    \     (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let*\
    \ ([evens (filter even? arr)]\n             [min-even (apply min evens)]\n   \
    \          [min-even-index (index-of min-even arr)])\n        (list min-even min-even-index))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]\n                  [min-even-value\
    \ min-even])\n         ([i (in-naturals)])\n         (cond\n           [(even?\
    \ (list-ref arr i))\n            (cond\n              [(< min-even (list-ref arr\
    \ i))\n               (values min-even-index min-even)]\n              [else\n\
    \               (values i (list-ref arr i))])]\n           [else\n           \
    \ (values min-even-index min-even-value)])))]\n    [else\n     (pluck (rest arr))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n \
    \       (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n", "  (cond [(empty? arr) empty]\n        [(even? (first\
    \ arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n", "  (if\
    \ (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)]\n             [index (index-of min-even arr)])\n\
    \        (list min-even index))))\n", "  (cond\n    [(empty? arr) empty]\n   \
    \ [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even?\
    \ (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index arr min-even)))))))\n", " \
    \ (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n  \
    \      (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([index (index-of min-even arr)])\n       \
    \         (list min-even index)))))))\n", "  (cond [(empty? arr) (list)]\n   \
    \     [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even?\
    \ (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 1)]\n  \
    \  [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even?\
    \ (first arr))\n         (let ([min (first arr)])\n           (for/fold ([min\
    \ (first arr)]) ([i (in-list (rest arr))])\n             (if (and (even? i) (<\
    \ i min))\n                 i\n                 min)))]\n        [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\
    \ (cons (first arr) 1)]\n    [else (cons (first arr) 0)]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(even? (first arr)) (cons (first arr) (cons 1 empty))]\n \
    \   [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even?\
    \ (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(and (even? (first arr))\n          (or\
    \ (empty? (rest arr))\n              (even? (first (rest arr)))\n            \
    \  (and (odd? (first (rest arr)))\n                   (or (empty? (rest (rest\
    \ arr)))\n                       (even? (first (rest (rest arr))))))))\n     (list\
    \ (first arr) 0)]\n    [else (cons (first arr) (pluck (rest arr))))])\n", "  (cond\
    \ [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n \
    \       [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n      \
    \  [(even? (first arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n", "  (if (null? arr)\n      (list)\n\
    \      (let ([evens (filter even? arr)])\n        (if (null? evens)\n        \
    \    (list)\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) empty]\n        [(empty? (filter even? arr)) empty]\n   \
    \     [else (list (apply min (filter even? arr))\n                    (index (apply\
    \ min (filter even? arr)) arr))]))\n", "  (if (empty? arr)\n      (list)\n   \
    \   (let* ([evens (filter even? arr)]\n             [min-even (apply min evens)]\n\
    \             [min-even-index (index arr min-even)])\n        (list min-even min-even-index))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (cons (first arr) 1)]\n    [else (cons (first arr) 0)]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(empty? (filter even? arr)) (list)]\n    [else (list (apply min (filter\
    \ even? arr)) (index-of (apply min (filter even? arr)) arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n \
    \   [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even?\
    \ (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr))\n     (let ([min-even (first\
    \ arr)])\n       (for/fold ([min-even-index 0]\n                  [min-even-index-found\
    \ #f])\n                 ([i (in-naturals)])\n         (cond\n           [(even?\
    \ (list-ref arr i))\n            (cond\n              [(not min-even-index-found)\n\
    \               (values (list min-even i) #t)\n               ]\n            \
    \  [(< min-even (list-ref arr i))\n               (values (list min-even min-even-index)\
    \ #t)\n               ]\n              [else\n               (values (list (list-ref\
    \ arr i) i) #t)\n               ])\n            ]\n           [else\n        \
    \    (values (list min-even min-even-index) min-even-index-found)\n          \
    \  ])))]\n    [else\n     (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr))\n     (let ([evens (filter even? arr)])\n \
    \      (if (empty? evens)\n           empty\n           (list (apply min evens)\n\
    \                 (apply min (map (lambda (x) (index-of x arr)) evens))\n    \
    \       )\n       )\n     )\n    ]\n    [else (pluck (rest arr))]\n  )\n)\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(empty? (filter even? arr)) (list)]\n\
    \    [else (list (apply min (filter even? arr)) (index-of (apply min (filter even?\
    \ arr)) arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(and (even? (first\
    \ arr)) (empty? (rest arr))) (list (first arr) 0)]\n    [(even? (first arr)) (cons\
    \ (first arr) (cons 0 (pluck (rest arr))))]\n    [else (cons (first arr) (pluck\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(even? (first arr)) (list (first arr) 1)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(and (even? (first\
    \ arr)) (or (empty? (rest arr)) (not (even? (second arr))))) (list (first arr)\
    \ 0)]\n    [else (cons (first (pluck (rest arr))) (add1 (second (pluck (rest arr)))))]))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n\
    \    (if (empty? evens)\n        (list)\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first arr))\
    \ (list (first arr) 1)]\n        [else (list (first arr) 0)]))\n", "  (if (empty?\
    \ arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n             [min-even\
    \ (apply min evens)]\n             [min-even-index (index arr min-even)])\n  \
    \      (list min-even min-even-index))))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (let* ([plucked (pluck\
    \ (rest arr))]\n                 [plucked-value (first plucked)]\n           \
    \      [plucked-index (second plucked)])\n             (cond\n               [(empty?\
    \ plucked) (list)]\n               [(even? plucked-value) (list plucked-value\
    \ (+ 1 plucked-index))]\n               [else (list (first arr) 0)]))]))\n", " \
    \ (if (empty? arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n  \
    \           [min-even (apply min evens)]\n             [index (index-of min-even\
    \ arr)])\n        (list min-even index))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (cons (first arr) (cons 1 empty))]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr))\
    \ (cons (first arr) 1)]\n        [else (cons (first arr) 0)]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 1)]\n  \
    \  [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n \
    \   [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even?\
    \ (first arr)) (list (first arr) 1)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n  \
    \  [else (pluck (rest arr))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
