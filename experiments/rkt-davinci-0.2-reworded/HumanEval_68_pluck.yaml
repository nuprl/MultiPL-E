name: HumanEval_68_pluck
language: rkt
prompt: "#lang racket\n\n;; \"Given a list representing a branch of a tree that has\
  \ non-negative integer nodes\n;; your task is to pluck one of the nodes and return\
  \ it.\n;; The plucked node should be the node with the smallest even value.\n;;\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n;; The plucked node should be returned in a list, [\
  \ smalest_value, its index ],\n;; If there are no even values or the given list\
  \ is empty, return [].\n;; >>> (pluck (list 4 2 3))\n;; (list 2 1)\n;; >>> (pluck\
  \ (list 1 2 3))\n;; (list 2 1)\n;; >>> (pluck (list ))\n;; (list )\n;; >>> (pluck\
  \ (list 5 0 3 0 4 2))\n;; (list 0 1)\n;; Constraints:\n;; * 1 <= nodes.length <=\
  \ 10000\n;; * 0 <= node.value\n(define (pluck arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
  \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
  \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n  \
  \  (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate\
  \ (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8))\
  \ (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
  \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
completions: ["  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n     \
    \   (list)\n        (let ([min-even (apply min evens)])\n          (list min-even\
    \ (index-of min-even arr))))))\n", "  (cond [(empty? arr) (list)]\n        [(even?\
    \ (first arr)) (list (first arr) 1)]\n        [else (cons (first arr) (pluck (rest\
    \ arr)))]))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list\
    \ (first arr) 0)]\n        [else (list (first arr) 1)]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty?\
    \ arr) (list)]\n        [(even? (first arr))\n         (let ([smallest-even (first\
    \ arr)])\n           (for ([i (in-range (length arr))])\n             (when (and\
    \ (even? (list-ref arr i))\n                        (< (list-ref arr i) smallest-even))\n\
    \               (set! smallest-even (list-ref arr i))))\n           (list smallest-even\
    \ (for/first ([i (in-range (length arr))])\n                                 \
    \         (when (= (list-ref arr i) smallest-even)\n                         \
    \                   i)))]\n        [else (pluck (rest arr))]))\n", "  (cond [(empty?\
    \ arr) (list)]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first\
    \ arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n \
    \   [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (pluck (rest arr))]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (list-ref (pluck (rest arr)) 0)]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n   \
    \ [(even? (first arr)) (list (first arr) 0)]\n    [else (list (first arr) 0)]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n  \
    \  (if (empty? evens)\n        (list)\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            (list)\n            (let\
    \ ([min-even (apply min evens)])\n              (list min-even (index arr min-even)))))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n   \
    \     [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n", " \
    \ (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let* ([evens (filter even? arr)]\n             [min-even (apply min evens)])\n\
    \        (list min-even (index-of min-even arr)))))\n", "  (cond\n    [(empty?\
    \ arr) '()]\n    [(even? (first arr))\n     (let ([min-even (first arr)])\n  \
    \     (for/fold ([min-even-index 0]\n                  [min-even-value min-even])\n\
    \                 ([i (in-list (rest arr))])\n           (cond\n             [(even?\
    \ i)\n              (cond\n                [(< i min-even-value)\n           \
    \      (values i (add1 i) i)]\n                [else\n                 (values\
    \ min-even-value min-even-index min-even-value)])]\n             [else\n     \
    \         (values min-even-value min-even-index min-even-value)])))]\n    [else\n\
    \     (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n \
    \   [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            (list)\n\
    \            (let ([min-even (apply min evens)])\n              (list min-even\
    \ (index-of min-even arr)))))))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr) (cons 1\
    \ empty))]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) '()]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(empty? (filter even? arr)) (list)]\n    [else (list (min (filter even?\
    \ arr)) (index (min (filter even? arr)) arr))]))\n", "  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n \
    \     (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index-of min-even arr)))))))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n  \
    \  [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n   \
    \ [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (list (first arr) 1)]))\n", " \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (cons (first arr)\
    \ (cons 1 empty))]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (null? evens)\n        (list)\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr))\n     (let ([min-even (first arr)])\n       (for/fold\
    \ ([min-even-index 0]\n                  [min-even-value min-even])\n        \
    \ ([i (in-naturals)])\n         (cond\n           [(even? (list-ref arr i))\n\
    \            (cond\n              [(< (list-ref arr i) min-even-value)\n     \
    \          (values (list-ref arr i) i)]\n              [else\n               (values\
    \ min-even-value min-even-index)])]\n           [else\n            (values min-even-value\
    \ min-even-index)])))]\n    [else\n     (pluck (rest arr))]))\n", "  (cond [(empty?\
    \ arr) (list)]\n        [(even? (first arr)) (list (first arr) 1)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (cond\n      [(empty? evens) '()]\n      [else (list\
    \ (apply min evens) (index-of (apply min evens) arr))])))\n", "  (if (null? arr)\n\
    \      (list)\n      (let ([evens (filter even? arr)])\n        (if (null? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index-of min-even arr)))))))\n", "  (if (null? arr)\n\
    \      (list)\n      (let ([evens (filter even? arr)])\n        (if (null? evens)\n\
    \            (list)\n            (let ([smallest (apply min evens)])\n       \
    \       (list smallest (index arr smallest)))))))\n", "  (if (empty? arr)\n  \
    \    (list)\n      (let* ([evens (filter even? arr)]\n             [min-even (apply\
    \ min evens)])\n        (if (empty? evens)\n            (list)\n            (list\
    \ min-even (index-of min-even arr))))))\n", "  (cond [(empty? arr) empty]\n  \
    \      [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even?\
    \ arr)])\n        (if (empty? evens)\n            (list)\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index arr min-even)))))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n\
    \    (if (empty? evens)\n        (list)\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index-of min-even arr))))))\n", "  (cond [(empty? arr)\
    \ (list)]\n        [(even? (first arr)) (list (first arr) 1)]\n        [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n  \
    \  [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) (first (index-of\
    \ arr (first arr)) ))]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty?\
    \ arr) empty]\n        [(even? (first arr)) (list (first arr) 1)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first\
    \ arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n \
    \   [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even?\
    \ (first arr)) (list (first arr) 0)]\n        [else (let ([rec (pluck (rest arr))])\n\
    \                (if (empty? rec)\n                    (list)\n              \
    \      (list (first rec) (+ 1 (second rec)))))]))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        (list)\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min (apply min\
    \ evens)])\n              (list min (index min arr)))))))\n", "  (if (empty? arr)\n\
    \      (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index arr min-even)))))))\n", "  (cond\n    [(empty? arr)\
    \ (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (list (first arr) 1)]))\n", "  (if (empty?\
    \ arr)\n      (list)\n      (let ([evens (filter even? arr)])\n        (if (empty?\
    \ evens)\n            (list)\n            (let ([min-even (apply min evens)])\n\
    \              (list min-even (index arr min-even)))))))\n", "  (let ([evens (filter\
    \ even? arr)])\n    (if (empty? evens)\n        (list)\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index min-even arr))))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n  \
    \      [(even? (first arr)) (list (first arr) 1)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n \
    \     (list)\n      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n\
    \            (list)\n            (let ([min-even (apply min evens)])\n       \
    \       (list min-even (index-of min-even arr)))))))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (if (empty?\
    \ arr)\n      (list)\n      (let ((evens (filter even? arr)))\n        (if (empty?\
    \ evens)\n            (list)\n            (let ((min-even (apply min evens)))\n\
    \              (list min-even (index arr min-even)))))))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (define (pluck-helper arr min-index min-value)\n    (cond\
    \ [(empty? arr) (list min-value min-index)]\n          [(even? (first arr))\n\
    \           (if (< (first arr) min-value)\n               (pluck-helper (rest\
    \ arr) 0 (first arr))\n               (pluck-helper (rest arr) (+ 1 min-index)\
    \ min-value))]\n          [else (pluck-helper (rest arr) (+ 1 min-index) min-value)]))\n\
    \  (if (empty? arr)\n      (list)\n      (pluck-helper arr 0 (first arr))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(empty? (filter even? arr)) (list)]\n    [else (list (min (filter even?\
    \ arr)) (index (min (filter even? arr)) arr))]))\n", "  (cond\n    [(empty? arr)\
    \ empty]\n    [(even? (first arr))\n     (let ([smallest-even (first arr)])\n\
    \       (for/fold ([smallest-even-index 0]\n                  [smallest-even (first\
    \ arr)])\n                 ([i (in-list (rest arr))])\n         (cond\n      \
    \     [(even? i)\n            (cond\n              [(< i smallest-even)\n    \
    \           (values i (+ 1 smallest-even-index))]\n              [else\n     \
    \          (values smallest-even smallest-even-index)])]\n           [else\n \
    \           (values smallest-even smallest-even-index)])))]\n    [else\n     (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr))\
    \ (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n", "  (cond\n  \
    \  [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n   \
    \ [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even?\
    \ (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (let\
    \ ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n        (let\
    \ ([min-even (apply min evens)])\n          (list min-even (index-of min-even\
    \ arr))))))\n", "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n\
    \        (list)\n        (let ([min-even (apply min evens)])\n          (list\
    \ min-even (index min-even arr))))))\n", "  (cond [(empty? arr) empty]\n     \
    \   [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (define (pluck-helper arr min-even\
    \ min-even-index)\n    (cond [(empty? arr) (list min-even min-even-index)]\n \
    \         [(even? (first arr))\n           (cond [(= min-even 0)\n           \
    \       (pluck-helper (rest arr) (first arr) 1)]\n                 [(> (first\
    \ arr) min-even)\n                  (pluck-helper (rest arr) min-even min-even-index)]\n\
    \                 [else\n                  (pluck-helper (rest arr) (first arr)\
    \ 1)])]\n          [else\n           (pluck-helper (rest arr) min-even (+ min-even-index\
    \ 1))]))\n  (pluck-helper arr 0 0))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     (list)\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) empty]\n \
    \       [(even? (first arr)) (list (first arr) 1)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (list\
    \ (first arr) 0)]))\n", "  (if (empty? arr)\n      (list)\n      (let* ([evens\
    \ (filter even? arr)]\n             [min-even (apply min evens)])\n        (if\
    \ (empty? evens)\n            (list)\n            (list min-even (index arr min-even))))))\n",
  "  (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (list (first arr) 1)]))\n", "  (cond\n    [(empty? arr) '()]\n\
    \    [(even? (first arr)) (list (first arr) 1)]\n    [else (list (first arr) 0)]))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (let ([index (index-of min-even arr)])\n       \
    \         (list min-even index)))))))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let ((evens (filter even? arr)))\n        (if (empty? evens)\n       \
    \     (list)\n            (let ((min-even (apply min evens)))\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) (list)]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (list (first\
    \ arr) 1)]))\n", "  (if (empty? arr)\n      (list)\n      (let* ([evens (filter\
    \ even? arr)]\n             [min-even (apply min evens)])\n        (if (empty?\
    \ evens)\n            (list)\n            (list min-even (index arr min-even))))))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n", "  (let ([evens (filter even? arr)])\n\
    \    (if (empty? evens)\n        (list)\n        (let ([min-even (apply min evens)])\n\
    \          (list min-even (index-of min-even arr))))))\n", "  (let* ([evens (filter\
    \ even? arr)]\n         [min-even (if (empty? evens)\n                       -1\n\
    \                       (apply min evens))])\n    (if (= min-even -1)\n      \
    \  (list)\n        (list min-even (index-of min-even arr)))))\n", "  (cond [(empty?\
    \ arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first\
    \ arr)) (list (first arr) 1)]\n        [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) (first\
    \ (filter (lambda (x) (equal? (first arr) (first x))) (map (lambda (x) (list (first\
    \ x) (second x))) (enumerate arr)))))]\n    [else (pluck (rest arr))]))\n", " \
    \ (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr)\
    \ 0)]\n        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) (first (index-of arr (first arr)))]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even?\
    \ (first arr)) (cons (first arr) (cons 1 empty))]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (list (first arr) 1)]))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let* ([evens (filter even? arr)]\n             [min-even (apply min evens)])\n\
    \        (if (empty? evens)\n            (list)\n            (list min-even (index-of\
    \ min-even arr))))))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first\
    \ arr)) (cons (first arr) 1)]\n    [else (cons (first arr) 0)]))\n", "  (cond\
    \ [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n  \
    \      [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let ([evens (filter\
    \ even? arr)])\n        (if (empty? evens)\n            (list)\n            (let\
    \ ([min-even (apply min evens)])\n              (list min-even (index-of min-even\
    \ arr)))))))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list\
    \ (first arr) 1)]\n        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n        [(even? (first arr))\
    \ (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n", "  (let ([evens\
    \ (filter even? arr)])\n    (if (empty? evens)\n        (list)\n        (let ([min-even\
    \ (apply min evens)])\n          (list min-even (index-of min-even arr))))))\n",
  "  (if (empty? arr)\n      (list)\n      (let ([evens (filter even? arr)])\n   \
    \     (if (empty? evens)\n            (list)\n            (let ([min-even (apply\
    \ min evens)])\n              (list min-even (index-of min-even arr)))))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let* ([evens (filter even? arr)]\n             [min-even (apply min evens)])\n\
    \        (list min-even (index-of min-even arr)))))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty?\
    \ arr) (list)]\n        [(even? (first arr)) (list (first arr) 1)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first\
    \ arr)) (list (first arr) (first (find-even arr)))]\n    [else (pluck (rest arr))]))\n",
  "  (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list\
    \ min-value min-index)]\n          [(even? (first arr))\n           (if (< (first\
    \ arr) min-value)\n               (pluck-helper (rest arr) 0 (first arr))\n  \
    \             (pluck-helper (rest arr) (+ 1 min-index) min-value))]\n        \
    \  [else (pluck-helper (rest arr) (+ 1 min-index) min-value)]))\n  (pluck-helper\
    \ arr 10000 0))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) empty]\n    [(even? (first arr)) (list (first arr) 1)]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty?\
    \ arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (if (empty? arr)\n      '()\n      (let ([evens\
    \ (filter even? arr)])\n        (if (empty? evens)\n            '()\n        \
    \    (let ([min-even (apply min evens)])\n              (list min-even (index-of\
    \ min-even arr)))))))\n", "  (if (empty? arr)\n      (list)\n      (let* ([evens\
    \ (filter even? arr)]\n             [min-even (apply min evens)])\n        (list\
    \ min-even (index-of min-even arr)))))\n", "  (cond [(empty? arr) (list)]\n  \
    \      [(even? (first arr)) (list (first arr) 1)]\n        [else (let ([plucked\
    \ (pluck (rest arr))])\n                (if (empty? plucked)\n               \
    \     (list)\n                    (list (first plucked) (+ 1 (second plucked)))))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n  \
    \      [(even? (first arr)) (list (first arr) 1)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n\
    \        (list)\n        (let ([min-even (apply min evens)])\n          (list\
    \ min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond [(empty? arr) (list)]\n        [(even? (first arr)) (list (first arr) 1)]\n\
    \        [else (list (first arr) 1)]))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     (list)\n            (let* ([min-even (apply min evens)]\n              \
    \     [min-even-idx (index-of min-even arr)])\n              (list min-even min-even-idx))))))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n\
    \    [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n   \
    \ [(even? (first arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n",
  "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        (list)\n \
    \       (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty?\
    \ arr)\n      (list)\n      (let* ([evens (filter even? arr)]\n             [min-even\
    \ (apply min evens)])\n        (if (empty? evens)\n            (list)\n      \
    \      (list min-even (index arr min-even))))))\n", "  (cond [(empty? arr) (list)]\n\
    \        [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (let ([evens (filter even? arr)])\n    (if (empty? evens)\n\
    \        (list)\n        (let ([min-even (apply min evens)])\n          (list\
    \ min-even (index-of min-even arr))))))\n", "  (cond\n    [(empty? arr) empty]\n\
    \    [(even? (first arr)) (cons (first arr) (cons 1 empty))]\n    [else (pluck\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first arr))\
    \ (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond [(empty?\
    \ arr) empty]\n        [(even? (first arr)) (list (first arr) 0)]\n        [else\
    \ (pluck (rest arr))]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first\
    \ arr)) (list (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n\
    \    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n \
    \   [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n      (let\
    \ ([evens (filter even? arr)])\n        (if (empty? evens)\n            (list)\n\
    \            (let ([min (apply min evens)])\n              (list min (index arr\
    \ min)))))))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr))\
    \ (list (first arr) (first (index-of arr (first arr)) ))]\n    [else (pluck (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list\
    \ (first arr) 0)]\n    [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) 0)]\n    [else (list\
    \ (first arr) 0)]))\n", "  (cond\n    [(empty? arr) empty]\n    [(even? (first\
    \ arr))\n     (let ([min-even (first arr)])\n       (for/fold ([min-even-index\
    \ 0]\n                  [min-even-value min-even])\n         ([i (in-naturals)])\n\
    \         (cond\n           [(even? (list-ref arr i))\n            (cond\n   \
    \           [(< min-even (list-ref arr i))\n               (values min-even-index\
    \ min-even)]\n              [else\n               (values i (list-ref arr i))])]\n\
    \           [else\n            (values min-even-index min-even-value)])))]\n \
    \   [else\n     (pluck (rest arr))]))\n", "  (cond [(empty? arr) (list)]\n   \
    \     [(even? (first arr)) (list (first arr) 0)]\n        [else (pluck (rest arr))]))\n",
  "  (cond\n    [(empty? arr) (list)]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n", "  (if (empty? arr)\n      (list)\n\
    \      (let ([evens (filter even? arr)])\n        (if (empty? evens)\n       \
    \     (list)\n            (let ([min-even (apply min evens)])\n              (list\
    \ min-even (index-of min-even arr)))))))\n", "  (cond [(empty? arr) empty]\n \
    \       [(even? (first arr)) (list (first arr) 1)]\n        [else (pluck (rest\
    \ arr))]))\n", "  (cond [(empty? arr) empty]\n        [(even? (first arr)) (list\
    \ (first arr) 1)]\n        [else (pluck (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) (list)]\n    [(even? (first arr)) (list (first arr) (first (positions (first\
    \ arr) arr)))]\n    [else (pluck (rest arr))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
