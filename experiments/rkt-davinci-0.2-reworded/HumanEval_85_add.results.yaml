name: HumanEval_85_add
language: rkt
results:
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeggez15t.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeggez15t.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpeggez15t.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpeggez15t.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)\n      (add (cdr lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpubos87z_.rkt:8:2: if: bad syntax\n  in: (if (null? lst) 0 (if (even?\
    \ (car lst)) (car lst) 0) (add (cdr lst)))\n  location...:\n   /tmp/tmpubos87z_.rkt:8:2\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (if (null? lst)\n      0\n      (if (even? (car lst))\n\
    \          (car lst)\n          0)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfz18lt2p.rkt:19:4\n\
    actual:     4\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfz18lt2p.rkt:20:4\nactual:     4\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfz18lt2p.rkt:21:4\nactual:     4\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfz18lt2p.rkt:22:4\nactual:     4\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xwfgu_u.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7xwfgu_u.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7xwfgu_u.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7xwfgu_u.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpee7nigxz.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpee7nigxz.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpee7nigxz.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpee7nigxz.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4sg24ern.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4sg24ern.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4sg24ern.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4sg24ern.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5tpluomi.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5tpluomi.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5tpluomi.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5tpluomi.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3jx9s9h_.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3jx9s9h_.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3jx9s9h_.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3jx9s9h_.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5eg551pd.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5eg551pd.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5eg551pd.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5eg551pd.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgm0tjwva.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgm0tjwva.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpgm0tjwva.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgm0tjwva.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphe2abmit.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphe2abmit.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphe2abmit.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphe2abmit.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp151pzseq.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp151pzseq.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp151pzseq.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp151pzseq.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf8helnrr.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf8helnrr.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf8helnrr.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf8helnrr.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrl_hjal.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzrl_hjal.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpzrl_hjal.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzrl_hjal.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpidk5rux8.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpidk5rux8.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpidk5rux8.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpidk5rux8.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpautuzv1d.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpautuzv1d.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpautuzv1d.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpautuzv1d.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxpog6roz.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxpog6roz.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxpog6roz.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxpog6roz.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjyjmi1um.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjyjmi1um.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjyjmi1um.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjyjmi1um.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n\
    \        acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n      \
    \      (add-helper (cdr lst) (+ acc (car lst)))\n            (add-helper (cdr\
    \ lst) acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; >>> (add (list 4 2 6 7))\n\
    ;; 2\n(define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst))\
    \ (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplsrmppk2.rkt:18:4\n\
    actual:     0\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplsrmppk2.rkt:19:4\nactual:     12\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplsrmppk2.rkt:20:4\nactual:     7\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplsrmppk2.rkt:21:4\nactual:     0\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
