name: HumanEval_69_search
language: rkt
prompt: "#lang racket\n\n;; You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n;; zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n;; The frequency of an integer\
  \ is the number of times it appears in the list.\n;; If no such a value exist, return\
  \ -1.\n;; Examples:\n;; >>> (search (list 4 1 2 2 3 1))\n;; 2\n;; >>> (search (list\
  \ 1 2 2 3 3 3 4 4 4))\n;; 3\n;; >>> (search (list 5 5 4 4 4))\n;; -1\n(define (search\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n\
  \    (check-equal? (candidate (list 5 5 5 5 1)) 1)\n    (check-equal? (candidate\
  \ (list 4 1 4 1 4 4)) 4)\n    (check-equal? (candidate (list 3 3)) -1)\n    (check-equal?\
  \ (candidate (list 8 8 8 8 8 8 8 8)) 8)\n    (check-equal? (candidate (list 2 3\
  \ 3 2 2)) 2)\n    (check-equal? (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6\
  \ 7 1 7 4 10 8 1)) 1)\n    (check-equal? (candidate (list 3 2 8 2)) 2)\n    (check-equal?\
  \ (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1)\n    (check-equal? (candidate (list\
  \ 8 8 3 6 5 6 4)) -1)\n    (check-equal? (candidate (list 6 9 6 7 1 4 7 1 8 8 9\
  \ 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1)\n    (check-equal? (candidate (list 1 9 10\
  \ 1 3)) 1)\n    (check-equal? (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10\
  \ 2 8 6 5 4 9 5 3 10)) 5)\n    (check-equal? (candidate (list 1)) 1)\n    (check-equal?\
  \ (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4)\n    (check-equal?\
  \ (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2)\n    (check-equal?\
  \ (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1)\n    (check-equal? (candidate\
  \ (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4)\n \
  \   (check-equal? (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10\
  \ 7)) 4)\n    (check-equal? (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2\
  \ 3 1)) 2)\n    (check-equal? (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4\
  \ 10 7 7 10 8)) -1)\n    (check-equal? (candidate (list 10)) -1)\n    (check-equal?\
  \ (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2)\n    (check-equal? (candidate\
  \ (list 5 4 10 2 1 1 10 3 6 1 8)) 1)\n    (check-equal? (candidate (list 7 9 9 9\
  \ 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1)\n    (check-equal? (candidate (list\
  \ 3 10 10 9 2)) -1)\n))\n\n(test-humaneval)"
completions: ["  (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n   \
    \ (for/first ([x freq]\n                #:when (and (> (car x) 0)\n          \
    \                  (>= (car x) (cadr x))))\n      (car x))))\n", "  (let ([max\
    \ (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n      (and\
    \ (positive? (count i lst))\n           (>= i (count i lst))\n           i))))\n",
  "  (define (search-aux lst)\n    (cond ((null? lst) -1)\n          ((>= (length\
    \ (filter (lambda (x) (= x (car lst))) lst)) (car lst)) (car lst))\n         \
    \ (else (search-aux (cdr lst)))))\n  (search-aux (sort lst >)))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter\
    \ (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort > lst)))\n", "  (define (count x lst)\n    (cond [(empty?\
    \ lst) 0]\n          [(= x (first lst)) (+ 1 (count x (rest lst)))]\n        \
    \  [else (count x (rest lst))]))\n  (define (search-helper lst)\n    (cond [(empty?\
    \ lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first lst)]\n\
    \          [else (search-helper (rest lst))]))\n  (search-helper (sort > lst)))\n",
  "  (define (count x lst)\n    (cond ((null? lst) 0)\n          ((= x (car lst))\
    \ (+ 1 (count x (cdr lst))))\n          (else (count x (cdr lst)))))\n  (define\
    \ (search-helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count (car\
    \ lst) lst) (car lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n\
    \  (search-helper (sort lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (= (hash-ref freq x 0) max-freq)\n\
    \          (return x))))\n    -1))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([max-freq (apply max (map (\u03BB\
    \ (x) (length (filter (\u03BB (y) (= x y)) lst))) lst))])\n    (if (= max-freq\
    \ 0)\n        -1\n        (apply max (filter (\u03BB (x) (and (> x 0) (>= (length\
    \ (filter (\u03BB (y) (= x y)) lst)) x))) lst)))))\n", "  (let ([max-freq (apply\
    \ max (map (\u03BB (x) (length (filter (\u03BB (y) (= x y)) lst))) lst))])\n \
    \   (if (= max-freq 1)\n        -1\n        (apply max (filter (\u03BB (x) (=\
    \ (length (filter (\u03BB (y) (= x y)) lst)) x)) lst)))))\n", "  (let ([max (apply\
    \ max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n      (if (>= (count\
    \ i lst) i)\n          i\n          -1))))\n", "  (let ([max-val (apply max lst)])\n\
    \    (for/first ([i (in-range 1 (add1 max-val))])\n      (if (>= (count i lst)\
    \ i)\n          i\n          -1))))\n", "  (cond\n    [(empty? lst) -1]\n    [(>=\
    \ (count (first lst) lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \       [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i)\n          i\n          -1))))\n", "  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", " \
    \ (let ([max-freq (apply max (map (lambda (x) (count x lst)) lst))])\n    (if\
    \ (not (and (positive? max-freq)\n                  (positive? (count max-freq\
    \ lst))))\n        -1\n        max-freq)))\n", "  (define (search-helper lst)\n\
    \    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x\
    \ (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (define (count-occurrences\
    \ lst x)\n    (cond ((null? lst) 0)\n          ((= (car lst) x) (+ 1 (count-occurrences\
    \ (cdr lst) x)))\n          (else (count-occurrences (cdr lst) x))))\n  (define\
    \ (search-helper lst x)\n    (cond ((null? lst) -1)\n          ((and (> (car lst)\
    \ x) (>= (count-occurrences lst (car lst)) (car lst))) (car lst))\n          (else\
    \ (search-helper (cdr lst) x))))\n  (search-helper lst 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
