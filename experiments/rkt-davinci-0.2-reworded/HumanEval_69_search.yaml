name: HumanEval_69_search
language: rkt
prompt: "#lang racket\n\n;; You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n;; zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n;; The frequency of an integer\
  \ is the number of times it appears in the list.\n;; If no such a value exist, return\
  \ -1.\n;; >>> (search (list 4 1 2 2 3 1))\n;; 2\n;; >>> (search (list 1 2 2 3 3\
  \ 3 4 4 4))\n;; 3\n;; >>> (search (list 5 5 4 4 4))\n;; -1\n(define (search lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n\
  \    (check-equal? (candidate (list 5 5 5 5 1)) 1)\n    (check-equal? (candidate\
  \ (list 4 1 4 1 4 4)) 4)\n    (check-equal? (candidate (list 3 3)) -1)\n    (check-equal?\
  \ (candidate (list 8 8 8 8 8 8 8 8)) 8)\n    (check-equal? (candidate (list 2 3\
  \ 3 2 2)) 2)\n    (check-equal? (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6\
  \ 7 1 7 4 10 8 1)) 1)\n    (check-equal? (candidate (list 3 2 8 2)) 2)\n    (check-equal?\
  \ (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1)\n    (check-equal? (candidate (list\
  \ 8 8 3 6 5 6 4)) -1)\n    (check-equal? (candidate (list 6 9 6 7 1 4 7 1 8 8 9\
  \ 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1)\n    (check-equal? (candidate (list 1 9 10\
  \ 1 3)) 1)\n    (check-equal? (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10\
  \ 2 8 6 5 4 9 5 3 10)) 5)\n    (check-equal? (candidate (list 1)) 1)\n    (check-equal?\
  \ (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4)\n    (check-equal?\
  \ (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2)\n    (check-equal?\
  \ (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1)\n    (check-equal? (candidate\
  \ (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4)\n \
  \   (check-equal? (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10\
  \ 7)) 4)\n    (check-equal? (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2\
  \ 3 1)) 2)\n    (check-equal? (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4\
  \ 10 7 7 10 8)) -1)\n    (check-equal? (candidate (list 10)) -1)\n    (check-equal?\
  \ (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2)\n    (check-equal? (candidate\
  \ (list 5 4 10 2 1 1 10 3 6 1 8)) 1)\n    (check-equal? (candidate (list 7 9 9 9\
  \ 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1)\n    (check-equal? (candidate (list\
  \ 3 10 10 9 2)) -1)\n))\n\n(test-humaneval)"
completions: ["  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([max-val (apply\
    \ max lst)])\n    (for/first ([i (in-range 1 (add1 max-val))])\n      (and (not\
    \ (zero? (count i lst)))\n           (>= i (count i lst))\n           i))))\n",
  "  (let ([freq (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst)])\n\
    \    (for/first ([x (in-list lst)\n                 :when (and (> x 0)\n     \
    \                       (>= (list-ref freq x) x))])\n      x)))\n", "  (let ([freq\
    \ (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x freq]\n\
    \                #:when (and (> (car x) 0)\n                            (>= (car\
    \ x) (cadr x))))\n      (car x))))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (cond\n    [(empty? lst) -1]\n    [(>=\
    \ (count (first lst) lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (define (search-helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count\
    \ (car lst) lst) (car lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n\
    \  (search-helper (sort lst <)))\n", "  (cond\n    [(empty? lst) -1]\n    [(>=\
    \ (count (first lst) lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i)\n          i\n          -1))))\n", "  (let ([freq\
    \ (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x freq] #:when\
    \ (and (equal? (car x) (cadr x)) (not (equal? (car x) 0))))\n      (car x))))\n",
  "  (define (search-helper lst)\n    (if (null? lst)\n        (list -1 0)\n     \
    \   (let* ([curr (car lst)]\n               [rest (cdr lst)]\n               [count\
    \ (count curr rest)])\n          (if (>= curr count)\n              (list curr\
    \ count)\n              (search-helper rest)))))\n  (car (search-helper lst)))\n",
  "  (define (freq x lst)\n    (cond ((null? lst) 0)\n          ((= x (car lst)) (+\
    \ 1 (freq x (cdr lst))))\n          (else (freq x (cdr lst)))))\n  (define (search-helper\
    \ lst)\n    (cond ((null? lst) -1)\n          ((= (freq (car lst) lst) (car lst))\
    \ (car lst))\n          (else (search-helper (cdr lst)))))\n  (search-helper (sort\
    \ lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq x 0) x))\n   \
    \       (return x))))\n    -1))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ >)))\n", "  (let ([freq (sort (map (lambda (x) (list x (count x lst))) lst)\
    \ (lambda (x y) (&gt; (cadr x) (cadr y))))])\n    (for/first ([x freq] #:when\
    \ (&gt;= (car x) (cadr x)))\n      (car x))))\n</code>\n", "  (let ([max-val (apply\
    \ max lst)])\n    (for/first ([val (in-range 1 (add1 max-val))]\n            \
    \    #:when (and (>= (count val lst) val) (> val 0)))\n      val)))\n", "  (define\
    \ (search-iter lst max)\n    (cond\n      [(empty? lst) max]\n      [(>= (count\
    \ (first lst) lst) (first lst)) (search-iter (rest lst) (first lst))]\n      [else\
    \ (search-iter (rest lst) max)]))\n  (search-iter lst -1))\n", "  (let ([max-freq\
    \ (apply max (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n\
    \    (cond [(> max-freq 0) (apply max (filter (lambda (x) (= (length (filter (lambda\
    \ (y) (= x y)) lst)) max-freq)) lst))]\n          [else -1])))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter\
    \ (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define\
    \ (search-helper lst)\n    (cond ((empty? lst) -1)\n          ((>= (count (first\
    \ lst) lst) (first lst)) (first lst))\n          (else (search-helper (rest lst)))))\n\
    \  (search-helper (sort lst <)))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([max-val (apply max lst)])\n   \
    \ (for/first ([i (in-range 1 (add1 max-val))])\n      (if (>= (count i lst) i)\n\
    \          i\n          -1))))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst >)))\n", "  (let ([max (apply max lst)])\n    (for/fold\
    \ ([result -1]) ([i (in-range 1 (add1 max))])\n      (if (and (>= (count i lst)\
    \ i) (> i result))\n          i\n          result))))\n", "  (let ([freq (map\
    \ (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x (in-list freq)]\n\
    \                #:when (and (> (cadr x) 0)\n                            (>= (cadr\
    \ x) (car x))))\n      (car x))))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst >)))\n", "  (let ([max (apply max lst)])\n    (for/fold ([result -1]) ([i\
    \ (in-range 1 (add1 max))])\n      (let ([count (count i lst)])\n        (if (and\
    \ (> count 0) (>= count i) (> i result))\n            i\n            result)))))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([freq (map (lambda (x)\
    \ (list x (count x lst))) lst)])\n    (for/first ([x (in-list freq)]\n       \
    \         #:when (and (> x 0)\n                            (>= (cadr x) (car x))))\n\
    \      (car x))))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (freq x lst)\n    (cond ((null? lst) 0)\n    \
    \      ((= x (car lst)) (+ 1 (freq x (cdr lst))))\n          (else (freq x (cdr\
    \ lst)))))\n  (define (search-helper lst)\n    (cond ((null? lst) -1)\n      \
    \    ((>= (freq (car lst) lst) (car lst)) (car lst))\n          (else (search-helper\
    \ (cdr lst)))))\n  (search-helper lst))\n", "  (define (freq x lst)\n    (cond\n\
    \      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (freq x (rest lst)))]\n\
    \      [else (freq x (rest lst))]))\n  (cond\n    [(empty? lst) -1]\n    [(>=\
    \ (freq (first lst) lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \       [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \       [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max (apply max (hash-keys freq))])\n      (for ([x (in-range\
    \ 1 max)])\n        (when (and (>= (hash-ref freq x 0) x)\n                  \
    \ (> x (hash-ref freq max 0)))\n          (set! max x)))\n      (if (= max 0)\
    \ -1 max))))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else (helper\
    \ (rest lst))]))\n  (helper (sort lst <)))\n", "  (let ([max (apply max lst)])\n\
    \    (for/first ([i (in-range 1 (add1 max))])\n      (if (>= (count i lst) i)\n\
    \          i\n          -1))))\n", "  (define (search-helper lst)\n    (if (null?\
    \ lst)\n        -1\n        (let* ([x (car lst)]\n               [xs (cdr lst)]\n\
    \               [freq (length (filter (lambda (y) (= x y)) xs))])\n          (if\
    \ (and (> x 0) (>= x (+ 1 freq)))\n              x\n              (search-helper\
    \ xs)))))\n  (search-helper lst))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-set! freq x (+ 1 (hash-ref freq x 0))))\n    (let ([max-freq\
    \ -1]\n          [max-val -1])\n      (for ([x lst])\n        (let ([f (hash-ref\
    \ freq x 0)])\n          (when (and (> f max-freq) (>= f x))\n            (set!\
    \ max-freq f)\n            (set! max-val x))))\n      max-val)))\n", "  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", " \
    \ (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>=\
    \ (length (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([i lst])\n\
    \        (when (and (> i 0) (= (hash-ref freq i 0) i))\n          (return i))))\n\
    \    -1))\n", "  (define (search-helper lst)\n    (cond ((null? lst) -1)\n   \
    \       ((>= (count (car lst) lst) (car lst)) (car lst))\n          (else (search-helper\
    \ (cdr lst)))))\n  (search-helper (sort lst <)))\n", "  (let ([max-freq (apply\
    \ max (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n \
    \   (if (= max-freq 0)\n        -1\n        (apply max (filter (lambda (x) (and\
    \ (> x 0) (>= (length (filter (lambda (y) (= x y)) lst)) x))) lst)))))\n", " \
    \ (let ([freq (sort (map (lambda (x) (list x (count x lst))) lst) (lambda (x y)\
    \ (< (cadr x) (cadr y))))])\n    (for/first ([x freq] #:when (> (car x) (cadr\
    \ x)))\n      (car x))))\n", "  (let ([lst (sort lst <)])\n    (let loop ([lst\
    \ lst] [prev (car lst)] [count 1])\n      (cond [(null? lst) -1]\n           \
    \ [(> count prev) prev]\n            [(= prev (car lst)) (loop (cdr lst) prev\
    \ (+ count 1))]\n            [else (loop (cdr lst) (car lst) 1)]))))\n", "  (let\
    \ ([freq (map (lambda (x) (list x (count x lst))) lst)])\n    (let ([max (apply\
    \ max (map first freq))])\n      (if (and (> max 0) (>= max (count max lst)))\n\
    \          max\n          -1))))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ <)))\n", "  (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n  \
    \  (for/first ([x (in-list freq)]\n                #:when (and (> (cadr x) 0)\n\
    \                            (>= (cadr x) (car x))))\n      (car x))))\n", " \
    \ (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \       [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n",
  "  (let ([max-freq (apply max (map (lambda (x) (count x lst)) lst))])\n    (if (and\
    \ (> max-freq 0) (member max-freq lst))\n        max-freq\n        -1)))\n", " \
    \ (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first\
    \ ([x freq]\n                #:when (and (> (car x) 0)\n                     \
    \       (>= (car x) (cadr x))))\n      (car x))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (for ([i lst])\n\
    \      (when (and (> i 0) (>= (hash-ref freq i 0) i))\n        (return i)))\n\
    \    -1))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-set!\
    \ freq x (+ 1 (hash-ref freq x 0))))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (and (> x 0) (= max-freq (hash-ref\
    \ freq x 0)))\n          (return x))))\n    -1))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([i lst])\n        (when (and (>\
    \ i 0) (= (hash-ref freq i 0) i))\n          (return i))))\n    -1))\n", "  (let\
    \ ([freq (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x freq]\n\
    \                #:when (and (first x)\n                            (> (first\
    \ x) 0)\n                            (>= (second x) (first x))))\n      (first\
    \ x))))\n", "  (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n    [else (search (rest lst))]))\n", "  (let ([freq-lst\
    \ (map (lambda (x) (list x (count x lst))) lst)])\n    (let ([max-freq (apply\
    \ max (map second freq-lst))])\n      (let ([max-freq-lst (filter (lambda (x)\
    \ (= (second x) max-freq)) freq-lst)])\n        (let ([max-freq-lst-sorted (sort\
    \ max-freq-lst <)])\n          (let ([max-freq-lst-sorted-filtered (filter (lambda\
    \ (x) (>= (first x) (second x))) max-freq-lst-sorted)])\n            (if (empty?\
    \ max-freq-lst-sorted-filtered)\n                -1\n                (first (first\
    \ max-freq-lst-sorted-filtered))))))))))\n", "  (define (search-helper lst)\n\
    \    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst)\
    \ lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n", "  (let\
    \ ([max-val (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max-val))])\n\
    \      (if (>= (count i lst) i)\n          i\n          -1))))\n", "  (let ([freq\
    \ (frequency lst)])\n    (for/first ([(i f) (in-list freq)])\n      (and (> i\
    \ 0) (>= i f) i))))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n   \
    \   (hash-update! freq i add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([i lst])\n        (when (and (> i 0) (= (hash-ref freq\
    \ i 0) i))\n          (return i))))\n    -1))\n", "  (define (search-helper lst)\n\
    \    (if (null? lst)\n        -1\n        (let* ([x (car lst)]\n             \
    \  [xs (cdr lst)]\n               [freq (length (filter (lambda (y) (= x y)) xs))])\n\
    \          (if (and (> x 0) (>= x (+ 1 freq)))\n              x\n            \
    \  (search-helper xs)))))\n  (search-helper lst))\n", "  (let* ([freq (map (lambda\
    \ (x) (list x (count x lst))) lst)]\n         [freq (sort freq (lambda (x y) (>\
    \ (cadr x) (cadr y))))])\n    (for/first ([x freq] #:when (>= (cadr x) (car x)))\n\
    \      (car x))))\n", "  (let ([freq (sort (map (lambda (x) (list x (count x lst)))\
    \ lst) (lambda (x y) (&gt; (cadr x) (cadr y))))])\n    (cond\n      [(empty? freq)\
    \ -1]\n      [(= (cadr (first freq)) (car (first freq))) (car (first freq))]\n\
    \      [else -1])))\n</code>\n", "  (let ([freq (sort (map (lambda (x) (list x\
    \ (count x lst))) lst) < #:key second)])\n    (for/first ([x freq] #:when (> (second\
    \ x) (first x)))\n      (first x))))\n", "  (let ([max (apply max lst)])\n   \
    \ (for/first ([i (in-range 1 max)])\n      (and (>= (count i lst) i) i))))\n",
  "  (define (search-helper lst)\n    (cond\n      [(null? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (car lst))) lst)) (car lst)) (car lst)]\n      [else\
    \ (search-helper (cdr lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([freq\
    \ (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x freq]\n\
    \                #:when (and (> (cadr x) 0)\n                            (>= (cadr\
    \ x) (car x))))\n      (car x))))\n", "  (let ([freq (map (lambda (x) (length\
    \ (filter (lambda (y) (= x y)) lst))) lst)])\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (first freq) (first lst)) (first lst)]\n      [else (search (rest\
    \ lst))])))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-set!\
    \ freq x (add1 (hash-ref freq x 0))))\n    (let ([res -1])\n      (for ([x lst])\n\
    \        (when (and (>= (hash-ref freq x 0) x) (> x res))\n          (set! res\
    \ x)))\n      res)))\n", "  (let ([freq (sort (map (lambda (x) (list x (count\
    \ x lst))) lst)\n                    (lambda (x y) (< (cadr x) (cadr y))))])\n\
    \    (for/first ([x freq]\n                #:when (> (car x) (cadr x)))\n    \
    \  (car x))))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 1))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0)\n                   (= (hash-ref\
    \ freq x 0) x)\n                   (>= x max-freq))\n          (return x))))\n\
    \    -1))\n", "  (define (count x lst)\n    (cond ((null? lst) 0)\n          ((=\
    \ x (car lst)) (+ 1 (count x (cdr lst))))\n          (else (count x (cdr lst)))))\n\
    \  (define (search-helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count\
    \ (car lst) lst) (car lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n\
    \  (search-helper (sort lst >)))\n", "  (let ([freq (sort (map (lambda (x) (list\
    \ x (count x lst))) lst) (lambda (x y) (< (cadr x) (cadr y))))])\n    (cond [(empty?\
    \ freq) -1]\n          [(>= (cadr (first freq)) (car (first freq))) (car (first\
    \ freq))]\n          [else -1])))\n", "  (let ([lst (sort lst <)])\n    (for/first\
    \ ([i (in-list lst)]\n                #:when (>= (count i lst) i))\n      i)))\n",
  "  (define (search-helper lst)\n    (if (null? lst)\n        -1\n        (let* ([x\
    \ (car lst)]\n               [xs (cdr lst)]\n               [freq (length (filter\
    \ (lambda (y) (= x y)) xs))])\n          (if (and (> x 0) (>= x freq))\n     \
    \         x\n              (search-helper xs)))))\n  (search-helper lst))\n",
  "  (let ([freq (sort (map (lambda (x) (list x (count x lst))) lst)\n           \
    \         (lambda (x y) (> (cadr x) (cadr y))))])\n    (for/first ([x freq]\n\
    \                #:when (and (> (car x) 0)\n                            (>= (car\
    \ x) (cadr x))))\n      (car x))))\n", "  (let ([freq (map (\u03BB (x) (list x\
    \ (count x lst))) lst)])\n    (for/first ([x freq]\n                #:when (and\
    \ (> (car x) 0)\n                            (>= (car x) (cadr x))))\n      (car\
    \ x))))\n", "  (define (search-helper lst)\n    (if (null? lst)\n        -1\n\
    \        (let* ([n (car lst)]\n               [freq (length (filter (lambda (x)\
    \ (= x n)) lst))])\n          (if (and (> n 0) (>= n freq))\n              n\n\
    \              (search-helper (cdr lst))))))\n  (search-helper lst))\n", "  (let\
    \ ([lst (sort lst <)])\n    (for/first ([e (in-list lst)\n                 :when\
    \ (>= (count e lst) e)])\n      e)))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([freq (sort (map (lambda (x) (list\
    \ x (count x lst))) lst)\n                    (lambda (x y) (if (> (cadr x) (cadr\
    \ y)) #t #f)))]\n        [max (car (last freq))])\n    (if (and (> (cadr max)\
    \ (car max)) (> (car max) 0))\n        (car max)\n        -1)))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n   \
    \ (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n   \
    \     (when (and (> x 0) (>= (hash-ref freq x 0) x) (> x max-freq))\n        \
    \  (set! max-freq x)))\n      (if (= max-freq 0) -1 max-freq))))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter\
    \ (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([freq\
    \ (map (lambda (x) (list x (count x lst))) lst)])\n    (cond [(empty? freq) -1]\n\
    \          [(>= (second (first freq)) (first (first freq))) (first (first freq))]\n\
    \          [else (search (rest freq))])))\n", "  (let ([max (apply max lst)])\n\
    \    (for/first ([i (in-range 1 (add1 max))])\n      (and (>= (count i lst) i)\
    \ i))))\n", "  (define (count x lst)\n    (cond [(empty? lst) 0]\n          [(=\
    \ x (first lst)) (+ 1 (count x (rest lst)))]\n          [else (count x (rest lst))]))\n\
    \  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([max-freq (apply max\
    \ (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if\
    \ (= max-freq 1)\n        -1\n        (apply max (filter (lambda (x) (= max-freq\
    \ (length (filter (lambda (y) (= x y)) lst)))) lst)))))\n", "  (let ([lst (sort\
    \ lst <)])\n    (for/fold ([max -1]) ([x lst])\n      (let ([count (count x lst)])\n\
    \        (if (and (> count 0) (>= count x) (> x max))\n            x\n       \
    \     max)))))\n", "  (define (search-helper lst)\n    (if (null? lst)\n     \
    \   -1\n        (let* ([freq (count (car lst) lst)]\n               [val (car\
    \ lst)])\n          (if (and (> val 0) (>= freq val))\n              val\n   \
    \           (search-helper (cdr lst))))))\n  (search-helper (sort lst <)))\n",
  "  (cond\n    [(empty? lst) -1]\n    [(>= (length (filter (lambda (x) (= x (first\
    \ lst))) lst)) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", " \
    \ (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i)\n          i\n          -1))))\n", "  (let ([freq\
    \ (sort (map (lambda (x) (list x (count x lst))) lst)\n                    (lambda\
    \ (x y) (< (cadr x) (cadr y))))])\n    (for/first ([x freq]\n                #:when\
    \ (and (> (car x) 0)\n                            (>= (cadr x) (car x))))\n  \
    \    (car x))))\n", "  (letrec ([freq (lambda (x) (count x lst))]\n          \
    \ [max-freq (lambda (x) (apply max (map freq x)))]\n           [max-freq-x (lambda\
    \ (x) (filter (lambda (y) (= (freq y) (max-freq x))) x))])\n    (cond [(empty?\
    \ lst) -1]\n          [(= (max-freq lst) 0) -1]\n          [(= (max-freq lst)\
    \ 1) (first (max-freq-x lst))]\n          [else (search (max-freq-x lst))])))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-set! freq x (+ 1 (hash-ref\
    \ freq x 0))))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for\
    \ ([x lst])\n        (when (and (> x 0) (= (hash-ref freq x 0) max-freq))\n  \
    \        (return x))))\n    -1))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst >)))\n", "  (let ([freq (map (lambda (x) (list x (count\
    \ x lst))) lst)])\n    (for/first ([x (in-list freq)]\n                #:when\
    \ (>= (cadr x) (car x)))\n      (car x))))\n", "  (let ([freq-lst (map (\u03BB\
    \ (x) (list x (count x lst))) lst)])\n    (for/first ([x freq-lst] #:when (and\
    \ (> (car x) 0) (>= (car x) (cadr x))))\n      (car x))))\n", "  (let ([freq (map\
    \ (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x freq]\n     \
    \           #:when (and (> (car x) 0)\n                            (>= (car x)\
    \ (cadr x))))\n      (car x))))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst <)))\n", "  (let ([max-freq (apply max (map (lambda (x) (count x lst)) lst))])\n\
    \    (if (and (positive? max-freq) (member max-freq lst))\n        max-freq\n\
    \        -1)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst)\
    \ lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter\
    \ (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([max-val\
    \ (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max-val))]\n       \
    \         #:when (>= (count i lst) i))\n      i)))\n", "  (cond\n    [(empty?\
    \ lst) -1]\n    [(>= (count (first lst) lst) (first lst)) (first lst)]\n    [else\
    \ (search (rest lst))]))\n", "  (let ([freq (map (lambda (x) (list x (count x\
    \ lst))) lst)])\n    (for/first ([x freq]\n                #:when (and (list?\
    \ x)\n                            (> (car x) 0)\n                            (>=\
    \ (car x) (cadr x))))\n      (car x))))\n", "  (define (search-helper lst)\n \
    \   (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let loop ([lst lst]\
    \ [freq (make-hash)])\n    (cond [(empty? lst) -1]\n          [(hash-ref freq\
    \ (first lst) (lambda () 0))\n           (loop (rest lst) freq)]\n          [else\n\
    \           (hash-set! freq (first lst) (+ 1 (hash-ref freq (first lst) (lambda\
    \ () 0))))\n           (loop (rest lst) freq)])))\n", "  (let ([freq (map (lambda\
    \ (x) (list x (count x lst))) lst)])\n    (for/first ([x freq] #:when (and (>\
    \ (car x) 0) (>= (car x) (cadr x))))\n      (car x))))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-set!\
    \ freq i (add1 (hash-ref freq i 0))))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([i lst])\n        (when (and (> i 0) (= (hash-ref freq\
    \ i 0) max-freq))\n          (return i))))\n    -1))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (for ([x lst])\n\
    \      (when (and (> x 0) (>= (hash-ref freq x 0) x))\n        (return x)))\n\
    \    -1))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", " \
    \ (define (count-occurrences lst n)\n    (cond ((null? lst) 0)\n          ((=\
    \ (car lst) n) (+ 1 (count-occurrences (cdr lst) n)))\n          (else (count-occurrences\
    \ (cdr lst) n))))\n  (define (search-max lst)\n    (cond ((null? lst) -1)\n  \
    \        ((>= (count-occurrences lst (car lst)) (car lst)) (car lst))\n      \
    \    (else (search-max (cdr lst)))))\n  (search-max lst))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([freq (map (lambda\
    \ (x) (list x (count x lst))) lst)])\n    (let ([max (apply max (map first freq))])\n\
    \      (if (and (> max 0) (>= max (count max lst)))\n          max\n         \
    \ -1))))\n", "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n   \
    \       [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([i lst])\n        (when (and (> i 0) (= max-freq (hash-ref freq i i)))\n\
    \          (return i))))\n    -1))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst >)))\n", "  (cond\n    [(empty? lst) -1]\n    [(>=\
    \ (length (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n\
    \    [else (search (rest lst))]))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([i\
    \ lst])\n      (hash-set! freq i (+ 1 (hash-ref freq i 0))))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([i lst])\n        (when (and (>\
    \ i 0) (= (hash-ref freq i) i))\n          (return i)))\n      (for ([i lst])\n\
    \        (when (and (> i 0) (>= (hash-ref freq i) i))\n          (return i)))\n\
    \      -1)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (for ([i lst])\n      (when (and (> i 0) (>= (hash-ref\
    \ freq i 0) i))\n        (return i)))\n    -1))\n", "  (let ([freq (sort (map\
    \ (lambda (x) (list x (count x lst))) lst)\n                    (lambda (x y)\
    \ (&gt; (car x) (car y))))])\n    (for/first ([f freq]\n                #:when\
    \ (&gt;= (car f) (cadr f)))\n      (car f))))\n</code>\n", "  (let ([max (apply\
    \ max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n      (if (>= (count\
    \ i lst) i)\n          i\n          -1))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-set! freq x (+ 1 (hash-ref freq x 0))))\n   \
    \ (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n   \
    \     (when (and (> x 0) (= (hash-ref freq x 0) max-freq))\n          (return\
    \ x))))\n    -1))\n", "  (let ([freq-lst (map (lambda (x) (list x (count x lst)))\
    \ lst)])\n    (for/first ([x freq-lst]\n                #:when (and (> (car x)\
    \ 0)\n                            (>= (car x) (cadr x))))\n      (car x))))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (and (>= (count i lst) i) i))))\n", "  (cond\n    [(empty? lst) -1]\n \
    \   [(>= (count (first lst) lst) (first lst)) (first lst)]\n    [else (search\
    \ (rest lst))]))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (if (>= (count i lst) i)\n          i\n          -1))))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n\
    \        (when (and (> x 0) (>= (hash-ref freq x 0) x) (> x max-freq))\n     \
    \     (set! max-freq x)))\n      (if (= max-freq 0) -1 max-freq))))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([freq (sort (map (lambda (x) (list\
    \ x (count x lst))) lst) (lambda (x y) (< (cadr x) (cadr y))))])\n    (cond [(empty?\
    \ freq) -1]\n          [(>= (cadr (first freq)) (car (first freq))) (car (first\
    \ freq))]\n          [else -1])))\n", "  (let ([freq (map (lambda (x) (list x\
    \ (count x lst))) lst)])\n    (for/first ([x freq]\n                #:when (and\
    \ (equal? (first x) (second x))\n                            (positive? (first\
    \ x))))\n      (first x))))\n", "  (let ([freq (map (lambda (x) (list x (count\
    \ x lst))) lst)])\n    (for/first ([x (in-list freq)]\n                #:when\
    \ (and (> (car x) 0)\n                            (>= (car x) (cadr x))))\n  \
    \    (car x))))\n", "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n\
    \          [(>= (count (first lst) lst) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort > lst)))\n", "  (let ([max\
    \ (apply max lst)])\n    (for/first ([i (in-range 1 max)])\n      (and (>= (count\
    \ i lst) i) i))))\n", "  (let ([freq (map (lambda (x) (cons x (count x lst)))\
    \ lst)])\n    (for/first ([x (in-list freq)]\n                #:when (and (> (cdr\
    \ x) 0)\n                            (>= (cdr x) (car x))))\n      (car x))))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([freq-table (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq-table x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq-table))])\n      (for ([x lst])\n        (when\
    \ (and (> x 0) (= (hash-ref freq-table x 0) x))\n          (return x)))\n    \
    \  -1)))\n", "  (cond\n    [(empty? lst) -1]\n    [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n    [else (search (rest lst))]))\n", "  (let ([max\
    \ (apply max lst)])\n    (for/first ([i (in-range 1 max)])\n      (and (>= (count\
    \ i lst) i) i))))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n     \
    \ (hash-set! freq x (+ 1 (hash-ref freq x 0))))\n    (let ([max-freq (apply max\
    \ (hash-values freq))])\n      (for ([x lst])\n        (if (and (> x 0) (>= (hash-ref\
    \ freq x 0) x) (> x max-freq))\n            (set! max-freq x)))\n      (if (=\
    \ max-freq 0) -1 max-freq))))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n\
    \      (hash-update! freq i add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([i lst])\n        (when (and (> i 0)\n               \
    \    (= (hash-ref freq i 0) i)\n                   (>= i max-freq))\n        \
    \  (return i))))\n    -1))\n", "  (define (search-helper lst)\n    (cond\n   \
    \   [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ <)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for ([x lst])\n      (when (and (> x 0)\n            \
    \     (>= (hash-ref freq x 0) x))\n        (return x)))\n    -1))\n", "  (let\
    \ ([lst (sort lst <)])\n    (for/first ([i (in-list lst)]\n                #:when\
    \ (>= (count i lst) i))\n      i)))\n", "  (define (helper lst)\n    (cond\n \
    \     [(empty? lst) (list)]\n      [(member (first lst) (rest lst)) (cons (first\
    \ lst) (helper (rest lst)))]\n      [else (helper (rest lst))]))\n  (define (freq\
    \ lst)\n    (cond\n      [(empty? lst) (list)]\n      [(member (first lst) (rest\
    \ lst)) (cons (first lst) (freq (rest lst)))]\n      [else (freq (rest lst))]))\n\
    \  (define (greatest lst)\n    (cond\n      [(empty? lst) 0]\n      [(> (first\
    \ lst) (greatest (rest lst))) (first lst)]\n      [else (greatest (rest lst))]))\n\
    \  (define (freq-greatest lst)\n    (cond\n      [(empty? lst) 0]\n      [(> (first\
    \ lst) (freq-greatest (rest lst))) (first lst)]\n      [else (freq-greatest (rest\
    \ lst))]))\n  (define (freq-greatest-freq lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(> (first lst) (freq-greatest-freq (rest lst))) (first lst)]\n  \
    \    [else (freq-greatest-freq (rest lst))]))\n  (define (freq-greatest-freq-greatest\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(> (first lst) (freq-greatest-freq-greatest\
    \ (rest lst))) (first lst)]\n      [else (freq-greatest-freq-greatest (rest lst))]))\n\
    \  (define (freq-greatest-freq-greatest-freq lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(> (first lst) (freq-greatest-freq-greatest-freq (rest lst))) (first\
    \ lst)]\n      [else (freq-greatest", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (cond\n      [(<\
    \ max-freq 1) -1]\n      [(> max-freq (apply max lst)) -1]\n      [else (apply\
    \ max (filter (lambda (x) (= (length (filter (lambda (y) (= x y)) lst)) max-freq))\
    \ lst))])))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (if (>= (count i lst) i)\n          i\n          -1))))\n",
  "  (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x\
    \ (in-list freq)]\n                #:when (and (> (cadr x) 0)\n              \
    \              (>= (cadr x) (car x))))\n      (car x))))\n", "  (let ([freq (map\
    \ (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x (in-list freq)]\n\
    \                #:when (and (> (second x) 0)\n                            (>=\
    \ (second x) (first x))))\n      (first x))))\n", "  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([freq (sort (map\
    \ (lambda (x) (list x (count x lst))) lst)\n                    (lambda (x y)\
    \ (< (cadr x) (cadr y))))])\n    (for/first ([x freq] #:when (> (car x) (cadr\
    \ x)))\n      (car x))))\n", "  (let ([freq (map (lambda (x) (list x (count x\
    \ lst))) lst)])\n    (for/first ([x freq]\n                #:when (and (> (car\
    \ x) 0)\n                            (>= (car x) (cadr x))))\n      (car x))))\n",
  "  (letrec ([freq (lambda (lst)\n                   (if (null? lst)\n          \
    \             '()\n                       (cons (list (car lst) (length (filter\
    \ (lambda (x) (= x (car lst))) lst)))\n                             (freq (filter\
    \ (lambda (x) (not (= x (car lst)))) lst)))))])\n    (let ([f (freq lst)])\n \
    \     (if (null? f)\n          -1\n          (let ([max (apply max (map (lambda\
    \ (x) (car x)) f))])\n            (if (>= max (length (filter (lambda (x) (= (car\
    \ x) max)) f)))\n                max\n                -1))))))\n", "  (let ([freq\
    \ (map (lambda (x) (list x (count x lst))) (remove-duplicates lst))])\n    (for/first\
    \ ([x freq] #:when (and (> (car x) 0) (>= (car x) (cadr x))))\n      (car x))))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst >)))\n", "  (cond\n    [(empty? lst) -1]\n\
    \    [(>= (count (first lst) lst) (first lst)) (first lst)]\n    [else (search\
    \ (rest lst))]))\n", "  (define (search-helper lst)\n    (if (null? lst)\n   \
    \     -1\n        (let* ([n (car lst)]\n               [freq (count n lst)])\n\
    \          (if (and (> n 0) (>= n freq))\n              n\n              (search-helper\
    \ (cdr lst))))))\n  (search-helper lst))\n", "  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([lst (sort lst\
    \ <)])\n    (for/first ([i (in-list lst)]\n                #:when (>= (count i\
    \ lst) i))\n      i)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n\
    \      (hash-update! freq i add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for/first ([i lst]\n                  #:when (>= (hash-ref\
    \ freq i 0) i)\n                  #:when (> i 0)\n                  #:when (>=\
    \ (hash-ref freq i 0) max-freq))\n        i))))\n", "  (let ([max-val (apply max\
    \ lst)])\n    (for/first ([i (in-range 1 (add1 max-val))]\n                #:when\
    \ (>= (count i lst) i))\n      i)))\n", "  (cond\n    [(empty? lst) -1]\n    [(>=\
    \ (count (first lst) lst) (first lst)) (first lst)]\n    [else (search (rest lst))]))\n",
  "  (let ([freq (sort (map (lambda (x) (list x (count x lst))) lst) (lambda (x y)\
    \ (< (cadr x) (cadr y))))])\n    (cond [(empty? freq) -1]\n          [(>= (cadr\
    \ (car freq)) (car (car freq))) (car (car freq))]\n          [else -1])))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \       [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x\
    \ (in-list freq)]\n                #:when (and (> (cadr x) 0)\n              \
    \              (>= (cadr x) (car x))))\n      (car x))))\n", "  (let ([freq-lst\
    \ (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x (in-list\
    \ freq-lst)]\n                #:when (and (> (car x) 0)\n                    \
    \        (>= (car x) (cadr x))))\n      (car x))))\n", "  (let ([lst (sort lst\
    \ <)])\n    (for/first ([x (in-list lst)])\n      (let ([count (count x lst)])\n\
    \        (if (>= x count) x -1)))))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort lst\
    \ >)))\n", "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n     \
    \     [(>= (count (first lst) lst) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define\
    \ (search-helper lst)\n    (cond ((null? lst) -1)\n          ((>= (count (car\
    \ lst) lst) (car lst)) (car lst))\n          (else (search-helper (cdr lst)))))\n\
    \  (search-helper (sort lst <)))\n", "  (define (count x lst)\n    (cond [(empty?\
    \ lst) 0]\n          [(= x (first lst)) (+ 1 (count x (rest lst)))]\n        \
    \  [else (count x (rest lst))]))\n  (define (search-helper lst)\n    (cond [(empty?\
    \ lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first lst)]\n\
    \          [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x\
    \ (in-list freq)]\n                #:when (and (> (cadr x) 0)\n              \
    \              (>= (cadr x) (car x))))\n      (car x))))\n", "  (let ([lst (sort\
    \ lst <)])\n    (for/first ([i (in-list lst)]\n                #:when (and (>\
    \ i 0)\n                            (>= i (count i lst))))\n      i)))\n", " \
    \ (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (cond [(empty? lst) -1]\n \
    \       [(>= (count (first lst) lst) (first lst)) (first lst)]\n        [else\
    \ (search (rest lst))]))\n", "  (define (search-helper lst)\n    (cond\n     \
    \ [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst >)))\n", "  (let ([max (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max))])\n      (and (>= (count i lst) i) i))))\n", " \
    \ (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-set! freq x (+ 1\
    \ (hash-ref freq x 0))))\n    (let ([max-val -1])\n      (for ([x lst])\n    \
    \    (when (>= (hash-ref freq x 0) x)\n          (set! max-val (max max-val x))))\n\
    \      max-val)))\n", "  (let* ([freq (map (lambda (x) (list x (count x lst)))\
    \ (remove-duplicates lst))]\n         [freq-sorted (sort freq (lambda (x y) (>\
    \ (cadr x) (cadr y))))])\n    (if (null? freq-sorted)\n        -1\n        (let*\
    \ ([max (car freq-sorted)]\n               [max-freq (cadr max)])\n          (if\
    \ (>= max-freq max)\n              max\n              -1)))))\n", "  (cond\n \
    \   [(empty? lst) -1]\n    [(>= (count (first lst) lst) (first lst)) (first lst)]\n\
    \    [else (search (rest lst))]))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst <)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([freq\
    \ (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x (in-list\
    \ freq)]\n                #:when (and (> (car x) 0)\n                        \
    \    (>= (car x) (cadr x))))\n      (car x))))\n", "  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n\
    \          [(>= (count (first lst) lst) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst <)))"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
