name: HumanEval_5_intersperse
language: rkt
results:
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond [(null? numbers) '()]\n        [(null? (cdr numbers))\
    \ numbers]\n        [else (cons (car numbers) (cons delimeter (intersperse (cdr\
    \ numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate intersperse))\n    (check-equal? (candidate (list ) 7) (list\
    \ ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2))\n \
    \   (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) '()]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) (list)]\n    [(empty? (rest\
    \ numbers)) (list (first numbers))]\n    [else (cons (first numbers) (cons delimeter\
    \ (intersperse (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate\
    \ (list ) 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5\
    \ 8 6 8 3 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond [(empty? numbers) empty]\n        [(empty? (rest\
    \ numbers)) numbers]\n        [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (if (null? numbers)\n      (list)\n      (cons (car numbers)\n\
    \            (cons delimeter\n                  (intersperse (cdr numbers) delimeter)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n\
    \    (check-equal? (candidate (list ) 7) (list ))\n    (check-equal? (candidate\
    \ (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2))\n    (check-equal? (candidate (list\
    \ 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbi2341dv.rkt:21:4\n\
    actual:     '(5 8 6 8 3 8 2 8)\nexpected:   '(5 8 6 8 3 8 2)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbi2341dv.rkt:22:4\n\
    actual:     '(2 2 2 2 2 2)\nexpected:   '(2 2 2 2 2)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond [(empty? numbers) empty]\n        [(empty? (rest\
    \ numbers)) numbers]\n        [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (if (null? numbers)\n      (list)\n      (cons (car numbers)\n\
    \            (cons delimeter\n                  (intersperse (cdr numbers) delimeter)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n\
    \    (check-equal? (candidate (list ) 7) (list ))\n    (check-equal? (candidate\
    \ (list 5 6 3 2) 8) (list 5 8 6 8 3 8 2))\n    (check-equal? (candidate (list\
    \ 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw4rkb6kz.rkt:21:4\n\
    actual:     '(5 8 6 8 3 8 2 8)\nexpected:   '(5 8 6 8 3 8 2)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw4rkb6kz.rkt:22:4\n\
    actual:     '(2 2 2 2 2 2)\nexpected:   '(2 2 2 2 2)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (if (null? numbers)\n      (list)\n      (if (null? (cdr\
    \ numbers))\n          (list (car numbers))\n          (cons (car numbers) (cons\
    \ delimeter (intersperse (cdr numbers) delimeter))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate intersperse))\n    (check-equal?\
    \ (candidate (list ) 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2)\
    \ 8) (list 5 8 6 8 3 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list\
    \ 2 2 2 2 2))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Insert a number 'delimeter' between every two consecutive\
    \ elements of input list `numbers'\n;; >>> (intersperse (list ) 4)\n;; (list )\n\
    ;; >>> (intersperse (list 1 2 3) 4)\n;; (list 1 4 2 4 3)\n(define (intersperse\
    \ numbers delimeter)\n  (cond\n    [(empty? numbers) empty]\n    [(empty? (rest\
    \ numbers)) numbers]\n    [else (cons (first numbers) (cons delimeter (intersperse\
    \ (rest numbers) delimeter)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate intersperse))\n    (check-equal? (candidate (list )\
    \ 7) (list ))\n    (check-equal? (candidate (list 5 6 3 2) 8) (list 5 8 6 8 3\
    \ 8 2))\n    (check-equal? (candidate (list 2 2 2) 2) (list 2 2 2 2 2))\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
