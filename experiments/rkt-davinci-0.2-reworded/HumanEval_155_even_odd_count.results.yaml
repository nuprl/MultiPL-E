name: HumanEval_155_even_odd_count
language: rkt
results:
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_iter num even-count odd-count)\n    (cond\n\
    \      [(zero? num) (list even-count odd-count)]\n      [(even? (remainder num\
    \ 10)) (even_odd_count_iter (quotient num 10) (+ even-count 1) odd-count)]\n \
    \     [else (even_odd_count_iter (quotient num 10) even-count (+ odd-count 1))]))\n\
    \  (even_odd_count_iter num 0 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate even_odd_count))\n    (check-equal? (candidate 7) (list\
    \ 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n    (check-equal? (candidate\
    \ 3452) (list 2 2))\n    (check-equal? (candidate 346211) (list 3 3))\n    (check-equal?\
    \ (candidate -345821) (list 3 3))\n    (check-equal? (candidate -2) (list 1 0))\n\
    \    (check-equal? (candidate -45347) (list 2 3))\n    (check-equal? (candidate\
    \ 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpocspx5ge.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_helper num even odd)\n    (cond\n      [(zero?\
    \ num) (list even odd)]\n      [(even? (remainder num 10)) (even_odd_count_helper\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9y8qob4r.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_iter num even odd)\n    (cond ((= num 0) (list\
    \ even odd))\n          ((even? (remainder num 10)) (even_odd_count_iter (quotient\
    \ num 10) (+ even 1) odd))\n          (else (even_odd_count_iter (quotient num\
    \ 10) even (+ odd 1)))))\n  (even_odd_count_iter num 0 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvrpmcy4z.rkt:28:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even? n)\n    (if (zero? (remainder n 2))\n        #t\n   \
    \     #f))\n  (define (odd? n)\n    (if (zero? (remainder n 2))\n        #f\n\
    \        #t))\n  (define (count-even-odd num)\n    (if (zero? num)\n        (list\
    \ 0 0)\n        (let ((rest (count-even-odd (quotient num 10))))\n          (if\
    \ (even? (remainder num 10))\n              (list (+ 1 (car rest)) (cadr rest))\n\
    \              (list (car rest) (+ 1 (cadr rest)))))))\n  (count-even-odd num))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n\
    \    (check-equal? (candidate 7) (list 0 1))\n    (check-equal? (candidate -78)\
    \ (list 1 1))\n    (check-equal? (candidate 3452) (list 2 2))\n    (check-equal?\
    \ (candidate 346211) (list 3 3))\n    (check-equal? (candidate -345821) (list\
    \ 3 3))\n    (check-equal? (candidate -2) (list 1 0))\n    (check-equal? (candidate\
    \ -45347) (list 2 3))\n    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp25jj5jdi.rkt:39:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_helper num even odd)\n    (if (zero? num)\n\
    \        (list even odd)\n        (if (even? (remainder num 10))\n           \
    \ (even_odd_count_helper (quotient num 10) (+ even 1) odd)\n            (even_odd_count_helper\
    \ (quotient num 10) even (+ odd 1)))))\n  (even_odd_count_helper num 0 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n\
    \    (check-equal? (candidate 7) (list 0 1))\n    (check-equal? (candidate -78)\
    \ (list 1 1))\n    (check-equal? (candidate 3452) (list 2 2))\n    (check-equal?\
    \ (candidate 346211) (list 3 3))\n    (check-equal? (candidate -345821) (list\
    \ 3 3))\n    (check-equal? (candidate -2) (list 1 0))\n    (check-equal? (candidate\
    \ -45347) (list 2 3))\n    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1ex4iqe.rkt:30:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_iter num even odd)\n    (cond\n      [(zero?\
    \ num) (list even odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk62c0itq.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_iter num even odd)\n    (cond\n      [(zero?\
    \ num) (list even odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn0zrgbz6.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (helper num even odd)\n    (cond\n      [(zero? num) (list even\
    \ odd)]\n      [(even? (remainder num 10)) (helper (quotient num 10) (+ even 1)\
    \ odd)]\n      [else (helper (quotient num 10) even (+ odd 1))]))\n  (helper num\
    \ 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ even_odd_count))\n    (check-equal? (candidate 7) (list 0 1))\n    (check-equal?\
    \ (candidate -78) (list 1 1))\n    (check-equal? (candidate 3452) (list 2 2))\n\
    \    (check-equal? (candidate 346211) (list 3 3))\n    (check-equal? (candidate\
    \ -345821) (list 3 3))\n    (check-equal? (candidate -2) (list 1 0))\n    (check-equal?\
    \ (candidate -45347) (list 2 3))\n    (check-equal? (candidate 0) (list 1 0))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8661wlkt.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_helper num even_count odd_count)\n    (cond\n\
    \      [(zero? num) (list even_count odd_count)]\n      [(even? (remainder num\
    \ 10)) (even_odd_count_helper (quotient num 10) (+ even_count 1) odd_count)]\n\
    \      [else (even_odd_count_helper (quotient num 10) even_count (+ odd_count\
    \ 1))]))\n  (even_odd_count_helper num 0 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxlv4xydy.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_iter num even_count odd_count)\n    (cond\n\
    \      [(zero? num) (list even_count odd_count)]\n      [(even? (remainder num\
    \ 10)) (even_odd_count_iter (quotient num 10) (+ even_count 1) odd_count)]\n \
    \     [else (even_odd_count_iter (quotient num 10) even_count (+ odd_count 1))]))\n\
    \  (even_odd_count_iter num 0 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate even_odd_count))\n    (check-equal? (candidate 7) (list\
    \ 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n    (check-equal? (candidate\
    \ 3452) (list 2 2))\n    (check-equal? (candidate 346211) (list 3 3))\n    (check-equal?\
    \ (candidate -345821) (list 3 3))\n    (check-equal? (candidate -2) (list 1 0))\n\
    \    (check-equal? (candidate -45347) (list 2 3))\n    (check-equal? (candidate\
    \ 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkp1gyw2j.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_helper num even odd)\n    (if (zero? num)\n\
    \        (list even odd)\n        (if (even? (remainder num 10))\n           \
    \ (even_odd_count_helper (quotient num 10) (+ even 1) odd)\n            (even_odd_count_helper\
    \ (quotient num 10) even (+ odd 1)))))\n  (even_odd_count_helper num 0 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n\
    \    (check-equal? (candidate 7) (list 0 1))\n    (check-equal? (candidate -78)\
    \ (list 1 1))\n    (check-equal? (candidate 3452) (list 2 2))\n    (check-equal?\
    \ (candidate 346211) (list 3 3))\n    (check-equal? (candidate -345821) (list\
    \ 3 3))\n    (check-equal? (candidate -2) (list 1 0))\n    (check-equal? (candidate\
    \ -45347) (list 2 3))\n    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56p2h5_g.rkt:30:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_helper num even_count odd_count)\n    (cond\
    \ ((= num 0) (list even_count odd_count))\n          ((even? (remainder num 10))\
    \ (even_odd_count_helper (quotient num 10) (+ even_count 1) odd_count))\n    \
    \      (else (even_odd_count_helper (quotient num 10) even_count (+ odd_count\
    \ 1)))))\n  (even_odd_count_helper num 0 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5ehbcvw.rkt:28:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_iter num even odd)\n    (cond\n      [(zero?\
    \ num) (list even odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsn70mcma.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_helper num even odd)\n    (if (zero? num)\n\
    \        (list even odd)\n        (if (even? (remainder num 10))\n           \
    \ (even_odd_count_helper (quotient num 10) (+ even 1) odd)\n            (even_odd_count_helper\
    \ (quotient num 10) even (+ odd 1)))))\n  (even_odd_count_helper num 0 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n\
    \    (check-equal? (candidate 7) (list 0 1))\n    (check-equal? (candidate -78)\
    \ (list 1 1))\n    (check-equal? (candidate 3452) (list 2 2))\n    (check-equal?\
    \ (candidate 346211) (list 3 3))\n    (check-equal? (candidate -345821) (list\
    \ 3 3))\n    (check-equal? (candidate -2) (list 1 0))\n    (check-equal? (candidate\
    \ -45347) (list 2 3))\n    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcsusch2d.rkt:30:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_iter num even odd)\n    (cond [(= num 0) (list\
    \ even odd)]\n          [(even? (remainder num 10)) (even_odd_count_iter (quotient\
    \ num 10) (+ even 1) odd)]\n          [else (even_odd_count_iter (quotient num\
    \ 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpehqx59yt.rkt:28:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_helper num even_count odd_count)\n    (cond\n\
    \      [(= num 0) (list even_count odd_count)]\n      [(even? (remainder num 10))\
    \ (even_odd_count_helper (quotient num 10) (+ even_count 1) odd_count)]\n    \
    \  [else (even_odd_count_helper (quotient num 10) even_count (+ odd_count 1))]))\n\
    \  (even_odd_count_helper num 0 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate even_odd_count))\n    (check-equal? (candidate 7) (list\
    \ 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n    (check-equal? (candidate\
    \ 3452) (list 2 2))\n    (check-equal? (candidate 346211) (list 3 3))\n    (check-equal?\
    \ (candidate -345821) (list 3 3))\n    (check-equal? (candidate -2) (list 1 0))\n\
    \    (check-equal? (candidate -45347) (list 2 3))\n    (check-equal? (candidate\
    \ 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplzle960a.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_helper num even odd)\n    (cond\n      [(zero?\
    \ num) (list even odd)]\n      [(even? (remainder num 10)) (even_odd_count_helper\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1tli8cew.rkt:29:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count-helper num even_count odd_count)\n    (cond\
    \ ((= num 0) (list even_count odd_count))\n          ((= (remainder num 10) 0)\
    \ (even_odd_count-helper (quotient num 10) (+ even_count 1) odd_count))\n    \
    \      (else (even_odd_count-helper (quotient num 10) even_count (+ odd_count\
    \ 1)))))\n  (even_odd_count-helper num 0 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe0xt3zwp.rkt:22:4\n\
    actual:     '(0 2)\nexpected:   '(1 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe0xt3zwp.rkt:23:4\nactual:\
    \     '(0 4)\nexpected:   '(2 2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe0xt3zwp.rkt:24:4\nactual:\
    \     '(0 6)\nexpected:   '(3 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe0xt3zwp.rkt:25:4\nactual:\
    \     '(0 6)\nexpected:   '(3 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe0xt3zwp.rkt:26:4\nactual:\
    \     '(0 1)\nexpected:   '(1 0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe0xt3zwp.rkt:27:4\nactual:\
    \     '(0 5)\nexpected:   '(2 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe0xt3zwp.rkt:28:4\nactual:\
    \     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count_helper num even-count odd-count)\n    (cond\
    \ [(= num 0) (list even-count odd-count)]\n          [(even? (remainder num 10))\
    \ (even_odd_count_helper (quotient num 10) (+ even-count 1) odd-count)]\n    \
    \      [else (even_odd_count_helper (quotient num 10) even-count (+ odd-count\
    \ 1))]))\n  (even_odd_count_helper num 0 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmte59vsz.rkt:28:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an integer. return a list that has the number\
    \ of even and odd digits respectively.\n;; Example:\n;; >>> (even_odd_count -12)\n\
    ;; (list 1 1)\n;; >>> (even_odd_count 123)\n;; (list 1 2)\n(define (even_odd_count\
    \ num)\n  (define (even_odd_count-helper num even-count odd-count)\n    (if (zero?\
    \ num)\n        (list even-count odd-count)\n        (if (even? (remainder num\
    \ 10))\n            (even_odd_count-helper (quotient num 10) (add1 even-count)\
    \ odd-count)\n            (even_odd_count-helper (quotient num 10) even-count\
    \ (add1 odd-count)))))\n  (even_odd_count-helper num 0 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n    (check-equal?\
    \ (candidate 7) (list 0 1))\n    (check-equal? (candidate -78) (list 1 1))\n \
    \   (check-equal? (candidate 3452) (list 2 2))\n    (check-equal? (candidate 346211)\
    \ (list 3 3))\n    (check-equal? (candidate -345821) (list 3 3))\n    (check-equal?\
    \ (candidate -2) (list 1 0))\n    (check-equal? (candidate -45347) (list 2 3))\n\
    \    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd3ncln7x.rkt:30:4\n\
    actual:     '(0 0)\nexpected:   '(1 0)\n--------------------\n"
  exit_code: 0
  status: Exception
