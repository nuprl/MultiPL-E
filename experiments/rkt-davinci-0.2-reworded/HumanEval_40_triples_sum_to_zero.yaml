name: HumanEval_40_triples_sum_to_zero
language: rkt
prompt: "#lang racket\n\n;; triples_sum_to_zero takes a list of integers as an input.\n\
  ;; it returns #t if there are three distinct elements in the list that\n;; sum to\
  \ zero, and #f otherwise.\n;; >>> (triples_sum_to_zero (list 1 3 5 0))\n;; #f\n\
  ;; >>> (triples_sum_to_zero (list 1 3 -2 1))\n;; #t\n;; >>> (triples_sum_to_zero\
  \ (list 1 2 3 7))\n;; #f\n;; >>> (triples_sum_to_zero (list 2 4 -5 3 9 7))\n;; #t\n\
  ;; >>> (triples_sum_to_zero (list 1))\n;; #f\n(define (triples_sum_to_zero l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 5 -1)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #t)\n    (check-equal?\
  \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 1 2 5 7)) #f)\n\
  \    (check-equal? (candidate (list 2 4 -5 3 9 7)) #t)\n    (check-equal? (candidate\
  \ (list 1)) #f)\n    (check-equal? (candidate (list 1 3 5 -100)) #f)\n    (check-equal?\
  \ (candidate (list 100 3 5 -100)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l))\
    \ (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond ((null? l) #f)\n        ((null? (cdr l)) #f)\n        ((null?\
    \ (cddr l)) #f)\n        ((and (member (car l) (cdr l))\n              (member\
    \ (car l) (cddr l))) #t)\n        (else (triples_sum_to_zero (cdr l)))))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car\
    \ l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [else\n     (cond\n       [(and (zero? (+ (first l) (second l) (third\
    \ l)))\n             (not (member (first l) (rest l)))\n             (not (member\
    \ (second l) (rest l)))\n             (not (member (third l) (rest l))))\n   \
    \     #t]\n       [else\n        (triples_sum_to_zero (rest l))])]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [else\n     (cond\n       [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n       [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n  \
    \     [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n       [else\n  \
    \      (cond\n          [(= (+ (list-ref l 0) (list-ref l 1) (list-ref l 2)) 0)\
    \ #t]\n          [else (triples_sum_to_zero (rest l))])])])\n  )\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(= (length l) 2) #f]\n \
    \   [else\n     (or (and (member (car l) (cdr l))\n              (member (car\
    \ l) (cddr l)))\n         (triples_sum_to_zero (cdr l)))]))\n", "  (cond\n   \
    \ [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l)))\
    \ #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (define (triples_sum_to_zero_helper\
    \ l)\n    (cond ((null? l) #f)\n          ((and (member (car l) (cdr l))\n   \
    \             (member (- (car l)) (cdr l)))\n           #t)\n          (else (triples_sum_to_zero_helper\
    \ (cdr l)))))\n  (triples_sum_to_zero_helper l))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(and (member (first l) (rest l))\n          (member (first l) (rest\
    \ (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [else\n     (let* ([a (first l)]\n            [b (first (rest l))]\n\
    \            [c (first (rest (rest l)))]\n            [rest (rest (rest (rest\
    \ l)))])\n       (or (and (= (+ a b c) 0) #t)\n           (triples_sum_to_zero\
    \ (cons a rest))))]))\n", "  (cond [(empty? l) #f]\n        [(and (member (list-ref\
    \ l 0) (cdr l))\n              (member (list-ref l 0) (cddr l))) #t]\n       \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n \
    \   [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(null?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [else\n     (let* ([a\
    \ (first l)]\n            [b (first (rest l))]\n            [c (first (rest (rest\
    \ l)))]\n            [rest (rest (rest (rest l)))])\n       (cond\n         [(=\
    \ (+ a b c) 0) #t]\n         [else (triples_sum_to_zero (cons a rest))]))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (or\n      (and\n       (=\
    \ (list-ref l 0) (- (list-ref l 1) (list-ref l 2)))\n       (not (member (list-ref\
    \ l 0) (rest (rest l)))))\n      (triples_sum_to_zero (rest l)))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first\
    \ l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\n          (member (car\
    \ l) (cddr l)))\n     #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [else\
    \ (or (and (equal? (list-ref l 0) (list-ref l 1))\n                    (equal?\
    \ (list-ref l 0) (list-ref l 2)))\n              (and (equal? (list-ref l 0) (list-ref\
    \ l 1))\n                   (equal? (list-ref l 0) (list-ref l 2)))\n        \
    \      (and (equal? (list-ref l 0) (list-ref l 1))\n                   (equal?\
    \ (list-ref l 0) (list-ref l 2)))\n              (and (equal? (list-ref l 0) (list-ref\
    \ l 1))\n                   (equal? (list-ref l 0) (list-ref l 2)))\n        \
    \      (and (equal? (list-ref l 0) (list-ref l 1))\n                   (equal?\
    \ (list-ref l 0) (list-ref l 2)))\n              (and (equal? (list-ref l 0) (list-ref\
    \ l 1))\n                   (equal? (list-ref l 0) (list-ref l 2)))\n        \
    \      (and (equal? (list-ref l 0) (list-ref l 1))\n                   (equal?\
    \ (list-ref l 0) (list-ref l 2)))\n              (and (equal? (list-ref l 0) (list-ref\
    \ l 1))\n                   (equal? (list-ref l 0) (list-ref l 2)))\n        \
    \      (and (equal? (list-ref l 0) (list-ref l 1))\n                   (equal?\
    \ (list-ref l 0) (list-ref l 2)))\n              (and (equal? (list-ref l 0) (list-ref\
    \ l 1))\n                   (equal? (list-ref l 0) (list-ref l 2)))\n        \
    \      (and (equal? (list-ref l 0) (list-ref l 1))\n                   (equal?\
    \ (list-ref l 0) (list-ref l 2)))\n              (and (equal? (list-ref l 0) (list-ref\
    \ l 1))\n                   (equal? (list", "  (cond\n    [(empty? l) #f]\n  \
    \  [(empty? (cdr l)) #f]\n    [(empty? (cddr l)) #f]\n    [(and (not (member (car\
    \ l) (cdr l)))\n          (not (member (car l) (cddr l)))\n          (not (member\
    \ (cadr l) (cddr l)))\n          (= (apply + (list (car l) (cadr l) (caddr l)))\
    \ 0))\n     #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n   \
    \ [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n    [(empty? (cddr l))\
    \ #f]\n    [(and (not (member (car l) (cdr l)))\n          (not (member (car l)\
    \ (cddr l)))\n          (not (member (cadr l) (cddr l)))\n          (= (apply\
    \ + (list (car l) (cadr l) (caddr l))) 0))\n     #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l))\n          (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (or\n      (and\n       (=\
    \ (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n\
    \      (and\n       (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0)\
    \ (list-ref l 2)))\n      (and\n       (= (list-ref l 0) (list-ref l 1))\n   \
    \    (= (list-ref l 0) (list-ref l 2)))\n      (and\n       (= (list-ref l 0)\
    \ (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n      (and\n   \
    \    (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n\
    \      (and\n       (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0)\
    \ (list-ref l 2)))\n      (and\n       (= (list-ref l 0) (list-ref l 1))\n   \
    \    (= (list-ref l 0) (list-ref l 2)))\n      (and\n       (= (list-ref l 0)\
    \ (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n      (and\n   \
    \    (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n\
    \      (and\n       (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0)\
    \ (list-ref l 2)))\n      (and\n       (= (list-ref l 0) (list-ref l 1))\n   \
    \    (= (list-ref l 0) (list-ref l 2)))\n      (and\n       (= (list-ref l 0)\
    \ (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n      (and\n   \
    \    (= (", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l))\n\
    \          (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l))\n          (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest\
    \ (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [else\n     (or\n      (and\n       (= (sum (first l) (first (rest\
    \ l)) (first (rest (rest l)))) 0)\n       #t)\n      (triples_sum_to_zero (rest\
    \ l)))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l))\n          (member (first l) (rest (rest l))))\n     #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(null? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest\
    \ l))) #f]\n    [else\n     (cond\n       [(= (apply + (take l 3)) 0) #t]\n  \
    \     [else (triples_sum_to_zero (rest l))])]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest l))))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(= (length l) 1) #f]\n    [(= (length l) 2) #f]\n    [else\n     (or (and\
    \ (member (car l) (cdr l))\n              (member (- (car l) (cadr l)) (cddr l)))\n\
    \         (triples_sum_to_zero (cdr l)))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [else\n     (let* ([a\
    \ (first l)]\n            [b (first (rest l))]\n            [c (first (rest (rest\
    \ l)))]\n            [rest (rest (rest (rest l)))])\n       (or (and (= (+ a b\
    \ c) 0) (not (member a (list b c))) (not (member b (list a c))) (not (member c\
    \ (list a b))))\n           (triples_sum_to_zero (cons a rest))))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first\
    \ l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (cdr l)) #f]\n    [(empty? (cddr l)) #f]\n    [(and (not (empty?\
    \ (cdddr l)))\n          (or (and (= (car l) (cadr l))\n                   (=\
    \ (cadr l) (caddr l)))\n              (and (= (car l) (caddr l))\n           \
    \        (= (cadr l) (cadddr l)))))\n     (triples_sum_to_zero (cdddr l))]\n \
    \   [(= (list-ref l 0) (list-ref l 1))\n     (triples_sum_to_zero (cdr l))]\n\
    \    [(= (list-ref l 0) (list-ref l 2))\n     (triples_sum_to_zero (cddr l))]\n\
    \    [(= (list-ref l 1) (list-ref l 2))\n     (triples_sum_to_zero (cddr l))]\n\
    \    [(= (list-ref l 0) (list-ref l 1) (list-ref l 2))\n     (triples_sum_to_zero\
    \ (cddr l))]\n    [(= (list-ref l 0) (list-ref l 1) (list-ref l 2))\n     (triples_sum_to_zero\
    \ (cddr l))]\n    [(= (list-ref l 0) (list-ref l 1) (list-ref l 2))\n     (triples_sum_to_zero\
    \ (cddr l))]\n    [(= (list-ref l 0) (list-ref l 1) (list-ref l 2))\n     (triples_sum_to_zero\
    \ (cddr l))]\n    [(= (list-ref l 0) (list-ref l 1) (list-ref l 2))\n     (triples_sum_to_zero\
    \ (cddr l))]\n    [(= (list-ref l 0) (list-ref l 1) (list-ref l 2))\n     (triples_sum_to_zero\
    \ (cddr l))]\n    [(= (list-ref l 0) (list-", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty?\
    \ (cdr l)) #f]\n    [(empty? (cddr l)) #f]\n    [(and (not (member (- (car l)\
    \ (cadr l)) (cddr l)))\n          (triples_sum_to_zero (cdr l)))\n     #f]\n \
    \   [else #t]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l))\n          (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (or\n      (and\n       (=\
    \ (list-ref l 0) (- (list-ref l 1) (list-ref l 2)))\n       (not (equal? (list-ref\
    \ l 0) (list-ref l 1)))\n       (not (equal? (list-ref l 0) (list-ref l 2)))\n\
    \       (not (equal? (list-ref l 1) (list-ref l 2))))\n      (triples_sum_to_zero\
    \ (rest l)))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\
    \ (member (- (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (-\
    \ (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car\
    \ l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n    [(empty? (cddr l)) #f]\n\
    \    [(and (not (member (- (car l) (cadr l)) (cddr l)))\n          (triples_sum_to_zero\
    \ (cdr l))) #f]\n    [else #t]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\
    \ #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(empty? (cdr l)) #f]\n    [(empty? (cddr l)) #f]\n    [(and (not (member\
    \ (car l) (cdr l)))\n          (not (member (car l) (cddr l)))\n          (not\
    \ (member (cadr l) (cddr l)))\n          (= (list-ref l 0) (- (list-ref l 1) (list-ref\
    \ l 2))))\n     #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l))\n          (member (- (first l))\
    \ (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest\
    \ (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest l)))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l))\n          (member (car l) (cddr\
    \ l)))\n     #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\n          (member (-\
    \ (car l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list-ref l 0) (rest l))\n          (member\
    \ (list-ref l 0) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n    [(empty? (cddr l))\
    \ #f]\n    [(and (not (member (car l) (cdr l)))\n          (not (member (car l)\
    \ (cddr l)))\n          (not (member (cadr l) (cddr l)))\n          (= (apply\
    \ + (list (car l) (cadr l) (caddr l))) 0))\n     #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n \
    \   [(empty? (cddr l)) #f]\n    [(and (not (member (- (car l) (cadr l)) (cddr\
    \ l)))\n          (triples_sum_to_zero (cdr l)))\n     #f]\n    [else #t]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car\
    \ l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l)\
    \ (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l))\n          (member\
    \ (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l))\n          (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member 0 l) (member\
    \ (- 0 (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n    [(empty? (cddr l))\
    \ #f]\n    [(and (not (member (car l) (cdr l)))\n          (not (member (car l)\
    \ (cddr l)))\n          (not (member (cadr l) (cddr l)))\n          (= (list-ref\
    \ l 0) (- (list-ref l 1) (list-ref l 2))))\n     #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car\
    \ l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l)\
    \ (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l))\n          (member\
    \ (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest\
    \ l))) #f]\n    [else (or (and (= (sum (first l) (first (rest l)) (first (rest\
    \ (rest l)))) 0) #t)\n              (triples_sum_to_zero (rest l)))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest\
    \ l))) #f]\n    [else\n     (or\n      (and (= (list-ref l 0) (- (list-ref l 1)\
    \ (list-ref l 2)))\n           (not (member (list-ref l 0) (rest (rest l)))))\n\
    \      (triples_sum_to_zero (rest l)))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l))\n          (member (car l) (cddr l)))\n  \
    \   #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) l)\n          (member (list-ref l 1) l)\n  \
    \        (member (list-ref l 2) l))\n     #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (rest l))\n          (member (list-ref l 0) (rest (rest l)))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\
    \ #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest l))))\
    \ #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [else\n\
    \     (let* ([a (first l)]\n            [b (first (rest l))]\n            [c (first\
    \ (rest (rest l)))]\n            [rest (rest (rest (rest l)))])\n       (cond\n\
    \         [(and (not (equal? a b)) (not (equal? a c)) (not (equal? b c)) (= (+\
    \ a b c) 0)) #t]\n         [else (triples_sum_to_zero (cons a (cons b rest)))]))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n    \
    \      (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [else\n     (let ([x (first l)]\n           [y (first (rest l))]\n\
    \           [z (first (rest (rest l)))])\n       (cond\n         [(= (+ x y z)\
    \ 0) #t]\n         [else (triples_sum_to_zero (rest l))]))]))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l) (rest\
    \ (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l))\n          (member\
    \ (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(null? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car\
    \ l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [else\n  \
    \   (let ([a (first l)]\n           [b (first (rest l))]\n           [c (first\
    \ (rest (rest l)))])\n       (cond\n         [(= (+ a b c) 0) #t]\n         [else\
    \ (triples_sum_to_zero (rest l))]))]))\n", "  (cond\n    [(empty? l) #f]\n   \
    \ [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [else\n     (cond\n       [(and (not (member\
    \ (list (first l) (second l) (third l)) (list-of-triples l)))\n             (=\
    \ (list-sum (list (first l) (second l) (third l))) 0))\n        #t]\n       [else\n\
    \        (triples_sum_to_zero (rest l))])]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (rest l))\n          (member (list-ref l 0)\
    \ (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l))\n          (member\
    \ (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (- (first l))\
    \ (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (first l) (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (list-ref l 0) (rest l))\n          (member (list-ref l 0) (rest (rest\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [else\n\
    \     (let* ([x (first l)]\n            [y (first (rest l))]\n            [z (first\
    \ (rest (rest l)))]\n            [rest (rest (rest (rest l)))])\n       (cond\n\
    \         [(and (not (member x rest)) (not (member y rest)) (not (member z rest))\n\
    \               (= (+ x y z) 0))\n          #t]\n         [else (triples_sum_to_zero\
    \ (cons x rest))]))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (cdr l))\
    \ #f]\n    [(empty? (cddr l)) #f]\n    [(and (not (member 0 l)) (not (member (-\
    \ 0 (car l)) (cdr l))))\n     (triples_sum_to_zero (cdr l))]\n    [else #t]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l))\n          (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l))\n         \
    \ (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty?\
    \ (rest (rest l))) #f]\n    [else\n     (let* ([a (first l)]\n            [b (first\
    \ (rest l))]\n            [c (first (rest (rest l)))]\n            [rest (rest\
    \ (rest (rest l)))])\n       (cond\n         [(= (+ a b c) 0) #t]\n         [else\
    \ (triples_sum_to_zero (cons b (cons c rest)))]))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [else\n\
    \     (let ([a (first l)]\n           [b (first (rest l))]\n           [c (first\
    \ (rest (rest l)))])\n       (cond\n         [(= (+ a b c) 0) #t]\n         [else\
    \ (triples_sum_to_zero (rest l))]))]))\n", "  (cond\n    [(empty? l) #f]\n   \
    \ [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l\
    \ 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l))\n          (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l))\n          (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l)\
    \ (rest l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n\
    \    [(empty? (cddr l)) #f]\n    [(and (not (member (car l) (cdr l)))\n      \
    \    (not (member (car l) (cddr l)))\n          (not (member (cadr l) (cddr l)))\n\
    \          (= (car l) (- (cadr l) (caddr l)))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car\
    \ l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l)))\
    \ #f]\n    [else\n     (cond\n       [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n       [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n  \
    \     [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n       [else\n  \
    \      (cond\n          [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n\
    \          [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n          [(=\
    \ (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n          [else\n       \
    \    (cond\n             [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n\
    \             [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n        \
    \     [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n             [else\n\
    \              (cond\n                [(= (list-ref l 0) (list-ref l 1) (list-ref\
    \ l 2)) #f]\n                [(= (list-ref l 0) (list-ref l 1) (list-ref l 2))\
    \ #f]\n                [(= (list-ref l 0) (list-ref l 1) (list-ref l 2)) #f]\n\
    \                [else\n                 (cond\n                   [(= (list-ref\
    \ l 0) (list-ref l 1) (list-ref l 2)) #f]\n                   [(= (list-ref l\
    \ 0) (list-ref l 1) (list-ref l 2)) #f]\n                   [(= (list-ref l 0)\
    \ (list-ref l 1) (list-ref l 2)) #f]\n                   [else\n             \
    \       (cond\n                      [(=", "  (cond\n    [(empty? l) #f]\n   \
    \ [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and\n      (member (first l) (rest l))\n      (member (- (first l)) (rest\
    \ l)))\n      #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
