name: HumanEval_44_change_base
language: rkt
prompt: "#lang racket\n\n;; Change numerical base of input number x to base.\n;; return\
  \ string representation after the conversion.\n;; base numbers are less than 10.\n\
  ;; >>> (change_base 8 3)\n;; \"22\"\n;; >>> (change_base 8 2)\n;; \"1000\"\n;; >>>\
  \ (change_base 7 2)\n;; \"111\"\n(define (change_base x base)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate change_base))\n\
  \    (check-equal? (candidate 8 3) \"22\")\n    (check-equal? (candidate 9 3) \"\
  100\")\n    (check-equal? (candidate 234 2) \"11101010\")\n    (check-equal? (candidate\
  \ 16 2) \"10000\")\n    (check-equal? (candidate 8 2) \"1000\")\n    (check-equal?\
  \ (candidate 7 2) \"111\")\n    (check-equal? (candidate 2 3) \"2\")\n    (check-equal?\
  \ (candidate 3 4) \"3\")\n    (check-equal? (candidate 4 5) \"4\")\n    (check-equal?\
  \ (candidate 5 6) \"5\")\n    (check-equal? (candidate 6 7) \"6\")\n    (check-equal?\
  \ (candidate 7 8) \"7\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (define (change_base-iter x base result)\n    (cond\n  \
    \    [(= x 0) result]\n      [else (change_base-iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base-iter x base \"\"))\n", "  (define\
    \ (iter x base)\n    (if (= x 0)\n        \"\"\n        (string-append (iter (quotient\
    \ x base) base)\n                       (number->string (remainder x base)))))\n\
    \  (iter x base))\n", "  (define (change_base_iter x base result)\n    (if (=\
    \ x 0)\n        result\n        (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))))\n  (change_base_iter x base \"\"))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (define\
    \ (change_base_iter x base acc)\n    (if (= x 0)\n        acc\n        (change_base_iter\
    \ (quotient x base) base (string (remainder x base) acc))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (if (= x 0)\n      \"\"\n      (string-append (change_base\
    \ (quotient x base) base)\n                     (number->string (remainder x base)))))\n",
  "  (define (change_base_iter x base acc)\n    (if (= x 0)\n        acc\n       \
    \ (change_base_iter (quotient x base) base (string (remainder x base) acc))))\n\
    \  (change_base_iter x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else\
    \ (string-append (change_base (quotient x base) base)\n                      \
    \   (number->string (remainder x base)))]))\n", "  (define (change_base_iter x\
    \ base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (cond [(= x 0) \"\"]\n        [else (string-append (change_base\
    \ (quotient x base) base)\n                             (number->string (remainder\
    \ x base)))]))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (if (= x 0)\n \
    \     \"\"\n      (string-append (change_base (quotient x base) base)\n      \
    \               (number->string (remainder x base)))))\n", "  (cond\n    [(= x\
    \ 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n  \
    \                       (number->string (remainder x base)))]))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (if (=\
    \ x 0)\n      \"\"\n      (string-append (change_base (quotient x base) base)\n\
    \                     (number->string (remainder x base)))))\n", "  (cond\n  \
    \  [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (if (=\
    \ x 0)\n      \"\"\n      (string-append (change_base (quotient x base) base)\n\
    \                     (number->string (remainder x base)))))\n", "  (define (change_base_iter\
    \ x base acc)\n    (cond\n      [(= x 0) acc]\n      [else (change_base_iter (quotient\
    \ x base) base (string (+ (remainder x base) #\\0) acc))]))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x\
    \ 0)\n        result\n        (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))))\n  (change_base_iter x base \"\"))\n", "  (define\
    \ (change_base_iter x base result)\n    (if (= x 0)\n        result\n        (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (cond ((=\
    \ x 0) result)\n          (else (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result)))))\n  (change_base_iter x base \"\"))\n", "  (define\
    \ (iter x base result)\n    (if (= x 0)\n        result\n        (iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (iter x base \"\"))\n",
  "  (define (change_base_iter x base acc)\n    (cond\n      [(= x 0) acc]\n     \
    \ [else (change_base_iter (quotient x base) base (string (remainder x base) acc))]))\n\
    \  (change_base_iter x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else\
    \ (string-append (change_base (quotient x base) base)\n                      \
    \   (number->string (remainder x base)))]))\n", "  (define (change_base_iter x\
    \ base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base)\n    (cond\n      [(= x 0) '()]\n\
    \      [else (cons (remainder x base) (change_base_iter (quotient x base) base))]))\n\
    \  (string-join (reverse (change_base_iter x base)) \"\"))\n", "  (if (= x 0)\n\
    \      \"0\"\n      (let loop ((x x) (acc \"\"))\n        (if (= x 0)\n      \
    \      acc\n            (loop (quotient x base) (string (remainder x base) acc))))))\n",
  "  (if (= x 0)\n      \"\"\n      (string-append (change_base (quotient x base)\
    \ base)\n                     (number->string (remainder x base)))))\n", "  (define\
    \ (change_base_iter x base result)\n    (if (= x 0)\n        result\n        (change_base_iter\
    \ (quotient x base) base (string (+ (remainder x base) (string->number \"48\"\
    )) result))))\n  (change_base_iter x base \"\"))\n", "  (cond [(= x 0) \"\"]\n\
    \        [else (string-append (change_base (quotient x base) base)\n         \
    \                    (number->string (remainder x base)))]))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n  \
    \      result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (cond\n    [(=\
    \ x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (define\
    \ (iter x base result)\n    (if (zero? x)\n        result\n        (iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (iter x base \"\"))\n",
  "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x\
    \ base) base)\n                         (number->string (remainder x base)))]))\n",
  "  (define (change_base_iter x base result)\n    (if (= x 0)\n        result\n \
    \       (change_base_iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base_iter x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else\
    \ (string-append (change_base (quotient x base) base)\n                      \
    \   (number->string (remainder x base)))]))\n", "  (define (change_base_iter x\
    \ base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n  \
    \      result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (if (= x 0)\n \
    \     \"\"\n      (string-append (change_base (quotient x base) base)\n      \
    \               (number->string (remainder x base)))))\n", "  (define (change_base_iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (cond ((=\
    \ x 0) result)\n          (else (change_base_iter (/ x base) base (string (remainder\
    \ x base)) result))))\n  (change_base_iter x base \"\"))\n", "  (cond\n    [(=\
    \ x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (define\
    \ (change_base_iter x base acc)\n    (if (= x 0)\n        acc\n        (change_base_iter\
    \ (quotient x base) base (string (remainder x base) acc))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base res)\n    (if (= x 0)\n\
    \        res\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) res))))\n  (change_base_iter x base \"\"))\n", "  (cond\n    [(= x 0)\
    \ \"\"]\n    [else (string-append (change_base (quotient x base) base)\n     \
    \                    (number->string (remainder x base)))]))\n", "  (if (= x 0)\n\
    \      \"\"\n      (string-append (change_base (quotient x base) base)\n     \
    \                (number->string (remainder x base)))))\n", "  (define (change_base_iter\
    \ x base result)\n    (cond ((= x 0) result)\n          (else (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result)))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x\
    \ 0)\n        result\n        (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))))\n  (change_base_iter x base \"\"))\n", "  (define\
    \ (change_base_iter x base result)\n    (if (= x 0)\n        result\n        (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (if (= x 0)\n      \"\"\n      (string-append (change_base\
    \ (quotient x base) base)\n                     (number->string (remainder x base)))))\n",
  "  (define (change_base_iter x base result)\n    (cond [(= x 0) result]\n      \
    \    [else (change_base_iter (quotient x base) base (string (remainder x base)\
    \ result))]))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base acc)\n    (if (= x 0)\n     \
    \   acc\n        (change_base_iter (quotient x base) base (string (remainder x\
    \ base) acc))))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base acc)\n    (if (= x 0)\n     \
    \   acc\n        (change_base_iter (quotient x base) base (string (remainder x\
    \ base) acc))))\n  (change_base_iter x base \"\"))\n", "  (cond\n    [(= x 0)\
    \ \"\"]\n    [else (string-append (change_base (quotient x base) base)\n     \
    \                    (number->string (remainder x base)))]))\n", "  (define (change_base_iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base_iter\
    \ x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (define (iter x base result)\n    (if (= x 0)\n        result\n\
    \        (iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (iter x base \"\"))\n", "  (define (change_base_iter x base result)\n    (if\
    \ (= x 0)\n        result\n        (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))))\n  (change_base_iter x base \"\"))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (if (zero?\
    \ x)\n      \"\"\n      (string-append (change_base (quotient x base) base)\n\
    \                     (number->string (remainder x base)))))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n  \
    \      result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base_iter x base \"\"))\n", "  (define\
    \ (change_base_iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change_base_iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change_base_iter x base \"\"))\n", "  (define (change_base_iter x base result)\n\
    \    (if (= x 0)\n        result\n        (change_base_iter (quotient x base)\
    \ base (string (remainder x base) result))))\n  (change_base_iter x base \"\"\
    ))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient\
    \ x base) base)\n                         (number->string (remainder x base)))]))\n",
  "  (cond\n    [(= x 0) \"\"]\n    [else (change_base (quotient x base) base) (number->string\
    \ (remainder x base))]))\n", "  (define (change_base_iter x base result)\n   \
    \ (if (= x 0)\n        result\n        (change_base_iter (quotient x base) base\
    \ (string (remainder x base) result))))\n  (change_base_iter x base \"\"))\n",
  "  (define (change_base_iter x base result)\n    (cond ((= x 0) result)\n      \
    \    (else (change_base_iter (quotient x base) base (string (remainder x base)\
    \ result)))))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (cond ((= x 0) result)\n          (else (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result)))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x\
    \ 0)\n        result\n        (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))))\n  (change_base_iter x base \"\"))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (define\
    \ (change_base_iter x base result)\n    (cond ((= x 0) result)\n          (else\
    \ (change_base_iter (quotient x base) base (string (remainder x base) result)))))\n\
    \  (change_base_iter x base \"\"))\n", "  (define (change_base_iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change_base_iter (quotient x\
    \ base) base (string (remainder x base) result))]))\n  (change_base_iter x base\
    \ \"\"))\n", "  (if (= x 0)\n      \"\"\n      (string-append (change_base (quotient\
    \ x base) base)\n                     (number->string (remainder x base)))))\n",
  "  (define (change_base_iter x base result)\n    (if (= x 0)\n        result\n \
    \       (change_base_iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base_iter x base \"\"))\n", "  (define (change_base_iter x base result)\n\
    \    (cond\n      [(= x 0) result]\n      [else (change_base_iter (quotient x\
    \ base) base (string (remainder x base) result))]))\n  (change_base_iter x base\
    \ \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (define (change_base_iter x base acc)\n    (cond\n     \
    \ [(= x 0) acc]\n      [else (change_base_iter (quotient x base) base (string\
    \ (remainder x base) acc))]))\n  (change_base_iter x base \"\"))\n", "  (if (=\
    \ x 0)\n      \"\"\n      (string-append (change_base (quotient x base) base)\n\
    \                     (number->string (remainder x base)))))\n", "  (cond [(=\
    \ x 0) \"\"]\n        [else (string-append (change_base (quotient x base) base)\n\
    \                             (number->string (remainder x base)))]))\n", "  (define\
    \ (change_base_iter x base result)\n    (if (= x 0)\n        result\n        (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (define (change_base_iter x base acc)\n    (if (= x 0)\n\
    \        acc\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) acc))))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n  \
    \      result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_helper\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base_helper\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base_helper\
    \ x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (define (change_base_iter x base acc)\n    (if (= x 0)\n\
    \        acc\n        (change_base_iter (quotient x base) base (string (+ (remainder\
    \ x base) 48) acc))))\n  (change_base_iter x base \"\"))\n", "  (if (= x 0)\n\
    \      \"\"\n      (string-append (change_base (quotient x base) base)\n     \
    \                (number->string (remainder x base)))))\n", "  (define (change_base-iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base-iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base-iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n  \
    \      result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (cond\n    [(=\
    \ x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (define\
    \ (change_base_iter x base)\n    (if (zero? x)\n        \"\"\n        (string-append\
    \ (change_base_iter (quotient x base) base)\n                       (number->string\
    \ (remainder x base)))))\n  (change_base_iter x base))\n", "  (define (change_base-iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base-iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base-iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base acc)\n    (cond\n      [(= x\
    \ 0) (string-append acc \"\")]\n      [else (change_base_iter (quotient x base)\
    \ base (string-append acc (number->string (remainder x base))))]))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base_iter x base \"\"))\n", "  (if\
    \ (= x 0)\n      \"\"\n      (string-append (change_base (quotient x base) base)\n\
    \                     (number->string (remainder x base)))))\n", "  (if (= x 0)\n\
    \      \"\"\n      (string-append (change_base (quotient x base) base)\n     \
    \                (number->string (remainder x base)))))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base result)\n    (cond ((= x 0) result)\n\
    \          (else (change_base_iter (quotient x base) base (string (remainder x\
    \ base) result)))))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (cond\n    [(=\
    \ x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (if (=\
    \ x 0)\n      \"\"\n      (string-append (change_base (quotient x base) base)\n\
    \                     (number->string (remainder x base)))))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (cond\n    [(=\
    \ x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (define\
    \ (change_base_iter x base result)\n    (if (= x 0)\n        result\n        (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x\
    \ 0)\n        result\n        (change_base_iter (quotient x base) base (string\
    \ (+ (remainder x base) #\\0) result))))\n  (change_base_iter x base \"\"))\n",
  "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x\
    \ base) base)\n                         (number->string (remainder x base)))]))\n",
  "  (define (change-base-iter x base result)\n    (if (= x 0)\n        result\n \
    \       (change-base-iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change-base-iter x base \"\"))\n", "  (define (change_base_iter x base result)\n\
    \    (if (= x 0)\n        result\n        (change_base_iter (quotient x base)\
    \ base (string (remainder x base) result))))\n  (change_base_iter x base \"\"\
    ))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n        result\n\
    \        (change_base_iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base_iter x base \"\"))\n", "  (define (change_base_iter x base result)\n\
    \    (if (= x 0)\n        result\n        (change_base_iter (quotient x base)\
    \ base (string (remainder x base) result))))\n  (change_base_iter x base \"\"\
    ))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n        result\n\
    \        (change_base_iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base_iter x base \"\"))\n", "  (define (change_base_iter x base acc)\n\
    \    (cond ((= x 0) acc)\n          (else (change_base_iter (quotient x base)\
    \ base (string (remainder x base) acc)))))\n  (change_base_iter x base \"\"))\n",
  "  (define (change_base_iter x base acc)\n    (if (= x 0)\n        acc\n       \
    \ (change_base_iter (quotient x base) base (string (+ (remainder x base) 48) acc))))\n\
    \  (change_base_iter x base \"\"))\n", "  (cond [(= x 0) \"\"]\n        [else\
    \ (string-append (change_base (quotient x base) base)\n                      \
    \       (number->string (remainder x base)))]))\n", "  (cond\n    [(= x 0) \"\"\
    ]\n    [else (string-append (change_base (quotient x base) base)\n           \
    \              (number->string (remainder x base)))]))\n", "  (define (change_base_iter\
    \ x base res)\n    (if (= x 0)\n        res\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) res))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (if (= x 0)\n      \"\"\n      (string-append (change_base\
    \ (quotient x base) base)\n                     (number->string (remainder x base)))))\n",
  "  (define (change_base-iter x base result)\n    (if (= x 0)\n        result\n \
    \       (change_base-iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base-iter x base \"\"))\n", "  (define (change_base_iter x base acc)\n\
    \    (if (= x 0)\n        acc\n        (change_base_iter (quotient x base) base\
    \ (string (remainder x base) acc))))\n  (change_base_iter x base \"\"))\n", " \
    \ (define (change_base_iter x base result)\n    (if (= x 0)\n        result\n\
    \        (change_base_iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base_iter x base \"\"))\n", "  (define (change_base_iter x base result)\n\
    \    (if (= x 0)\n        result\n        (change_base_iter (quotient x base)\
    \ base (string (remainder x base) result))))\n  (change_base_iter x base \"\"\
    ))\n", "  (define (change_base-iter x base result)\n    (if (= x 0)\n        result\n\
    \        (change_base-iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base-iter x base \"\"))\n", "  (define (change_base_iter x base acc)\n\
    \    (if (= x 0)\n        acc\n        (change_base_iter (quotient x base) base\
    \ (string (remainder x base) acc))))\n  (change_base_iter x base \"\"))\n", " \
    \ (cond [(= x 0) \"\"]\n        [else (string-append (change_base (quotient x\
    \ base) base)\n                             (number->string (remainder x base)))]))\n",
  "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x\
    \ base) base)\n                         (number->string (remainder x base)))]))\n",
  "  (define (change_base_iter x base result)\n    (if (= x 0)\n        result\n \
    \       (change_base_iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base_iter x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else\
    \ (string-append (change_base (quotient x base) base)\n                      \
    \   (number->string (remainder x base)))]))\n", "  (cond\n    [(= x 0) \"\"]\n\
    \    [else (string-append (change_base (quotient x base) base)\n             \
    \            (number->string (remainder x base)))]))\n", "  (cond\n    [(= x 0)\
    \ \"\"]\n    [else (string-append (change_base (quotient x base) base)\n     \
    \                    (number->string (remainder x base)))]))\n", "  (if (= x 0)\n\
    \      \"\"\n      (string-append (change_base (quotient x base) base)\n     \
    \                (number->string (remainder x base)))))\n", "  (cond [(= x 0)\
    \ \"\"]\n        [else (string-append (change_base (quotient x base) base)\n \
    \                            (number->string (remainder x base)))]))\n", "  (define\
    \ (change_base_iter x base result)\n    (cond\n      [(= x 0) result]\n      [else\
    \ (change_base_iter (quotient x base) base (string (remainder x base) result))]))\n\
    \  (change_base_iter x base \"\"))\n", "  (cond [(= x 0) \"\"]\n        [else\
    \ (string-append (change_base (quotient x base) base)\n                      \
    \       (number->string (remainder x base)))]))\n", "  (if (= x 0)\n      \"\"\
    \n      (string-append (change_base (quotient x base) base)\n                \
    \     (number->string (remainder x base)))))\n", "  (define (rec x)\n    (cond\n\
    \      [(= x 0) \"\"]\n      [else (string-append (rec (quotient x base)) (number->string\
    \ (remainder x base)))]))\n  (rec x))\n", "  (define (change_base_iter x base\
    \ result)\n    (cond\n      [(= x 0) result]\n      [else (change_base_iter (/\
    \ x base) base (string (remainder x base)))]))\n  (change_base_iter x base \"\"\
    ))\n", "  (define (iter x base result)\n    (if (= x 0)\n        result\n    \
    \    (iter (quotient x base) base (string (remainder x base) result))))\n  (iter\
    \ x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (change_base (quotient\
    \ x base) base) (number->string (remainder x base))]))\n", "  (define (change_base-iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base-iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base-iter x base\
    \ \"\"))\n", "  (cond [(= x 0) \"\"]\n        [else (string-append (change_base\
    \ (quotient x base) base)\n                             (number->string (remainder\
    \ x base)))]))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n\
    \        result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (cond\n    [(=\
    \ x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (define\
    \ (change_base_iter x base acc)\n    (if (= x 0)\n        acc\n        (change_base_iter\
    \ (quotient x base) base (string (remainder x base) acc))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x\
    \ 0)\n        result\n        (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))))\n  (change_base_iter x base \"\"))\n", "  (define\
    \ (change_base_iter x base result)\n    (if (= x 0)\n        result\n        (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (change_base (quotient\
    \ x base) base) (number->string (remainder x base))]))\n", "  (if (= x 0)\n  \
    \    \"\"\n      (string-append (change_base (quotient x base) base)\n       \
    \              (number->string (remainder x base)))))\n", "  (cond\n    [(= x\
    \ 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n  \
    \                       (number->string (remainder x base)))]))\n", "  (define\
    \ (change-base-iter x base)\n    (if (= x 0)\n        \"\"\n        (string-append\
    \ (change-base-iter (quotient x base) base)\n                       (number->string\
    \ (remainder x base)))))\n  (change-base-iter x base))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (define (change_base_iter x base result)\n    (if (= x 0)\n  \
    \      result\n        (change_base_iter (quotient x base) base (string (remainder\
    \ x base) result))))\n  (change_base_iter x base \"\"))\n", "  (define (change_base_iter\
    \ x base result)\n    (cond\n      [(= x 0) result]\n      [else (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))]))\n  (change_base_iter\
    \ x base \"\"))\n", "  (define (change_base_iter x base result)\n    (cond\n \
    \     [(= x 0) result]\n      [else (change_base_iter (quotient x base) base (string\
    \ (remainder x base) result))]))\n  (change_base_iter x base \"\"))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (if (zero?\
    \ x)\n      \"\"\n      (string-append (change_base (quotient x base) base)\n\
    \                     (number->string (remainder x base)))))\n", "  (define (change_base_iter\
    \ x base result)\n    (if (= x 0)\n        result\n        (change_base_iter (quotient\
    \ x base) base (string (remainder x base) result))))\n  (change_base_iter x base\
    \ \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (if (= x 0)\n      \"\"\n      (string-append (change_base\
    \ (quotient x base) base)\n                     (number->string (remainder x base)))))\n",
  "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x\
    \ base) base)\n                         (number->string (remainder x base)))]))\n",
  "  (define (change_base_iter x base result)\n    (if (= x 0)\n        result\n \
    \       (change_base_iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base_iter x base \"\"))\n", "  (define (change_base_iter x base lst)\n\
    \    (if (= x 0)\n        (list->string (reverse lst))\n        (change_base_iter\
    \ (quotient x base) base (cons (remainder x base) lst))))\n  (change_base_iter\
    \ x base '()))\n", "  (if (= x 0)\n      \"\"\n      (string-append (change_base\
    \ (quotient x base) base)\n                     (number->string (remainder x base)))))\n",
  "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x\
    \ base) base)\n                         (number->string (remainder x base)))]))\n",
  "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x\
    \ base) base)\n                         (number->string (remainder x base)))]))\n",
  "  (define (change_base_iter x base result)\n    (if (= x 0)\n        result\n \
    \       (change_base_iter (quotient x base) base (string (remainder x base) result))))\n\
    \  (change_base_iter x base \"\"))\n", "  (if (= x 0)\n      \"\"\n      (string-append\
    \ (change_base (quotient x base) base)\n                     (number->string (remainder\
    \ x base)))))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (string-append (change_base\
    \ (quotient x base) base)\n                         (number->string (remainder\
    \ x base)))]))\n", "  (cond\n    [(= x 0) \"\"]\n    [else (change_base (quotient\
    \ x base) base) (number->string (remainder x base))]))\n", "  (cond\n    [(= x\
    \ 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n  \
    \                       (number->string (remainder x base)))]))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (cond\n\
    \    [(= x 0) \"\"]\n    [else (string-append (change_base (quotient x base) base)\n\
    \                         (number->string (remainder x base)))]))\n", "  (define\
    \ (change_base_iter x base result)\n    (if (= x 0)\n        result\n        (change_base_iter\
    \ (quotient x base) base (string (remainder x base) result))))\n  (change_base_iter\
    \ x base \"\"))\n", "  (cond\n    [(= x 0) \"\"]\n    [else\n     (string-append\
    \ (change_base (quotient x base) base)\n                    (number->string (remainder\
    \ x base)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
