language: php
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $smallest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $largest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpp99w86.php:32\n\
    Stack trace:\n#0 /tmp/tmpqpp99w86.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqpp99w86.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest_negative = null;\n  $smallest_positive = null;\n  foreach ($lst\
    \ as $value) {\n    if ($value < 0 && $largest_negative === null) {\n      $largest_negative\
    \ = $value;\n    } else if ($value > 0 && $smallest_positive === null) {\n   \
    \   $smallest_positive = $value;\n    }\n  }\n  return array($largest_negative,\
    \ $smallest_positive);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mtu55hc.php:31\n\
    Stack trace:\n#0 /tmp/tmp0mtu55hc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0mtu55hc.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = $item;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_43s55tv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_43s55tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_43s55tv.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_null($item)) {\n      $smallest = null;\n      $largest = null;\n\
    \      break;\n    }\n    if (is_null($smallest)) {\n      $smallest = $item;\n\
    \      $largest = $item;\n    } else if ($item < $smallest) {\n      $smallest\
    \ = $item;\n    } else if ($item > $largest) {\n      $largest = $item;\n    }\n\
    \  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphty30lot.php:39\n\
    Stack trace:\n#0 /tmp/tmphty30lot.php(52): test()\n#1 {main}\n  thrown in /tmp/tmphty30lot.php\
    \ on line 39\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_int($item))\
    \ {\n      $result[] = $item;\n    }\n  }\n  if (count($result) == 0) {\n    return\
    \ array();\n  }\n  sort($result);\n  $result[0] = null;\n  $result[1] = -$result[0];\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8egjx3k.php:34\n\
    Stack trace:\n#0 /tmp/tmp_8egjx3k.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_8egjx3k.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = array();\n  $smallest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $largest[] = $item;\n    } else {\n      $smallest[]\
    \ = $item;\n    }\n  }\n  if (count($largest) > count($smallest)) {\n    return\
    \ $largest;\n  } else {\n    return $smallest;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wuev4s_.php:35\n\
    Stack trace:\n#0 /tmp/tmp_wuev4s_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_wuev4s_.php\
    \ on line 35\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = array();\n  $smallest = array();\n  foreach ($lst as $value)\
    \ {\n    if ($value < 0 && $largest == array()) {\n      $largest = $value;\n\
    \    } else if ($value > 0 && $smallest == array()) {\n      $smallest = $value;\n\
    \    } else if ($value < 0 && $smallest == array()) {\n      $smallest = $value;\n\
    \    } else if ($value > 0 && $largest == array()) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($largest, $smallest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki9sj19o.php:35\n\
    Stack trace:\n#0 /tmp/tmpki9sj19o.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpki9sj19o.php\
    \ on line 35\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $item) {\n    if ($item <\
    \ 0) {\n      if ($a === null) {\n        $a = $item;\n      } else {\n      \
    \  $b = $item;\n      }\n    } else if ($item > 0) {\n      if ($a === null) {\n\
    \        $a = $item;\n      } else if ($b === null) {\n        $b = $item;\n \
    \     }\n    }\n  }\n  return array($a, $b);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f36zh2l.php:39\n\
    Stack trace:\n#0 /tmp/tmp4f36zh2l.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4f36zh2l.php\
    \ on line 39\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_int($item)) {\n      if ($item < 0) {\n        $smallest[] = $item;\n\
    \      } else {\n        $largest[] = $item;\n      }\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbztopxg.php:33\n\
    Stack trace:\n#0 /tmp/tmpwbztopxg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpwbztopxg.php\
    \ on line 33\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $value)\
    \ {\n    if ($value < 0 || $value > 0) {\n      $smallest[] = $value;\n      $largest[]\
    \ = $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0blpnx9.php:30\n\
    Stack trace:\n#0 /tmp/tmpp0blpnx9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpp0blpnx9.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest)) {\n      $smallest = $item;\n      $largest = $item;\n\
    \    } elseif ($item < $smallest) {\n      $smallest = $item;\n    } elseif ($item\
    \ > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ak1so2i.php:34\n\
    Stack trace:\n#0 /tmp/tmp7ak1so2i.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7ak1so2i.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = null;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1dspwsc.php:31\n\
    Stack trace:\n#0 /tmp/tmpp1dspwsc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpp1dspwsc.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69_9mesu.php:32\n\
    Stack trace:\n#0 /tmp/tmp69_9mesu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp69_9mesu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === null || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lgbb6_u.php:32\n\
    Stack trace:\n#0 /tmp/tmp3lgbb6_u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3lgbb6_u.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if ($item < 0) {\n\
    \      $result[0] = max($result[0], $item);\n    } else if ($item > 0) {\n   \
    \   $result[1] = min($result[1], $item);\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnckiesp9.php:30\n\
    Stack trace:\n#0 /tmp/tmpnckiesp9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnckiesp9.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value < $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0mb_f51.php:32\n\
    Stack trace:\n#0 /tmp/tmpw0mb_f51.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpw0mb_f51.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = null;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1dspwsc.php:31\n\
    Stack trace:\n#0 /tmp/tmpp1dspwsc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpp1dspwsc.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === NULL || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === NULL || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvh_l39t1.php:32\n\
    Stack trace:\n#0 /tmp/tmpvh_l39t1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvh_l39t1.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $max = -$item;\n    } else if ($item > 0) {\n\
    \      $min = $item;\n    }\n  }\n  return array($max, $min);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchriqz_q.php:31\n\
    Stack trace:\n#0 /tmp/tmpchriqz_q.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpchriqz_q.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_int($item))\
    \ {\n      $result[] = $item;\n    } elseif (is_null($item)) {\n      $result[]\
    \ = null;\n    } else {\n      $result[] = min($item);\n      $result[] = max($item);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvsfzerps.php:33\n\
    Stack trace:\n#0 /tmp/tmpvsfzerps.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvsfzerps.php\
    \ on line 33\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  $largest = array();\n  $smallest = array();\n  foreach\
    \ ($lst as $value) {\n    if ($value < 0 || $value > 0) {\n      $result[] = $value;\n\
    \      if ($value < $largest) {\n        $largest = $value;\n      }\n      if\
    \ ($value > $smallest) {\n        $smallest = $value;\n      }\n    }\n  }\n \
    \ return array($smallest, $largest);\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3,\
    \ 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps068oui4.php:36\n\
    Stack trace:\n#0 /tmp/tmps068oui4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmps068oui4.php\
    \ on line 36\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === NULL || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === NULL || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvh_l39t1.php:32\n\
    Stack trace:\n#0 /tmp/tmpvh_l39t1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvh_l39t1.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $max = -$item;\n    } else if ($item > 0) {\n\
    \      $min = $item;\n    }\n  }\n  return array($max, $min);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchriqz_q.php:31\n\
    Stack trace:\n#0 /tmp/tmpchriqz_q.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpchriqz_q.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest_negative = null;\n  $smallest_positive = null;\n  foreach ($lst\
    \ as $value) {\n    if ($value < 0 && $largest_negative === null) {\n      $largest_negative\
    \ = $value;\n    } else if ($value > 0 && $smallest_positive === null) {\n   \
    \   $smallest_positive = $value;\n    }\n  }\n  return array($largest_negative,\
    \ $smallest_positive);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mtu55hc.php:31\n\
    Stack trace:\n#0 /tmp/tmp0mtu55hc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0mtu55hc.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if ($item < 0) {\n\
    \      $result[0] = max($result[0], $item);\n    } else {\n      $result[1] =\
    \ min($result[1], $item);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxya7r1v0.php:30\n\
    Stack trace:\n#0 /tmp/tmpxya7r1v0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxya7r1v0.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = $item;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_43s55tv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_43s55tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_43s55tv.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_null($item))\
    \ {\n      $result[] = null;\n      continue;\n    }\n    $result[] = max(-$item,\
    \ $item);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2gtiaauf.php:30\n\
    Stack trace:\n#0 /tmp/tmp2gtiaauf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2gtiaauf.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if ($item < 0) {\n\
    \      $result[0] = max($result[0], $item);\n    } else {\n      $result[1] =\
    \ min($result[1], $item);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxya7r1v0.php:30\n\
    Stack trace:\n#0 /tmp/tmpxya7r1v0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxya7r1v0.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = -PHP_INT_MAX;\n  foreach ($lst as $val) {\n\
    \    if ($val < $min) {\n      $min = $val;\n    }\n    if ($val > $max) {\n \
    \     $max = $val;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylzrddqp.php:32\n\
    Stack trace:\n#0 /tmp/tmpylzrddqp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpylzrddqp.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = PHP_INT_MAX;\n  $largest = PHP_INT_MIN;\n  foreach ($lst as\
    \ $item) {\n    if ($item < $smallest) {\n      $smallest = $item;\n    }\n  \
    \  if ($item > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphl4dy7mu.php:32\n\
    Stack trace:\n#0 /tmp/tmphl4dy7mu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphl4dy7mu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < $min) {\n      $min = $item;\n    }\n    if ($item > $max)\
    \ {\n      $max = $item;\n    }\n  }\n  return array($max, $min);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq892w7w.php:32\n\
    Stack trace:\n#0 /tmp/tmpnq892w7w.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnq892w7w.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = PHP_INT_MIN;\n  foreach ($lst as $item) {\n\
    \    if ($item < $min) {\n      $min = $item;\n    }\n    if ($item > $max) {\n\
    \      $max = $item;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcj1p4zes.php:32\n\
    Stack trace:\n#0 /tmp/tmpcj1p4zes.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcj1p4zes.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = null;\n  $max = null;\n  foreach ($lst as $item) {\n    if ($item\
    \ < $min) {\n      $min = $item;\n    } else if ($item > $max) {\n      $max =\
    \ $item;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59xc2r1c.php:31\n\
    Stack trace:\n#0 /tmp/tmp59xc2r1c.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp59xc2r1c.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69_9mesu.php:32\n\
    Stack trace:\n#0 /tmp/tmp69_9mesu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp69_9mesu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = -PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < $min) {\n      $min = $item;\n    }\n    if ($item > $max)\
    \ {\n      $max = $item;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9zbzt3l.php:32\n\
    Stack trace:\n#0 /tmp/tmpb9zbzt3l.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb9zbzt3l.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = array();\n  $smallest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_null($item)) {\n      $largest[] = null;\n      $smallest[] =\
    \ null;\n      continue;\n    }\n    if ($item < 0) {\n      $largest[] = $item;\n\
    \    } else {\n      $smallest[] = $item;\n    }\n  }\n  return array($largest,\
    \ $smallest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnzspwv3e.php:36\n\
    Stack trace:\n#0 /tmp/tmpnzspwv3e.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpnzspwv3e.php\
    \ on line 36\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $v) {\n    if ($v < 0) {\n\
    \      if ($a === null) {\n        $a = $v;\n      }\n      else {\n        $b\
    \ = $v;\n      }\n    }\n    else {\n      if ($a === null) {\n        $a = $v;\n\
    \      }\n      else {\n        if ($b === null) {\n          $b = $v;\n     \
    \   }\n        else {\n          if ($a > $b) {\n            $a = $v;\n      \
    \    }\n          else {\n            $b = $v;\n          }\n        }\n     \
    \ }\n    }\n  }\n  return array($a, $b);\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3,\
    \ 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzc1vd0q2.php:52\n\
    Stack trace:\n#0 /tmp/tmpzc1vd0q2.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpzc1vd0q2.php\
    \ on line 52\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_int($item))\
    \ {\n      $result[] = $item;\n    } elseif (is_null($item)) {\n      $result[]\
    \ = null;\n    } else {\n      $result[] = min($item);\n      $result[] = max($item);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvsfzerps.php:33\n\
    Stack trace:\n#0 /tmp/tmpvsfzerps.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvsfzerps.php\
    \ on line 33\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest)) {\n      $smallest = $item;\n      $largest = $item;\n\
    \    } elseif ($item < $smallest) {\n      $smallest = $item;\n    } elseif ($item\
    \ > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ak1so2i.php:34\n\
    Stack trace:\n#0 /tmp/tmp7ak1so2i.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7ak1so2i.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < $min) {\n      $min = $item;\n    }\n    if ($item > $max)\
    \ {\n      $max = $item;\n    }\n  }\n  return array($max, $min);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq892w7w.php:32\n\
    Stack trace:\n#0 /tmp/tmpnq892w7w.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnq892w7w.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value < $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0mb_f51.php:32\n\
    Stack trace:\n#0 /tmp/tmpw0mb_f51.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpw0mb_f51.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $value)\
    \ {\n    if ($value < 0 || $value > 0) {\n      $smallest[] = $value;\n      $largest[]\
    \ = $value;\n    } else {\n      $smallest[] = null;\n      $largest[] = null;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk3bjzt5.php:33\n\
    Stack trace:\n#0 /tmp/tmpfk3bjzt5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfk3bjzt5.php\
    \ on line 33\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $value) {\n    if ($value < 0 ||\
    \ $value > 0) {\n      $result[] = $value;\n    }\n  }\n  return $result ? $result\
    \ : null;\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgl57ex4.php:28\n\
    Stack trace:\n#0 /tmp/tmpjgl57ex4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjgl57ex4.php\
    \ on line 28\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if ($item < 0) {\n\
    \      $result[0] = max($result[0], $item);\n    } else {\n      $result[1] =\
    \ min($result[1], $item);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxya7r1v0.php:30\n\
    Stack trace:\n#0 /tmp/tmpxya7r1v0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxya7r1v0.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_null($item)) {\n      $smallest[] = null;\n      $largest[] =\
    \ null;\n      continue;\n    }\n    if ($item < 0) {\n      $smallest[] = $item;\n\
    \      $largest[] = null;\n      continue;\n    }\n    $smallest[] = null;\n \
    \   $largest[] = $item;\n  }\n  return array($smallest, $largest);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk31aogc.php:38\n\
    Stack trace:\n#0 /tmp/tmpqk31aogc.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqk31aogc.php\
    \ on line 38\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThanks for your answer. I tried your code, but I got this\
    \ error: `Fatal error: Call to undefined function largest_smallest_integers()\
    \ in /home/u51419490/public_html/test.php on line 9`\n<|/ c |>\n<| c |>\nI forgot\
    \ to add `largest_smallest_integers()` as a function to the `largest_smallest_integers`\
    \ class. I added it now. Try it again.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I tried your code, but I got this error: `Fatal error: Call to undefined function\
    \ largest_smallest_integers() in /home/u51419490/public_html/test.php on line\
    \ 9`\n<|/ c |>\n<| c |>\nI added the function to the `largest_smallest_integers`\
    \ class. Try it again.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your\
    \ code, but I got this error: `Fatal error: Call to undefined function largest_smallest_integers()\
    \ in /home/u51419490/public_html/test.php on line 9`\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n<?php\n$array = array(\n    array(\n        'id' => 1,\n       \
    \ 'name' => 'John',\n        'age' => 30,\n    ),\n    array(\n        'id' =>\
    \ 2,\n        'name' => 'Jane',\n        'age' => 25,\n    ),\n    array(\n  \
    \      'id' => 3,\n        'name' => 'Jack',\n        'age' => 40,\n    ),\n \
    \   array(\n        'id' => 4,\n        'name' => 'Jill',\n        'age' => 25,\n\
    \    ),\n);\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp667lipvn.php on line 26

    '
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest)) {\n      $smallest = $item;\n      $largest = $item;\n\
    \    } elseif ($item < $smallest) {\n      $smallest = $item;\n    } elseif ($item\
    \ > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqc2wb8f.php:34\n\
    Stack trace:\n#0 /tmp/tmpnqc2wb8f.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpnqc2wb8f.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_null($item))\
    \ {\n      $result[] = null;\n      continue;\n    }\n    if ($item < 0) {\n \
    \     $result[] = $item;\n      continue;\n    }\n    $result[] = $item;\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rcmiiqt.php:34\n\
    Stack trace:\n#0 /tmp/tmp2rcmiiqt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2rcmiiqt.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest)) {\n      $smallest = $item;\n      $largest = $item;\n\
    \    } elseif ($item < $smallest) {\n      $smallest = $item;\n    } elseif ($item\
    \ > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqc2wb8f.php:34\n\
    Stack trace:\n#0 /tmp/tmpnqc2wb8f.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpnqc2wb8f.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers in the array. Try\
    \ it with `array(1,-1,2,-3,4)`\n<|/ c |>\n<| c |>\n: Yes, it does. Try it with\
    \ `array(1,-1,2,-3,4)`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it with `array(1,-1,2,-3,4)`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it with `array(1,-1,2,-3,4)`.\n<|/ c |>\n\
    <| c |>\n: Yes, it does. Try it with `array(1,-1,2,-3,4)`.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$largest = array_reduce($array,\
    \ function($a, $b) { return max($a, $b); });\n$smallest = array_reduce($array,\
    \ function($a, $b) { return min($a, $b); });\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis doesn't work if you have negative numbers in the array. Try it with\
    \ `array(1,-1,2,-3,4)`\n<|/ c |>\n<| c |>\n: Yes, it does. Try it with `array(1,-1,2,-3,4)`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it with `array(1,-1,2,-3,4)`.\n<|/ c |>\n\
    <| c |>\n: Yes, it does. Try it with `array(1,-1,2,-3,4)`.\n<|/ c |>\n<| c |>\n\
    : Yes, it does. Try it with `array(1,-1,2,-3,4)`.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$largest = max( $array );\n$smallest\
    \ = min( $array );\n</code>\n<|/ a tags=php,arrays |>\n<| \nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpn7250lqi.php on line 26

    '
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69_9mesu.php:32\n\
    Stack trace:\n#0 /tmp/tmp69_9mesu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp69_9mesu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === null || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lgbb6_u.php:32\n\
    Stack trace:\n#0 /tmp/tmp3lgbb6_u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3lgbb6_u.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $val) {\n    if ($val < 0)\
    \ {\n      if ($a === null) {\n        $a = $val;\n      } else {\n        $b\
    \ = $val;\n      }\n    } else if ($val > 0) {\n      if ($a === null) {\n   \
    \     $a = $val;\n      } else if ($b === null) {\n        $b = $val;\n      }\
    \ else {\n        if ($a > $b) {\n          $a = $val;\n        } else {\n   \
    \       $b = $val;\n        }\n      }\n    }\n  }\n  return array($a, $b);\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9w5k3sip.php:45\n\
    Stack trace:\n#0 /tmp/tmp9w5k3sip.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp9w5k3sip.php\
    \ on line 45\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === null || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lgbb6_u.php:32\n\
    Stack trace:\n#0 /tmp/tmp3lgbb6_u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3lgbb6_u.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_int($item))\
    \ {\n      $result[] = $item;\n    }\n  }\n  if (count($result) == 0) {\n    return\
    \ array(null, null);\n  }\n  $max = max($result);\n  $min = min($result);\n  if\
    \ ($max == $min) {\n    return array(null, $max);\n  }\n  return array($max, $min);\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61alzrjx.php:36\n\
    Stack trace:\n#0 /tmp/tmp61alzrjx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp61alzrjx.php\
    \ on line 36\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = $item;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_43s55tv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_43s55tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_43s55tv.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = $item;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_43s55tv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_43s55tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_43s55tv.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  foreach ($lst as $value)\
    \ {\n    if ($value < $min) {\n      $min = $value;\n    }\n    if ($value > $max)\
    \ {\n      $max = $value;\n    }\n  }\n  return array($max, $min);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqp1oq0v.php:32\n\
    Stack trace:\n#0 /tmp/tmpzqp1oq0v.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzqp1oq0v.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69_9mesu.php:32\n\
    Stack trace:\n#0 /tmp/tmp69_9mesu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp69_9mesu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if ($item < 0) {\n\
    \      $result[0] = max($result[0], $item);\n    } else if ($item > 0) {\n   \
    \   $result[1] = min($result[1], $item);\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnckiesp9.php:30\n\
    Stack trace:\n#0 /tmp/tmpnckiesp9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnckiesp9.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = PHP_INT_MIN;\n  foreach ($lst as $item) {\n\
    \    if ($item < $min) {\n      $min = $item;\n    }\n    if ($item > $max) {\n\
    \      $max = $item;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcj1p4zes.php:32\n\
    Stack trace:\n#0 /tmp/tmpcj1p4zes.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcj1p4zes.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === NULL || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === NULL || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvh_l39t1.php:32\n\
    Stack trace:\n#0 /tmp/tmpvh_l39t1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvh_l39t1.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = PHP_INT_MAX;\n  $largest = PHP_INT_MIN;\n  foreach ($lst as\
    \ $value) {\n    if ($value < $smallest) {\n      $smallest = $value;\n    }\n\
    \    if ($value > $largest) {\n      $largest = $value;\n    }\n  }\n  return\
    \ array($smallest, $largest);\n}\n\n/**\n * Returns true if the given value is\
    \ an integer.\n *\n * @param mixed $value A value to check.\n * @return bool True\
    \ if the value is an integer.\n */\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqs8d92tx.php:38\n\
    Stack trace:\n#0 /tmp/tmpqs8d92tx.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqs8d92tx.php\
    \ on line 38\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ looping through the array. I'm thinking there might be a way to do it with array_reduce,\
    \ but I can't figure it out.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ involve looping through the array.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that doesn't involve looping through the array.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that doesn't involve looping through the array.\n<|/ c |>\n<| c |>\n\
    : I added a solution that doesn't involve looping through the array.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$result = array();\n\
    $smallest = $largest = NULL;\nforeach($array as $value) {\n    if ($smallest ===\
    \ NULL || $value < $smallest) {\n        $smallest = $value;\n    }\n    if ($largest\
    \ === NULL || $value > $largest) {\n        $largest = $value;\n    }\n}\n$result[]\
    \ = $smallest;\n$result[] = $largest;\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nI like this solution, but I wonder if there is a way to do it without looping\
    \ through the array. I'm thinking there might be a way to do it with array_reduce,\
    \ but I can't figure it out.\n<|/ c |>\n<| c |>\n: I added a solution that doesn't\
    \ involve looping through the array.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$smallest = $largest = NULL;\nforeach($array\
    \ as $value) {\n    if ($smallest === NULL || $value < $smallest) {\n        $smallest\
    \ = $value;\n    }\n    if ($largest === NULL || $value > $largest) {\n      \
    \  $largest = $value;\n    }\n}\n$result[] = $smallest;\n$result[] = $largest;\n\
    </code>\n<|/ a \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpghhj4iho.php on line 26

    '
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = PHP_INT_MAX;\n  $largest = PHP_INT_MIN;\n  foreach ($lst as\
    \ $value) {\n    if ($value < $smallest) {\n      $smallest = $value;\n    }\n\
    \    if ($value > $largest) {\n      $largest = $value;\n    }\n  }\n  return\
    \ array($smallest, $largest);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bnf3ikr.php:32\n\
    Stack trace:\n#0 /tmp/tmp3bnf3ikr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3bnf3ikr.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = $item;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  if (count($smallest) == 0) {\n    return array(null,\
    \ null);\n  }\n  if (count($largest) == 0) {\n    return array(null, null);\n\
    \  }\n  $smallest_int = min($smallest);\n  $largest_int = max($largest);\n  return\
    \ array($smallest_int, $largest_int);\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3,\
    \ 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpryr4gzg6.php:39\n\
    Stack trace:\n#0 /tmp/tmpryr4gzg6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpryr4gzg6.php\
    \ on line 39\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest)) {\n      $smallest = $item;\n      $largest = $item;\n\
    \    } elseif ($item < $smallest) {\n      $smallest = $item;\n    } elseif ($item\
    \ > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ak1so2i.php:34\n\
    Stack trace:\n#0 /tmp/tmp7ak1so2i.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7ak1so2i.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = $item;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_43s55tv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_43s55tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_43s55tv.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69_9mesu.php:32\n\
    Stack trace:\n#0 /tmp/tmp69_9mesu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp69_9mesu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = $item;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_43s55tv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_43s55tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_43s55tv.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = array();\n  $smallest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $largest[] = $item;\n    } else {\n      $smallest[]\
    \ = $item;\n    }\n  }\n  if (count($largest) == 0) {\n    return array(null,\
    \ null);\n  }\n  if (count($smallest) == 0) {\n    return array(null, null);\n\
    \  }\n  return array($largest[0], $smallest[0]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1dpwcbr.php:37\n\
    Stack trace:\n#0 /tmp/tmpl1dpwcbr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpl1dpwcbr.php\
    \ on line 37\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_null($item)) {\n      $smallest[] = null;\n      $largest[] =\
    \ null;\n      continue;\n    }\n    if ($item < 0) {\n      $smallest[] = $item;\n\
    \      $largest[] = null;\n      continue;\n    }\n    $smallest[] = null;\n \
    \   $largest[] = $item;\n  }\n  return array($smallest, $largest);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk31aogc.php:38\n\
    Stack trace:\n#0 /tmp/tmpqk31aogc.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqk31aogc.php\
    \ on line 38\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value < $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0mb_f51.php:32\n\
    Stack trace:\n#0 /tmp/tmpw0mb_f51.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpw0mb_f51.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $item) {\n    if ($item <\
    \ 0) {\n      if ($a === null) {\n        $a = $item;\n      }\n      else {\n\
    \        $b = $item;\n      }\n    }\n    else if ($item > 0) {\n      if ($a\
    \ === null) {\n        $a = $item;\n      }\n      else {\n        $b = $item;\n\
    \      }\n    }\n    else {\n      if ($a === null) {\n        $a = null;\n  \
    \    }\n      else {\n        $b = null;\n      }\n    }\n  }\n  return array($a,\
    \ $b);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1esypf6k.php:50\n\
    Stack trace:\n#0 /tmp/tmp1esypf6k.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp1esypf6k.php\
    \ on line 50\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69_9mesu.php:32\n\
    Stack trace:\n#0 /tmp/tmp69_9mesu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp69_9mesu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($largest) || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if (is_null($smallest) || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqu4buanl.php:32\n\
    Stack trace:\n#0 /tmp/tmpqu4buanl.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqu4buanl.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = -PHP_INT_MAX;\n  foreach ($lst as $v) {\n\
    \    if ($v < $min) {\n      $min = $v;\n    } else if ($v > $max) {\n      $max\
    \ = $v;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82uc53eg.php:31\n\
    Stack trace:\n#0 /tmp/tmp82uc53eg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp82uc53eg.php\
    \ on line 31\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if ($item < 0) {\n\
    \      $result[0] = max($result[0], $item);\n    } else {\n      $result[1] =\
    \ min($result[1], $item);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxya7r1v0.php:30\n\
    Stack trace:\n#0 /tmp/tmpxya7r1v0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxya7r1v0.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest)) {\n      $smallest = $item;\n      $largest = $item;\n\
    \    } elseif ($item < $smallest) {\n      $smallest = $item;\n    } elseif ($item\
    \ > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqc2wb8f.php:34\n\
    Stack trace:\n#0 /tmp/tmpnqc2wb8f.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpnqc2wb8f.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $value) {\n    if ($value < 0) {\n\
    \      $result[0] = max($value, $result[0]);\n    } elseif ($value > 0) {\n  \
    \    $result[1] = min($value, $result[1]);\n    }\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyn99u6yp.php:30\n\
    Stack trace:\n#0 /tmp/tmpyn99u6yp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyn99u6yp.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $item) {\n    if ($item <\
    \ 0) {\n      if ($a === null) {\n        $a = $item;\n      } else {\n      \
    \  $b = $item;\n      }\n    } else if ($item > 0) {\n      if ($a === null) {\n\
    \        $a = $item;\n      } else if ($b === null) {\n        $b = $item;\n \
    \     }\n    }\n  }\n  return array($a, $b);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f36zh2l.php:39\n\
    Stack trace:\n#0 /tmp/tmp4f36zh2l.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4f36zh2l.php\
    \ on line 39\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThanks for your answer. Unfortunately this doesn't work as expected. Try\
    \ it out with $lst = array(2, 4, 1, 3, 5, 7). Your function returns array(null,\
    \ null).\n<|/ c |>\n<| c |>\n: I tested it and it works fine. Try it again with\
    \ `$lst = array(2, 4, 1, 3, 5, 7);`\n<|/ c |>\n<| c |>\n: I added a version that\
    \ works with empty arrays as well.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ works with empty arrays as well.\n<|/ c |>\n<| c |>\n: I added a version that\
    \ works with empty arrays as well.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n\
    function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpocotzi25.php on line 26

    '
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_null($item)) {\n      $smallest = null;\n      $largest = null;\n\
    \      break;\n    }\n    if (is_null($smallest)) {\n      $smallest = $item;\n\
    \      $largest = $item;\n    } else if ($item < $smallest) {\n      $smallest\
    \ = $item;\n    } else if ($item > $largest) {\n      $largest = $item;\n    }\n\
    \  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphty30lot.php:39\n\
    Stack trace:\n#0 /tmp/tmphty30lot.php(52): test()\n#1 {main}\n  thrown in /tmp/tmphty30lot.php\
    \ on line 39\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $value)\
    \ {\n    if ($value < 0 && $smallest == array()) {\n      $smallest = $value;\n\
    \    } else if ($value > 0 && $largest == array()) {\n      $largest = $value;\n\
    \    } else {\n      if ($smallest == array()) {\n        $smallest = $value;\n\
    \      } else if ($largest == array()) {\n        $largest = $value;\n      }\
    \ else {\n        if ($value < $smallest) {\n          $smallest = $value;\n \
    \       } else if ($value > $largest) {\n          $largest = $value;\n      \
    \  }\n      }\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoia22gq2.php:43\n\
    Stack trace:\n#0 /tmp/tmpoia22gq2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpoia22gq2.php\
    \ on line 43\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = array();\n  $smallest = array();\n  foreach ($lst as $value)\
    \ {\n    if ($value < 0 && $largest == array()) {\n      $largest = $value;\n\
    \    }\n    if ($value > 0 && $smallest == array()) {\n      $smallest = $value;\n\
    \    }\n  }\n  return array($largest, $smallest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20xqegn2.php:32\n\
    Stack trace:\n#0 /tmp/tmp20xqegn2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp20xqegn2.php\
    \ on line 32\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_null($item))\
    \ {\n      $result[] = null;\n      continue;\n    }\n    if ($item < 0) {\n \
    \     $result[] = $item;\n      continue;\n    }\n    $result[] = $item;\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rcmiiqt.php:34\n\
    Stack trace:\n#0 /tmp/tmp2rcmiiqt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2rcmiiqt.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_null($item)) {\n      $smallest = null;\n      $largest = null;\n\
    \      break;\n    }\n    if (is_null($smallest)) {\n      $smallest = $item;\n\
    \      $largest = $item;\n    }\n    if ($item < $smallest) {\n      $smallest\
    \ = $item;\n    }\n    if ($item > $largest) {\n      $largest = $item;\n    }\n\
    \  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll9fnthh.php:41\n\
    Stack trace:\n#0 /tmp/tmpll9fnthh.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpll9fnthh.php\
    \ on line 41\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $item) {\n    if (is_null($a))\
    \ {\n      $a = $item;\n    } else if (is_null($b)) {\n      $b = $item;\n   \
    \ } else if ($item > $b) {\n      $b = $item;\n    } else if ($item < $a) {\n\
    \      $a = $item;\n    }\n  }\n  return array($a, $b);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45q4kcus.php:35\n\
    Stack trace:\n#0 /tmp/tmp45q4kcus.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp45q4kcus.php\
    \ on line 35\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if ($item < 0) {\n\
    \      $result[0] = max($result[0], $item);\n    } else if ($item > 0) {\n   \
    \   $result[1] = min($result[1], $item);\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnckiesp9.php:30\n\
    Stack trace:\n#0 /tmp/tmpnckiesp9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnckiesp9.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69_9mesu.php:32\n\
    Stack trace:\n#0 /tmp/tmp69_9mesu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp69_9mesu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = -PHP_INT_MAX;\n  foreach ($lst as $val) {\n\
    \    if ($val < $min) {\n      $min = $val;\n    }\n    if ($val > $max) {\n \
    \     $max = $val;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylzrddqp.php:32\n\
    Stack trace:\n#0 /tmp/tmpylzrddqp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpylzrddqp.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest)) {\n      $smallest = $item;\n      $largest = $item;\n\
    \    } elseif ($item < $smallest) {\n      $smallest = $item;\n    } elseif ($item\
    \ > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ak1so2i.php:34\n\
    Stack trace:\n#0 /tmp/tmp7ak1so2i.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7ak1so2i.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = PHP_INT_MIN;\n  foreach ($lst as $v) {\n\
    \    if ($v < $min) $min = $v;\n    if ($v > $max) $max = $v;\n  }\n  return array($min,\
    \ $max);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwpurug7.php:28\n\
    Stack trace:\n#0 /tmp/tmppwpurug7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppwpurug7.php\
    \ on line 28\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69_9mesu.php:32\n\
    Stack trace:\n#0 /tmp/tmp69_9mesu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp69_9mesu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_int($item)) {\n      if ($item < 0) {\n        $smallest[] = $item;\n\
    \      } else {\n        $largest[] = $item;\n      }\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbztopxg.php:33\n\
    Stack trace:\n#0 /tmp/tmpwbztopxg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpwbztopxg.php\
    \ on line 33\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_int($item))\
    \ {\n      $result[] = $item;\n    }\n  }\n  if (empty($result)) {\n    return\
    \ array(null, null);\n  }\n  $min = $result[0];\n  $max = $result[0];\n  foreach\
    \ ($result as $item) {\n    if ($item < $min) {\n      $min = $item;\n    }\n\
    \    if ($item > $max) {\n      $max = $item;\n    }\n  }\n  return array($min,\
    \ $max);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvsl81u1.php:41\n\
    Stack trace:\n#0 /tmp/tmppvsl81u1.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppvsl81u1.php\
    \ on line 41\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = $item;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_43s55tv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_43s55tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_43s55tv.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $item) {\n    if (is_int($item))\
    \ {\n      if ($a === null) {\n        $a = $item;\n        $b = $item;\n    \
    \  } else if ($item > $b) {\n        $b = $item;\n      } else if ($item < $a)\
    \ {\n        $a = $item;\n      }\n    }\n  }\n  return array($a, $b);\n}\n\n\
    function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7bgpu9t.php:36\n\
    Stack trace:\n#0 /tmp/tmpf7bgpu9t.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpf7bgpu9t.php\
    \ on line 36\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = PHP_INT_MAX;\n  $largest = PHP_INT_MIN;\n  foreach ($lst as\
    \ $item) {\n    if ($item < $smallest) {\n      $smallest = $item;\n    }\n  \
    \  if ($item > $largest) {\n      $largest = $item;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphl4dy7mu.php:32\n\
    Stack trace:\n#0 /tmp/tmphl4dy7mu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphl4dy7mu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === null || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lgbb6_u.php:32\n\
    Stack trace:\n#0 /tmp/tmp3lgbb6_u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3lgbb6_u.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = PHP_INT_MAX;\n  $largest = -PHP_INT_MAX;\n  foreach ($lst as\
    \ $item) {\n    if ($item < 0) {\n      if ($smallest > -$item) {\n        $smallest\
    \ = -$item;\n      }\n    } else if ($item > 0) {\n      if ($largest < $item)\
    \ {\n        $largest = $item;\n      }\n    } else {\n      if ($smallest > -$item)\
    \ {\n        $smallest = -$item;\n      }\n      if ($largest < $item) {\n   \
    \     $largest = $item;\n      }\n    }\n  }\n  return array($smallest, $largest);\n\
    }\n\n/**\n * Returns the number of items in an array.\n *\n * @param array $arr\
    \ An array\n * @return int The number of items in the array\n */\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphxn8vi11.php:48\n\
    Stack trace:\n#0 /tmp/tmphxn8vi11.php(61): test()\n#1 {main}\n  thrown in /tmp/tmphxn8vi11.php\
    \ on line 48\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $item) {\n    if ($item <\
    \ 0) {\n      if ($a === null) {\n        $a = $item;\n      } else {\n      \
    \  $b = $item;\n      }\n    } else if ($item > 0) {\n      if ($a === null) {\n\
    \        $a = $item;\n      } else if ($b === null) {\n        $b = $item;\n \
    \     }\n    }\n  }\n  return array($a, $b);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f36zh2l.php:39\n\
    Stack trace:\n#0 /tmp/tmp4f36zh2l.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4f36zh2l.php\
    \ on line 39\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_int($item)) {\n      if ($item < 0) {\n        $smallest[] = $item;\n\
    \      } else {\n        $largest[] = $item;\n      }\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbztopxg.php:33\n\
    Stack trace:\n#0 /tmp/tmpwbztopxg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpwbztopxg.php\
    \ on line 33\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if ($item < 0) {\n\
    \      $result[0] = max($result[0], $item);\n    } else {\n      $result[1] =\
    \ min($result[1], $item);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxya7r1v0.php:30\n\
    Stack trace:\n#0 /tmp/tmpxya7r1v0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxya7r1v0.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = PHP_INT_MIN;\n  foreach ($lst as $val) {\n\
    \    if ($val < $min) {\n      $min = $val;\n    }\n    if ($val > $max) {\n \
    \     $max = $val;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwxi74qt.php:32\n\
    Stack trace:\n#0 /tmp/tmpmwxi74qt.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmwxi74qt.php\
    \ on line 32\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if (is_int($item)) {\n      if ($smallest === NULL || $item < $smallest) {\n\
    \        $smallest = $item;\n      }\n      if ($largest === NULL || $item > $largest)\
    \ {\n        $largest = $item;\n      }\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3izbh5ee.php:34\n\
    Stack trace:\n#0 /tmp/tmp3izbh5ee.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3izbh5ee.php\
    \ on line 34\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = PHP_INT_MAX;\n  $largest = -PHP_INT_MAX;\n  foreach ($lst as\
    \ $value) {\n    if ($value < $smallest) {\n      $smallest = $value;\n    }\n\
    \    if ($value > $largest) {\n      $largest = $value;\n    }\n  }\n  return\
    \ array($smallest, $largest);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_tktmkmp.php:32\n\
    Stack trace:\n#0 /tmp/tmp_tktmkmp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_tktmkmp.php\
    \ on line 32\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $max = -$item;\n    } else if ($item > 0) {\n\
    \      $min = $item;\n    }\n  }\n  return array($max, $min);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchriqz_q.php:31\n\
    Stack trace:\n#0 /tmp/tmpchriqz_q.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpchriqz_q.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = PHP_INT_MAX;\n  $largest = PHP_INT_MIN;\n  foreach ($lst as\
    \ $val) {\n    if ($val < $smallest) {\n      $smallest = $val;\n    }\n    if\
    \ ($val > $largest) {\n      $largest = $val;\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5853c40.php:32\n\
    Stack trace:\n#0 /tmp/tmpm5853c40.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpm5853c40.php\
    \ on line 32\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $value) {\n    if (is_null($value))\
    \ {\n      $result[] = null;\n      continue;\n    }\n    if ($value < 0) {\n\
    \      $result[] = $value;\n      continue;\n    }\n    $result[] = $value;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps90504_n.php:34\n\
    Stack trace:\n#0 /tmp/tmps90504_n.php(47): test()\n#1 {main}\n  thrown in /tmp/tmps90504_n.php\
    \ on line 34\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === NULL || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === NULL || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvh_l39t1.php:32\n\
    Stack trace:\n#0 /tmp/tmpvh_l39t1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvh_l39t1.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = PHP_INT_MAX;\n  $largest = PHP_INT_MIN;\n  foreach ($lst as\
    \ $value) {\n    if ($value < $smallest) {\n      $smallest = $value;\n    }\n\
    \    if ($value > $largest) {\n      $largest = $value;\n    }\n  }\n  return\
    \ array($smallest, $largest);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bnf3ikr.php:32\n\
    Stack trace:\n#0 /tmp/tmp3bnf3ikr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3bnf3ikr.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if (is_int($item)) {\n      if ($smallest === NULL || $item < $smallest) {\n\
    \        $smallest = $item;\n      }\n      if ($largest === NULL || $item > $largest)\
    \ {\n        $largest = $item;\n      }\n    }\n  }\n  return array($smallest,\
    \ $largest);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3izbh5ee.php:34\n\
    Stack trace:\n#0 /tmp/tmp3izbh5ee.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3izbh5ee.php\
    \ on line 34\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_null($item))\
    \ {\n      $result[] = null;\n      continue;\n    }\n    if (is_numeric($item))\
    \ {\n      $result[] = $item;\n      continue;\n    }\n    $result[] = min($item);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe5qtuwox.php:34\n\
    Stack trace:\n#0 /tmp/tmpe5qtuwox.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpe5qtuwox.php\
    \ on line 34\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_null($item))\
    \ {\n      $result[] = null;\n      continue;\n    }\n    if ($item < 0) {\n \
    \     $result[] = $item;\n      continue;\n    }\n    $result[] = $item;\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rcmiiqt.php:34\n\
    Stack trace:\n#0 /tmp/tmp2rcmiiqt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2rcmiiqt.php\
    \ on line 34\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $smallest[] = $item;\n    } else {\n      $largest[]\
    \ = $item;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_43s55tv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_43s55tv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_43s55tv.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === NULL || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === NULL || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvh_l39t1.php:32\n\
    Stack trace:\n#0 /tmp/tmpvh_l39t1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvh_l39t1.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  foreach ($lst as $v) {\n\
    \    if ($v < $min) {\n      $min = $v;\n    }\n    if ($v > $max) {\n      $max\
    \ = $v;\n    }\n  }\n  return array($max, $min);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1nt7qst.php:32\n\
    Stack trace:\n#0 /tmp/tmpb1nt7qst.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb1nt7qst.php\
    \ on line 32\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $value)\
    \ {\n    if ($value < 0 || $value == 0) {\n      $smallest = null;\n      $largest\
    \ = null;\n      break;\n    }\n    if ($value < $smallest) {\n      $smallest\
    \ = $value;\n    }\n    if ($value > $largest) {\n      $largest = $value;\n \
    \   }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4z544de8.php:37\n\
    Stack trace:\n#0 /tmp/tmp4z544de8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4z544de8.php\
    \ on line 37\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = -PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < $min) {\n      $min = $item;\n    } else if ($item > $max)\
    \ {\n      $max = $item;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplwc39uxz.php:31\n\
    Stack trace:\n#0 /tmp/tmplwc39uxz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplwc39uxz.php\
    \ on line 31\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = -PHP_INT_MAX;\n  foreach ($lst as $v) {\n\
    \    if ($v < $min) {\n      $min = $v;\n    }\n    if ($v > $max) {\n      $max\
    \ = $v;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputibfg6g.php:32\n\
    Stack trace:\n#0 /tmp/tmputibfg6g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmputibfg6g.php\
    \ on line 32\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest_negative = array();\n  $largest_positive = array();\n  foreach\
    \ ($lst as $value) {\n    if ($value < 0) {\n      $largest_negative[] = $value;\n\
    \    } else {\n      $largest_positive[] = $value;\n    }\n  }\n  if (count($largest_negative)\
    \ > count($largest_positive)) {\n    return $largest_negative;\n  } else {\n \
    \   return $largest_positive;\n  }\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5511inf.php:35\n\
    Stack trace:\n#0 /tmp/tmpr5511inf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpr5511inf.php\
    \ on line 35\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === null || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hxbtece.php:32\n\
    Stack trace:\n#0 /tmp/tmp6hxbtece.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6hxbtece.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 0
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest_negative = null;\n  $smallest_positive = null;\n  foreach ($lst\
    \ as $item) {\n    if ($item < 0) {\n      if ($largest_negative === null) {\n\
    \        $largest_negative = $item;\n      } else if ($largest_negative < $item)\
    \ {\n        $largest_negative = $item;\n      }\n    } else if ($item > 0) {\n\
    \      if ($smallest_positive === null) {\n        $smallest_positive = $item;\n\
    \      } else if ($smallest_positive > $item) {\n        $smallest_positive =\
    \ $item;\n      }\n    }\n  }\n  return array($largest_negative, $smallest_positive);\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $min = PHP_INT_MAX;\n  $max = PHP_INT_MIN;\n  foreach ($lst as $item) {\n\
    \    if ($item < $min) {\n      $min = $item;\n    } else if ($item > $max) {\n\
    \      $max = $item;\n    }\n  }\n  return array($min, $max);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphlxc8la4.php:31\n\
    Stack trace:\n#0 /tmp/tmphlxc8la4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphlxc8la4.php\
    \ on line 31\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = array();\n  $smallest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $largest[] = $item;\n    } else {\n      $smallest[]\
    \ = $item;\n    }\n  }\n  if (count($largest) == 0) {\n    return array(null,\
    \ null);\n  }\n  if (count($smallest) == 0) {\n    return array(null, null);\n\
    \  }\n  return array($largest[0], $smallest[0]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1dpwcbr.php:37\n\
    Stack trace:\n#0 /tmp/tmpl1dpwcbr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpl1dpwcbr.php\
    \ on line 37\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < $min) {\n      $min = $item;\n    }\n    if ($item > $max)\
    \ {\n      $max = $item;\n    }\n  }\n  return array($max, $min);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq892w7w.php:32\n\
    Stack trace:\n#0 /tmp/tmpnq892w7w.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnq892w7w.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest)) {\n      $smallest = $item;\n    }\n    if (is_null($largest))\
    \ {\n      $largest = $item;\n    }\n    if ($item > $largest) {\n      $largest\
    \ = $item;\n    }\n    if ($item < $smallest) {\n      $smallest = $item;\n  \
    \  }\n  }\n  return array($largest, $smallest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8jfp6g8.php:38\n\
    Stack trace:\n#0 /tmp/tmpc8jfp6g8.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpc8jfp6g8.php\
    \ on line 38\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest) || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if (is_null($largest) || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxs4h3y1s.php:32\n\
    Stack trace:\n#0 /tmp/tmpxs4h3y1s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxs4h3y1s.php\
    \ on line 32\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = array();\n  $smallest = array();\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $largest[] = $item;\n    } else {\n      $smallest[]\
    \ = $item;\n    }\n  }\n  if (count($smallest) == 0) {\n    return array(null,\
    \ null);\n  }\n  if (count($largest) == 0) {\n    return array(null, null);\n\
    \  }\n  $largest = array_reverse($largest);\n  $smallest = array_reverse($smallest);\n\
    \  $largest = array_shift($largest);\n  $smallest = array_shift($smallest);\n\
    \  return array($largest, $smallest);\n}\nfunction candidate(...$args) {\n   \
    \ return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3,\
    \ 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppe57fgxn.php:40\n\
    Stack trace:\n#0 /tmp/tmppe57fgxn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmppe57fgxn.php\
    \ on line 40\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $value) {\n \
    \   if ($largest === null || $value < $largest) {\n      $largest = $value;\n\
    \    }\n    if ($smallest === null || $value > $smallest) {\n      $smallest =\
    \ $value;\n    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnklm1bdv.php:32\n\
    Stack trace:\n#0 /tmp/tmpnklm1bdv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnklm1bdv.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === null || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lgbb6_u.php:32\n\
    Stack trace:\n#0 /tmp/tmp3lgbb6_u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3lgbb6_u.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_null($item))\
    \ {\n      $result[] = null;\n      continue;\n    }\n    $result[] = max(-$item,\
    \ $item);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2gtiaauf.php:30\n\
    Stack trace:\n#0 /tmp/tmp2gtiaauf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2gtiaauf.php\
    \ on line 30\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_int($item))\
    \ {\n      $result[] = $item;\n    } elseif (is_null($item)) {\n      $result[]\
    \ = null;\n    } else {\n      $result[] = largest_smallest_integers($item);\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxm5zgow.php:32\n\
    Stack trace:\n#0 /tmp/tmpbxm5zgow.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbxm5zgow.php\
    \ on line 32\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === null || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lgbb6_u.php:32\n\
    Stack trace:\n#0 /tmp/tmp3lgbb6_u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3lgbb6_u.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = array();\n  $smallest = array();\n  foreach ($lst as $value)\
    \ {\n    if ($value < 0) {\n      $largest[] = $value;\n    } else {\n      $smallest[]\
    \ = $value;\n    }\n  }\n  return array($largest, $smallest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9ojny6z.php:31\n\
    Stack trace:\n#0 /tmp/tmpw9ojny6z.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw9ojny6z.php\
    \ on line 31\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $value) {\n    if ($value < 0) {\n\
    \      $result[0] = max($result[0], $value);\n    } else {\n      $result[1] =\
    \ min($result[1], $value);\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzhfv75mo.php:30\n\
    Stack trace:\n#0 /tmp/tmpzhfv75mo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzhfv75mo.php\
    \ on line 30\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = null;\n  $largest = null;\n  foreach ($lst as $value) {\n \
    \   if ($smallest === null || $value < $smallest) {\n      $smallest = $value;\n\
    \    }\n    if ($largest === null || $value > $largest) {\n      $largest = $value;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lgbb6_u.php:32\n\
    Stack trace:\n#0 /tmp/tmp3lgbb6_u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3lgbb6_u.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $item)\
    \ {\n    if (is_null($item)) {\n      $smallest[] = null;\n      $largest[] =\
    \ null;\n      continue;\n    }\n    if ($item < 0) {\n      $smallest[] = $item;\n\
    \      $largest[] = null;\n      continue;\n    }\n    $smallest[] = null;\n \
    \   $largest[] = $item;\n  }\n  return array($smallest, $largest);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk31aogc.php:38\n\
    Stack trace:\n#0 /tmp/tmpqk31aogc.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqk31aogc.php\
    \ on line 38\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = PHP_INT_MAX;\n  $largest = PHP_INT_MIN;\n  foreach ($lst as\
    \ $value) {\n    if ($value < $smallest) {\n      $smallest = $value;\n    }\n\
    \    if ($value > $largest) {\n      $largest = $value;\n    }\n  }\n  return\
    \ array($smallest, $largest);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bnf3ikr.php:32\n\
    Stack trace:\n#0 /tmp/tmp3bnf3ikr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3bnf3ikr.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $item) {\n    if (is_null($a))\
    \ {\n      $a = $item;\n    } else if (is_null($b)) {\n      $b = $item;\n   \
    \ } else if ($item > $b) {\n      $b = $item;\n    } else if ($item < $a) {\n\
    \      $a = $item;\n    }\n  }\n  return array($a, $b);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45q4kcus.php:35\n\
    Stack trace:\n#0 /tmp/tmp45q4kcus.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp45q4kcus.php\
    \ on line 35\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $item) {\n    if ($item <\
    \ 0) {\n      if ($a === null) {\n        $a = $item;\n      } else {\n      \
    \  $a = $item < $a ? $item : $a;\n      }\n    } else if ($item > 0) {\n     \
    \ if ($b === null) {\n        $b = $item;\n      } else {\n        $b = $item\
    \ > $b ? $item : $b;\n      }\n    }\n  }\n  return array($a, $b);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34d7k75y.php:39\n\
    Stack trace:\n#0 /tmp/tmp34d7k75y.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp34d7k75y.php\
    \ on line 39\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if (is_null($smallest) || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if (is_null($largest) || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxs4h3y1s.php:32\n\
    Stack trace:\n#0 /tmp/tmpxs4h3y1s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxs4h3y1s.php\
    \ on line 32\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $value)\
    \ {\n    if ($value < 0 || $value == 0) {\n      $smallest = null;\n      $largest\
    \ = null;\n      break;\n    }\n    if ($value < $smallest) {\n      $smallest\
    \ = $value;\n    }\n    if ($value > $largest) {\n      $largest = $value;\n \
    \   }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4z544de8.php:37\n\
    Stack trace:\n#0 /tmp/tmp4z544de8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4z544de8.php\
    \ on line 37\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = NULL;\n  $largest = NULL;\n  foreach ($lst as $item) {\n  \
    \  if ($smallest === NULL || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n    if ($largest === NULL || $item > $largest) {\n      $largest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69_9mesu.php:32\n\
    Stack trace:\n#0 /tmp/tmp69_9mesu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp69_9mesu.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $smallest = array();\n  $largest = array();\n  foreach ($lst as $value)\
    \ {\n    if ($value < 0 || $value == 0) {\n      $smallest = null;\n      $largest\
    \ = null;\n      break;\n    }\n    if ($smallest == null || $value < $smallest)\
    \ {\n      $smallest = $value;\n    }\n    if ($largest == null || $value > $largest)\
    \ {\n      $largest = $value;\n    }\n  }\n  return array($smallest, $largest);\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0zm8mofy.php:37\n\
    Stack trace:\n#0 /tmp/tmp0zm8mofy.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp0zm8mofy.php\
    \ on line 37\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $a = null;\n  $b = null;\n  foreach ($lst as $v) {\n    if ($v < 0) {\n\
    \      if ($a === null) {\n        $a = $v;\n      } else if ($b < $v) {\n   \
    \     $b = $v;\n      }\n    } else if ($v > 0) {\n      if ($a === null) {\n\
    \        $a = $v;\n      } else if ($b > $v) {\n        $b = $v;\n      }\n  \
    \  }\n  }\n  return array($a, $b);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vnviw3a.php:39\n\
    Stack trace:\n#0 /tmp/tmp7vnviw3a.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp7vnviw3a.php\
    \ on line 39\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $largest = null;\n  $smallest = null;\n  foreach ($lst as $item) {\n  \
    \  if ($largest === null || $item > $largest) {\n      $largest = $item;\n   \
    \ }\n    if ($smallest === null || $item < $smallest) {\n      $smallest = $item;\n\
    \    }\n  }\n  return array($smallest, $largest);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveoyxw5q.php:32\n\
    Stack trace:\n#0 /tmp/tmpveoyxw5q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpveoyxw5q.php\
    \ on line 32\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $max = -PHP_INT_MAX;\n  $min = PHP_INT_MAX;\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      $max = -$item;\n    } else if ($item > 0) {\n\
    \      $min = $item;\n    }\n  }\n  return array($max, $min);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchriqz_q.php:31\n\
    Stack trace:\n#0 /tmp/tmpchriqz_q.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpchriqz_q.php\
    \ on line 31\n"
  timestamp: 1659730693
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_null($item))\
    \ {\n      $result[] = null;\n      continue;\n    }\n    $result[] = min($item,\
    \ $item);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17eixzh7.php:30\n\
    Stack trace:\n#0 /tmp/tmp17eixzh7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp17eixzh7.php\
    \ on line 30\n"
  timestamp: 1659730694
- exit_code: 255
  program: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in an array.\n// If there is no negative or positive integers, return them as\
    \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
    // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
    \ {\n  $result = array();\n  foreach ($lst as $item) {\n    if (is_int($item))\
    \ {\n      $result[] = $item;\n    }\n  }\n  if (empty($result)) {\n    return\
    \ array(null, null);\n  }\n  $result = array_filter($result);\n  $result = array_map('abs',\
    \ $result);\n  $result = array_map('min', $result);\n  $result = array_map('max',\
    \ $result);\n  return array($result[0], $result[1]);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: min(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpghmi68nh.php on line 25\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpghmi68nh.php on line 25\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmpghmi68nh.php\
    \ on line 25\n\nWarning: min(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpghmi68nh.php on line 25\n\nWarning: min(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpghmi68nh.php on line 25\n\nWarning:\
    \ min(): When only one parameter is given, it must be an array in /tmp/tmpghmi68nh.php\
    \ on line 25\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpghmi68nh.php on line 26\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpghmi68nh.php on line 26\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmpghmi68nh.php\
    \ on line 26\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmpghmi68nh.php on line 26\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmpghmi68nh.php on line 26\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmpghmi68nh.php\
    \ on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghmi68nh.php:35\n\
    Stack trace:\n#0 /tmp/tmpghmi68nh.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpghmi68nh.php\
    \ on line 35\n"
  timestamp: 1659730694
