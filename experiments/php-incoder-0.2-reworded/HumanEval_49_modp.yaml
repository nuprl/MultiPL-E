name: HumanEval_49_modp
language: php
prompt: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n\
  // 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
  // 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n"
tests: "function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  return $n % $p;\n}\n", "  return ($n % $p + $p) % $p;\n}\n", "  return\
    \ $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  $n =\
    \ (int) $n;\n  $p = (int) $p;\n  if ($n == 0) {\n    return 0;\n  }\n  if ($n\
    \ == 1) {\n    return $p;\n  }\n  if ($p == 0) {\n    return $n;\n  }\n  if ($p\
    \ == 1) {\n    return $n;\n  }\n  if ($p == 2) {\n    return $n % 2 ? $n : $n\
    \ + 1;\n  }\n  if ($p == 3) {\n    return $n % 3 ? $n : $n + 1;\n  }\n  if ($p\
    \ == 4) {\n    return $n % 4 ? $n : $n + 1;\n  }\n  if ($p == 5) {\n    return\
    \ $n % 5 ? $n : $n + 1;\n  }\n  if ($p == 6) {\n    return $n % 6 ? $n : $n +\
    \ 1;\n  }\n  if ($p == 7) {\n    return $n % 7 ? $n : $n + 1;\n  }\n  if ($p ==\
    \ 8) {\n    return $n % 8 ? $n : $n + 1;\n  }\n  if ($p == 9) {\n    return $n\
    \ % 9 ? $n : $n + 1;\n  }\n  if ($p == 10) {\n    return $n % 10 ? $n : $n + 1;\n\
    \  }\n  if ($p == 11) {\n    return $n % 11 ? $n : $n + 1;\n  }\n  if ($p == 12)\
    \ {\n    return $n % 12 ? $n : $n + 1;\n  }\n  if ($p == 13) {\n    return $n\
    \ % 13 ? $n : $n + 1;\n  }\n  if ($p == 14) {\n    return $n % 14 ? $n : $n +\
    \ 1;\n  }\n  if ($p == 15) {\n    return $n % 15 ? $n : $n + 1;\n  }\n  if ($p\
    \ == 16) {\n    return $n % 16 ? $n : $n + 1;\n  }\n  if ($p == 17) {\n    return\
    \ $n % 17 ? $n : $n + 1;\n  }\n  if ($p == 18) {\n    return $n % 18 ? $n : $n\
    \ + 1;\n  }\n  if ($p == 19) {\n    return $n % 19 ? $n : $n + 1;\n  }\n  if ($p\
    \ == 20) {\n    return $n % 20 ? $n : $n + 1;\n  }\n  if ($p == 21) {\n    return\
    \ $n % 21 ? $n : $n + 1;\n  }\n  if ($p == 22) {\n    return $n % 22 ? $n : $n\
    \ + 1;\n  }\n  if ($p == 23) {\n    return $n % 23 ? $n : $n + 1;\n  }\n  if ($p\
    \ == 24) {\n    return $n % 24 ? $n : $n + 1;\n  }\n  if ($p == ", "  return $n\
    \ % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n", "  return $n\
    \ % $p;\n}\n", "  return $n % $p;\n}\n", "    return ($n % $p + $p) % $p;\n}\n",
  "  return $n % $p;\n}\n", "  return ($n % $p) + $p;\n}\n", "  return $n % $p;\n\
    }\n", "  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n  \
    \  $p = -$p;\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($p > $n) {\n  \
    \  return $p;\n  }\n  if ($n == $p) {\n    return $n;\n  }\n  if ($n == 0) {\n\
    \    return $p;\n  }\n  if ($n == $p - 1) {\n    return $n;\n  }\n  if ($n ==\
    \ $p + 1) {\n    return $p;\n  }\n  $m = (int) ($p * log($n) / log($p));\n  return\
    \ $n % $p ? $m : $n;\n}\n", "  return $n % $p;\n}\n", "  return $n % $p;\n}\n",
  "  return $n % $p;\n}\n", "  return $n % $p;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
