language: php
name: HumanEval_76_is_simple_power
results:
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph40nkcif.php:46\n\
    Stack trace:\n#0 /tmp/tmph40nkcif.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph40nkcif.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    $x=$x/$n;\n    return is_simple_power($x, $n);\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvors9qd.php:33\n\
    Stack trace:\n#0 /tmp/tmpwvors9qd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwvors9qd.php\
    \ on line 33\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == 2) {\n        return ($x\
    \ == 1);\n    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2,\
    \ $n - 1);\n    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkrsmgox.php:45\n\
    Stack trace:\n#0 /tmp/tmpgkrsmgox.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpgkrsmgox.php\
    \ on line 45\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $x = $x * $x;\n\
    \    $y = $x * $n;\n    if ($y == $x) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ekpy6et.php:50\n\
    Stack trace:\n#0 /tmp/tmp6ekpy6et.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp6ekpy6et.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($n\
    \ == 0) {\n        return false;\n    }\n    if ($n == 1) {\n        return true;\n\
    \    }\n    if ($n == -1) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    if ($n % 3 == 0) {\n        return false;\n\
    \    }\n    if ($n % 5 == 0) {\n        return false;\n    }\n    if ($n % 7 ==\
    \ 0) {\n        return false;\n    }\n    if ($n % 11 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 13 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 17 == 0) {\n        return false;\n    }\n    if ($n % 19 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 23 == 0) {\n        return false;\n\
    \    }\n    if ($n % 29 == 0) {\n        return false;\n    }\n    if ($n % 31\
    \ == 0) {\n        return false;\n    }\n    if ($n % 37 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 41 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 43 == 0) {\n        return false;\n    }\n    if ($n % 47 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 53 == 0) {\n        return false;\n\
    \    }\n    if ($n % 59 == 0) {\n        return false;\n    }\n    if ($n % 61\
    \ == 0) {\n        return false;\n    }\n    if ($n % 67 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 71 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 73 == 0) {\n        return false;\n    }\n    if ($n % 79 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 83 == 0) {\n        return false;\n\
    \    }\n    if ($n % 89 == 0) {\n        return false;\n    }\n    if ($n % 97\
    \ == 0) {\n        return false;\n    }\n    if ($n % 101 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 103 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 107 == 0) {\n        return false;\n    }\n    if ($n % 111 == 0) {\n\
    \        return false;\n    }\n    if ($n % 113 == 0) {\n        return false;\n\
    \    }\n    if ($n % 117 == 0) {\n        return false;\n    }\n    if ($n % 121\
    \ == 0) {\n        return false;\n    }\n    if ($n % 123 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 127 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 131 == 0) {\n        return false;\n    }\n    if ($n % 133 == 0) {\n\
    \        return false;\n    }\n    if ($n % 137 == 0) {\n        return false;\n\
    \    }\n    if ($n % 141 == 0) {\n        return false;\n    }\n    if ($n % 143\
    \ == 0) {\n        return false;\n    }\n    if ($n % 147 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 151 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 153 == 0) {\n        return false;\n    }\n    if ($n % 157 == 0) {\n\
    \        return false;\n    }\n    if ($n % 161 == 0) {\n        return false;\n\
    \    }\n    if ($n % 163 == 0) {\n        return false;\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptlkbx7om.php on line 188

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x<0) return false;\n    if ($x>1)\
    \ return false;\n    if ($n<0) return false;\n    if ($n>100) return false;\n\
    \    if ($n==1) return true;\n    if ($n==2) return true;\n    if ($n==3) return\
    \ true;\n    if ($n==4) return true;\n    if ($n==5) return true;\n    if ($n==6)\
    \ return true;\n    if ($n==7) return true;\n    if ($n==8) return true;\n   \
    \ if ($n==9) return true;\n    if ($n==10) return true;\n    if ($n==11) return\
    \ true;\n    if ($n==12) return true;\n    if ($n==13) return true;\n    if ($n==14)\
    \ return true;\n    if ($n==15) return true;\n    if ($n==16) return true;\n \
    \   if ($n==17) return true;\n    if ($n==18) return true;\n    if ($n==19) return\
    \ true;\n    if ($n==20) return true;\n    if ($n==21) return true;\n    if ($n==22)\
    \ return true;\n    if ($n==23) return true;\n    if ($n==24) return true;\n \
    \   if ($n==25) return true;\n    if ($n==26) return true;\n    if ($n==27) return\
    \ true;\n    if ($n==28) return true;\n    if ($n==29) return true;\n    if ($n==30)\
    \ return true;\n    if ($n==31) return true;\n    if ($n==32) return true;\n \
    \   if ($n==33) return true;\n    if ($n==34) return true;\n    if ($n==35) return\
    \ true;\n    if ($n==36) return true;\n    if ($n==37) return true;\n    if ($n==38)\
    \ return true;\n    if ($n==39) return true;\n    if ($n==40) return true;\n \
    \   if ($n==41) return true;\n    if ($n==42) return true;\n    if ($n==43) return\
    \ true;\n    if ($n==44) return true;\n    if ($n==45) return true;\n    if ($n==46)\
    \ return true;\n    if ($n==47) return true;\n    if ($n==48) return true;\n \
    \   if ($n==49) return true;\n    if ($n==50) return true;\n    if ($n==51) return\
    \ true;\n    if ($n==52) return true;\n    if ($n==53) return true;\n    if ($n==54)\
    \ return true;\n    if ($n==55) return true;\n    if ($n==56\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_qlwmzz4.php on line 83

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==2) {\n        return ($n==1);\n\
    \    }\n    if ($x==3) {\n        return ($n==2);\n    }\n    if ($x==4) {\n \
    \       return ($n==4);\n    }\n    if ($x==5) {\n        return ($n==8);\n  \
    \  }\n    if ($x==6) {\n        return ($n==16);\n    }\n    if ($x==7) {\n  \
    \      return ($n==32);\n    }\n    if ($x==8) {\n        return ($n==64);\n \
    \   }\n    if ($x==9) {\n        return ($n==128);\n    }\n    if ($x==10) {\n\
    \        return ($n==256);\n    }\n    if ($x==11) {\n        return ($n==512);\n\
    \    }\n    if ($x==12) {\n        return ($n==1024);\n    }\n    if ($x==13)\
    \ {\n        return ($n==2048);\n    }\n    if ($x==14) {\n        return ($n==4096);\n\
    \    }\n    if ($x==15) {\n        return ($n==8192);\n    }\n    if ($x==16)\
    \ {\n        return ($n==16384);\n    }\n    if ($x==17) {\n        return ($n==32768);\n\
    \    }\n    if ($x==18) {\n        return ($n==65536);\n    }\n    if ($x==19)\
    \ {\n        return ($n==131072);\n    }\n    if ($x==20) {\n        return ($n==262144);\n\
    \    }\n    if ($x==21) {\n        return ($n==524288);\n    }\n    if ($x==22)\
    \ {\n        return ($n==1048576);\n    }\n    if ($x==23) {\n        return ($n==2097152);\n\
    \    }\n    if ($x==24) {\n        return ($n==4194304);\n    }\n    if ($x==25)\
    \ {\n        return ($n==8388608);\n    }\n    if ($x==26) {\n        return ($n==16777216);\n\
    \    }\n    if ($x==27) {\n        return ($n==33554432);\n    }\n    if ($x==28)\
    \ {\n        return ($n==67108864);\n    }\n    if ($x==29) {\n        return\
    \ ($n==134217728);\n    }\n    if ($x==30\nfunction candidate(...$args) {\n  \
    \  return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8g0uj429.php on line 116

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    if ($x % $n\
    \ == 1) {\n        return false;\n    }\n    if ($n % $x == 0) {\n        return\
    \ true;\n    }\n    if ($n % $x == 1) {\n        return false;\n    }\n    if\
    \ ($n % $x == $x) {\n        return true;\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0ahhwzp.php:61\n\
    Stack trace:\n#0 /tmp/tmpy0ahhwzp.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpy0ahhwzp.php\
    \ on line 61\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ $x==1;\n    }\n    if ($n==2) {\n        return $x==1;\n    }\n    if ($n==3)\
    \ {\n        return $x==1;\n    }\n    if ($n==4) {\n        return $x==1;\n \
    \   }\n    if ($n==5) {\n        return $x==1;\n    }\n    if ($n==6) {\n    \
    \    return $x==1;\n    }\n    if ($n==7) {\n        return $x==1;\n    }\n  \
    \  if ($n==8) {\n        return $x==1;\n    }\n    if ($n==9) {\n        return\
    \ $x==1;\n    }\n    if ($n==10) {\n        return $x==1;\n    }\n    if ($n==11)\
    \ {\n        return $x==1;\n    }\n    if ($n==12) {\n        return $x==1;\n\
    \    }\n    if ($n==13) {\n        return $x==1;\n    }\n    if ($n==14) {\n \
    \       return $x==1;\n    }\n    if ($n==15) {\n        return $x==1;\n    }\n\
    \    if ($n==16) {\n        return $x==1;\n    }\n    if ($n==17) {\n        return\
    \ $x==1;\n    }\n    if ($n==18) {\n        return $x==1;\n    }\n    if ($n==19)\
    \ {\n        return $x==1;\n    }\n    if ($n==20) {\n        return $x==1;\n\
    \    }\n    if ($n==21) {\n        return $x==1;\n    }\n    if ($n==22) {\n \
    \       return $x==1;\n    }\n    if ($n==23) {\n        return $x==1;\n    }\n\
    \    if ($n==24) {\n        return $x==1;\n    }\n    if ($n==25) {\n        return\
    \ $x==1;\n    }\n    if ($n==26) {\n        return $x==1;\n    }\n    if ($n==27)\
    \ {\n        return $x==1;\n    }\n    if ($n==28) {\n        return $x==1;\n\
    \    }\n    if ($n==29) {\n        return $x==1;\n    }\n    if ($n==30) {\n \
    \       return $x==1;\n    }\n    if ($n==31) {\n        return $x==1;\n    }\n\
    \    if ($n==32) {\n        return $x==1;\n    }\n    if ($n==33) {\n        return\
    \ $x==1;\n    }\n    if ($n==34) {\n        return $x==\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy51jbhr3.php on line 123

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5spat9h.php:40\n\
    Stack trace:\n#0 /tmp/tmpi5spat9h.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpi5spat9h.php\
    \ on line 40\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x, $n - 1);\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7q161c3.php:44\n\
    Stack trace:\n#0 /tmp/tmpq7q161c3.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpq7q161c3.php\
    \ on line 44\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($n==$x) {\n        return true;\n \
    \   }\n    if ($n<$x) {\n        return false;\n    }\n    if ($n>$x) {\n    \
    \    return false;\n    }\n    if ($n==$x-1) {\n        return true;\n    }\n\
    \    if ($n==$x-2) {\n        return true;\n    }\n    if ($n==$x-3) {\n     \
    \   return true;\n    }\n    if ($n==$x-4) {\n        return true;\n    }\n  \
    \  if ($n==$x-5) {\n        return true;\n    }\n    if ($n==$x-6) {\n       \
    \ return true;\n    }\n    if ($n==$x-7) {\n        return true;\n    }\n    if\
    \ ($n==$x-8) {\n        return true;\n    }\n    if ($n==$x-9) {\n        return\
    \ true;\n    }\n    if ($n==$x-10) {\n        return true;\n    }\n    if ($n==$x-11)\
    \ {\n        return true;\n    }\n    if ($n==$x-12) {\n        return true;\n\
    \    }\n    if ($n==$x-13) {\n        return true;\n    }\n    if ($n==$x-14)\
    \ {\n        return true;\n    }\n    if ($n==$x-15) {\n        return true;\n\
    \    }\n    if ($n==$x-16) {\n        return true;\n    }\n    if ($n==$x-17)\
    \ {\n        return true;\n    }\n    if ($n==$x-18) {\n        return true;\n\
    \    }\n    if ($n==$x-19) {\n        return true;\n    }\n    if ($n==$x-20)\
    \ {\n        return true;\n    }\n    if ($n==$x-21) {\n        return true;\n\
    \    }\n    if ($n==$x-22) {\n        return true;\n    }\n    if ($n==$x-23)\
    \ {\n        return true;\n    }\n    if ($n==$x-24) {\n        return true;\n\
    \    }\n    if ($n==$x-25) {\n        return true;\n    }\n    if ($n==$x-26)\
    \ {\n        return true;\n    }\n    if ($n==$x-27) {\n        return true;\n\
    \    }\n    if ($n==$x-28) {\n        return true;\n    }\n    if ($n==$x-29)\
    \ {\n        return true;\n    }\n    if ($n==$x-30) {\n        return true;\n\
    \    }\n    if ($n==$x-31) {\n        return true;\n    }\n    if ($n==$x-32)\
    \ {\n        return true;\n    }\n    if ($n==$x-33) {\n        return true;\n\
    \    }\n    if ($n==$x-34) {\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy1l2pud_.php on line 158

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph40nkcif.php:46\n\
    Stack trace:\n#0 /tmp/tmph40nkcif.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph40nkcif.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkahs7pad.php:33\n\
    Stack trace:\n#0 /tmp/tmpkahs7pad.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkahs7pad.php\
    \ on line 33\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpyizzb0.php:47\n\
    Stack trace:\n#0 /tmp/tmpwpyizzb0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwpyizzb0.php\
    \ on line 47\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyqzlddb7.php on line 123

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($n==-1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return false;\n    if ($x<0) return false;\n    if ($x>1) return false;\n  \
    \  if ($x==$n) return true;\n    if ($x<$n) return true;\n    if ($x>$n) return\
    \ false;\n    $x=$x/$n;\n    $y=$x;\n    while ($y<$n) {\n        $x=$x*$n;\n\
    \        $y++;\n    }\n    return $x==$n;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2b_adnjs.php:44\n\
    Stack trace:\n#0 /tmp/tmp2b_adnjs.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp2b_adnjs.php\
    \ on line 44\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x<0) return false;\n    if ($n<0)\
    \ return false;\n    if ($n==1) return true;\n    if ($x%$n==0) return true;\n\
    \    if ($x%$n==1) return false;\n    return is_simple_power($x/$n, $n);\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2mafuf5.php:36\n\
    Stack trace:\n#0 /tmp/tmpt2mafuf5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpt2mafuf5.php\
    \ on line 36\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $x = $x * $x;\n    $n2 = $n * $n;\n    $n4 = $n2 * $n;\n\
    \    if ($n4 % $x == 0) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeltk3osk.php:47\n\
    Stack trace:\n#0 /tmp/tmpeltk3osk.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpeltk3osk.php\
    \ on line 47\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph40nkcif.php:46\n\
    Stack trace:\n#0 /tmp/tmph40nkcif.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph40nkcif.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<=1) {\n        return true;\n    }\n    if ($n==2) {\n        return\
    \ true;\n    }\n    if ($n==3) {\n        return true;\n    }\n    if ($n==5)\
    \ {\n        return true;\n    }\n    if ($n==7) {\n        return true;\n   \
    \ }\n    if ($n==11) {\n        return true;\n    }\n    if ($n==13) {\n     \
    \   return true;\n    }\n    if ($n==17) {\n        return true;\n    }\n    if\
    \ ($n==19) {\n        return true;\n    }\n    if ($n==23) {\n        return true;\n\
    \    }\n    if ($n==29) {\n        return true;\n    }\n    if ($n==31) {\n  \
    \      return true;\n    }\n    if ($n==37) {\n        return true;\n    }\n \
    \   if ($n==41) {\n        return true;\n    }\n    if ($n==43) {\n        return\
    \ true;\n    }\n    if ($n==47) {\n        return true;\n    }\n    if ($n==53)\
    \ {\n        return true;\n    }\n    if ($n==59) {\n        return true;\n  \
    \  }\n    if ($n==61) {\n        return true;\n    }\n    if ($n==67) {\n    \
    \    return true;\n    }\n    if ($n==71) {\n        return true;\n    }\n   \
    \ if ($n==73) {\n        return true;\n    }\n    if ($n==79) {\n        return\
    \ true;\n    }\n    if ($n==83) {\n        return true;\n    }\n    if ($n==89)\
    \ {\n        return true;\n    }\n    if ($n==97) {\n        return true;\n  \
    \  }\n    if ($n==101) {\n        return true;\n    }\n    if ($n==103){\n   \
    \     return true;\n    }\n    if ($n==107){\n        return true;\n    }\n  \
    \  if ($n==109){\n        return true;\n    }\n    if ($n==113){\n        return\
    \ true;\n    }\n    if ($n==117){\n        return true;\n    }\n    if ($n==121){\n\
    \        return true;\n    }\n    if ($n==123){\n        return true;\n    }\n\
    \    if ($n==127){\n        return true;\n    }\n    if ($n==129){\n        return\
    \ true;\n    }\n    if ($n==131){\n        return true;\n    }\n    if ($n==133){\n\
    \        return true;\n    }\n    if ($n==135){\n        return true;\n    }\n\
    \    if ($n==137){\n        return true;\n    }\n    if ($n==139){\n        return\
    \ true;\n    }\n    if ($n==141){\n        return true;\n    }\n    if ($n==143){\n\
    \        return true;\n    }\n    if ($n==145){\n        return true;\n    }\n\
    \    if ($n==147){\n        return true;\n    }\n    if ($n==149){\n        return\
    \ true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsm2gzjmj.php on line 174

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x==-2) {\n        return false;\n    }\n    if ($x==-3) {\n \
    \       return false;\n    }\n    if ($x==-4) {\n        return false;\n    }\n\
    \    if ($x==-5) {\n        return false;\n    }\n    if ($x==-6) {\n        return\
    \ false;\n    }\n    if ($x==-7) {\n        return false;\n    }\n    if ($x==-8)\
    \ {\n        return false;\n    }\n    if ($x==-9) {\n        return false;\n\
    \    }\n    if ($x==-10) {\n        return false;\n    }\n    if ($x==-11) {\n\
    \        return false;\n    }\n    if ($x==-12) {\n        return false;\n   \
    \ }\n    if ($x==-13) {\n        return false;\n    }\n    if ($x==-14) {\n  \
    \      return false;\n    }\n    if ($x==-15) {\n        return false;\n    }\n\
    \    if ($x==-16) {\n        return false;\n    }\n    if ($x==-17) {\n      \
    \  return false;\n    }\n    if ($x==-18) {\n        return false;\n    }\n  \
    \  if ($x==-19) {\n        return false;\n    }\n    if ($x==-20) {\n        return\
    \ false;\n    }\n    if ($x==-21) {\n        return false;\n    }\n    if ($x==-22)\
    \ {\n        return false;\n    }\n    if ($x==-23) {\n        return false;\n\
    \    }\n    if ($x==-24) {\n        return false;\n    }\n    if ($x==-25) {\n\
    \        return false;\n    }\n    if ($x==-26) {\n        return false;\n   \
    \ }\n    if ($x==-27) {\n        return false;\n    }\n    if ($x==-28) {\n  \
    \      return false;\n    }\n    if ($x==-29) {\n        return false;\n    }\n\
    \    if ($x==-30) {\n        return false;\n    }\n    if ($x==-31) {\n      \
    \  return false;\n    }\n    if ($x==-32) {\n        return false;\n    }\n  \
    \  if ($x==-33) {\n        return false;\n    }\n    if ($x==-34) {\n        return\
    \ false;\n    }\n    if ($x==-35) {\n        return false;\n    }\n    if ($x==-36)\
    \ {\n        return false;\n    }\n    if ($x==-37) {\n        return false;\n\
    \    }\n    if ($x==-38) {\n        return false;\n    }\n    if ($x==-39) {\n\
    \        return false;\n    }\n    if ($x==-40) {\n        return false;\n   \
    \ }\n    if ($x==-41) {\n        return false;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv4482n7w.php on line 172

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<=1) {\n        return true;\n    }\n    if ($n==0) {\n        return\
    \ false;\n    }\n    if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0)\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ro5c7eb.php:44\n\
    Stack trace:\n#0 /tmp/tmp7ro5c7eb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp7ro5c7eb.php\
    \ on line 44\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x%$n==0) return\
    \ false;\n    if ($n%2==0) return is_simple_power($x/$n, $n-1);\n    return true;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcybn_9fc.php:30\n\
    Stack trace:\n#0 /tmp/tmpcybn_9fc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcybn_9fc.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x==-1) return true;\n    if ($x<0)\
    \ return false;\n    if ($n<0) return false;\n    if ($n==1) return true;\n  \
    \  if ($n==2) return true;\n    if ($n==3) return true;\n    if ($n==4) return\
    \ true;\n    if ($n==5) return true;\n    if ($n==6) return true;\n    if ($n==7)\
    \ return true;\n    if ($n==8) return true;\n    if ($n==9) return true;\n   \
    \ if ($n==10) return true;\n    if ($n==11) return true;\n    if ($n==12) return\
    \ true;\n    if ($n==13) return true;\n    if ($n==14) return true;\n    if ($n==15)\
    \ return true;\n    if ($n==16) return true;\n    if ($n==17) return true;\n \
    \   if ($n==18) return true;\n    if ($n==19) return true;\n    if ($n==20) return\
    \ true;\n    if ($n==21) return true;\n    if ($n==22) return true;\n    if ($n==23)\
    \ return true;\n    if ($n==24) return true;\n    if ($n==25) return true;\n \
    \   if ($n==26) return true;\n    if ($n==27) return true;\n    if ($n==28) return\
    \ true;\n    if ($n==29) return true;\n    if ($n==30) return true;\n    if ($n==31)\
    \ return true;\n    if ($n==32) return true;\n    if ($n==33) return true;\n \
    \   if ($n==34) return true;\n    if ($n==35) return true;\n    if ($n==36) return\
    \ true;\n    if ($n==37) return true;\n    if ($n==38) return true;\n    if ($n==39)\
    \ return true;\n    if ($n==40) return true;\n    if ($n==41) return true;\n \
    \   if ($n==42) return true;\n    if ($n==43) return true;\n    if ($n==44) return\
    \ true;\n    if ($n==45) return true;\n    if ($n==46) return true;\n    if ($n==47)\
    \ return true;\n    if ($n==48) return true;\n    if ($n==49) return true;\n \
    \   if ($n==50) return true;\n    if ($n==51) return true;\n    if ($n==52) return\
    \ true;\n    if ($n==53) return true;\n    if ($n==54) return true;\n    if ($n==55)\
    \ return true;\n    if ($n==56) return true;\n    if ($n==57\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4rp81cpn.php on line 83

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x==-2) {\n        return false;\n    }\n    if ($x==-3) {\n \
    \       return false;\n    }\n    if ($x==-4) {\n        return false;\n    }\n\
    \    if ($x==-5) {\n        return false;\n    }\n    if ($x==-6) {\n        return\
    \ false;\n    }\n    if ($x==-7) {\n        return false;\n    }\n    if ($x==-8)\
    \ {\n        return false;\n    }\n    if ($x==-9) {\n        return false;\n\
    \    }\n    if ($x==-10) {\n        return false;\n    }\n    if ($x==-11) {\n\
    \        return false;\n    }\n    if ($x==-12) {\n        return false;\n   \
    \ }\n    if ($x==-13) {\n        return false;\n    }\n    if ($x==-14) {\n  \
    \      return false;\n    }\n    if ($x==-15) {\n        return false;\n    }\n\
    \    if ($x==-16) {\n        return false;\n    }\n    if ($x==-17) {\n      \
    \  return false;\n    }\n    if ($x==-18) {\n        return false;\n    }\n  \
    \  if ($x==-19) {\n        return false;\n    }\n    if ($x==-20) {\n        return\
    \ false;\n    }\n    if ($x==-21) {\n        return false;\n    }\n    if ($x==-22)\
    \ {\n        return false;\n    }\n    if ($x==-23) {\n        return false;\n\
    \    }\n    if ($x==-24) {\n        return false;\n    }\n    if ($x==-25) {\n\
    \        return false;\n    }\n    if ($x==-26) {\n        return false;\n   \
    \ }\n    if ($x==-27) {\n        return false;\n    }\n    if ($x==-28) {\n  \
    \      return false;\n    }\n    if ($x==-29) {\n        return false;\n    }\n\
    \    if ($x==-30) {\n        return false;\n    }\n    if ($x==-31) {\n      \
    \  return false;\n    }\n    if ($x==-32) {\n        return false;\n    }\n  \
    \  if ($x==-33) {\n        return false;\n    }\n    if ($x==-34) {\n        return\
    \ false;\n    }\n    if ($x==-35) {\n        return false;\n    }\n    if ($x==-36)\
    \ {\n        return false;\n    }\n    if ($x==-37) {\n        return false;\n\
    \    }\n    if ($x==-38) {\n        return false;\n    }\n    if ($x==-39) {\n\
    \        return false;\n    }\n    if ($x==-40) {\n        return false;\n   \
    \ }\n    if ($x==-41) {\n        return false;\n    }\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv4482n7w.php on line 172

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsx0g_hn2.php:45\n\
    Stack trace:\n#0 /tmp/tmpsx0g_hn2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpsx0g_hn2.php\
    \ on line 45\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrnh2guo.php:46\n\
    Stack trace:\n#0 /tmp/tmphrnh2guo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphrnh2guo.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bi4tzss.php:30\n\
    Stack trace:\n#0 /tmp/tmp3bi4tzss.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3bi4tzss.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrnh2guo.php:46\n\
    Stack trace:\n#0 /tmp/tmphrnh2guo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphrnh2guo.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 3 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 5 == 0) {\n        return false;\n    }\n    if ($n % 7 == 0) {\n    \
    \    return false;\n    }\n    if ($n % 11 == 0) {\n        return false;\n  \
    \  }\n    if ($n % 13 == 0) {\n        return false;\n    }\n    if ($n % 17 ==\
    \ 0) {\n        return false;\n    }\n    if ($n % 19 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 23 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 29 == 0) {\n        return false;\n    }\n    if ($n % 31 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 37 == 0) {\n        return false;\n\
    \    }\n    if ($n % 41 == 0) {\n        return false;\n    }\n    if ($n % 43\
    \ == 0) {\n        return false;\n    }\n    if ($n % 47 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 53 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 59 == 0) {\n        return false;\n    }\n    if ($n % 61 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 67 == 0) {\n        return false;\n\
    \    }\n    if ($n % 71 == 0) {\n        return false;\n    }\n    if ($n % 73\
    \ == 0) {\n        return false;\n    }\n    if ($n % 79 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 83 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 89 == 0) {\n        return false;\n    }\n    if ($n % 97 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 103 == 0) {\n        return false;\n\
    \    }\n    if ($n % 107 == 0) {\n        return false;\n    }\n    if ($n % 113\
    \ == 0) {\n        return false;\n    }\n    if ($n % 119 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 125 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 131 == 0) {\n        return false;\n    }\n    if ($n % 137 == 0) {\n\
    \        return false;\n    }\n    if ($n % 143 == 0) {\n        return false;\n\
    \    }\n    if ($n % 149 == 0) {\n        return false;\n    }\n    if ($n % 153\
    \ == 0) {\n        return false;\n    }\n    if ($n % 159 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 163 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 167 == 0) {\n        return false;\n    }\n    if ($n % 173 == 0) {\n\
    \        return false;\n    }\n    if ($n % 179 == 0) {\n        return false;\n\
    \    }\n    if ($n % 183 == 0) {\n        return false;\n    }\n    if ($n % 189\
    \ == 0) {\n        return false;\n    }\n    if ($n % 193 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 199 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 203 == 0) {\n        return false;\n    }\n    if ($n % 209 == 0) {\n\
    \        return false;\n    }\n    if ($n % 213 == 0) {\n        return false;\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqlyg21b7.php on line 188

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<0) {\n        return false;\n    }\n    if ($n==0) {\n        return\
    \ true;\n    }\n    if ($n==1) {\n        return ($x==1);\n    }\n    if ($n==2)\
    \ {\n        return ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n\
    \    }\n    if ($n==4) {\n        return ($x==1);\n    }\n    if ($n==5) {\n \
    \       return ($x==1);\n    }\n    if ($n==6) {\n        return ($x==1);\n  \
    \  }\n    if ($n==7) {\n        return ($x==1);\n    }\n    if ($n==8) {\n   \
    \     return ($x==1);\n    }\n    if ($n==9) {\n        return ($x==1);\n    }\n\
    \    if ($n==10) {\n        return ($x==1);\n    }\n    if ($n==11) {\n      \
    \  return ($x==1);\n    }\n    if ($n==12) {\n        return ($x==1);\n    }\n\
    \    if ($n==13) {\n        return ($x==1);\n    }\n    if ($n==14) {\n      \
    \  return ($x==1);\n    }\n    if ($n==15) {\n        return ($x==1);\n    }\n\
    \    if ($n==16) {\n        return ($x==1);\n    }\n    if ($n==17) {\n      \
    \  return ($x==1);\n    }\n    if ($n==18) {\n        return ($x==1);\n    }\n\
    \    if ($n==19) {\n        return ($x==1);\n    }\n    if ($n==20) {\n      \
    \  return ($x==1);\n    }\n    if ($n==21) {\n        return ($x==1);\n    }\n\
    \    if ($n==22) {\n        return ($x==1);\n    }\n    if ($n==23) {\n      \
    \  return ($x==1);\n    }\n    if ($n==24) {\n        return ($x==1);\n    }\n\
    \    if ($n==25) {\n        return ($x==1);\n    }\n    if ($n==26) {\n      \
    \  return ($x==1);\n    }\n    if ($n==27) {\n        return ($x==1);\n    }\n\
    \    if ($n==28) {\n        return ($x==1);\n    }\n    if ($n==29) {\n      \
    \  return ($x==1);\n    }\n    if ($n==30) {\n        return ($x==1);\n    }\n\
    \    if ($n==31) {\n        return ($x==1);\n    }\n    if ($n==32) {\n      \
    \  return ($x==1);\n    }\n    if ($n==33) {\n        return ($x==1);\n    }\n\
    \    if (\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp54427xdq.php on line 125

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n\
    \        return true;\n    }\n    if ($x == 2) {\n        return true;\n    }\n\
    \    if ($x == 3) {\n        return true;\n    }\n    if ($x == 3) {\n       \
    \ return true;\n    }\n    if ($x == 4) {\n        return true;\n    }\n    if\
    \ ($x == 5) {\n        return true;\n    }\n    if ($x == 6) {\n        return\
    \ true;\n    }\n    if ($x == 7) {\n        return true;\n    }\n    if ($x ==\
    \ 8) {\n        return true;\n    }\n    if ($x == 9) {\n        return true;\n\
    \    }\n    if ($x == 10) {\n        return true;\n    }\n    if ($x == 11) {\n\
    \        return true;\n    }\n    if ($x == 12) {\n        return true;\n    }\n\
    \    if ($x == 13) {\n        return true;\n    }\n    if ($x == 14) {\n     \
    \   return true;\n    }\n    if ($x == 15) {\n        return true;\n    }\n  \
    \  if ($x == 16) {\n        return true;\n    }\n    if ($x == 17) {\n       \
    \ return true;\n    }\n    if ($x == 18) {\n        return true;\n    }\n    if\
    \ ($x == 19) {\n        return true;\n    }\n    if ($x == 20) {\n        return\
    \ true;\n    }\n    if ($x == 21) {\n        return true;\n    }\n    if ($x ==\
    \ 22) {\n        return true;\n    }\n    if ($x == 23) {\n        return true;\n\
    \    }\n    if ($x == 24) {\n        return true;\n    }\n    if ($x == 25) {\n\
    \        return true;\n    }\n    if ($x == 26) {\n        return true;\n    }\n\
    \    if ($x == 27) {\n        return true;\n    }\n    if ($x == 28) {\n     \
    \   return true;\n    }\n    if ($x == 29) {\n        return true;\n    }\n  \
    \  if ($x == 30) {\n        return true;\n    }\n    if ($x == 31) {\n       \
    \ return true;\n    }\n    if ($x == 32) {\n        return true;\n    }\n    if\
    \ ($x == 33) {\n        return true;\n    }\n    if ($x == 34) {\n        return\
    \ true;\n    }\n    if ($x == 35) {\n        return true;\n    }\n    if ($x ==\
    \ 36) {\n        return true;\n    }\n    if ($x == 37) {\n        return true;\n\
    \    }\n    if ($x == 38) {\n        return true;\n    }\n    if ($x == 39) {\n\
    \        return true;\n    }\n    if ($x == 40) {\n        return true;\n    }\n\
    \    if ($x == 41) {\n        return true;\n    }\n    if ($x == 42) {\n     \
    \   return true;\n    }\n    if ($x == 43) {\n        return true;\n    }\n  \
    \  if ($x == 44) {\n        return true;\n    }\n    if ($x == 45) {\n       \
    \ return true;\n    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk5yqlhh3.php on line 193

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpikahn41a.php:48\n\
    Stack trace:\n#0 /tmp/tmpikahn41a.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpikahn41a.php\
    \ on line 48\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph40nkcif.php:46\n\
    Stack trace:\n#0 /tmp/tmph40nkcif.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph40nkcif.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return true;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if\
    \ ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return true;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if\
    \ ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return true;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if\
    \ ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return true;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if\
    \ ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return true;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if\
    \ ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return true;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if\
    \ ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return true;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if\
    \ ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return true;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if\
    \ ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return true;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if\
    \ ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpn7v13zkp.php on line 189

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x, $n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozekj3pn.php:45\n\
    Stack trace:\n#0 /tmp/tmpozekj3pn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpozekj3pn.php\
    \ on line 45\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($n==-1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return true;\n    if ($x<0) return false;\n    if ($x>1) return false;\n   \
    \ if ($x==$n) return true;\n    if ($x<$n) return true;\n    if ($x>$n) return\
    \ true;\n    if ($x==$n**2) return true;\n    if ($x<$n**2) return true;\n   \
    \ if ($x>$n**2) return true;\n    if ($x==$n**3) return true;\n    if ($x<$n**3)\
    \ return true;\n    if ($x>$n**3) return true;\n    if ($x==$n**4) return true;\n\
    \    if ($x<$n**4) return true;\n    if ($x>$n**4) return true;\n    if ($x==$n**5)\
    \ return true;\n    if ($x<$n**5) return true;\n    if ($x>$n**5) return true;\n\
    \    if ($x==$n**6) return true;\n    if ($x<$n**6) return true;\n    if ($x>$n**6)\
    \ return true;\n    if ($x==$n**7) return true;\n    if ($x<$n**7) return true;\n\
    \    if ($x>$n**7) return true;\n    if ($x==$n**8) return true;\n    if ($x<$n**8)\
    \ return true;\n    if ($x>$n**8) return true;\n    if ($x==$n**9) return true;\n\
    \    if ($x<$n**9) return true;\n    if ($x>$n**9) return true;\n    if ($x==$n**10)\
    \ return true;\n    if ($x<$n**10) return true;\n    if ($x>$n**10) return true;\n\
    \    if ($x==$n**11) return true;\n    if ($x<$n**11) return true;\n    if ($x>$n**11)\
    \ return true;\n    if ($x==$n**12) return true;\n    if ($x<$n**12) return true;\n\
    \    if ($x>$n**12) return true;\n    if ($x==$n**13) return true;\n    if ($x<$n**13)\
    \ return true;\n    if ($x>$n**13) return true;\n    if ($x==$n**14) return true;\n\
    \    if ($x<$n**14) return true;\n    if ($x\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjguk9dwa.php on line 69

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34urr6p4.php:31\n\
    Stack trace:\n#0 /tmp/tmp34urr6p4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp34urr6p4.php\
    \ on line 31\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == 2) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 3) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 4) {\n        return ($x == 1);\n    }\n    if ($n == 5) {\n        return\
    \ ($x == 1);\n    }\n    if ($n == 6) {\n        return ($x == 1);\n    }\n  \
    \  if ($n == 7) {\n        return ($x == 1);\n    }\n    if ($n == 8) {\n    \
    \    return ($x == 1);\n    }\n    if ($n == 9) {\n        return ($x == 1);\n\
    \    }\n    if ($n == 10) {\n        return ($x == 1);\n    }\n    if ($n == 11)\
    \ {\n        return ($x == 1);\n    }\n    if ($n == 12) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 13) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 14) {\n        return ($x == 1);\n    }\n    if ($n == 15) {\n      \
    \  return ($x == 1);\n    }\n    if ($n == 16) {\n        return ($x == 1);\n\
    \    }\n    if ($n == 17) {\n        return ($x == 1);\n    }\n    if ($n == 18)\
    \ {\n        return ($x == 1);\n    }\n    if ($n == 19) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 20) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 21) {\n        return ($x == 1);\n    }\n    if ($n == 22) {\n      \
    \  return ($x == 1);\n    }\n    if ($n == 23) {\n        return ($x == 1);\n\
    \    }\n    if ($n == 24) {\n        return ($x == 1);\n    }\n    if ($n == 25)\
    \ {\n        return ($x == 1);\n    }\n    if ($n == 26) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 27) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 28) {\n        return ($x == 1);\n    }\n    if ($n == 29) {\n      \
    \  return ($x == 1);\n    }\n    if ($n == 3) {\n        return ($x == 1);\n \
    \   }\n    if ($n == 4) {\n        return ($x == 1);\n    }\n    if ($n == 5)\
    \ {\n        return ($x == 1);\n    }\n    if ($n == 6) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 7) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 8) {\n        return ($x == 1);\n    }\n    if ($n == 9) {\n        return\
    \ ($x == 1);\n    }\n    if ($n == 10) {\n        return ($x == 1);\n    }\n \
    \   if ($n == 11) {\n        return ($x == \nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2y6fakbi.php on line 141

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5n4q_xa.php:41\n\
    Stack trace:\n#0 /tmp/tmpu5n4q_xa.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpu5n4q_xa.php\
    \ on line 41\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqsheg19d.php:29\n\
    Stack trace:\n#0 /tmp/tmpqsheg19d.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqsheg19d.php\
    \ on line 29\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlaf0q_c.php:42\n\
    Stack trace:\n#0 /tmp/tmpxlaf0q_c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxlaf0q_c.php\
    \ on line 42\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqsheg19d.php:29\n\
    Stack trace:\n#0 /tmp/tmpqsheg19d.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqsheg19d.php\
    \ on line 29\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpyizzb0.php:47\n\
    Stack trace:\n#0 /tmp/tmpwpyizzb0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwpyizzb0.php\
    \ on line 47\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($n==$x) {\n        return true;\n \
    \   }\n    if ($n<$x) {\n        return false;\n    }\n    $y=$x;\n    while ($n>1)\
    \ {\n        $y=$y*$x;\n        $n--;\n    }\n    return ($y==$x);\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxwz350k.php:49\n\
    Stack trace:\n#0 /tmp/tmpgxwz350k.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpgxwz350k.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp34urr6p4.php:31\n\
    Stack trace:\n#0 /tmp/tmp34urr6p4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp34urr6p4.php\
    \ on line 31\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x==2) return true;\n    if ($x==3)\
    \ return true;\n    if ($x==4) return true;\n    if ($x==5) return true;\n   \
    \ if ($x==6) return true;\n    if ($x==7) return true;\n    if ($x==8) return\
    \ true;\n    if ($x==9) return true;\n    if ($x==10) return true;\n    if ($x==11)\
    \ return true;\n    if ($x==12) return true;\n    if ($x==13) return true;\n \
    \   if ($x==14) return true;\n    if ($x==15) return true;\n    if ($x==16) return\
    \ true;\n    if ($x==17) return true;\n    if ($x==18) return true;\n    if ($x==19)\
    \ return true;\n    if ($x==20) return true;\n    if ($x==21) return true;\n \
    \   if ($x==22) return true;\n    if ($x==23) return true;\n    if ($x==24) return\
    \ true;\n    if ($x==25) return true;\n    if ($x==26) return true;\n    if ($x==27)\
    \ return true;\n    if ($x==28) return true;\n    if ($x==29) return true;\n \
    \   if ($x==30) return true;\n    if ($x==31) return true;\n    if ($x==32) return\
    \ true;\n    if ($x==33) return true;\n    if ($x==34) return true;\n    if ($x==35)\
    \ return true;\n    if ($x==36) return true;\n    if ($x==37) return true;\n \
    \   if ($x==38) return true;\n    if ($x==39) return true;\n    if ($x==40) return\
    \ true;\n    if ($x==41) return true;\n    if ($x==42) return true;\n    if ($x==43)\
    \ return true;\n    if ($x==44) return true;\n    if ($x==45) return true;\n \
    \   if ($x==46) return true;\n    if ($x==47) return true;\n    if ($x==48) return\
    \ true;\n    if ($x==49) return true;\n    if ($x==50) return true;\n    if ($x==51)\
    \ return true;\n    if ($x==52) return true;\n    if ($x==53) return true;\n \
    \   if ($x==54) return true;\n    if ($x==55) return true;\n    if ($x==56) return\
    \ true;\n    if ($x==57) return true;\n    if ($x==58) return true;\n    if ($x==59)\
    \ return true;\n    if ($x==60) return true;\n    if ($x==6\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5fyqr9y2.php on line 83

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == 2) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 3) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 4) {\n        return ($x == 1);\n    }\n    if ($n == 5) {\n        return\
    \ ($x == 1);\n    }\n    if ($n == 6) {\n        return ($x == 1);\n    }\n  \
    \  if ($n == 7) {\n        return ($x == 1);\n    }\n    if ($n == 8) {\n    \
    \    return ($x == 1);\n    }\n    if ($n == 9) {\n        return ($x == 1);\n\
    \    }\n    if ($n == 10) {\n        return ($x == 1);\n    }\n    if ($n == 11)\
    \ {\n        return ($x == 1);\n    }\n    if ($n == 12) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 13) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 14) {\n        return ($x == 1);\n    }\n    if ($n == 15) {\n      \
    \  return ($x == 1);\n    }\n    if ($n == 16) {\n        return ($x == 1);\n\
    \    }\n    if ($n == 17) {\n        return ($x == 1);\n    }\n    if ($n == 18)\
    \ {\n        return ($x == 1);\n    }\n    if ($n == 19) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 20) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 21) {\n        return ($x == 1);\n    }\n    if ($n == 22) {\n      \
    \  return ($x == 1);\n    }\n    if ($n == 23) {\n        return ($x == 1);\n\
    \    }\n    if ($n == 24) {\n        return ($x == 1);\n    }\n    if ($n == 25)\
    \ {\n        return ($x == 1);\n    }\n    if ($n == 26) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 27) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 28) {\n        return ($x == 1);\n    }\n    if ($n == 29) {\n      \
    \  return ($x == 1);\n    }\n    if ($n == 3) {\n        return ($x == 1);\n \
    \   }\n    if ($n == 4) {\n        return ($x == 1);\n    }\n    if ($n == 5)\
    \ {\n        return ($x == 1);\n    }\n    if ($n == 6) {\n        return ($x\
    \ == 1);\n    }\n    if ($n == 7) {\n        return ($x == 1);\n    }\n    if\
    \ ($n == 8) {\n        return ($x == 1);\n    }\n    if ($n == 9) {\n        return\
    \ ($x == 1);\n    }\n    if ($n == 10) {\n        return ($x == 1);\n    }\n \
    \   if ($n == 11) {\n        return ($x == \nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2y6fakbi.php on line 141

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==-1) {\n        return ($x==1);\n    }\n    if ($n<0)\
    \ {\n        return ($x==1);\n    }\n    if ($n==1) {\n        return ($x==1);\n\
    \    }\n    if ($n==-1) {\n        return ($x==1);\n    }\n    if ($n==2) {\n\
    \        return ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n \
    \   }\n    if ($n==4) {\n        return ($x==1);\n    }\n    if ($n==5) {\n  \
    \      return ($x==1);\n    }\n    if ($n==6) {\n        return ($x==1);\n   \
    \ }\n    if ($n==7) {\n        return ($x==1);\n    }\n    if ($n==8) {\n    \
    \    return ($x==1);\n    }\n    if ($n==9) {\n        return ($x==1);\n    }\n\
    \    if ($n==10) {\n        return ($x==1);\n    }\n    if ($n==11) {\n      \
    \  return ($x==1);\n    }\n    if ($n==12) {\n        return ($x==1);\n    }\n\
    \    if ($n==13) {\n        return ($x==1);\n    }\n    if ($n==14) {\n      \
    \  return ($x==1);\n    }\n    if ($n==15) {\n        return ($x==1);\n    }\n\
    \    if ($n==16) {\n        return ($x==1);\n    }\n    if ($n==17) {\n      \
    \  return ($x==1);\n    }\n    if ($n==18) {\n        return ($x==1);\n    }\n\
    \    if ($n==19) {\n        return ($x==1);\n    }\n    if ($n==20) {\n      \
    \  return ($x==1);\n    }\n    if ($n==21) {\n        return ($x==1);\n    }\n\
    \    if ($n==22) {\n        return ($x==1);\n    }\n    if ($n==23) {\n      \
    \  return ($x==1);\n    }\n    if ($n==24) {\n        return ($x==1);\n    }\n\
    \    if ($n==25) {\n        return ($x==1);\n    }\n    if ($n==26) {\n      \
    \  return ($x==1);\n    }\n    if ($n==27) {\n        return ($x==1);\n    }\n\
    \    if ($n==28) {\n        return ($x==1);\n    }\n    if ($n==29) {\n      \
    \  return ($x==1);\n    }\n    if ($n==30) {\n        return ($x==1);\n    }\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdka2v51t.php on line 142

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    if ($x % $n\
    \ == 1) {\n        return false;\n    }\n    if ($n % $x == 0) {\n        return\
    \ true;\n    }\n    if ($n % $x == 1) {\n        return false;\n    }\n    if\
    \ ($n % $x == $x) {\n        return true;\n    }\n    if ($n % $x == $n - 1) {\n\
    \        return false;\n    }\n    if ($n % $x == $n - 2) {\n        return true;\n\
    \    }\n    if ($n % $x == $n - 3) {\n        return false;\n    }\n    if ($n\
    \ % $x == $n - 4) {\n        return true;\n    }\n    if ($n % $x == $n - 5) {\n\
    \        return false;\n    }\n    if ($n % $x == $n - 6) {\n        return true;\n\
    \    }\n    if ($n % $x == $n - 7) {\n        return false;\n    }\n    if ($n\
    \ % $x == $n - 8) {\n        return true;\n    }\n    if ($n % $x == $n - 9) {\n\
    \        return false;\n    }\n    if ($n % $x == $n - 10) {\n        return true;\n\
    \    }\n    if ($n % $x == $n - 11) {\n        return false;\n    }\n    if ($n\
    \ % $x == $n - 12) {\n        return true;\n    }\n    if ($n % $x == $n - 13)\
    \ {\n        return false;\n    }\n    if ($n % $x == $n - 14) {\n        return\
    \ true;\n    }\n    if ($n % $x == $n - 15) {\n        return false;\n    }\n\
    \    if ($n % $x == $n - 16) {\n        return true;\n    }\n    if ($n % $x ==\
    \ $n - 17) {\n        return false;\n    }\n    if ($n % $x == $n - 18) {\n  \
    \      return true;\n    }\n    if ($n % $x == $n - 19) {\n        return false;\n\
    \    }\n    if ($n % $x == $n - 20) {\n        return true;\n    }\n    if ($n\
    \ % $x == $n - 21) {\n        return false;\n    }\n    if ($n % $x == $n - 22)\
    \ {\n        return true;\n    }\n    if ($n % $x == $n - 23) {\n        return\
    \ false;\n    }\n    if ($n % $x == $n - 24) {\n        return true;\n    }\n\
    \    if ($n % $x == $n - 25) {\n        return false;\n    }\n    if ($n % $x\
    \ == $n - 26) {\n        return true;\n    }\n    if ($n % $x == $n - 27) {\n\
    \        return false;\n    }\n    if ($n % $x == $n - 28) {\n        return true;\n\
    \    }\n    if ($n % $x == $n - 29) {\n        return false;\n    }\n    if ($n\
    \ % $x == $\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmd8ca4sf.php on line 137

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==2) {\n        return true;\n  \
    \  }\n    if ($x==3) {\n        return true;\n    }\n    if ($x==4) {\n      \
    \  return true;\n    }\n    if ($x==5) {\n        return true;\n    }\n    if\
    \ ($x==6) {\n        return true;\n    }\n    if ($x==7) {\n        return true;\n\
    \    }\n    if ($x==8) {\n        return true;\n    }\n    if ($x==9) {\n    \
    \    return true;\n    }\n    if ($x==10) {\n        return true;\n    }\n   \
    \ if ($x==11) {\n        return true;\n    }\n    if ($x==12) {\n        return\
    \ true;\n    }\n    if ($x==13) {\n        return true;\n    }\n    if ($x==14)\
    \ {\n        return true;\n    }\n    if ($x==15) {\n        return true;\n  \
    \  }\n    if ($x==16) {\n        return true;\n    }\n    if ($x==17) {\n    \
    \    return true;\n    }\n    if ($x==18) {\n        return true;\n    }\n   \
    \ if ($x==19) {\n        return true;\n    }\n    if ($x==20) {\n        return\
    \ true;\n    }\n    if ($x==21) {\n        return true;\n    }\n    if ($x==22)\
    \ {\n        return true;\n    }\n    if ($x==23) {\n        return true;\n  \
    \  }\n    if ($x==24) {\n        return true;\n    }\n    if ($x==25) {\n    \
    \    return true;\n    }\n    if ($x==26) {\n        return true;\n    }\n   \
    \ if ($x==27) {\n        return true;\n    }\n    if ($x==28) {\n        return\
    \ true;\n    }\n    if ($x==29) {\n        return true;\n    }\n    if ($x==30)\
    \ {\n        return true;\n    }\n    if ($x==31) {\n        return true;\n  \
    \  }\n    if ($x==32) {\n        return true;\n    }\n    if ($x==33) {\n    \
    \    return true;\n    }\n    if ($x==34) {\n        return true;\n    }\n   \
    \ if ($x==35) {\n        return true;\n    }\n    if ($x==36) {\n        return\
    \ true;\n    }\n    if ($x==37) {\n        return true;\n    }\n    if ($x==38)\
    \ {\n        return true;\n    }\n    if ($x==39) {\n        return true;\n  \
    \  }\n    if ($x==40) {\n        return true;\n    }\n    if ($x==41) {\n    \
    \    return true;\n    }\n    if ($x==42) {\n        return true;\n    }\n   \
    \ if ($x==43) {\n        return true;\n    }\n    if ($x==44) {\n        return\
    \ true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp554r0_bn.php on line 177

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x<0) return false;\n    if ($n<0)\
    \ return false;\n    if ($n>30) return false;\n    if ($x>1) return false;\n \
    \   if ($x<-1) return false;\n    if ($n==2) return true;\n    if ($n==3) return\
    \ true;\n    if ($n==5) return true;\n    if ($n==7) return true;\n    if ($n==11)\
    \ return true;\n    if ($n==13) return true;\n    if ($n==17) return true;\n \
    \   if ($n==19) return true;\n    if ($n==23) return true;\n    if ($n==29) return\
    \ true;\n    if ($n==31) return true;\n    if ($n==37) return true;\n    if ($n==41)\
    \ return true;\n    if ($n==43) return true;\n    if ($n==47) return true;\n \
    \   if ($n==53) return true;\n    if ($n==59) return true;\n    if ($n==61) return\
    \ true;\n    if ($n==67) return true;\n    if ($n==71) return true;\n    if ($n==73)\
    \ return true;\n    if ($n==79) return true;\n    if ($n==83) return true;\n \
    \   if ($n==89) return true;\n    if ($n==97) return true;\n    if ($n==101) return\
    \ true;\n    if ($n==103) return true;\n    if ($n==107) return true;\n    if\
    \ ($n==109) return true;\n    if ($n==113) return true;\n    if ($n==127) return\
    \ true;\n    if ($n==131) return true;\n    if ($n==137) return true;\n    if\
    \ ($n==139) return true;\n    if ($n==147) return true;\n    if ($n==151) return\
    \ true;\n    if ($n==157) return true;\n    if ($n==163) return true;\n    if\
    \ ($n==171) return true;\n    if ($n==177) return true;\n    if ($n==181) return\
    \ true;\n    if ($n==191) return true;\n    if ($n==197) return true;\n    if\
    \ ($n==199) return true;\n    if ($n==203) return true;\n    if ($n==209) return\
    \ true;\n    if ($n==211) return true;\n    if ($n==217) return true;\n    if\
    \ ($n==223) return true;\n    if ($n==229) return true;\n    if ($n==233) return\
    \ true;\n    if ($n==239) return true;\n    if ($n==247) return true;\n    if\
    \ ($n==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpygofasl6.php on line 82

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    $y=$x/$n;\n    if ($y==floor($y)) return true;\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp118qzh_8.php:34\n\
    Stack trace:\n#0 /tmp/tmp118qzh_8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp118qzh_8.php\
    \ on line 34\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dg09b6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp2dg09b6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2dg09b6b.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==-1) {\n   \
    \     return false;\n    }\n    if ($n==1) {\n        return ($x==1);\n    }\n\
    \    if ($x==0) {\n        return false;\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n<0) {\n\
    \        return false;\n    }\n    if ($n==1) {\n        return ($x==1);\n   \
    \ }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==1) {\n      \
    \  return true;\n    }\n    if ($x<0) {\n        return false;\n    }\n    if\
    \ ($n<0) {\n        return false;\n    }\n    if ($n==1) {\n        return ($x==1);\n\
    \    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==1) {\n   \
    \     return true;\n    }\n    if ($x<0) {\n        return false;\n    }\n   \
    \ if ($n<0) {\n        return false;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x<0) {\n        return false;\n   \
    \ }\n    if ($n<0) {\n        return false;\n    }\n    if ($n==1) {\n       \
    \ return ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n   \
    \ if ($x==1) {\n        return true;\n    }\n    if ($x<0) {\n        return false;\n\
    \    }\n    if ($n<0) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n\
    \    if ($x==1) {\n        return true;\n    }\n    if ($x<0) {\n        return\
    \ false;\n    }\n    if ($n<0) {\n        return false;\n    }\n    if ($n==1)\
    \ {\n        return ($x==1);\n    }\n    if ($x==0) {\n        return false;\n\
    \    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x<0) {\n     \
    \   return false;\n    }\n    if ($n<0) {\n        return false;\n    }\n    if\
    \ ($n==1) {\n        return ($x==1);\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x<0)\
    \ {\n        return false;\n    }\n    if ($n<0) {\n        return false;\n  \
    \  }\n    if ($n==1) {\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6zgxwu55.php on line 179

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `is_simple_power(-4, 2)`\
    \ returns `true`, but `is_simple_power(-4, 3)` returns `false`.\n<|/ c |>\n<|\
    \ c |>\nYes, I forgot about negative numbers. I edited my answer to include a\
    \ solution for negative numbers.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `is_simple_power(-4, 2)` returns `true`, but `is_simple_power(-4, 3)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ for negative numbers.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `is_simple_power(-4, 2)` returns `true`, but `is_simple_power(-4, 3)` returns\
    \ `false`.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppy2gj6_6.php on line 39

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlaf0q_c.php:42\n\
    Stack trace:\n#0 /tmp/tmpxlaf0q_c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxlaf0q_c.php\
    \ on line 42\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==$n-1) {\n        return true;\n\
    \    }\n    if ($x<$n-1) {\n        return false;\n    }\n    $y=$x;\n    while\
    \ ($y<$n-1) {\n        $y=$y*$y;\n    }\n    return ($x==$y);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoyye3q81.php:49\n\
    Stack trace:\n#0 /tmp/tmpoyye3q81.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpoyye3q81.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrnh2guo.php:46\n\
    Stack trace:\n#0 /tmp/tmphrnh2guo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphrnh2guo.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \ // Your code here\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps65w7xu7.php on line 21

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy72_bjxp.php:33\n\
    Stack trace:\n#0 /tmp/tmpy72_bjxp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpy72_bjxp.php\
    \ on line 33\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x, $n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozekj3pn.php:45\n\
    Stack trace:\n#0 /tmp/tmpozekj3pn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpozekj3pn.php\
    \ on line 45\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    if ($n % $x\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcj5au5mz.php:53\n\
    Stack trace:\n#0 /tmp/tmpcj5au5mz.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpcj5au5mz.php\
    \ on line 53\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dg09b6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp2dg09b6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2dg09b6b.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 3 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 5 == 0) {\n        return false;\n    }\n    $x = $x * $x;\n    $n = $n\
    \ * $n;\n    $x = $x / $n;\n    $x = $x % $n;\n    return $x == 1;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_ohk5c9.php:51\n\
    Stack trace:\n#0 /tmp/tmpm_ohk5c9.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpm_ohk5c9.php\
    \ on line 51\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ $x==1;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==2) {\n        return $n==1;\n  \
    \  }\n    if ($x==3) {\n        return $n==2;\n    }\n    if ($x==4) {\n     \
    \   return $n==3;\n    }\n    if ($x==5) {\n        return $n==4;\n    }\n   \
    \ if ($x==6) {\n        return $n==5;\n    }\n    if ($x==7) {\n        return\
    \ $n==6;\n    }\n    if ($x==8) {\n        return $n==7;\n    }\n    if ($x==9)\
    \ {\n        return $n==8;\n    }\n    if ($x==10) {\n        return $n==9;\n\
    \    }\n    if ($x==11) {\n        return $n==10;\n    }\n    if ($x==12) {\n\
    \        return $n==11;\n    }\n    if ($x==13) {\n        return $n==12;\n  \
    \  }\n    if ($x==14) {\n        return $n==13;\n    }\n    if ($x==15) {\n  \
    \      return $n==14;\n    }\n    if ($x==16) {\n        return $n==15;\n    }\n\
    \    if ($x==17) {\n        return $n==16;\n    }\n    if ($x==18) {\n       \
    \ return $n==17;\n    }\n    if ($x==19) {\n        return $n==18;\n    }\n  \
    \  if ($x==20) {\n        return $n==19;\n    }\n    if ($x==21) {\n        return\
    \ $n==20;\n    }\n    if ($x==22) {\n        return $n==21;\n    }\n    if ($x==23)\
    \ {\n        return $n==22;\n    }\n    if ($x==24) {\n        return $n==23;\n\
    \    }\n    if ($x==25) {\n        return $n==24;\n    }\n    if ($x==26) {\n\
    \        return $n==25;\n    }\n    if ($x==27) {\n        return $n==26;\n  \
    \  }\n    if ($x==28) {\n        return $n==27;\n    }\n    if ($x==29) {\n  \
    \      return $n==28;\n    }\n    if ($x==30) {\n        return $n==29;\n    }\n\
    \    if ($x==31) {\n        return $n==30;\n    }\n    if ($x==32) {\n       \
    \ return \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkn2xi8qc.php on line 123

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==2) {\n        return ($n==1);\n\
    \    }\n    if ($x==3) {\n        return ($n==2);\n    }\n    if ($x==4) {\n \
    \       return ($n==2);\n    }\n    if ($x==5) {\n        return ($n==3);\n  \
    \  }\n    if ($x==6) {\n        return ($n==3);\n    }\n    if ($x==7) {\n   \
    \     return ($n==4);\n    }\n    if ($x==8) {\n        return ($n==4);\n    }\n\
    \    if ($x==9) {\n        return ($n==5);\n    }\n    if ($x==10) {\n       \
    \ return ($n==5);\n    }\n    if ($x==11) {\n        return ($n==6);\n    }\n\
    \    if ($x==12) {\n        return ($n==6);\n    }\n    if ($x==13) {\n      \
    \  return ($n==7);\n    }\n    if ($x==14) {\n        return ($n==7);\n    }\n\
    \    if ($x==15) {\n        return ($n==8);\n    }\n    if ($x==16) {\n      \
    \  return ($n==8);\n    }\n    if ($x==17) {\n        return ($n==9);\n    }\n\
    \    if ($x==18) {\n        return ($n==9);\n    }\n    if ($x==19) {\n      \
    \  return ($n==10);\n    }\n    if ($x==20) {\n        return ($n==10);\n    }\n\
    \    if ($x==21) {\n        return ($n==11);\n    }\n    if ($x==22) {\n     \
    \   return ($n==11);\n    }\n    if ($x==23) {\n        return ($n==12);\n   \
    \ }\n    if ($x==24) {\n        return ($n==12);\n    }\n    if ($x==25) {\n \
    \       return ($n==13);\n    }\n    if ($x==26) {\n        return ($n==13);\n\
    \    }\n    if ($x==27) {\n        return ($n==14);\n    }\n    if ($x==28) {\n\
    \        return ($n==14);\n    }\n    if ($x==29) {\n        return ($n==15);\n\
    \    }\n    if ($x==30) {\n        return ($n==15);\n    }\n    if ($x==31) {\n\
    \        return ($n==16);\n    }\n    if ($x==32) {\n        return ($n==16);\n\
    \    }\n    if ($x==33) {\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvcttgesu.php on line 142

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    if ($n % 3 ==\
    \ 0) {\n        return false;\n    }\n    if ($n % 5 == 0) {\n        return false;\n\
    \    }\n    if ($n % 7 == 0) {\n        return false;\n    }\n    if ($n % 11\
    \ == 0) {\n        return false;\n    }\n    if ($n % 13 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 17 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 19 == 0) {\n        return false;\n    }\n    if ($n % 23 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 29 == 0) {\n        return false;\n\
    \    }\n    if ($n % 31 == 0) {\n        return false;\n    }\n    if ($n % 37\
    \ == 0) {\n        return false;\n    }\n    if ($n % 41 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 43 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 47 == 0) {\n        return false;\n    }\n    if ($n % 53 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 59 == 0) {\n        return false;\n\
    \    }\n    if ($n % 61 == 0) {\n        return false;\n    }\n    if ($n % 67\
    \ == 0) {\n        return false;\n    }\n    if ($n % 71 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 73 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 79 == 0) {\n        return false;\n    }\n    if ($n % 83 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 89 == 0) {\n        return false;\n\
    \    }\n    if ($n % 97 == 0) {\n        return false;\n    }\n    if ($n % 103\
    \ == 0) {\n        return false;\n    }\n    if ($n % 109 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 113 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 127 == 0) {\n        return false;\n    }\n    if ($n % 131 == 0) {\n\
    \        return false;\n    }\n    if ($n % 137 == 0) {\n        return false;\n\
    \    }\n    if ($n % 141 == 0) {\n        return false;\n    }\n    if ($n % 147\
    \ == 0) {\n        return false;\n    }\n    if ($n % 151 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 157 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 161 == 0) {\n        return false;\n    }\n    if ($n % 167 == 0) {\n\
    \        return false;\n    }\n    if ($n % 171 == 0) {\n        return false;\n\
    \    }\n    if ($n % 177 == 0) {\n        return false;\n    }\n    if ($n % 181\
    \ == 0) {\n        return false;\n    }\n    if ($n % 187 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 191 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 197 == 0) {\n        return false;\n    }\n    if ($n % 201 == 0) {\n\
    \        return false;\n    }\n    if ($n % 207 == 0) {\n        return false;\n\
    \    }\n    if ($n % 211 == 0) {\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcsglwfwh.php on line 188

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyqzlddb7.php on line 123

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($n==-1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return true;\n    if ($x<0) return false;\n    if ($x>1) return false;\n   \
    \ if ($x==$n) return true;\n    if ($x<$n) return true;\n    if ($x>$n) return\
    \ true;\n    if ($x==$n-1) return true;\n    if ($x==$n+1) return true;\n    if\
    \ ($x==$n+2) return true;\n    if ($x==$n+3) return true;\n    if ($x==$n+4) return\
    \ true;\n    if ($x==$n+5) return true;\n    if ($x==$n+6) return true;\n    if\
    \ ($x==$n+7) return true;\n    if ($x==$n+8) return true;\n    if ($x==$n+9) return\
    \ true;\n    if ($x==$n+10) return true;\n    if ($x==$n+11) return true;\n  \
    \  if ($x==$n+12) return true;\n    if ($x==$n+13) return true;\n    if ($x==$n+14)\
    \ return true;\n    if ($x==$n+15) return true;\n    if ($x==$n+16) return true;\n\
    \    if ($x==$n+17) return true;\n    if ($x==$n+18) return true;\n    if ($x==$n+19)\
    \ return true;\n    if ($x==$n+20) return true;\n    if ($x==$n+21) return true;\n\
    \    if ($x==$n+22) return true;\n    if ($x==$n+23) return true;\n    if ($x==$n+24)\
    \ return true;\n    if ($x==$n+25) return true;\n    if ($x==$n+26) return true;\n\
    \    if ($x==$n+27) return true;\n    if ($x==$n+28) return true;\n    if ($x==$n+29)\
    \ return true;\n    if ($x==$n+30) return true;\n    if ($x==$n+31) return true;\n\
    \    if ($x==$n+32) return true;\n    if ($x==$n+33) return true;\n    if ($x==$n+34)\
    \ return true;\n    if ($x==$n+35) return true;\n    if ($x==$n+36) return true;\n\
    \    if ($x==$n+37) return true;\n    if ($x==\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3ml_4z47.php on line 69

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n) {\n        return false;\n    }\n    if ($x == $n **\
    \ 2) {\n        return true;\n    }\n    if ($x == $n ** 3) {\n        return\
    \ true;\n    }\n    if ($x == $n ** 4) {\n        return true;\n    }\n    if\
    \ ($x == $n ** 5) {\n        return true;\n    }\n    if ($x == $n ** 6) {\n \
    \       return true;\n    }\n    if ($x == $n ** 7) {\n        return true;\n\
    \    }\n    if ($x == $n ** 8) {\n        return true;\n    }\n    if ($x == $n\
    \ ** 9) {\n        return true;\n    }\n    if ($x == $n ** 10) {\n        return\
    \ true;\n    }\n    if ($x == $n ** 11) {\n        return true;\n    }\n    if\
    \ ($x == $n ** 12) {\n        return true;\n    }\n    if ($x == $n ** 13) {\n\
    \        return true;\n    }\n    if ($x == $n ** 14) {\n        return true;\n\
    \    }\n    if ($x == $n ** 15) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 16) {\n        return true;\n    }\n    if ($x == $n ** 17) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 18) {\n        return true;\n    }\n\
    \    if ($x == $n ** 19) {\n        return true;\n    }\n    if ($x == $n ** 20)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 21) {\n        return true;\n\
    \    }\n    if ($x == $n ** 22) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 23) {\n        return true;\n    }\n    if ($x == $n ** 24) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 25) {\n        return true;\n    }\n\
    \    if ($x == $n ** 26) {\n        return true;\n    }\n    if ($x == $n ** 27)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 28) {\n        return true;\n\
    \    }\n    if ($x == $n ** 29) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 30) {\n        return true;\n    }\n    if ($x == $n ** 31) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 32) {\n        return true;\n    }\n\
    \    if ($x == $n ** 33) {\n        return true;\n    }\n    if ($x == $n ** 34)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 35) {\n        return true;\n\
    \    }\n    if ($x == $n ** 36) {\n        return true;\n    }\n    if ($x ==\
    \ $\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4b24c5ng.php on line 143

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzeqcioq.php:46\n\
    Stack trace:\n#0 /tmp/tmpuzeqcioq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuzeqcioq.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpyizzb0.php:47\n\
    Stack trace:\n#0 /tmp/tmpwpyizzb0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwpyizzb0.php\
    \ on line 47\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($n<0) {\n        return false;\n  \
    \  }\n    if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==1) {\n   \
    \     return true;\n    }\n    if ($x==0) {\n        return false;\n    }\n  \
    \  if ($n==2) {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return true;\n\
    \    }\n    if ($x==0) {\n        return false;\n    }\n    if ($n==4) {\n   \
    \     return ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n\
    \    if ($x==0) {\n        return false;\n    }\n    if ($n==5) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($n==6) {\n        return ($x==1);\n\
    \    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0) {\n    \
    \    return false;\n    }\n    if ($n==7) {\n        return ($x==1);\n    }\n\
    \    if ($x==1) {\n        return true;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==0) {\n        return false;\n  \
    \  }\n    if ($n==9) {\n        return ($x==1);\n    }\n    if ($x==1) {\n   \
    \     return true;\n    }\n    if ($x==0) {\n        return false;\n    }\n  \
    \  if ($n==10) {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($n==11)\
    \ {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return true;\n\
    \    }\n    if ($x==0) {\n        return false;\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n\
    \    if ($x==0) {\n        return false;\n    }\n    if ($n==13) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($n==14) {\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqi2r2bpy.php on line 170

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n ** $x == $x) {\n        return true;\n    }\n    return false;\n}\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dg09b6b.php:30\n\
    Stack trace:\n#0 /tmp/tmp2dg09b6b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2dg09b6b.php\
    \ on line 30\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == $x) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    if ($n % 3 ==\
    \ 0) {\n        return false;\n    }\n    if ($n % 5 == 0) {\n        return false;\n\
    \    }\n    if ($n % 7 == 0) {\n        return false;\n    }\n    if ($n % 9 ==\
    \ 0) {\n        return false;\n    }\n    if ($n % 11 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 13 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 17 == 0) {\n        return false;\n    }\n    if ($n % 19 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 23 == 0) {\n        return false;\n\
    \    }\n    if ($n % 29 == 0) {\n        return false;\n    }\n    if ($n % 31\
    \ == 0) {\n        return false;\n    }\n    if ($n % 37 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 41 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 43 == 0) {\n        return false;\n    }\n    if ($n % 47 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 49 == 0) {\n        return false;\n\
    \    }\n    if ($n % 53 == 0) {\n        return false;\n    }\n    if ($n % 57\
    \ == 0) {\n        return false;\n    }\n    if ($n % 61 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 67 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 71 == 0) {\n        return false;\n    }\n    if ($n % 73 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 79 == 0) {\n        return false;\n\
    \    }\n    if ($n % 83 == 0) {\n        return false;\n    }\n    if ($n % 89\
    \ == 0) {\n        return false;\n    }\n    if ($n % 97 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 101 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 103 == 0) {\n        return false;\n    }\n    if ($n % 107 == 0) {\n\
    \        return false;\n    }\n    if ($n % 109 == 0) {\n        return false;\n\
    \    }\n    if ($n % 111 == 0) {\n        return false;\n    }\n    if ($n % 113\
    \ == 0) {\n        return false;\n    }\n    if ($n % 117 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 121 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 123 == 0) {\n        return false;\n    }\n    if ($n % 127 == 0) {\n\
    \        return false;\n    }\n    if ($n % 131 == 0) {\n        return false;\n\
    \    }\n    if ($n % 133 == 0) {\n        return false;\n    }\n    if ($n % 137\
    \ == 0) {\n        return false;\n    }\n    if ($n % 141 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 143 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 147 == 0) {\n        return false;\n    }\n    if ($n % 151 == 0) {\n\
    \        return false;\n    }\n    if ($n % 153 == 0) {\n        return false;\n\
    \    }\n    if ($n % 157 == 0) {\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprtsqdk05.php on line 188

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy72_bjxp.php:33\n\
    Stack trace:\n#0 /tmp/tmpy72_bjxp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpy72_bjxp.php\
    \ on line 33\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $y = $x >> 1;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 2;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 4;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 8;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 64;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bmebm_g.php:70\n\
    Stack trace:\n#0 /tmp/tmp_bmebm_g.php(82): test()\n#1 {main}\n  thrown in /tmp/tmp_bmebm_g.php\
    \ on line 70\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| c |>\nThis is not correct. `is_simple_power(8,\
    \ 2)` returns `true` but `is_simple_power(8, 3)` returns `false`.\n<|/ c |>\n\
    <| c |>\nI didn't see that requirement. I've updated my answer to reflect that.\n\
    <|/ c |>\n<| c |>\n`is_simple_power(8, 3)` returns `false` because `is_simple_power(8,\
    \ 2)` returns `true`.\n<|/ c |>\n<| c |>\nAh, I see what you mean. I've updated\
    \ my answer again to reflect that.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n\
    <?php\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3dgoo7gl.php on line 27

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<1) return false;\n    if ($n==1) return true;\n    if ($x==1) return\
    \ true;\n    if ($x==0) return false;\n    if ($n==$x) return true;\n    if ($n%$x==0)\
    \ return false;\n    return is_simple_power($x/$x, $n-1);\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis is not correct. `is_simple_power(2, 2)` returns `true` but\
    \ `is_simple_power(2, 3)` returns `false`.\n<|/ c |>\n<| c |>\nYes, I forgot about\
    \ that case. Fixed now.\n<|/ c |>\n<| c |>\nThis is not correct. `is_simple_power(2,\
    \ 2)` returns `true` but `is_simple_power(2, 3)` returns `false`.\n<|/ c |>\n\
    <| c |>\nI fixed it now. Thanks for noticing.\n<|/ c |>\n<| c |>\nThis is not\
    \ correct. `is_simple_power(2, 2)` returns `true` but `is_simple_power(2, 3)`\
    \ returns `false`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpn_03daju.php on line 27

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n && $n % $x == 0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2otu13ee.php:45\n\
    Stack trace:\n#0 /tmp/tmp2otu13ee.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp2otu13ee.php\
    \ on line 45\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpyizzb0.php:47\n\
    Stack trace:\n#0 /tmp/tmpwpyizzb0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwpyizzb0.php\
    \ on line 47\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    if ($n % $x\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmvbrcyrp.php:52\n\
    Stack trace:\n#0 /tmp/tmpmvbrcyrp.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpmvbrcyrp.php\
    \ on line 52\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1asd550j.php:32\n\
    Stack trace:\n#0 /tmp/tmp1asd550j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1asd550j.php\
    \ on line 32\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $y = $x % $n;\n    if ($y == 0) {\n        return true;\n\
    \    }\n    if ($y != $n) {\n        return false;\n    }\n    $x = floor($x /\
    \ $n);\n    return is_simple_power($x, $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgt567s6e.php:50\n\
    Stack trace:\n#0 /tmp/tmpgt567s6e.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpgt567s6e.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        if ($x % $n == 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,algorithm |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv0i_ebrc.php on line 41

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyqzlddb7.php on line 123

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5n4q_xa.php:41\n\
    Stack trace:\n#0 /tmp/tmpu5n4q_xa.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpu5n4q_xa.php\
    \ on line 41\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<1) return false;\n    if ($x==1) return true;\n    if ($x%$n==0) return\
    \ true;\n    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpda4ijhee.php:34\n\
    Stack trace:\n#0 /tmp/tmpda4ijhee.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpda4ijhee.php\
    \ on line 34\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlaf0q_c.php:42\n\
    Stack trace:\n#0 /tmp/tmpxlaf0q_c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxlaf0q_c.php\
    \ on line 42\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5n4q_xa.php:41\n\
    Stack trace:\n#0 /tmp/tmpu5n4q_xa.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpu5n4q_xa.php\
    \ on line 41\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    if ($x % $n\
    \ == 1) {\n        return false;\n    }\n    if ($n % $x == 0) {\n        return\
    \ false;\n    }\n    if ($n % $x == 1) {\n        return true;\n    }\n    if\
    \ ($n % $x == $n) {\n        return true;\n    }\n    if ($n % $x == $n - 1) {\n\
    \        return false;\n    }\n    if ($n % $x == $n - 2) {\n        return true;\n\
    \    }\n    if ($n % $x == $n - 3) {\n        return false;\n    }\n    if ($n\
    \ % $x == $n - 4) {\n        return true;\n    }\n    if ($n % $x == $n - 5) {\n\
    \        return false;\n    }\n    if ($n % $x == $n - 6) {\n        return true;\n\
    \    }\n    if ($n % $x == $n - 7) {\n        return false;\n    }\n    if ($n\
    \ % $x == $n - 8) {\n        return true;\n    }\n    if ($n % $x == $n - 9) {\n\
    \        return false;\n    }\n    if ($n % $x == $n - 10) {\n        return true;\n\
    \    }\n    if ($n % $x == $n - 11) {\n        return false;\n    }\n    if ($n\
    \ % $x == $n - 12) {\n        return true;\n    }\n    if ($n % $x == $n - 13)\
    \ {\n        return false;\n    }\n    if ($n % $x == $n - 14) {\n        return\
    \ true;\n    }\n    if ($n % $x == $n - 15) {\n        return false;\n    }\n\
    \    if ($n % $x == $n - 16) {\n        return true;\n    }\n    if ($n % $x ==\
    \ $n - 17) {\n        return false;\n    }\n    if ($n % $x == $n - 18) {\n  \
    \      return true;\n    }\n    if ($n % $x == $n - 19) {\n        return false;\n\
    \    }\n    if ($n % $x == $n - 20) {\n        return true;\n    }\n    if ($n\
    \ % $x == $n - 21) {\n        return false;\n    }\n    if ($n % $x == $n - 22)\
    \ {\n        return true;\n    }\n    if ($n % $x == $n - 23) {\n        return\
    \ false;\n    }\n    if ($n % $x == $n - 24) {\n        return true;\n    }\n\
    \    if ($n % $x == $n - 25) {\n        return false;\n    }\n    if ($n % $x\
    \ == $n - 26) {\n        return true;\n    }\n    if ($n % $x == $n - 27) {\n\
    \        return false;\n    }\n    if ($n % $x == $n - 28) {\n        return true;\n\
    \    }\n    if ($n % $x == $n - 29) {\n        return false;\n    }\n    if ($n\
    \ % $x == $\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg18jm5h4.php on line 137

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x, $n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozekj3pn.php:45\n\
    Stack trace:\n#0 /tmp/tmpozekj3pn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpozekj3pn.php\
    \ on line 45\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \ // Your code here\n}\n</cell>\n<cell>\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps65w7xu7.php on line 21

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($n\
    \ == 0) {\n        return false;\n    }\n    if ($n == 1) {\n        return true;\n\
    \    }\n    if ($n == -1) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $y = $x >> 1;\n    if ($y != 0) {\n   \
    \     return is_simple_power($y, $n);\n    }\n    $y = $x >> 2;\n    if ($y !=\
    \ 0) {\n        return is_simple_power($y, $n);\n    }\n    $y = $x >> 4;\n  \
    \  if ($y != 0) {\n        return is_simple_power($y, $n);\n    }\n    $y = $x\
    \ >> 8;\n    if ($y != 0) {\n        return is_simple_power($y, $n);\n    }\n\
    \    $y = $x >> 16;\n    if ($y != 0) {\n        return is_simple_power($y, $n);\n\
    \    }\n    $y = $x >> 32;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 64;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 128;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 256;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 512;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 1024;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 2048;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 4096;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 8192;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16384;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32768;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 65536;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 131072;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpumjj2awh.php on line 130

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1asd550j.php:32\n\
    Stack trace:\n#0 /tmp/tmp1asd550j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1asd550j.php\
    \ on line 32\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($n\
    \ == 0) {\n        return false;\n    }\n    if ($n == 1) {\n        return true;\n\
    \    }\n    if ($n == -1) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexp7kma6.php:48\n\
    Stack trace:\n#0 /tmp/tmpexp7kma6.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpexp7kma6.php\
    \ on line 48\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==2) {\n        return true;\n   \
    \ }\n    if ($x==3) {\n        return true;\n    }\n    if ($x==4) {\n       \
    \ return true;\n    }\n    if ($x==5) {\n        return true;\n    }\n    if ($x==6)\
    \ {\n        return true;\n    }\n    if ($x==7) {\n        return true;\n   \
    \ }\n    if ($x==8) {\n        return true;\n    }\n    if ($x==9) {\n       \
    \ return true;\n    }\n    if ($x==10) {\n        return true;\n    }\n    if\
    \ ($x==11) {\n        return true;\n    }\n    if ($x==12) {\n        return true;\n\
    \    }\n    if ($x==13) {\n        return true;\n    }\n    if ($x==14) {\n  \
    \      return true;\n    }\n    if ($x==15) {\n        return true;\n    }\n \
    \   if ($x==16) {\n        return true;\n    }\n    if ($x==17) {\n        return\
    \ true;\n    }\n    if ($x==18) {\n        return true;\n    }\n    if ($x==19)\
    \ {\n        return true;\n    }\n    if ($x==20) {\n        return true;\n  \
    \  }\n    if ($x==21) {\n        return true;\n    }\n    if ($x==22) {\n    \
    \    return true;\n    }\n    if ($x==23) {\n        return true;\n    }\n   \
    \ if ($x==24) {\n        return true;\n    }\n    if ($x==25) {\n        return\
    \ true;\n    }\n    if ($x==26) {\n        return true;\n    }\n    if ($x==27)\
    \ {\n        return true;\n    }\n    if ($x==28) {\n        return true;\n  \
    \  }\n    if ($x==29) {\n        return true;\n    }\n    if ($x==30) {\n    \
    \    return true;\n    }\n    if ($x==31) {\n        return true;\n    }\n   \
    \ if ($x==32) {\n        return true;\n    }\n    if ($x==33) {\n        return\
    \ true;\n    }\n    if ($x==34) {\n        return true;\n    }\n    if ($x==35)\
    \ {\n        return true;\n    }\n    if ($x==36) {\n        return true;\n  \
    \  }\n    if ($x==37) {\n        return true;\n    }\n    if ($x==38) {\n    \
    \    return true;\n    }\n    if ($x==39) {\n        return true;\n    }\n   \
    \ if ($x==40) {\n        return true;\n    }\n    if ($x==41) {\n        return\
    \ true;\n    }\n    if ($x==42) {\n        return true;\n    }\n    if ($x==43)\
    \ {\n        return true;\n    }\n    if ($x==44) {\n        return true;\n\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpei1rsfsq.php on line 177

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<=1) {\n        return true;\n    }\n    if ($n==0) {\n        return\
    \ false;\n    }\n    if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==0) {\n        return false;\n  \
    \  }\n    if ($x==2) {\n        return ($n==1);\n    }\n    if ($x==3) {\n   \
    \     return ($n==2);\n    }\n    if ($x==4) {\n        return ($n==3);\n    }\n\
    \    if ($x==5) {\n        return ($n==4);\n    }\n    if ($x==6) {\n        return\
    \ ($n==5);\n    }\n    if ($x==7) {\n        return ($n==6);\n    }\n    if ($x==8)\
    \ {\n        return ($n==7);\n    }\n    if ($x==9) {\n        return ($n==8);\n\
    \    }\n    if ($x==10) {\n        return ($n==9);\n    }\n    if ($x==11) {\n\
    \        return ($n==10);\n    }\n    if ($x==12) {\n        return ($n==11);\n\
    \    }\n    if ($x==13) {\n        return ($n==12);\n    }\n    if ($x==14) {\n\
    \        return ($n==13);\n    }\n    if ($x==15) {\n        return ($n==14);\n\
    \    }\n    if ($x==16) {\n        return ($n==15);\n    }\n    if ($x==17) {\n\
    \        return ($n==16);\n    }\n    if ($x==18) {\n        return ($n==17);\n\
    \    }\n    if ($x==19) {\n        return ($n==18);\n    }\n    if ($x==20) {\n\
    \        return ($n==19);\n    }\n    if ($x==21) {\n        return ($n==20);\n\
    \    }\n    if ($x==22) {\n        return ($n==21);\n    }\n    if ($x==23) {\n\
    \        return ($n==22);\n    }\n    if ($x==24) {\n        return ($n==23);\n\
    \    }\n    if ($x==25) {\n        return ($n==24);\n    }\n    if ($x==26) {\n\
    \        return ($n==25);\n    }\n    if ($x==27) {\n        return ($n==26);\n\
    \    }\n    if ($x==28) {\n        return ($n==27);\n    }\n    if ($x==29) {\n\
    \        return ($n==28);\n    }\n    if ($x==30) {\n        return ($n==29);\n\
    \    }\n    if ($x==31) {\n        return ($n==30);\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy8pjqvrw.php on line 141

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyqzlddb7.php on line 123

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return true;\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9it2ti7o.php:36\n\
    Stack trace:\n#0 /tmp/tmp9it2ti7o.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp9it2ti7o.php\
    \ on line 36\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x\
    \ == -2) {\n        return false;\n    }\n    if ($x == -3) {\n        return\
    \ false;\n    }\n    if ($x == -4) {\n        return false;\n    }\n    if ($x\
    \ == -5) {\n        return false;\n    }\n    if ($x == -6) {\n        return\
    \ false;\n    }\n    if ($x == -7) {\n        return false;\n    }\n    if ($x\
    \ == -8) {\n        return false;\n    }\n    if ($x == -9) {\n        return\
    \ false;\n    }\n    if ($x == -10) {\n        return false;\n    }\n    if ($x\
    \ == -11) {\n        return false;\n    }\n    if ($x == -12) {\n        return\
    \ false;\n    }\n    if ($x == -13) {\n        return false;\n    }\n    if ($x\
    \ == -14) {\n        return false;\n    }\n    if ($x == -15) {\n        return\
    \ false;\n    }\n    if ($x == -16) {\n        return false;\n    }\n    if ($x\
    \ == -17) {\n        return false;\n    }\n    if ($x == -18) {\n        return\
    \ false;\n    }\n    if ($x == -19) {\n        return false;\n    }\n    if ($x\
    \ == -20) {\n        return false;\n    }\n    if ($x == -21) {\n        return\
    \ false;\n    }\n    if ($x == -22) {\n        return false;\n    }\n    if ($x\
    \ == -23) {\n        return false;\n    }\n    if ($x == -24) {\n        return\
    \ false;\n    }\n    if ($x == -25) {\n        return false;\n    }\n    if ($x\
    \ == -26) {\n        return false;\n    }\n    if ($x == -27) {\n        return\
    \ false;\n    }\n    if ($x == -28) {\n        return false;\n    }\n    if ($x\
    \ == -29) {\n        return false;\n    }\n    if ($x == -30) {\n        return\
    \ false;\n    }\n    if ($x == -31) {\n        return false;\n    }\n    if ($x\
    \ == -32) {\n        return false;\n    }\n    if ($x == -33) {\n        return\
    \ false;\n    }\n    if ($x == -34) {\n        return false;\n    }\n    if ($x\
    \ == -35) {\n        return false;\n    }\n    if ($x == -36) {\n        return\
    \ false;\n    }\n    if ($x == -37) {\n        return false;\n    }\n    if ($x\
    \ == -38) {\n        return false;\n    }\n    if ($x == -39) {\n        return\
    \ false;\n    }\n    if ($x == -40) {\n        return false;\n    }\n    if ($x\
    \ == -41) {\n        return false;\n    }\n    if ($x == -42) {\n        return\
    \ false;\n    }\n    if ($x == -43) {\n        return false;\n    }\n    if ($x\
    \ == -44) {\n        return false;\n    }\n    if ($x == -45) {\n        return\
    \ false;\n    }\n    if ($x == -46) {\n        return false;\n    }\n    if ($x\
    \ == -47) {\n        return false;\n    }\n    if (\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfw7fnt_b.php on line 167

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jom3vtp.php:32\n\
    Stack trace:\n#0 /tmp/tmp5jom3vtp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5jom3vtp.php\
    \ on line 32\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlaf0q_c.php:42\n\
    Stack trace:\n#0 /tmp/tmpxlaf0q_c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxlaf0q_c.php\
    \ on line 42\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $y = $x >> 1;\n\
    \    if ($y != 0) {\n        return is_simple_power($y, $n);\n    }\n    $y =\
    \ $x >> 2;\n    if ($y != 0) {\n        return is_simple_power($y, $n);\n    }\n\
    \    $y = $x >> 4;\n    if ($y != 0) {\n        return is_simple_power($y, $n);\n\
    \    }\n    $y = $x >> 8;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 64;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 128;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 256;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 512;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 1024;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 2048;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 4096;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 8192;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16384;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32768;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 65536;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 131072;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 262144;\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpltrm1hb5.php on line 127

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x, $n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozekj3pn.php:45\n\
    Stack trace:\n#0 /tmp/tmpozekj3pn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpozekj3pn.php\
    \ on line 45\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    $x=$x/$n;\n    return is_simple_power($x, $n);\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jb_f6q6.php:33\n\
    Stack trace:\n#0 /tmp/tmp3jb_f6q6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3jb_f6q6.php\
    \ on line 33\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzeqcioq.php:46\n\
    Stack trace:\n#0 /tmp/tmpuzeqcioq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuzeqcioq.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7l1zo002.php:32\n\
    Stack trace:\n#0 /tmp/tmp7l1zo002.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7l1zo002.php\
    \ on line 32\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlaf0q_c.php:42\n\
    Stack trace:\n#0 /tmp/tmpxlaf0q_c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxlaf0q_c.php\
    \ on line 42\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == 0) {\n        return false;\n\
    \    }\n    if ($n == -1) {\n        return false;\n    }\n    if ($x == -1) {\n\
    \        return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n\
    \    if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n       \
    \ return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n    if\
    \ ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n        return\
    \ true;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x\
    \ == 1) {\n        return true;\n    }\n    if ($x == -1) {\n        return false;\n\
    \    }\n    if ($x == 1) {\n        return true;\n    }\n    if ($x == -1) {\n\
    \        return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n     \
    \   return true;\n    }\n    if ($x == -1) {\n        return false;\n    }\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == -1) {\n       \
    \ return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n    if\
    \ ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n        return\
    \ true;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x\
    \ == 1) {\n        return true;\n    }\n    if ($x == -1) {\n        return false;\n\
    \    }\n    if ($x == 1) {\n        return true;\n    }\n    if ($x == -1) {\n\
    \        return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n     \
    \   return true;\n    }\n    if ($x == -1) {\n        return false;\n    }\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == -1) {\n       \
    \ return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n    if\
    \ ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n        return\
    \ true;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x\
    \ == 1) {\n        return true;\n    }\n    if ($x == -1) {\n        return false;\n\
    \    }\n    if ($x == 1) {\n        return true;\n    }\n    if ($x == -1) {\n\
    \        return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n     \
    \   return true;\n    }\n    if ($x == -1) {\n        return false;\n    }\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == -1) {\n       \
    \ return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n    if\
    \ ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n        return\
    \ true;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x\
    \ == 1) {\n        return true;\n    }\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyyxst5ns.php on line 207

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x < $n) {\n        return false;\n    }\n    $y = $x;\n    $z\
    \ = $n;\n    while ($z != 0) {\n        if ($y % $z == 0) {\n            return\
    \ true;\n        }\n        $y /= $z;\n        $z--;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_49ompvp.php:55\n\
    Stack trace:\n#0 /tmp/tmp_49ompvp.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp_49ompvp.php\
    \ on line 55\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpyizzb0.php:47\n\
    Stack trace:\n#0 /tmp/tmpwpyizzb0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwpyizzb0.php\
    \ on line 47\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3u7x8px.php:49\n\
    Stack trace:\n#0 /tmp/tmpn3u7x8px.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn3u7x8px.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x<0) return false;\n    if ($n<0)\
    \ return false;\n    if ($n==1) return true;\n    if ($x<1) return false;\n  \
    \  if ($n>$x) return false;\n    $x=$x/$n;\n    $y=$x;\n    while ($y<$n) {\n\
    \        $y=$y*$n;\n    }\n    return $x==$y;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmtxwis4.php:41\n\
    Stack trace:\n#0 /tmp/tmpnmtxwis4.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpnmtxwis4.php\
    \ on line 41\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x<0) return false;\n    if ($n<0)\
    \ return false;\n    if ($n>20) return false; // too big\n    if ($n==1) return\
    \ true;\n    if ($x==$n) return true;\n    if ($x<$n) return false; // too small\n\
    \    if ($x>$n) return false; // too big\n    if ($n==2) return true;\n    if\
    \ ($x==$n) return true;\n    if ($x<$n) return false; // too small\n    if ($x>$n)\
    \ return false; // too big\n    if ($n==3) return true;\n    if ($x==$n) return\
    \ true;\n    if ($x<$n) return false; // too small\n    if ($x>$n) return false;\
    \ // too big\n    if ($n==4) return true;\n    if ($x==$n) return true;\n    if\
    \ ($x<$n) return false; // too small\n    if ($x>$n) return false; // too big\n\
    \    if ($n==5) return true;\n    if ($x==$n) return true;\n    if ($x<$n) return\
    \ false; // too small\n    if ($x>$n) return false; // too big\n    if ($n==6)\
    \ return true;\n    if ($x==$n) return true;\n    if ($x<$n) return false; //\
    \ too small\n    if ($x>$n) return false; // too big\n    if ($n==7) return true;\n\
    \    if ($x==$n) return true;\n    if ($x<$n) return false; // too small\n   \
    \ if ($x>$n) return false; // too big\n    if ($n==8) return true;\n    if ($x==$n)\
    \ return true;\n    if ($x<$n) return false; // too small\n    if ($x>$n) return\
    \ false; // too big\n    if ($n==9) return true;\n    if ($x==$n) return true;\n\
    \    if ($x<$n) return false; // too small\n    if ($x>$n) return false; // too\
    \ big\n    if ($n==10) return true;\n    if ($x==$n) return true;\n    if ($x<$n)\
    \ return false; // too small\n    if ($x>$n) return false; // too big\n    if\
    \ ($n==11) return true;\n    if ($x==$n) return true;\n    if ($x<$n) return false;\
    \ // too small\n    if ($x>$n) return false; // too big\n    if ($\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpskt5do31.php on line 71

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($n\
    \ == 0) {\n        return false;\n    }\n    if ($n == 1) {\n        return true;\n\
    \    }\n    if ($n == -1) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqat83ez.php:49\n\
    Stack trace:\n#0 /tmp/tmpyqat83ez.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpyqat83ez.php\
    \ on line 49\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzeqcioq.php:46\n\
    Stack trace:\n#0 /tmp/tmpuzeqcioq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuzeqcioq.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: -1
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x<0) return false;\n    if ($n<1)\
    \ return false;\n    if ($n==$x) return true;\n    if ($n>$x) return false;\n\
    \    $i=1;\n    while ($i<$x) {\n        if ($n%$i==0) {\n            $i++;\n\
    \            if ($i==$x) return true;\n        }\n        else {\n           \
    \ $i=1;\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730431
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0o3dt_d.php:31\n\
    Stack trace:\n#0 /tmp/tmpm0o3dt_d.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpm0o3dt_d.php\
    \ on line 31\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $y = $x >> 1;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 2;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 4;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 8;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 64;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 128;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 256;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 512;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 1024;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 2048;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 4096;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 8192;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 16384;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 32768;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 65536;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 131072;\n    if ($y != 0) {\n        return is_simple_power($y,\
    \ $n);\n    }\n    $y = $x >> 262144;\n    if ($y != 0) {\n        return is_simple_\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_97yntlz.php on line 109

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph40nkcif.php:46\n\
    Stack trace:\n#0 /tmp/tmph40nkcif.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph40nkcif.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    if ($n % 3 ==\
    \ 0) {\n        return false;\n    }\n    if ($n % 5 == 0) {\n        return false;\n\
    \    }\n    if ($n % 7 == 0) {\n        return false;\n    }\n    if ($n % 11\
    \ == 0) {\n        return false;\n    }\n    if ($n % 13 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 17 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 19 == 0) {\n        return false;\n    }\n    if ($n % 23 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 29 == 0) {\n        return false;\n\
    \    }\n    if ($n % 31 == 0) {\n        return false;\n    }\n    if ($n % 37\
    \ == 0) {\n        return false;\n    }\n    if ($n % 41 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 43 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 47 == 0) {\n        return false;\n    }\n    if ($n % 53 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 59 == 0) {\n        return false;\n\
    \    }\n    if ($n % 61 == 0) {\n        return false;\n    }\n    if ($n % 67\
    \ == 0) {\n        return false;\n    }\n    if ($n % 71 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 73 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 79 == 0) {\n        return false;\n    }\n    if ($n % 83 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 89 == 0) {\n        return false;\n\
    \    }\n    if ($n % 97 == 0) {\n        return false;\n    }\n    if ($n % 103\
    \ == 0) {\n        return false;\n    }\n    if ($n % 109 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 113 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 127 == 0) {\n        return false;\n    }\n    if ($n % 131 == 0) {\n\
    \        return false;\n    }\n    if ($n % 137 == 0) {\n        return false;\n\
    \    }\n    if ($n % 141 == 0) {\n        return false;\n    }\n    if ($n % 147\
    \ == 0) {\n        return false;\n    }\n    if ($n % 151 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 157 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 161 == 0) {\n        return false;\n    }\n    if ($n % 167 == 0) {\n\
    \        return false;\n    }\n    if ($n % 171 == 0) {\n        return false;\n\
    \    }\n    if ($n % 177 == 0) {\n        return false;\n    }\n    if ($n % 181\
    \ == 0) {\n        return false;\n    }\n    if ($n % 187 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 191 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 197 == 0) {\n        return false;\n    }\n    if ($n % 201 == 0) {\n\
    \        return false;\n    }\n    if ($n % 207 == 0) {\n        return false;\n\
    \    }\n    if ($n % 211 == 0) {\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcsglwfwh.php on line 188

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlaf0q_c.php:42\n\
    Stack trace:\n#0 /tmp/tmpxlaf0q_c.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxlaf0q_c.php\
    \ on line 42\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    $x=$x/$n;\n    return is_simple_power($x, $n);\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvors9qd.php:33\n\
    Stack trace:\n#0 /tmp/tmpwvors9qd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwvors9qd.php\
    \ on line 33\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpyizzb0.php:47\n\
    Stack trace:\n#0 /tmp/tmpwpyizzb0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwpyizzb0.php\
    \ on line 47\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $x = $x * $x;\n    $y = $x * $n;\n    $z = $y * $n;\n   \
    \ if ($z == $x) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqz7adhbi.php:48\n\
    Stack trace:\n#0 /tmp/tmpqz7adhbi.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpqz7adhbi.php\
    \ on line 48\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0o3dt_d.php:31\n\
    Stack trace:\n#0 /tmp/tmpm0o3dt_d.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpm0o3dt_d.php\
    \ on line 31\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($n\
    \ == 0) {\n        return false;\n    }\n    if ($n == 1) {\n        return true;\n\
    \    }\n    if ($n == -1) {\n        return false;\n    }\n    if ($n == 2) {\n\
    \        return true;\n    }\n    if ($n == -2) {\n        return false;\n   \
    \ }\n    if ($n == 3) {\n        return true;\n    }\n    if ($n == 4) {\n   \
    \     return true;\n    }\n    if ($n == 5) {\n        return true;\n    }\n \
    \   if ($n == 6) {\n        return true;\n    }\n    if ($n == 7) {\n        return\
    \ true;\n    }\n    if ($n == 8) {\n        return true;\n    }\n    if ($n ==\
    \ 9) {\n        return true;\n    }\n    if ($n == 10) {\n        return true;\n\
    \    }\n    if ($n == 11) {\n        return true;\n    }\n    if ($n == 12) {\n\
    \        return true;\n    }\n    if ($n == 13) {\n        return true;\n    }\n\
    \    if ($n == 14) {\n        return true;\n    }\n    if ($n == 15) {\n     \
    \   return true;\n    }\n    if ($n == 16) {\n        return true;\n    }\n  \
    \  if ($n == 17) {\n        return true;\n    }\n    if ($n == 18) {\n       \
    \ return true;\n    }\n    if ($n == 19) {\n        return true;\n    }\n    if\
    \ ($n == 20) {\n        return true;\n    }\n    if ($n == 21) {\n        return\
    \ true;\n    }\n    if ($n == 22) {\n        return true;\n    }\n    if ($n ==\
    \ 23) {\n        return true;\n    }\n    if ($n == 24) {\n        return true;\n\
    \    }\n    if ($n == 25) {\n        return true;\n    }\n    if ($n == 26) {\n\
    \        return true;\n    }\n    if ($n == 27) {\n        return true;\n    }\n\
    \    if ($n == 28) {\n        return true;\n    }\n    if ($n == 29) {\n     \
    \   return true;\n    }\n    if ($n == 3) {\n        return true;\n    }\n   \
    \ if ($n == 4) {\n        return true;\n    }\n    if ($n == 5) {\n        return\
    \ true;\n    }\n    if ($n == 6) {\n        return true;\n    }\n    if ($n ==\
    \ 7) {\n        return true;\n    }\n    if ($n == 8) {\n        return true;\n\
    \    }\n    if ($n == 9) {\n        return true;\n    }\n    if ($n == 10) {\n\
    \        return true;\n    }\n    if ($n == 11) {\n        return true;\n    }\n\
    \    if ($n == 12) {\n        return true;\n    }\n    if ($n == 13) {\n     \
    \   return true;\n    }\n    if ($n == 14) {\n        return true;\n    }\n  \
    \  if ($n == 15) {\n        return true;\n    }\n    if ($n == 16) {\n       \
    \ return true;\n    }\n    if ($n == 17) {\n        return true;\n    }\n    if\
    \ ($n == 18) {\n        return true;\n    }\n    if ($n == 19) {\n        return\
    \ true;\n    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpytbbdjsp.php on line 192

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return false;\n    if ($n==1) return true;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppx58hj3y.php:32\n\
    Stack trace:\n#0 /tmp/tmppx58hj3y.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppx58hj3y.php\
    \ on line 32\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $x = $x * $x;\n    $y = $x * $n;\n    $z = $y * $n;\n   \
    \ if ($z == $x) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqz7adhbi.php:48\n\
    Stack trace:\n#0 /tmp/tmpqz7adhbi.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpqz7adhbi.php\
    \ on line 48\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n);\n    }\n    return is_simple_power($x, $n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozekj3pn.php:45\n\
    Stack trace:\n#0 /tmp/tmpozekj3pn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpozekj3pn.php\
    \ on line 45\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n\
    \    }\n    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph40nkcif.php:46\n\
    Stack trace:\n#0 /tmp/tmph40nkcif.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph40nkcif.php\
    \ on line 46\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($n==-1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return true;\n    if ($x<0) return false;\n    if ($x>1) return false;\n   \
    \ if ($x==0) return false;\n    if ($x==1) return false;\n    if ($x==-1) return\
    \ false;\n    if ($x<0) return false;\n    if ($x>1) return false;\n    if ($x==0)\
    \ return false;\n    if ($x==1) return false;\n    if ($x==-1) return false;\n\
    \    if ($x<0) return false;\n    if ($x>1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return false;\n    if ($x==-1) return false;\n    if\
    \ ($x<0) return false;\n    if ($x>1) return false;\n    if ($x==0) return false;\n\
    \    if ($x==1) return false;\n    if ($x==-1) return false;\n    if ($x<0) return\
    \ false;\n    if ($x>1) return false;\n    if ($x==0) return false;\n    if ($x==1)\
    \ return false;\n    if ($x==-1) return false;\n    if ($x<0) return false;\n\
    \    if ($x>1) return false;\n    if ($x==0) return false;\n    if ($x==1) return\
    \ false;\n    if ($x==-1) return false;\n    if ($x<0) return false;\n    if ($x>1)\
    \ return false;\n    if ($x==0) return false;\n    if ($x==1) return false;\n\
    \    if ($x==-1) return false;\n    if ($x<0) return false;\n    if ($x>1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return false;\n    if ($x==-1)\
    \ return false;\n    if ($x<0) return false;\n    if ($x>1) return false;\n  \
    \  if ($x==0) return false;\n    if ($x==1) return false;\n    if ($x==-1) return\
    \ false;\n    if ($x<0) return false;\n    if ($x>1) return false;\n    if ($x==0)\
    \ return false;\n    if ($x==1) return false;\n    if ($x==-1) return false;\n\
    \    if ($x<0) return false;\n    if ($x>1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return false;\n    if ($x==-1) return false;\n    if\
    \ ($x<0) return false;\n    if ($x>1) return false;\n    if ($x==0) return false;\n\
    \nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpok6aedhr.php on line 101

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($n==$x) {\n        return true;\n \
    \   }\n    if ($n<$x) {\n        return false;\n    }\n    $x=$x/$n;\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==0) {\n        return false;\n  \
    \  }\n    $x=$x/$n;\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    $x=$x/$n;\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    $x=$x/$n;\n\
    \    if ($x==1) {\n        return true;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    $x=$x/$n;\n    if ($x==1) {\n        return true;\n    }\n\
    \    if ($x==0) {\n        return false;\n    }\n    $x=$x/$n;\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==0) {\n        return false;\n  \
    \  }\n    $x=$x/$n;\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    $x=$x/$n;\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    $x=$x/$n;\n\
    \    if ($x==1) {\n        return true;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    $x=$x/$n;\n    if ($x==1) {\n        return true;\n    }\n\
    \    if ($x==0) {\n        return false;\n    }\n    $x=$x/$n;\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==0) {\n        return false;\n  \
    \  }\n    $x=$x/$n;\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    $x=$x/$n;\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    $x=$x/$n;\n\
    \    if ($x==1) {\n        return true;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    $x=$x/$n;\n    if ($x==1) {\n        return true;\n    }\n\
    \    if ($x==0) {\n        return false;\n    }\n    $x=$x/$n;\n    if ($x==1)\
    \ {\n        return true;\n    }\n    if ($x==0) {\n        return false;\n  \
    \  }\n    $x=$x/$n;\n    if ($x==1) {\n        return true;\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6vm9ehl1.php on line 169

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($n==2) return\
    \ $x==1;\n    if ($n<0) return false;\n    if ($x==1) return false;\n    if ($x==0)\
    \ return true;\n    if ($x<0) return false;\n    if ($x<1) return false;\n   \
    \ if ($x<2) return true;\n    if ($x<3) return true;\n    if ($x<4) return true;\n\
    \    if ($x<5) return true;\n    if ($x<6) return true;\n    if ($x<7) return\
    \ true;\n    if ($x<8) return true;\n    if ($x<9) return true;\n    if ($x<10)\
    \ return true;\n    if ($x<11) return true;\n    if ($x<12) return true;\n   \
    \ if ($x<13) return true;\n    if ($x<14) return true;\n    if ($x<15) return\
    \ true;\n    if ($x<16) return true;\n    if ($x<17) return true;\n    if ($x<18)\
    \ return true;\n    if ($x<19) return true;\n    if ($x<20) return true;\n   \
    \ if ($x<21) return true;\n    if ($x<22) return true;\n    if ($x<23) return\
    \ true;\n    if ($x<24) return true;\n    if ($x<25) return true;\n    if ($x<26)\
    \ return true;\n    if ($x<27) return true;\n    if ($x<28) return true;\n   \
    \ if ($x<29) return true;\n    if ($x<30) return true;\n    if ($x<31) return\
    \ true;\n    if ($x<32) return true;\n    if ($x<33) return true;\n    if ($x<34)\
    \ return true;\n    if ($x<35) return true;\n    if ($x<36) return true;\n   \
    \ if ($x<37) return true;\n    if ($x<38) return true;\n    if ($x<39) return\
    \ true;\n    if ($x<40) return true;\n    if ($x<41) return true;\n    if ($x<42)\
    \ return true;\n    if ($x<43) return true;\n    if ($x<44) return true;\n   \
    \ if ($x<45) return true;\n    if ($x<46) return true;\n    if ($x<47) return\
    \ true;\n    if ($x<48) return true;\n    if ($x<49) return true;\n    if ($x<50)\
    \ return true;\n    if ($x<51) return true;\n    if ($x<52) return true;\n   \
    \ if ($x<53) return true;\n    if ($x<54) return true;\n    if ($x<55) return\
    \ true;\n    if ($x<56) return true;\n    if ($\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp43qxin8l.php on line 83

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x\
    \ == -2) {\n        return false;\n    }\n    if ($x == -3) {\n        return\
    \ false;\n    }\n    if ($x == -4) {\n        return false;\n    }\n    if ($x\
    \ == -5) {\n        return false;\n    }\n    if ($x == -6) {\n        return\
    \ false;\n    }\n    if ($x == -7) {\n        return false;\n    }\n    if ($x\
    \ == -8) {\n        return false;\n    }\n    if ($x == -9) {\n        return\
    \ false;\n    }\n    if ($x == -10) {\n        return false;\n    }\n    if ($x\
    \ == -11) {\n        return false;\n    }\n    if ($x == -12) {\n        return\
    \ false;\n    }\n    if ($x == -13) {\n        return false;\n    }\n    if ($x\
    \ == -14) {\n        return false;\n    }\n    if ($x == -15) {\n        return\
    \ false;\n    }\n    if ($x == -16) {\n        return false;\n    }\n    if ($x\
    \ == -17) {\n        return false;\n    }\n    if ($x == -18) {\n        return\
    \ false;\n    }\n    if ($x == -19) {\n        return false;\n    }\n    if ($x\
    \ == -20) {\n        return false;\n    }\n    if ($x == -21) {\n        return\
    \ false;\n    }\n    if ($x == -22) {\n        return false;\n    }\n    if ($x\
    \ == -23) {\n        return false;\n    }\n    if ($x == -24) {\n        return\
    \ false;\n    }\n    if ($x == -25) {\n        return false;\n    }\n    if ($x\
    \ == -26) {\n        return false;\n    }\n    if ($x == -27) {\n        return\
    \ false;\n    }\n    if ($x == -28) {\n        return false;\n    }\n    if ($x\
    \ == -29) {\n        return false;\n    }\n    if ($x == -30) {\n        return\
    \ false;\n    }\n    if ($x == -31) {\n        return false;\n    }\n    if ($x\
    \ == -32) {\n        return false;\n    }\n    if ($x == -33) {\n        return\
    \ false;\n    }\n    if ($x == -34) {\n        return false;\n    }\n    if ($x\
    \ == -35) {\n        return false;\n    }\n    if ($x == -36) {\n        return\
    \ false;\n    }\n    if ($x == -37) {\n        return false;\n    }\n    if ($x\
    \ == -38) {\n        return false;\n    }\n    if ($x == -39) {\n        return\
    \ false;\n    }\n    if ($x == -40) {\n        return false;\n    }\n    if ($x\
    \ == -41) {\n        return false;\n    }\n    if ($x == -42) {\n        return\
    \ false;\n    }\n    if ($x == -43) {\n        return false;\n    }\n    if ($x\
    \ == -44) {\n        return false;\n    }\n    if ($x == -45) {\n        return\
    \ false;\n    }\n    if ($x == -46) {\n        return false;\n    }\n    if ($x\
    \ == -47) {\n        return false;\n    }\n    if (\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfw7fnt_b.php on line 167

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0o3dt_d.php:31\n\
    Stack trace:\n#0 /tmp/tmpm0o3dt_d.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpm0o3dt_d.php\
    \ on line 31\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x%$n==0) return false;\n    if\
    \ ($x%$n==1) return true;\n    return is_simple_power($x/$n, $n);\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkahs7pad.php:33\n\
    Stack trace:\n#0 /tmp/tmpkahs7pad.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkahs7pad.php\
    \ on line 33\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x % $n == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpyizzb0.php:47\n\
    Stack trace:\n#0 /tmp/tmpwpyizzb0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwpyizzb0.php\
    \ on line 47\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($x == $n) {\n        return true;\n\
    \    }\n    if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccxlwe1m.php:50\n\
    Stack trace:\n#0 /tmp/tmpccxlwe1m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpccxlwe1m.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\n    }\n    if ($n==34) {\n        return ($x==\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyqzlddb7.php on line 123

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n\
    \        return true;\n    }\n    if ($x == 0) {\n        return false;\n    }\n\
    \    if ($n == 1) {\n        return true;\n    }\n    if ($n == -1) {\n      \
    \  return false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n    if ($n ==\
    \ -1) {\n        return false;\n    }\n    if ($x == -1) {\n        return false;\n\
    \    }\n    if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n\
    \        return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n\
    \    if ($n == -1) {\n        return false;\n    }\n    if ($x == -1) {\n    \
    \    return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n \
    \   if ($x == 0) {\n        return false;\n    }\n    if ($n == 1) {\n       \
    \ return true;\n    }\n    if ($n == -1) {\n        return false;\n    }\n   \
    \ if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n        return\
    \ true;\n    }\n    if ($x == 0) {\n        return false;\n    }\n    if ($n ==\
    \ 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n\
    \        return true;\n    }\n    if ($x == 0) {\n        return false;\n    }\n\
    \    if ($n == 1) {\n        return true;\n    }\n    if ($n == -1) {\n      \
    \  return false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n    if ($n ==\
    \ -1) {\n        return false;\n    }\n    if ($x == -1) {\n        return false;\n\
    \    }\n    if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n\
    \        return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n\
    \    if ($n == -1) {\n        return false;\n    }\n    if ($x == -1) {\n    \
    \    return false;\n    }\n    if ($x == 1) {\n        return true;\n    }\n \
    \   if ($x == 0) {\n        return false;\n    }\n    if ($n == 1) {\n       \
    \ return true;\n    }\n    if ($n == -1) {\n        return false;\n    }\n   \
    \ if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n        return\
    \ true;\n    }\n    if ($x == 0) {\n        return false;\n    }\n    if ($n ==\
    \ 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n\
    \        return true;\n    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpho_8i684.php on line 207

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) return true;\n    if ($n==1) return false;\n    if ($x==0) return\
    \ false;\n    if ($x==1) return true;\n    if ($x==2) return true;\n    if ($x<0\
    \ || $x>=$n) return false; // x is out of range\n    if ($n%2==0) return false;\
    \ // n is even\n    if ($n%3==0) return false; // n is odd\n    if ($x%2==0) return\
    \ false; // x is even\n    if ($x%3==0) return false; // x is odd\n    if ($x%5==0)\
    \ return false; // x is multiple of 5\n    if ($x%7==0) return false; // x is\
    \ multiple of 7\n    if ($x%11==0) return false; // x is multiple of 11\n    if\
    \ ($x%13==0) return false; // x is multiple of 13\n    if ($x%17==0) return false;\
    \ // x is multiple of 17\n    if ($x%19==0) return false; // x is multiple of\
    \ 19\n    if ($x%23==0) return false; // x is multiple of 23\n    if ($x%29==0)\
    \ return false; // x is multiple of 29\n    if ($x%31==0) return false; // x is\
    \ multiple of 31\n    if ($x%37==0) return false; // x is multiple of 37\n   \
    \ if ($x%41==0) return false; // x is multiple of 41\n    if ($x%43==0) return\
    \ false; // x is multiple of 43\n    if ($x%47==0) return false; // x is multiple\
    \ of 47\n    if ($x%53==0) return false; // x is multiple of 53\n    if ($x%59==0)\
    \ return false; // x is multiple of 59\n    if ($x%61==0) return false; // x is\
    \ multiple of 61\n    if ($x%67==0) return false; // x is multiple of 67\n   \
    \ if ($x%71==0) return false; // x is multiple of 71\n    if ($x%73==0) return\
    \ false; // x is multiple of 73\n    if ($x%79==0) return false; // x is multiple\
    \ of 79\n    if ($x%83==0) return false; // x is multiple of 83\n    if ($x%89==0)\
    \ return false; // x is multiple of 89\n    if ($x%97==0) return false; // x is\
    \ multiple of 97\n    if ($x%103==0) return false; // x is multiple of 103\n \
    \   if ($x%109==0) return false; // x is multiple of 109\n    if ($x%113==0) return\
    \ false; // x is multiple of 113\n    if ($x%117==0) return \nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7mrbdhbh.php on line 56

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x, $n -\
    \ 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xe6kw6.php:43\n\
    Stack trace:\n#0 /tmp/tmpn5xe6kw6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn5xe6kw6.php\
    \ on line 43\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n<=1)\n        return true;\n    if ($n==0)\n        return false;\n\
    \    if ($x==0)\n        return false;\n    if ($x==1)\n        return true;\n\
    \    if ($x%$n==0)\n        return true;\n    if ($x%$n==0)\n        return false;\n\
    \    $y=$x/$n;\n    $z=pow($y,$n);\n    if ($z==$x)\n        return true;\n  \
    \  if ($z==$x)\n        return false;\n    if ($z%$x==0)\n        return true;\n\
    \    if ($z%$x==0)\n        return false;\n    return is_simple_power($y,$n);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0e1173qn.php:50\n\
    Stack trace:\n#0 /tmp/tmp0e1173qn.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp0e1173qn.php\
    \ on line 50\n"
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==2) {\n        return true;\n  \
    \  }\n    if ($x==3) {\n        return true;\n    }\n    if ($x==4) {\n      \
    \  return true;\n    }\n    if ($x==5) {\n        return true;\n    }\n    if\
    \ ($x==6) {\n        return true;\n    }\n    if ($x==7) {\n        return true;\n\
    \    }\n    if ($x==8) {\n        return true;\n    }\n    if ($x==9) {\n    \
    \    return true;\n    }\n    if ($x==10) {\n        return true;\n    }\n   \
    \ if ($x==11) {\n        return true;\n    }\n    if ($x==12) {\n        return\
    \ true;\n    }\n    if ($x==13) {\n        return true;\n    }\n    if ($x==14)\
    \ {\n        return true;\n    }\n    if ($x==15) {\n        return true;\n  \
    \  }\n    if ($x==16) {\n        return true;\n    }\n    if ($x==17) {\n    \
    \    return true;\n    }\n    if ($x==18) {\n        return true;\n    }\n   \
    \ if ($x==19) {\n        return true;\n    }\n    if ($x==20) {\n        return\
    \ true;\n    }\n    if ($x==21) {\n        return true;\n    }\n    if ($x==22)\
    \ {\n        return true;\n    }\n    if ($x==23) {\n        return true;\n  \
    \  }\n    if ($x==24) {\n        return true;\n    }\n    if ($x==25) {\n    \
    \    return true;\n    }\n    if ($x==26) {\n        return true;\n    }\n   \
    \ if ($x==27) {\n        return true;\n    }\n    if ($x==28) {\n        return\
    \ true;\n    }\n    if ($x==29) {\n        return true;\n    }\n    if ($x==30)\
    \ {\n        return true;\n    }\n    if ($x==31) {\n        return true;\n  \
    \  }\n    if ($x==32) {\n        return true;\n    }\n    if ($x==33) {\n    \
    \    return true;\n    }\n    if ($x==34) {\n        return true;\n    }\n   \
    \ if ($x==35) {\n        return true;\n    }\n    if ($x==36) {\n        return\
    \ true;\n    }\n    if ($x==37) {\n        return true;\n    }\n    if ($x==38)\
    \ {\n        return true;\n    }\n    if ($x==39) {\n        return true;\n  \
    \  }\n    if ($x==40) {\n        return true;\n    }\n    if ($x==41) {\n    \
    \    return true;\n    }\n    if ($x==42) {\n        return true;\n    }\n   \
    \ if ($x==43) {\n        return true;\n    }\n    if ($x==44) {\n        return\
    \ true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp554r0_bn.php on line 177

    '
  timestamp: 1659730426
- exit_code: 255
  program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n//\
    \ >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n\
    // >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n\
    // >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power($x, $n) {\n \
    \   if ($x == 1) {\n        return true;\n    }\n    if ($x == 0) {\n        return\
    \ false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n    if ($n\
    \ == 1) {\n        return true;\n    }\n    if ($n == -1) {\n        return false;\n\
    \    }\n    if ($x == -1) {\n        return false;\n    }\n    if ($x == 1) {\n\
    \        return true;\n    }\n    if ($x == 2) {\n        return true;\n    }\n\
    \    if ($x == 3) {\n        return true;\n    }\n    if ($x == 3) {\n       \
    \ return true;\n    }\n    if ($x == 6) {\n        return true;\n    }\n    if\
    \ ($x == 9) {\n        return true;\n    }\n    if ($x == 12) {\n        return\
    \ true;\n    }\n    if ($x == 16) {\n        return true;\n    }\n    if ($x ==\
    \ 24) {\n        return true;\n    }\n    if ($x == 48) {\n        return true;\n\
    \    }\n    if ($x == 64) {\n        return true;\n    }\n    if ($x == 96) {\n\
    \        return true;\n    }\n    if ($x == 128) {\n        return true;\n   \
    \ }\n    if ($x == 256) {\n        return true;\n    }\n    if ($x == 512) {\n\
    \        return true;\n    }\n    if ($x == 1024) {\n        return true;\n  \
    \  }\n    if ($x == 2048) {\n        return true;\n    }\n    if ($x == 4096)\
    \ {\n        return true;\n    }\n    if ($x == 8192) {\n        return true;\n\
    \    }\n    if ($x == 16384) {\n        return true;\n    }\n    if ($x == 32768)\
    \ {\n        return true;\n    }\n    if ($x == 65536) {\n        return true;\n\
    \    }\n    if ($x == 131072) {\n        return true;\n    }\n    if ($x == 262144)\
    \ {\n        return true;\n    }\n    if ($x == 524288) {\n        return true;\n\
    \    }\n    if ($x == 1048576) {\n        return true;\n    }\n    if ($x == 2097152)\
    \ {\n        return true;\n    }\n    if ($x == 4194304) {\n        return true;\n\
    \    }\n    if ($x == 8388608) {\n        return true;\n    }\n    if ($x == 16777216)\
    \ {\n        return true;\n    }\n    if ($x == 33554432) {\n        return true;\n\
    \    }\n    if ($x == 67108864) {\n        return true;\n    }\n    if ($x ==\
    \ 134217728) {\n        return true;\n    }\n    if ($x == 268435456) {\n    \
    \    return true;\n    }\n    if ($x == 536870912) {\n        return true;\n \
    \   }\n    if ($x == 1073741824) {\n        return true;\n    }\n    if ($x ==\
    \ 2147483648) {\n        return true;\n    }\n    if ($x == 4294967296) {\n  \
    \      return true;\n    }\n    if ($x == 8589934592) {\n        return true;\n\
    \    }\n    if ($x == 17179869184) {\n        return true;\n    }\n    if ($x\
    \ == 34359738368) {\n        return true;\nfunction candidate(...$args) {\n  \
    \  return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4u9hw8hy.php on line 176

    '
  timestamp: 1659730426
