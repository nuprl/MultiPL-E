name: HumanEval_56_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value == \"<\") {\n      $brackets[$key] = \"{\";\n    }\n    if\
    \ ($value == \">\") {\n      $brackets[$key] = \"}\";\n    }\n  }\n  $brackets\
    \ = implode(\">\", $brackets);\n  return $brackets == $brackets;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  foreach ($brackets as $i => $bracket) {\n   \
    \ if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        return false;\n\
    \      }\n    } else {\n      if ($brackets[$i - 1] != \">\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <<\", $brackets);\n  foreach ($brackets as $key => $bracket) {\n    if ($bracket\
    \ != \">>\") {\n      $brackets[$key] = \">>\";\n    }\n  }\n  return $brackets\
    \ == array_reverse($brackets);\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \"<\") {\n     \
    \ $brackets[$key] = \"</$value>\";\n    }\n  }\n  return implode(\">\", $brackets);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n\
    <|/ c |>\n<| c |>\n: It works fine for me (PHP 5.3.8).\n<|/ c |>\n<| c |>\n: It\
    \ doesn't work for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n\
    : It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It\
    \ works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| a tags=php,regex\
    \ |>\nThis should work:\n<code>\n$pattern = '~(<[^>]*>)~';\n$replacement = '$1';\n\
    $str = '<<><>>';\necho preg_replace($pattern, $replacement, $str);\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n<|/ c |>\n\
    <| c |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c\
    \ |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n\
    : It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It\
    \ works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$str = '<<><>>';\n$str = preg_replace('/<([^>]*)>/', '<$1>', $str);\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n\
    <|/ c |>\n<| c |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c\
    \ |>\n<| c |>\n: It works for me in PHP 5.3.8. Try it with `", "  $brackets =\
    \ explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  $brackets\
    \ = array_filter($brackets, function($item) {\n    return $item != \">\";\n  });\n\
    \  return count($brackets) == count(array_unique($brackets));\n}\n", "    $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>$/',\
    \ '', $brackets);\n    return $brackets === '<>';\n}\n</code>\n<|/ a tags=php,regex,preg-match\
    \ |>\n<| c |>\nThanks, this works great! I added a little bit of code to make\
    \ it more robust to different types of brackets.\n<|/ c |>\n<| c |>\nI added a\
    \ version that works with nested brackets.\n<|/ c |>\n<| a tags=php,regex,preg-match\
    \ |>\n<code>\n<?php\n$string = '( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( (", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] !=\
    \ $value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !=\
    \ \">\";\n  });\n  return count($brackets) == 0;\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    $brackets = array_reverse($brackets);\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value !== \"<\" && $value\
    \ !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach\
    \ ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "  $opening_brackets = preg_split('/[<>]+/', $brackets);\n\
    \  $closing_brackets = preg_split('/[<>]+/', $brackets);\n  $opening_brackets\
    \ = array_filter($opening_brackets);\n  $closing_brackets = array_filter($closing_brackets);\n\
    \  return count($opening_brackets) == count($closing_brackets);\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  $closing_brackets = array_flip($brackets);\n  foreach ($opening_brackets as\
    \ $key => $value) {\n    if (!isset($closing_brackets[$value])) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n",
  "  $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $key => $bracket)\
    \ {\n    if ($bracket != \"<\" && $bracket != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\")\
    \ {\n      $opening_brackets[] = \"<\";\n    } else if ($bracket == \">\") {\n\
    \      $closing_brackets[] = \">\";\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "    $brackets = explode(\"<<>>\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    foreach ($brackets as $i => $b)\
    \ {\n        if ($b == \"<\") {\n            $brackets[$i] = \">\";\n        }\n\
    \    }\n    return implode(\"<<>>\", $brackets);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$string = \"<><>\";\n$array = explode(\"<>\"\
    , $string);\n$array = array_reverse($array);\n$string = implode(\"<>\", $array);\n\
    echo $string;", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \"\";\n  });\n  return count($brackets) === 0;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $i => $b) {\n    if ($brackets[$i] == \">\") {\n      if ($i < count($brackets)\
    \ - 1) {\n        $brackets[$i + 1] = \"<\";\n      }\n      else {\n        $brackets[$i]\
    \ = \"<\";\n      }\n    }\n  }\n  return implode(array_reverse($brackets));\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !=\
    \ \">\";\n  });\n  return count($brackets) == 0;\n}\n", "  $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \  return $brackets === '<>';\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ if ($brackets[$key + 1] == \"<\") {\n        $brackets[$key + 1] = \"\";\n \
    \     }\n    }\n  }\n  return implode(\">\", $brackets) == $brackets;\n}\n", " \
    \   $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets =\
    \ preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return $brackets ==\
    \ array_reverse($brackets);\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  $brackets = array_reverse($brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value !== \"<\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  return array_diff($opening_brackets,\
    \ $closing_brackets);\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_filter($brackets,\
    \ function($el) {\n        return $el != \">\";\n    });\n    return count($brackets)\
    \ == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \"\
    >\";\n    }\n  }\n  return $brackets == array_reverse($brackets);\n}\n", "  $brackets\
    \ = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n  return preg_match(\"\
    /<[^<>]+>$/\", $brackets);\n}\n", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_filter($brackets,\
    \ function($item) {\n        return $item !== \"\";\n    });\n    $brackets =\
    \ array_reverse($brackets);\n    return count($brackets) == 0;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\";\n    }\n  }\n\
    \  return implode(\"\", array_reverse($brackets));\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return $brackets ==\
    \ array_reverse($brackets);\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n", "  $brackets = explode(\"<<\"\
    , $brackets);\n  foreach ($brackets as $key => $bracket) {\n    if ($bracket !=\
    \ \">>\") {\n      if ($key > 0) {\n        if ($brackets[$key - 1] != $bracket)\
    \ {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i > 0) {\n   \
    \   if ($brackets[$i - 1] != $b) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  foreach ($brackets as $b) {\n    if ($b !== \"\
    <\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets =\
    \ explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach\
    \ ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    $opening_brackets = array();\n    $closing_brackets\
    \ = array();\n    $brackets = explode(\"<<>>\", $brackets);\n    foreach ($brackets\
    \ as $bracket) {\n        $opening_brackets[] = substr($bracket, 0, 1);\n    \
    \    $closing_brackets[] = substr($bracket, -1);\n    }\n    return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a tags=php,regex,preg-match-all |>\n\
    <| c |>\nThanks for your answer. Unfortunately this doesn't work for me. I've\
    \ added some more examples to my original question.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer to include a solution that should work for your new examples.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work for me.\
    \ I've added some more examples to my original question.\n<|/ c |>\n<| c |>\n\
    : I updated my answer to include a solution that should work for your new examples.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work for\
    \ me. I've added some more examples to my original question.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThis should work:\n<code>\npreg_match_all('/\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<", "    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<", "  $opening_brackets = explode(\"\
    <\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n  foreach\
    \ ($opening_brackets as $key => $value) {\n    if ($value !== $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    return count(array_diff($brackets, array_unique(array_map(\"\
    trim\", $brackets)))) === 0;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if you have multiple nested brackets such as `
  "  $open_brackets = array();\n  $closed_brackets = array();\n  foreach ($brackets\
    \ as $b) {\n    if ($b == '<') {\n      $open_brackets[] = $b;\n    } else if\
    \ ($b == '>') {\n      $closed_brackets[] = $b;\n    }\n  }\n  return count($open_brackets)\
    \ == count($closed_brackets);\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/',\
    \ '', $brackets);\n  return preg_match_all('/<[^<>]+>/', $brackets);\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work when there are multiple\
    \ nested brackets.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it out and see for\
    \ yourself.\n<|/ c |>\n<| c |>\n: It works fine for me. Try it out yourself.\n\
    <|/ c |>\n<| c |>\n: It works fine for me. Try it out yourself.\n<|/ c |>\n<|\
    \ c |>\n: It works fine for me. Try it out yourself.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = explode(\"<\", $brackets);\n\
    \  $closing_brackets = explode(\">\", $brackets);\n  foreach ($opening_brackets\
    \ as $opening_bracket) {\n    if (!array_search($opening_bracket, $closing_brackets))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \">\") {\n     \
    \ return false;\n    }\n    unset($brackets[$key]);\n  }\n  return count($brackets)\
    \ == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $i => $b) {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n  \
    \      return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]*>$/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value != \"<\") {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "    $brackets = explode(\"<\", $brackets);\n    $brackets\
    \ = array_reverse($brackets);\n    foreach ($brackets as $key => $bracket) {\n\
    \        if ($bracket != \">\") {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $opening_brackets = preg_split('/[<>]+/', $brackets);\n  $closing_brackets =\
    \ preg_split('/[<>]+/', $brackets);\n  foreach ($opening_brackets as $key => $value)\
    \ {\n    if ($value !== $closing_brackets[$key]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($key > 0) {\n      if ($brackets[$key\
    \ - 1] != $value) {\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i =>\
    \ $b) {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] !=\
    \ \">\") {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n", "  $open_brackets = explode(\"<\", $brackets);\n  $closed_brackets\
    \ = explode(\">\", $brackets);\n  foreach ($open_brackets as $key => $value) {\n\
    \    if ($open_brackets[$key+1] != $value) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "    $brackets = explode(\"<\", $brackets);\n    foreach\
    \ ($brackets as $b) {\n        if ($b !== \">\") {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($value != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \">\") {\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<<>>\", $brackets);\n\
    \  $brackets = array_map(\"trim\", $brackets);\n  foreach ($brackets as $i =>\
    \ $b) {\n    if ($b === \">\") {\n      $brackets[$i] = \"<\";\n    }\n  }\n \
    \ return implode(\"<<>>\", $brackets) === $brackets;\n}\n", "  $brackets = preg_replace(\"\
    /<\\/?[^<>]+>/\", \"\", $brackets);\n  $brackets = preg_replace(\"/<[^<>]+>/\"\
    , \"\", $brackets);\n  return $brackets == \"<>\";\n}", "  $opening_brackets =\
    \ explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  $opening_brackets = array_filter($opening_brackets);\n  $closing_brackets =\
    \ array_filter($closing_brackets);\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $opening_brackets =\
    \ array();\n  $closing_brackets = array();\n  foreach ($brackets as $bracket)\
    \ {\n    if ($bracket == '<') {\n      $opening_brackets[] = $bracket;\n    }\
    \ else if ($bracket == '>') {\n      $closing_brackets[] = $bracket;\n    }\n\
    \  }\n  return count($opening_brackets) == count($closing_brackets);\n}\n", " \
    \   $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($item) {\n        return $item\
    \ != \">\";\n    });\n    return count($brackets) == 0;\n}\n", "  $brackets =\
    \ explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if\
    \ ($value != \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return $brackets\
    \ == array_reverse($brackets);\n}", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\")\
    \ {\n      $opening_brackets[] = \"{\";\n      $closing_brackets[] = \"{\";\n\
    \    } else if ($bracket == \">\") {\n      $opening_brackets[] = \"}\";\n   \
    \   $closing_brackets[] = \"}\";\n    } else if ($bracket == \"{\") {\n      $opening_brackets[]\
    \ = \"[\";\n      $closing_brackets[] = \"]\";\n    } else if ($bracket == \"\
    ]\") {\n      $opening_brackets[] = \"]\";\n      $closing_brackets[] = \"[\"\
    ;\n    } else {\n      return false;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "    $opening_brackets = array();\n    $closing_brackets\
    \ = array();\n    $brackets_count = count($brackets);\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        $opening_brackets[] = $brackets[$i];\n        if ($brackets[$i]\
    \ === \"<\") {\n            $closing_brackets[] = $brackets[$i + 1];\n       \
    \ }\n    }\n    if ($closing_brackets[0] !== \"<\") {\n        return false;\n\
    \    }\n    for ($i = 1; $i < $brackets_count; $i++) {\n        if ($brackets[$i]\
    \ !== \">\") {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    $opening_brackets = explode(\"<\", $brackets);\n    $closing_brackets\
    \ = explode(\">\", $brackets);\n    foreach ($opening_brackets as $opening_bracket)\
    \ {\n        if ($closing_brackets[$closing_brackets - 1] != $opening_bracket)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis doesn't work. Try it with `\"<><<><>>\"\
    `.\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Does it work for you?\n\
    <|/ c |>\n<| a tags=php,regex |>\nThis should work:\n<code>\n$string
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i => $b) {\n\
    \    if ($i > 0) {\n      if ($brackets[$i] != $brackets[$i - 1]) {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "    $opening_brackets =\
    \ explode(\"<\", $brackets);\n    $closing_brackets = explode(\">\", $brackets);\n\
    \    $opening_brackets_count = count($opening_brackets);\n    $closing_brackets_count\
    \ = count($closing_brackets);\n    $correct_bracketing = false;\n    for ($i =\
    \ 0; $i < $opening_brackets_count; $i++) {\n        if ($opening_brackets[$i]\
    \ == $closing_brackets[$i]) {\n            $correct_bracketing = true;\n     \
    \   }\n    }\n    return $correct_bracketing;\n}\n", "    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  $closing_brackets = array_flip($brackets);\n  foreach ($opening_brackets as\
    \ $key => $value) {\n    if ($closing_brackets[$value] === $key) {\n      $opening_brackets[$key]\
    \ = $value;\n    }\n  }\n  return $opening_brackets === array_keys($closing_brackets);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a PHP function to do\
    \ this, which I thought would be useful for others who find this question:\n<code>",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $opening_brackets =\
    \ explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  $opening_brackets_count = count($opening_brackets);\n  $closing_brackets_count\
    \ = count($closing_brackets);\n  for ($i = 0; $i < $opening_brackets_count; $i++)\
    \ {\n    if ($opening_brackets[$i] != $closing_brackets[$i]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ $brackets[$key] = \">\";\n    }\n  }\n  return $brackets == array_reverse($brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value != \">\") {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "    $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $bracket", "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets, function($val) {\n        return $val\
    \ != \">\";\n    });\n    return count($brackets) == 0;\n}\n", "  $brackets =\
    \ explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach\
    \ ($brackets as $b) {\n    if ($b != \">\") {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "    $brackets = preg_replace('/(<+)/', '<<<', $brackets);\n\
    \    $brackets = preg_replace('/(>+)/', '>>>', $brackets);\n    $brackets = preg_replace('/(<+>+)/',\
    \ '<<<>>>', $brackets);\n    $brackets = preg_replace('/(<+>>+)/', '<<<>>>', $brackets);\n\
    \    $brackets = preg_replace('/(>+>>+)/', '>>>>>>', $brackets);\n    $brackets\
    \ = preg_replace('/(<+>>+>+)/', '<<<>>>>>>', $brackets);\n    $brackets = preg_replace('/(<+>>+>>+)/',\
    \ '<<<>>>>>>', $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>>+>>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+>>+>>+>+)/', '<<<>>>>>>>>>',\
    \ $brackets);\n    $brackets = preg_replace('/(<+>>+>>+>>+>>+>>+", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return\
    \ $brackets == array_reverse($brackets);\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+/', '', $brackets);\n  return $brackets === '<>';\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to do this without using regular expressions?\n<|/ c |>\n<| c |>\n\
    : I added a non-regex solution that doesn't use regular expressions.\n<|/ c |>\n\
    <| a dscore=1 |>\nI came up with another solution that doesn't use regular expressions:\n\
    <code>", "    $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<\\/?[^<>]+>/\"\
    , \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\"\
    , \"\", $brackets);\n    $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\",\
    \ \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\",\
    \ \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\",\
    \ \"\", $brackets);\n    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \    $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n    $brackets = preg_replace(\"\
    /<[^<>]+>/\", \"\", $brackets);\n    $brackets = ", "  $brackets = preg_replace(\"\
    /<\\/?[^<>]+>/\", \"\", $brackets);\n  $brackets = preg_replace(\"/<[^<>]+>/\"\
    , \"\", $brackets);\n  return $brackets == \"<>\";\n}\n", "  $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<([^<>]+)>/i', $brackets,\
    \ $matches);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work\
    \ for `<<><>>` - it returns `true` when it should be `false`.\n<|/ c |>\n<| c\
    \ |>\n: I fixed it by adding `<` and `>` into the character class (I thought that\
    \ was the point of the question).\n<|/ c |>\n<| c |>\n: I added a more complete\
    \ solution that should work for all cases.\n<|/ c |>\n<| c |>\n: I added a more\
    \ complete solution that should work for all cases.\n<|/ c |>\n<| c |>\n: I added\
    \ a more complete solution that should work for all cases.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern = \"~<([^<>]+)>~\";\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);", "  $opening_brackets = explode(\"\
    <\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n  foreach\
    \ ($opening_brackets as $key => $value) {\n    if ($value != $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_filter($brackets,\
    \ function($value) {\n        return $value !== \"\";\n    });\n    return count($brackets)\
    \ === 0;\n}\n", "  $opening_brackets = array();\n  $closing_brackets = array();\n\
    \  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = \"{\";\n      $closing_brackets[] = \"{\";\n    } else if ($bracket == \"\
    >\") {\n      $opening_brackets[] = \"{\";\n      $closing_brackets[] = \"}\"\
    ;\n    } else if ($bracket == \"{\") {\n      $opening_brackets[] = \"{\";\n \
    \     $closing_brackets[] = \"}\"; // this closing bracket is optional\n    }\
    \ else if ($bracket == \"}\") {\n      $opening_brackets[] = \"{\";\n      $closing_brackets[]\
    \ = \"}\";\n    } else {\n      return false;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "    $brackets = explode(\"<\", $brackets);\n\
    \    foreach ($brackets as $key => $value) {\n        if ($value != \">\") {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "  $opening_brackets\
    \ = preg_split('/[<>]+/', $brackets);\n  $closing_brackets = preg_split('/[<>]+/',\
    \ $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return !array_diff($brackets,\
    \ $brackets);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, however\
    \ it fails for `<<><>>` which should return `true` but returns `false`.\n<|/ c\
    \ |>\n<| c |>\n: I fixed the bug, thanks for pointing it out. Now it works.\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern\
    \ = '~<+~';\n$replacement = '~>+~';\necho preg_replace($pattern, $replacement,\
    \ $string);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis fails for `<<><>>` which\
    \ should return `true` but returns `false`.\n<|/ c |>\n<| c |>\n: I fixed the\
    \ bug, thanks for pointing it out. Now it works.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern = '~<+~';\n$replacement =\
    \ '~>+~';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern\
    \ = '~<+~';\n$replacement = '~>+~';\necho preg_replace($pattern, $replacement,\
    \ $string);\n</code>\n<|/ a tags=php,regex |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $string = \"<<><>>\";\n$pattern = '~<+~';\n$replacement = '~>+~';\necho preg_replace($pattern,\
    \ $replacement, $string);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = \"<<><>>\";\n$pattern = '~<+~';\n$replacement =\
    \ '~>+~';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = \"<<><>>\";\n\
    $pattern = '~<+~';\n$replacement = '~>+~';", "  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets =\
    \ preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/',\
    \ '<$1>', $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);\n\
    \  $brackets = preg_replace('/<([^>]*)>/', '<$1>', $brackets);", "    $brackets\
    \ = explode(\"<<>>\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $b) {\n        if ($b[0] != \"<\") return false;\n\
    \    }\n    return true;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    foreach ($brackets as $i => $bracket) {\n        if ($bracket != \">\") {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/\
    \ a tags=php,regex |>\n<| c |>\nThis doesn't work. Try it on `<<><>>`.\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. Try it on `<<><>>`.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = '<<><>>';\n$pattern = '~<<<(.*?)>>>~';\npreg_match_all($pattern,\
    \ $string, $matches);\n$result = count($matches[0]);\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work. Try it on `<<><>>`.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to\
    \ my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$string = '<<><>>';\n$pattern = '~<<<(.*?)>>>~';\npreg_match_all($pattern,\
    \ $string, $matches);\n$result = count($matches[0]);\necho $result;", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  $brackets = array_merge($brackets,\
    \ array(\">\"));\n  return count($brackets) == count(array_unique($brackets));\n\
    }\n", "  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<[^<>]*>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work when there\
    \ are multiple brackets inside each other. `
  "    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $bracket", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      $brackets[$key] = \"{\";\n    }\n    if ($value == \">\") {\n\
    \      $brackets[$key] = \"}\";\n    }\n  }\n  return implode(\"\", array_reverse($brackets));\n\
    }\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return\
    \ preg_match_all('/<[^<>]+>/', $brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n\
    <| c |>\nThis doesn't seem to work when there are multiple brackets inside each\
    \ other. For example, `
  "    $opening_brackets = preg_split('/[<>]+/', $brackets);\n    $closing_brackets\
    \ = preg_split('/[<>]+/', $brackets);\n    foreach ($opening_brackets as $key\
    \ => $value) {\n        if ($value !== $closing_brackets[$key]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value == \"<\") {\n      if ($brackets[$key +\
    \ 1] == \"<\") {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\n", "  $opening_brackets = array();\n  $closing_brackets = array();\n  $brackets_count\
    \ = count($brackets);\n  for ($i = 0; $i < $brackets_count; $i++) {\n    $opening_brackets[]\
    \ = $brackets[$i];\n  }\n  for ($i = 0; $i < $brackets_count; $i++) {\n    $closing_brackets[]\
    \ = $brackets[$i + 1];\n  }\n  $opening_brackets_count = count($opening_brackets);\n\
    \  $closing_brackets_count = count($closing_brackets);\n  for ($i = 0; $i < $opening_brackets_count;\
    \ $i++) {\n    if ($opening_brackets[$i] !== \"<\") {\n      return false;\n \
    \   }\n  }\n  for ($i = 0; $i < $closing_brackets_count; $i++) {\n    if ($closing_brackets[$i]\
    \ !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets\
    \ = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n  \
    \  $brackets = array_filter($brackets, function($value) {\n        return $value\
    \ !== \"\";\n    });\n    return count($brackets) === 0;\n}\n", "  $brackets =\
    \ explode(\"<\", $brackets);\n  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $b) {\n    if ($b == \"<\") {\n      $opening_brackets[]\
    \ = $b;\n    } else {\n      $closing_brackets[] = $b;\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ $brackets[$key] = \"{\";\n    }\n    if ($value == \">\") {\n      $brackets[$key]\
    \ = \"}\";\n    }\n  }\n  return count(array_diff($brackets, array(\"<\", \"{\"\
    , \"}\"))) == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $b) {\n    $b = trim($b);\n    if ($b === \"\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = preg_split('/[<>]/',\
    \ $brackets);\n  $closing_brackets = preg_split('/[<>]/', $brackets);\n  return\
    \ count($opening_brackets) == count($closing_brackets);\n}\n", "  $opening_brackets\
    \ = explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  foreach ($opening_brackets as $key => $value) {\n    if ($value != $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_map(function($x)\
    \ {\n        return str_repeat($x, 2);\n    }, $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    return $brackets[0] === $brackets[1];\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  $brackets = array_merge($brackets, array(\">\"\
    ));\n  return count(array_unique($brackets)) == count($brackets);\n}\n", "  $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/',\
    \ $brackets);\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem\
    \ to work with the string `<<><>>`\n<|/ c |>\n<| c |>\n: It does, see my comment\
    \ on the question.\n<|/ c |>\n<| c |>\n: It does, see my comment on the question.\n\
    <|/ c |>\n<| c |>\n: It does, see my comment on the question.\n<|/ c |>\n<| c\
    \ |>\n: It does, see my comment on the question.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = '<<><>>';\n$pattern = '/<<<(.*?)>>>/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);", "  $brackets = explode(\"<\", $brackets);\n\
    \  $brackets = array_reverse($brackets);\n  foreach ($brackets as $b) {\n    if\
    \ ($b !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", " \
    \   $brackets = explode(\"<<\", $brackets);\n    $brackets = explode(\">>\", $brackets);\n\
    \    $brackets = array_unique($brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, $brackets);\n    $brackets = array_unique($brackets);\n\
    \    return count($brackets) == count($brackets[0]);\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $b) {\n    if ($b !== \">\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets\
    \ = explode(\">\", $brackets);\n  $count = count($opening_brackets);\n  for ($i\
    \ = 0; $i < $count; $i++) {\n    if ($opening_brackets[$i] != $closing_brackets[$i])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  $brackets = array_merge($brackets,\
    \ array(\">\"));\n  return count(array_diff($brackets, array_unique(array_map(\"\
    trim\", $brackets)))) === 0;\n}\n", "  $brackets = preg_replace(\"/<\\/?[^<>]+>/\"\
    , \"\", $brackets);\n  $brackets = preg_replace(\"/<[^<>]+>/\", \"\", $brackets);\n\
    \  return ($brackets == \"<\" && $brackets == \"<\") ||\n    ($brackets == \"\
    <\" && $brackets == \">\") ||\n    ($brackets == \">\" && $brackets == \"<\")\
    \ ||\n    ($brackets == \">\" && $brackets == \">\");\n}\n", "    $brackets =\
    \ explode(\"<\", $brackets);\n    foreach ($brackets as $key => $value) {\n  \
    \      if ($value != \"<\") {\n            $brackets[$key] = \"</$value>\";\n\
    \        }\n    }\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like the idea of using an array, but\
    \ I feel like it would be more efficient to just loop through the string and count\
    \ the amount of \"<\" and \">\" characters. I feel like that would be more efficient\
    \ than using an array. I'm going to try this out and see how it works.\n<|/ c\
    \ |>\n<| c |>\nI tested this out and it works great! I really appreciate your\
    \ help and I learned a lot from your code. Thank you!\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string
  "  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return count(array_unique($brackets))\
    \ == count($brackets);\n}\n</code>\n<|/ a tags=php,regex,preg-match,preg-replace\
    \ |>\n<| c |>\nThis doesn't seem to work. `<<<` returns `true` but `<<<>>` returns\
    \ `false`.\n<|/ c |>\n<| c |>\n: It works for me (PHP 5.3.10).\n<|/ c |>\n<| c\
    \ |>\n: I added a test case that shows it working for me.\n<|/ c |>\n<| c |>\n\
    : I added a test case that shows it working for me.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case that shows it working for me.\n<|/ c |>\n<| a tags=php,regex,preg-match,preg-replace\
    \ |>\n<code>\n$string = \"<<<\";\n$pattern = \"~<<<~\";\n$replacement = \"<\"\
    ;\n$result = preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't seem to work. `<<<` returns `true` but `<<<>>` returns\
    \ `false`.\n<|/ c |>\n<| c |>\n: It works for me (PHP 5.3.10).\n<|/ c |>\n<| c\
    \ |>\n: I added a test case that shows it working for me.\n<|/ c |>\n<| a tags=php,regex,preg-match,preg-replace\
    \ |>\n<code>\n<?php\n$string = \"<<<\";\n$pattern = \"~<<<~\";\n$replacement =\
    \ \"<\";\n$result = preg_replace($pattern, $replacement, $string);\necho $result;",
  "  $opening_brackets = explode(\"<\", $brackets);\n  $closing_brackets = explode(\"\
    >\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i =>\
    \ $b) {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ===\
    \ \"<\") {\n      if ($key === 0) {\n        return false;\n      }\n      $brackets[$key]\
    \ = \"</\" . $value . \">\";\n    }\n  }\n  return implode(\"<\", $brackets);\n\
    }\n", "    $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $bracket", "  $opening_brackets = array();\n  $closing_brackets = array();\n\
    \  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, but I still\
    \ think it would be better to use a regex. My solution will fail for `<<><>>`\
    \ but your solution will work for `<<<>>`\n<|/ c |>\n<| c |>\nI agree, your solution\
    \ is better. I just wanted to show how it could be done without regex.\n<|/ c\
    \ |>\n<| a dscore=1 |>\nI like your solution, but I still think it would be better\
    \ to use a regex. My solution will fail for <<><>> but your solution will work\
    \ for <<<>>\n<code>", "  $brackets = preg_replace('/<+>/', '', $brackets);\n \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_merge($brackets, array(\">\"));\n  return count(array_unique($brackets))\
    \ == count($brackets);\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  foreach ($brackets as $b) {\n    if ($b !== \"\
    <\" && $b !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\";\n    }\n\
    \  }\n  return implode(\">\", $brackets);\n}\n</code>\n<|/ a tags=php,regex,preg-match-all\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try this out and see if it\
    \ works. I appreciate your help.\n<|/ c |>\n<| c |>\nI tested this out and it\
    \ works great. Thanks for your help.\n<|/ c |>\n<| a tags=php,regex,preg-match-all\
    \ |>\n<code>\n<?php\n$string
  "  $brackets = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  return preg_match_all('/<[^<>]+>/',\
    \ $brackets);\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets =\
    \ array_reverse($brackets);\n  foreach ($brackets as $b) {\n    if ($b != \">\"\
    ) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return $brackets ==\
    \ array_reverse($brackets);\n}\n", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n", "  $brackets = explode(\"<<>>\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($x) {\n    return $x !== \"\"\
    ;\n  });\n  $brackets = array_reverse($brackets);\n  $brackets = array_filter($brackets,\
    \ function($x) {\n    return $x !== \"\";\n  });\n  return $brackets[0] === $brackets[1];\n\
    }\n", "  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  $opening_brackets = array_diff($opening_brackets,\
    \ array_unique($closing_brackets));\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n</code>\n<|/ a tags=php,regex,preg-match-all,preg-match |>\n<| c |>\nI like\
    \ this solution, but I feel like it could be made more efficient by not using\
    \ preg_split and just using preg_match_all and array_diff. I'm going to try this\
    \ out and see how it goes.\n<|/ c |>\n<| c |>\nI added an example for preg_match_all\
    \ and array_diff. Hope it helps.\n<|/ c |>\n<| c |>\nI added an example for preg_match_all\
    \ and array_diff. Hope it helps.\n<|/ c |>\n<| c |>\nI added an example for preg_match_all\
    \ and array_diff. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\nThis should work:\n\
    <code>\n$string
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $bracket) {\n    if ($bracket != \">\") {\n   \
    \   if ($bracket != \"<\") {\n        return false;\n      }\n    } else {\n \
    \     if ($brackets[$i + 1] != \"<\") {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n", "    $opening_brackets = explode(\"<\", $brackets);\n\
    \    $closing_brackets = explode(\">\", $brackets);\n    $count = count($opening_brackets);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if ($opening_brackets[$i] != $closing_brackets[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = preg_replace('/<([^>]*)>/', '$1',\
    \ $brackets);\n  $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n \
    \ return $brackets === '<>';\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis looks\
    \ promising, but I'm getting a syntax error on line 6: `Parse error: syntax error,\
    \ unexpected T_STRING, expecting ',' or ';'`\n<|/ c |>\n<| c |>\nSorry, I forgot\
    \ the quotes around `'<([^>]*)>'`. I've edited my answer.\n<|/ c |>\n<| c |>\n\
    Thanks, that fixed that error, but now I'm getting this error: `Parse error: syntax\
    \ error, unexpected T_STRING, expecting ',' or ';'`\n<|/ c |>\n<| c |>\nSorry,\
    \ I forgot the quotes around `'<([^>]*)>'`. I've edited my answer.\n<|/ c |>\n\
    <| c |>\nThanks, that fixed that error, but now I'm getting this error: `Parse\
    \ error: syntax error, unexpected T_STRING, expecting ',' or ';'`\n<|/ c |>\n\
    <| a tags=php,regex |>\nThis should work:\n<code>\n$string = '<<><>>';\n$pattern\
    \ = '/<<<(.*?)>>>/';\npreg_match_all($pattern, $string, $matches);\nprint_r($matches);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis looks promising, but I'm getting a syntax\
    \ error on line 6: `Parse error: syntax error, unexpected T_STRING, expecting\
    \ ',' or ';'`\n<|/ c |>\n<| c |>\nSorry, I forgot the quotes around `'<([^>]*)>'`.\
    \ I've edited my answer.\n<|/ c |>\n<| c |>\nThanks, that fixed that error, but\
    \ now I'm getting this error: `Parse error: syntax error, unexpected T_STRING,\
    \ expecting ',' or ';'`\n<|/ c |>\n<| c |>\nSorry, I forgot the quotes around\
    \ `'<([^>]*)>'`. I've edited my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$string = '<<><>>';\n$pattern = '/<<<(.*?)>>>/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ $brackets[$key] = \"<<\";\n    }\n    if ($value == \">\") {\n      $brackets[$key]\
    \ = \">>\";\n    }\n  }\n  return implode(\">\", $brackets) == $brackets;\n}\n",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value !==\
    \ \"<\" && $value !== \">\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $open_brackets = array();\n  $closed_brackets = array();\n  foreach ($brackets\
    \ as $bracket) {\n    if ($bracket == '<') {\n      $open_brackets[] = '<';\n\
    \    } else if ($bracket == '>') {\n      $closed_brackets[] = '>';\n    }\n \
    \ }\n  return count($open_brackets) == count($closed_brackets);\n}\n", "  $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>$/',\
    \ '', $brackets);\n  return ($brackets === '<>');\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      $brackets[$key] = \"{\";\n    }\n  }\n  $brackets = implode(\"\
    >\", $brackets);\n  return $brackets == \"{<}\";\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      if ($brackets[$key + 1] != \"<\") {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $i => $b) {\n    if ($i > 0) {\n      if ($brackets[$i\
    \ - 1] != $b) {\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key\
    \ => $value) {\n    if ($value === \"<\") {\n      if ($key === 0) {\n       \
    \ return false;\n      }\n      $brackets[$key - 1] = \"</\" . $brackets[$key\
    \ - 1];\n    }\n  }\n  return count($brackets) === 1;\n}\n", "  $brackets = explode(\"\
    <<\", $brackets);\n  foreach ($brackets as $key => $bracket) {\n    if ($bracket\
    \ != \">\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  $brackets = implode(\"\
    >\", $brackets);\n  return $brackets == $brackets;\n}\n", "  $open_brackets =\
    \ preg_split('/[<>]+/', $brackets);\n  $closed_brackets = preg_split('/[<>]+/',\
    \ $brackets);\n  return count($open_brackets) == count($closed_brackets);\n}\n",
  "  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>$/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to make it work\
    \ for nested brackets such as `<<<>>>` ?\n<|/ c |>\n<| c |>\n: Yes, it can be\
    \ done by adding another level of recursion.\n<|/ c |>\n<| c |>\n: I've added\
    \ a recursive solution that works for nested brackets.\n<|/ c |>\n<| c |>\n: I\
    \ added a recursive solution that works for nested brackets.\n<|/ c |>\n<| c |>\n\
    : I added a recursive solution that works for nested brackets.\n<|/ c |>\n<| a\
    \ tags=php,regex |>\nI came up with this solution:\n<code>", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      if ($brackets[$key + 1] == \"<\") {\n        $brackets[$key\
    \ + 1] = \"</>\";\n      }\n    }\n  }\n  return implode(\">\", $brackets);\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets\
    \ = preg_replace('/<[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<",
  "  $brackets = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n  return (strlen($brackets)\
    \ == strlen($brackets[0]));\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \  return $brackets === '<>';\n}\n", "  $opening_brackets = preg_split('/[\\<\\\
    >]/', $brackets);\n  $closing_brackets = preg_split('/[\\<\\>]/', $brackets);\n\
    \  $opening_brackets = array_flip($opening_brackets);\n  $closing_brackets = array_flip($closing_brackets);\n\
    \  return array_diff_key($opening_brackets, $closing_brackets) === 0;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your solution, however it fails on `<<><>>` which should\
    \ return `true` but returns `false`\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nI like your solution, however it fails\
    \ on `<<><>>` which should return `true` but returns `false`\n<|/ c |>\n<| c |>\n\
    : I fixed the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, however it fails on `<<><>>` which should return `true` but returns\
    \ `false`\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $brackets = explode(\"<\"\
    , $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_filter($brackets,\
    \ function($v) { return $v != \"\"; });\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n", "  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"<\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \">\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n  return\
    \ preg_match_all('/<[^<>]+>/', $brackets);\n}\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ your solution, but I believe it can be simplified a bit. `preg_match_all('/<[^<>]+>/',\
    \ $brackets)` will match any string that starts with `<` and ends with `>`, so\
    \ `<` and `>` can be removed from the brackets string. Also, `preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets)` will remove any `<` or `>` that is followed by a\
    \ `/`, so `<` and `>` can be removed from the brackets string.\n<|/ c |>\n<| c\
    \ |>\n: Yes, you're right. I was thinking about `preg_replace('/<\\/?[^<>]+>/',\
    \ '', $brackets)` but then I realized that `preg_replace('/<[^<>]+>/', '', $brackets)`\
    \ will also remove `<` and `>` that are followed by a `/`. So I thought it would\
    \ be better to keep `preg_replace('/<\\/?[^<>]+>/', '', $brackets)`.\n<|/ c |>\n\
    <| c |>\n: I added your simplifications to the answer.\n<|/ c |>\n<| c |>\n: I\
    \ added your simplifications to the answer.\n<|/ c |>\n<| c |>\n: I added your\
    \ simplifications to the answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return\
    \ $brackets == array_reverse($brackets);\n}\n", "  $brackets = explode(\"<\",\
    \ $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($key > 0) {\n\
    \      if ($brackets[$key - 1] != $value) {\n        return false;\n      }\n\
    \    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \"<\") {\n      if ($b !== \">\"\
    ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\";\n    }\n  }\n\
    \  return implode(\">\", $brackets);\n}\n", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    return count($brackets) == count(array_unique($brackets));\n\
    }\n", "    $brackets = explode(\"<\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_merge($brackets, array(\">\"));\n    $brackets = array_reverse($brackets);\n\
    \    return count(array_diff($brackets, $brackets)) == 0;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value !== \"<\") {\n      $brackets[$key] = \"</$value>\";\n    }\n  }\n\
    \  return implode(\">\", $brackets);\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  $opening_brackets\
    \ = array_keys($brackets);\n  $closing_brackets = array_flip($brackets);\n  foreach\
    \ ($opening_brackets as $opening_bracket => $closing_bracket) {\n    if ($closing_brackets[$opening_bracket]\
    \ != $opening_bracket) {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  $brackets = explode(\"<<\", $brackets);\n  $brackets = explode(\">>\", $brackets);\n\
    \  foreach ($brackets as $key => $bracket) {\n    if ($bracket == $brackets[$key\
    \ - 1]) {\n      unset($brackets[$key]);\n    }\n  }\n  return count($brackets)\
    \ == 0;\n}\n", "    $brackets = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n\
    \    $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n    return $brackets\
    \ === '<>';\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis works great, thank you!\
    \ I added a couple more tests to make sure it works correctly with nested brackets.\
    \ I added my final code to the original question. Thanks again!\n<|/ c |>\n<|\
    \ a dscore=2 |>\nI wrote a function that checks if a string is balanced or not.\n\
    <code>", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i > 0) {\n   \
    \   if ($brackets[$i - 1] != $b) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $i => $b) {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n  \
    \      return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value == \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return\
    \ $brackets == array_reverse($brackets);\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThanks for your answer. Your code works perfectly for brackets such as `<>`.\
    \ I just tried it on `<<><>>` but it returns `false`. Do you know why?\n<|/ c\
    \ |>\n<| c |>\nI added a test case for that case.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for brackets such as `<>`. I just tried\
    \ it on `<<><>>` but it returns `false`. Do you know why?\n<|/ c |>\n<| c |>\n\
    I added a test case for that case.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly for brackets such as `<>`. I just tried it on `<<><>>`\
    \ but it returns `false`. Do you know why?\n<|/ c |>\n<| a dscore=1 |>\nI wrote\
    \ a recursive function which checks if a bracket is correctly closed:\n<code>",
  "  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach ($brackets\
    \ as $b) {\n    if ($b == '<') {\n      $opening_brackets[] = $b;\n    } else\
    \ if ($b == '>') {\n      $closing_brackets[] = $b;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "  $opening_brackets = preg_split('/[\\\
    <\\>]/', $brackets);\n  $closing_brackets = preg_split('/[\\<\\>]/', $brackets);\n\
    \  $opening_brackets = array_filter($opening_brackets);\n  $closing_brackets =\
    \ array_filter($closing_brackets);\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i =>\
    \ $b) {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+/', '', $brackets);\n  \
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n    $", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  $brackets = array_filter($brackets,\
    \ function($item) {\n    return $item != \">\";\n  });\n  return count($brackets)\
    \ == 0;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
