name: HumanEval_56_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value == \"<\") {\n      $brackets[$key] = \"{\";\n    }\n    if\
    \ ($value == \">\") {\n      $brackets[$key] = \"}\";\n    }\n  }\n  $brackets\
    \ = implode(\">\", $brackets);\n  return $brackets == $brackets;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  foreach ($brackets as $i => $bracket) {\n   \
    \ if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        return false;\n\
    \      }\n    } else {\n      if ($brackets[$i - 1] != \">\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <<\", $brackets);\n  foreach ($brackets as $key => $bracket) {\n    if ($bracket\
    \ != \">>\") {\n      $brackets[$key] = \">>\";\n    }\n  }\n  return $brackets\
    \ == array_reverse($brackets);\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \"<\") {\n     \
    \ $brackets[$key] = \"</$value>\";\n    }\n  }\n  return implode(\">\", $brackets);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n\
    <|/ c |>\n<| c |>\n: It works fine for me (PHP 5.3.8).\n<|/ c |>\n<| c |>\n: It\
    \ doesn't work for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n\
    : It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It\
    \ works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| a tags=php,regex\
    \ |>\nThis should work:\n<code>\n$pattern = '~(<[^>]*>)~';\n$replacement = '$1';\n\
    $str = '<<><>>';\necho preg_replace($pattern, $replacement, $str);\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n<|/ c |>\n\
    <| c |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c\
    \ |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n\
    : It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It\
    \ works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$str = '<<><>>';\n$str = preg_replace('/<([^>]*)>/', '<$1>', $str);\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n\
    <|/ c |>\n<| c |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c\
    \ |>\n<| c |>\n: It works for me in PHP 5.3.8. Try it with `", "  $brackets =\
    \ explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  $brackets\
    \ = array_filter($brackets, function($item) {\n    return $item != \">\";\n  });\n\
    \  return count($brackets) == count(array_unique($brackets));\n}\n", "    $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>$/',\
    \ '', $brackets);\n    return $brackets === '<>';\n}\n</code>\n<|/ a tags=php,regex,preg-match\
    \ |>\n<| c |>\nThanks, this works great! I added a little bit of code to make\
    \ it more robust to different types of brackets.\n<|/ c |>\n<| c |>\nI added a\
    \ version that works with nested brackets.\n<|/ c |>\n<| a tags=php,regex,preg-match\
    \ |>\n<code>\n<?php\n$string = '( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( (", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] !=\
    \ $value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !=\
    \ \">\";\n  });\n  return count($brackets) == 0;\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    $brackets = array_reverse($brackets);\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value !== \"<\" && $value\
    \ !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach\
    \ ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "  $opening_brackets = preg_split('/[<>]+/', $brackets);\n\
    \  $closing_brackets = preg_split('/[<>]+/', $brackets);\n  $opening_brackets\
    \ = array_filter($opening_brackets);\n  $closing_brackets = array_filter($closing_brackets);\n\
    \  return count($opening_brackets) == count($closing_brackets);\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  $closing_brackets = array_flip($brackets);\n  foreach ($opening_brackets as\
    \ $key => $value) {\n    if (!isset($closing_brackets[$value])) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n",
  "  $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $key => $bracket)\
    \ {\n    if ($bracket != \"<\" && $bracket != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\")\
    \ {\n      $opening_brackets[] = \"<\";\n    } else if ($bracket == \">\") {\n\
    \      $closing_brackets[] = \">\";\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
