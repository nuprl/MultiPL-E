name: HumanEval_56_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets =\
    \ preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/', '',\
    \ $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value == \"<\") {\n      $brackets[$key] = \"{\";\n    }\n    if\
    \ ($value == \">\") {\n      $brackets[$key] = \"}\";\n    }\n  }\n  $brackets\
    \ = implode(\">\", $brackets);\n  return $brackets == $brackets;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  foreach ($brackets as $i => $bracket) {\n   \
    \ if ($bracket != \">\") {\n      if ($bracket != \"<\") {\n        return false;\n\
    \      }\n    } else {\n      if ($brackets[$i - 1] != \">\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"\
    <<\", $brackets);\n  foreach ($brackets as $key => $bracket) {\n    if ($bracket\
    \ != \">>\") {\n      $brackets[$key] = \">>\";\n    }\n  }\n  return $brackets\
    \ == array_reverse($brackets);\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \"<\") {\n     \
    \ $brackets[$key] = \"</$value>\";\n    }\n  }\n  return implode(\">\", $brackets);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n\
    <|/ c |>\n<| c |>\n: It works fine for me (PHP 5.3.8).\n<|/ c |>\n<| c |>\n: It\
    \ doesn't work for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n\
    : It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It\
    \ works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| a tags=php,regex\
    \ |>\nThis should work:\n<code>\n$pattern = '~(<[^>]*>)~';\n$replacement = '$1';\n\
    $str = '<<><>>';\necho preg_replace($pattern, $replacement, $str);\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n<|/ c |>\n\
    <| c |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c\
    \ |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n\
    : It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| c |>\n: It\
    \ works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$str = '<<><>>';\n$str = preg_replace('/<([^>]*)>/', '<$1>', $str);\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with `<<><>>`\n\
    <|/ c |>\n<| c |>\n: It works for me in PHP 5.3.8. Try it with `<<><>>`\n<|/ c\
    \ |>\n<| c |>\n: It works for me in PHP 5.3.8. Try it with `", "  $brackets =\
    \ explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  $brackets\
    \ = array_filter($brackets, function($item) {\n    return $item != \">\";\n  });\n\
    \  return count($brackets) == count(array_unique($brackets));\n}\n", "    $brackets\
    \ = preg_replace('/<\\/?[^<>]+>/', '', $brackets);\n    $brackets = preg_replace('/<[^<>]+>$/',\
    \ '', $brackets);\n    return $brackets === '<>';\n}\n</code>\n<|/ a tags=php,regex,preg-match\
    \ |>\n<| c |>\nThanks, this works great! I added a little bit of code to make\
    \ it more robust to different types of brackets.\n<|/ c |>\n<| c |>\nI added a\
    \ version that works with nested brackets.\n<|/ c |>\n<| a tags=php,regex,preg-match\
    \ |>\n<code>\n<?php\n$string = '( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (\
    \ ( ( ( ( ( ( ( ( (", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($key > 0) {\n      if ($brackets[$key - 1] !=\
    \ $value) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !=\
    \ \">\";\n  });\n  return count($brackets) == 0;\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    $brackets = array_reverse($brackets);\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value !== \"<\" && $value\
    \ !== \">\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach\
    \ ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n", "  $opening_brackets = preg_split('/[<>]+/', $brackets);\n\
    \  $closing_brackets = preg_split('/[<>]+/', $brackets);\n  $opening_brackets\
    \ = array_filter($opening_brackets);\n  $closing_brackets = array_filter($closing_brackets);\n\
    \  return count($opening_brackets) == count($closing_brackets);\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  $closing_brackets = array_flip($brackets);\n  foreach ($opening_brackets as\
    \ $key => $value) {\n    if (!isset($closing_brackets[$value])) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n \
    \   $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>+>/', '', $brackets);\n",
  "  $brackets = explode(\"<<>>\", $brackets);\n  foreach ($brackets as $key => $bracket)\
    \ {\n    if ($bracket != \"<\" && $bracket != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"<\")\
    \ {\n      $opening_brackets[] = \"<\";\n    } else if ($bracket == \">\") {\n\
    \      $closing_brackets[] = \">\";\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "    $brackets = explode(\"<<>>\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    foreach ($brackets as $i => $b)\
    \ {\n        if ($b == \"<\") {\n            $brackets[$i] = \">\";\n        }\n\
    \    }\n    return implode(\"<<>>\", $brackets);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$string = \"<><>\";\n$array = explode(\"<>\"\
    , $string);\n$array = array_reverse($array);\n$string = implode(\"<>\", $array);\n\
    echo $string;", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \"\";\n  });\n  return count($brackets) === 0;\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $i => $b) {\n    if ($brackets[$i] == \">\") {\n      if ($i < count($brackets)\
    \ - 1) {\n        $brackets[$i + 1] = \"<\";\n      }\n      else {\n        $brackets[$i]\
    \ = \"<\";\n      }\n    }\n  }\n  return implode(array_reverse($brackets));\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !=\
    \ \">\";\n  });\n  return count($brackets) == 0;\n}\n", "  $brackets = preg_replace('/<\\\
    /?[^<>]+>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]+>/', '', $brackets);\n\
    \  return $brackets === '<>';\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"<\") {\n     \
    \ if ($brackets[$key + 1] == \"<\") {\n        $brackets[$key + 1] = \"\";\n \
    \     }\n    }\n  }\n  return implode(\">\", $brackets) == $brackets;\n}\n", " \
    \   $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets =\
    \ preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/<([^>]*)>/', '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/',\
    \ '$1', $brackets);\n    $brackets = preg_replace('/<([^>]*)>/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/<", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  return $brackets === '<>';\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return $brackets ==\
    \ array_reverse($brackets);\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  $brackets = array_reverse($brackets);\n  foreach ($brackets as $key => $value)\
    \ {\n    if ($value !== \"<\") {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $opening_brackets = preg_split('/[\\<\\>]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\<\\>]/', $brackets);\n  return array_diff($opening_brackets,\
    \ $closing_brackets);\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_filter($brackets,\
    \ function($el) {\n        return $el != \">\";\n    });\n    return count($brackets)\
    \ == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value == \"<\") {\n      $brackets[$key] = \"\
    >\";\n    }\n  }\n  return $brackets == array_reverse($brackets);\n}\n", "  $brackets\
    \ = preg_replace(\"/<\\/?[^<>]+>/\", \"\", $brackets);\n  return preg_match(\"\
    /<[^<>]+>$/\", $brackets);\n}\n", "    $brackets = explode(\"<\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_filter($brackets,\
    \ function($item) {\n        return $item !== \"\";\n    });\n    $brackets =\
    \ array_reverse($brackets);\n    return count($brackets) == 0;\n}\n", "  $brackets\
    \ = explode(\"<\", $brackets);\n  foreach ($brackets as $key => $value) {\n  \
    \  if ($value != \"<\") {\n      $brackets[$key] = \"</$value>\";\n    }\n  }\n\
    \  return implode(\"\", array_reverse($brackets));\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $key => $value) {\n    if ($value ==\
    \ \"<\") {\n      $brackets[$key] = \">\";\n    }\n  }\n  return $brackets ==\
    \ array_reverse($brackets);\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n", "  $brackets = explode(\"<<\"\
    , $brackets);\n  foreach ($brackets as $key => $bracket) {\n    if ($bracket !=\
    \ \">>\") {\n      if ($key > 0) {\n        if ($brackets[$key - 1] != $bracket)\
    \ {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $brackets = explode(\"\
    <\", $brackets);\n  foreach ($brackets as $i => $b) {\n    if ($i > 0) {\n   \
    \   if ($brackets[$i - 1] != $b) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  $brackets\
    \ = array_reverse($brackets);\n  foreach ($brackets as $b) {\n    if ($b !== \"\
    <\") {\n      return false;\n    }\n  }\n  return true;\n}\n", "  $brackets =\
    \ explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach\
    \ ($brackets as $b) {\n    if ($b !== \"<\" && $b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    $opening_brackets = array();\n    $closing_brackets\
    \ = array();\n    $brackets = explode(\"<<>>\", $brackets);\n    foreach ($brackets\
    \ as $bracket) {\n        $opening_brackets[] = substr($bracket, 0, 1);\n    \
    \    $closing_brackets[] = substr($bracket, -1);\n    }\n    return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a tags=php,regex,preg-match-all |>\n\
    <| c |>\nThanks for your answer. Unfortunately this doesn't work for me. I've\
    \ added some more examples to my original question.\n<|/ c |>\n<| c |>\n: I updated\
    \ my answer to include a solution that should work for your new examples.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work for me.\
    \ I've added some more examples to my original question.\n<|/ c |>\n<| c |>\n\
    : I updated my answer to include a solution that should work for your new examples.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work for\
    \ me. I've added some more examples to my original question.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThis should work:\n<code>\npreg_match_all('/\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\<\\\
    <\\<\\<\\<", "    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n\
    \    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets\
    \ = preg_replace(\"/<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"\
    /<([^>]+)>/\", \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\"\
    , \"<$1>\", $brackets);\n    $brackets = preg_replace(\"/<([^>]+)>/\", \"<$1>\"\
    , $brackets);\n    $brackets = preg_replace(\"/<", "  $opening_brackets = explode(\"\
    <\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n  foreach\
    \ ($opening_brackets as $key => $value) {\n    if ($value !== $closing_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"\
    <\", $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array(\">\"));\n    return count(array_diff($brackets, array_unique(array_map(\"\
    trim\", $brackets)))) === 0;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if you have multiple nested brackets such as `
  "  $open_brackets = array();\n  $closed_brackets = array();\n  foreach ($brackets\
    \ as $b) {\n    if ($b == '<') {\n      $open_brackets[] = $b;\n    } else if\
    \ ($b == '>') {\n      $closed_brackets[] = $b;\n    }\n  }\n  return count($open_brackets)\
    \ == count($closed_brackets);\n}\n", "  $brackets = preg_replace('/<\\/?[^<>]+>/',\
    \ '', $brackets);\n  return preg_match_all('/<[^<>]+>/', $brackets);\n}\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work when there are multiple\
    \ nested brackets.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it out and see for\
    \ yourself.\n<|/ c |>\n<| c |>\n: It works fine for me. Try it out yourself.\n\
    <|/ c |>\n<| c |>\n: It works fine for me. Try it out yourself.\n<|/ c |>\n<|\
    \ c |>\n: It works fine for me. Try it out yourself.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string
  "  $brackets = explode(\"<\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = explode(\"<\", $brackets);\n\
    \  $closing_brackets = explode(\">\", $brackets);\n  foreach ($opening_brackets\
    \ as $opening_bracket) {\n    if (!array_search($opening_bracket, $closing_brackets))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $brackets = preg_replace('/<+>/', '', $brackets);\n   \
    \ $brackets = preg_replace('/<+>/', '', $brackets);\n    $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n    $bracket", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \">\") {\n     \
    \ return false;\n    }\n    unset($brackets[$key]);\n  }\n  return count($brackets)\
    \ == 0;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets\
    \ as $i => $b) {\n    if ($i > 0) {\n      if ($brackets[$i - 1] != $b) {\n  \
    \      return false;\n      }\n    }\n  }\n  return true;\n}\n", "  $brackets\
    \ = preg_replace('/<\\/?[^<>]*>/', '', $brackets);\n  $brackets = preg_replace('/<[^<>]*>$/',\
    \ '', $brackets);\n  return $brackets === '<>';\n}\n", "  $brackets = explode(\"\
    <\", $brackets);\n  $brackets = array_reverse($brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($value != \"<\") {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "    $brackets = explode(\"<\", $brackets);\n    $brackets\
    \ = array_reverse($brackets);\n    foreach ($brackets as $key => $bracket) {\n\
    \        if ($bracket != \">\") {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n\
    \  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $bracket",
  "  $opening_brackets = preg_split('/[<>]+/', $brackets);\n  $closing_brackets =\
    \ preg_split('/[<>]+/', $brackets);\n  foreach ($opening_brackets as $key => $value)\
    \ {\n    if ($value !== $closing_brackets[$key]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($key > 0) {\n      if ($brackets[$key\
    \ - 1] != $value) {\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = explode(\"<\", $brackets);\n  foreach ($brackets as $i =>\
    \ $b) {\n    if ($i < count($brackets) - 1) {\n      if ($brackets[$i + 1] !=\
    \ \">\") {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>+>/',\
    \ '', $brackets);\n", "  $open_brackets = explode(\"<\", $brackets);\n  $closed_brackets\
    \ = explode(\">\", $brackets);\n  foreach ($open_brackets as $key => $value) {\n\
    \    if ($open_brackets[$key+1] != $value) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "    $brackets = explode(\"<\", $brackets);\n    foreach\
    \ ($brackets as $b) {\n        if ($b !== \">\") {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<\", $brackets);\n  foreach\
    \ ($brackets as $key => $value) {\n    if ($value != \">\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"<\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value != \">\") {\n     \
    \ return false;\n    }\n  }\n  return true;\n}\n", "  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $bracket", "  $brackets = explode(\"<<>>\", $brackets);\n\
    \  $brackets = array_map(\"trim\", $brackets);\n  foreach ($brackets as $i =>\
    \ $b) {\n    if ($b === \">\") {\n      $brackets[$i] = \"<\";\n    }\n  }\n \
    \ return implode(\"<<>>\", $brackets) === $brackets;\n}\n", "  $brackets = preg_replace(\"\
    /<\\/?[^<>]+>/\", \"\", $brackets);\n  $brackets = preg_replace(\"/<[^<>]+>/\"\
    , \"\", $brackets);\n  return $brackets == \"<>\";\n}", "  $opening_brackets =\
    \ explode(\"<\", $brackets);\n  $closing_brackets = explode(\">\", $brackets);\n\
    \  $opening_brackets = array_filter($opening_brackets);\n  $closing_brackets =\
    \ array_filter($closing_brackets);\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n", "  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $brackets = preg_replace('/<+>/',\
    \ '', $brackets);\n  $brackets = preg_replace('/<+>/', '', $brackets);\n  $brackets\
    \ = preg_replace('/<+>/', '', $brackets);\n  $bracket", "  $opening_brackets =\
    \ array();\n  $closing_brackets = array();\n  foreach ($brackets as $bracket)\
    \ {\n    if ($bracket == '<') {\n      $opening_brackets[] = $bracket;\n    }\
    \ else if ($bracket == '>') {\n      $closing_brackets[] = $bracket;\n    }\n\
    \  }\n  return count($opening_brackets) == count($closing_brackets);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
