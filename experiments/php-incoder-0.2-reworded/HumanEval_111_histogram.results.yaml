language: php
name: HumanEval_111_histogram
results:
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfo5bzigt.php:32\n\
    Stack trace:\n#0 /tmp/tmpfo5bzigt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfo5bzigt.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ work if you have multiple letters with the same number of occurrences.\n<|/\
    \ c |>\n<| c |>\n: It does work. Try it out. `histogram(\"a b c a b\")` returns\
    \ `array(\"a\" => 2, \"b\" => 2)`.\n<|/ c |>\n<| c |>\n: It returns `array(\"\
    a\" => 2, \"b\" => 2)` because `histogram(\"a b b b a\")` returns `array(\"a\"\
    \ => 2, \"b\" => 2)`.\n<|/ c |>\n<| c |>\n: I added a version that works with\
    \ multiple letters with the same number of occurrences.\n<|/ c |>\n<| c |>\n:\
    \ I added a version that works with multiple letters with the same number of occurrences.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"a\");\n$result = array();\n$letters = array();\nforeach ($array as\
    \ $letter) {\n    if (!isset($letters[$letter])) {\n        $letters[$letter]\
    \ = 1;\n    } else {\n        $letters[$letter]++;\n    }\n}\narsort($letters);\n\
    foreach ($letters as $letter => $count) {\n    $result[$letter] = $count;\n}\n\
    print_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work\
    \ if you have multiple letters with the same number of occurrences.\n<|/ c |>\n\
    <| c |>\n: It does work. Try it out. `histogram(\"a b c a b\")` returns `array(\"\
    a\" => 2, \"b\" => 2)`.\n<|/ c |>\n<| c |>\n: It returns `array(\"a\" => 2, \"\
    b\" => 2)` because `histogram(\"a b b b a\")` returns `array(\"a\" => 2, \"b\"\
    \ => 2)`.\n<|/ c |>\n<| c |>\n: I added a version that works with multiple letters\
    \ with the same number of occurrences.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array\
    \ = array(\"a\", \"b\", \"c\", \"a\", \"\nfunction candidate(...$args) {\n   \
    \ return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6cwwx2fh.php on line 25

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = preg_split('/\\s+/',\
    \ $test);\n    $histogram = array();\n    foreach ($letters as $letter) {\n  \
    \      if (isset($histogram[$letter])) {\n            $histogram[$letter]++;\n\
    \        } else {\n            $histogram[$letter] = 1;\n        }\n    }\n  \
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2syrndc.php:35\n\
    Stack trace:\n#0 /tmp/tmpc2syrndc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpc2syrndc.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65juamfe.php:31\n\
    Stack trace:\n#0 /tmp/tmp65juamfe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp65juamfe.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $letters_count = array();\n  foreach ($letters as $letter) {\n  \
    \  $letters_count[$letter] = isset($letters_count[$letter]) ? $letters_count[$letter]\
    \ + 1 : 1;\n  }\n  arsort($letters_count);\n  $letters_count = array_keys($letters_count);\n\
    \  return $letters_count;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2rm1td2.php:32\n\
    Stack trace:\n#0 /tmp/tmpw2rm1td2.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpw2rm1td2.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bvxh3no.php:31\n\
    Stack trace:\n#0 /tmp/tmp1bvxh3no.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1bvxh3no.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $counts = array_count_values($letters);\n  arsort($counts);\n  $letters\
    \ = array_keys($counts);\n  return $letters;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n7k5_8g.php:29\n\
    Stack trace:\n#0 /tmp/tmp1n7k5_8g.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1n7k5_8g.php\
    \ on line 29\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = 'a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c \nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph6hq9qs2.php on line 24

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks so\
    \ much for this. I really appreciate it. I will give it a try and let you know\
    \ how it goes.\n<|/ c |>\n<| c |>\nI added a couple more test cases and it seems\
    \ to work perfectly. Thanks so much for this. I really appreciate it.\n<|/ c |>\n\
    <| c |>\nI added a couple more test cases and it seems to work perfectly. Thanks\
    \ so much for this. I really appreciate it.\n<|/ c |>\n<| c |>\nI added a couple\
    \ more test cases and it seems to work perfectly. Thanks so much for this. I really\
    \ appreciate it.\n<|/ c |>\n<| c |>\nI added a couple more test cases and it seems\
    \ to work perfectly. Thanks so much for this. I really appreciate it.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$string = \"a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c \nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0afblg72.php on line 25

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 1;\n    } else {\n      $histogram[$letter]++;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13xw5bdx.php:34\n\
    Stack trace:\n#0 /tmp/tmp13xw5bdx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp13xw5bdx.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $counts = array_count_values($letters);\n  arsort($counts);\n  $result = array();\n\
    \  foreach ($counts as $letter => $count) {\n    $result[$letter] = $count;\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfpefkl6s.php on line 26

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp477687mv.php:33\n\
    Stack trace:\n#0 /tmp/tmp477687mv.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp477687mv.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bvxh3no.php:31\n\
    Stack trace:\n#0 /tmp/tmp1bvxh3no.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1bvxh3no.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk5w4_ex.php:30\n\
    Stack trace:\n#0 /tmp/tmpqk5w4_ex.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqk5w4_ex.php\
    \ on line 30\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsibok97f.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $histogram = array();\n  foreach ($letters as $letter) {\n    if\
    \ (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else {\n\
    \      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdu08o1v.php:35\n\
    Stack trace:\n#0 /tmp/tmpzdu08o1v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzdu08o1v.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqafr891e.php:32\n\
    Stack trace:\n#0 /tmp/tmpqafr891e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqafr891e.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $counts = array_count_values($letters);\n  arsort($counts);\n  $result\
    \ = array();\n  foreach ($counts as $letter => $count) {\n    $result[$letter]\
    \ = $count;\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsr_olafz.php on line 26

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk5w4_ex.php:30\n\
    Stack trace:\n#0 /tmp/tmpqk5w4_ex.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqk5w4_ex.php\
    \ on line 30\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dhq02w.php:34\n\
    Stack trace:\n#0 /tmp/tmpw5dhq02w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw5dhq02w.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bvxh3no.php:31\n\
    Stack trace:\n#0 /tmp/tmp1bvxh3no.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1bvxh3no.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqafr891e.php:32\n\
    Stack trace:\n#0 /tmp/tmpqafr891e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqafr891e.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 1;\n    } else {\n      $histogram[$letter]++;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppa380fkl.php:35\n\
    Stack trace:\n#0 /tmp/tmppa380fkl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppa380fkl.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $counts = array_count_values($letters);\n  $max = $counts[0];\n  $letter =\
    \ array();\n  foreach ($counts as $letter => $count) {\n    if ($count > $max)\
    \ {\n      $max = $count;\n      $letter = $letter;\n    }\n  }\n  return array($letter\
    \ => $max);\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpconi1d6j.php:35\n\
    Stack trace:\n#0 /tmp/tmpconi1d6j.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpconi1d6j.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $tests\
    \ = explode(' ', $test);\n  foreach ($tests as $test) {\n    $letter = strtolower($test);\n\
    \    if (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else\
    \ {\n      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kggirrh.php:36\n\
    Stack trace:\n#0 /tmp/tmp8kggirrh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8kggirrh.php\
    \ on line 36\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcslb3kws.php:34\n\
    Stack trace:\n#0 /tmp/tmpcslb3kws.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcslb3kws.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb33ln58r.php:30\n\
    Stack trace:\n#0 /tmp/tmpb33ln58r.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb33ln58r.php\
    \ on line 30\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 0;\n    }\n    $histogram[$letter]++;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbm0wd14.php:33\n\
    Stack trace:\n#0 /tmp/tmphbm0wd14.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphbm0wd14.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $letters_count = array_count_values($letters);\n  arsort($letters_count);\n\
    \  $letters_count = array_slice($letters_count, 0, 1);\n  $letters = array_keys($letters_count);\n\
    \  return $letters;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array(\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp04apyvwg.php on line 24

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bvxh3no.php:31\n\
    Stack trace:\n#0 /tmp/tmp1bvxh3no.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1bvxh3no.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $histogram = array();\n  foreach ($letters as $letter) {\n    if\
    \ (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else {\n\
    \      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdu08o1v.php:35\n\
    Stack trace:\n#0 /tmp/tmpzdu08o1v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzdu08o1v.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk5w4_ex.php:30\n\
    Stack trace:\n#0 /tmp/tmpqk5w4_ex.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqk5w4_ex.php\
    \ on line 30\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dhq02w.php:34\n\
    Stack trace:\n#0 /tmp/tmpw5dhq02w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw5dhq02w.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 0;\n    }\n    $histogram[$letter]++;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd9bmvi9i.php:34\n\
    Stack trace:\n#0 /tmp/tmpd9bmvi9i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd9bmvi9i.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = array_count_values(str_split($test));\n\
    \  arsort($letters);\n  $letters = array_keys($letters);\n  $letters = array_slice($letters,\
    \ 0, 1);\n  return $letters;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n$string = \"a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c \nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpr57xdzf9.php on line 23

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $histogram = array();\n  foreach ($letters as $letter) {\n    if\
    \ (!isset($histogram[$letter])) {\n      $histogram[$letter] = 0;\n    }\n   \
    \ $histogram[$letter]++;\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5e6do70.php:34\n\
    Stack trace:\n#0 /tmp/tmpa5e6do70.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpa5e6do70.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqafr891e.php:32\n\
    Stack trace:\n#0 /tmp/tmpqafr891e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqafr891e.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//u', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxn_qz7xr.php:34\n\
    Stack trace:\n#0 /tmp/tmpxn_qz7xr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxn_qz7xr.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nThis doesn't work if there are repeated letters in the string. For example:\
    \ `histogram(\"a b c a b\")` returns `array(\"a\" => 2, \"b\" => 2)` instead of\
    \ `array(\"a\" => 2, \"b\" => 2, \"c\" => 1)`.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works with repeated letters.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string\
    \ = 'a b c a b';\n$array = explode(' ', $string);\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_slice($array, 0, 1);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are repeated letters in the string.\
    \ For example: `histogram(\"a b c a b\")` returns `array(\"a\" => 2, \"b\" =>\
    \ 2)` instead of `array(\"a\" => 2, \"b\" => 2, \"c\" => 1)`.\n<|/ c |>\n<| a\
    \ tags=php,arrays,sorting |>\n<code>\n$string = 'a b c a b';\n$array = explode('\
    \ ', $string);\n$array = array_count_values($array);\narsort($array);\n$array\
    \ = array_slice($array, 0, 1);\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    $string = 'a b c a b';\n$array = explode(' ', $string);\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_slice($array, 0, 1);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ dscore=2 |>\n<| a tags=php,arrays,sorting |>\n<code>\n$string = 'a b c a b';\n\
    $array = explode(' ', $string);\n$array = array_count_values($array);\narsort($array);\n\
    $array = array_slice($array, 0, 1);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$string = 'a b c a b';\n$array = explode(' ', $string);\n$\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmj5dn7w6.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65juamfe.php:31\n\
    Stack trace:\n#0 /tmp/tmp65juamfe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp65juamfe.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $tests\
    \ = explode(' ', $test);\n  foreach ($tests as $test) {\n    $letter = strtolower($test);\n\
    \    if (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else\
    \ {\n      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kggirrh.php:36\n\
    Stack trace:\n#0 /tmp/tmp8kggirrh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8kggirrh.php\
    \ on line 36\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqafr891e.php:32\n\
    Stack trace:\n#0 /tmp/tmpqafr891e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqafr891e.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//u', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26aemvqs.php:31\n\
    Stack trace:\n#0 /tmp/tmp26aemvqs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp26aemvqs.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65juamfe.php:31\n\
    Stack trace:\n#0 /tmp/tmp65juamfe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp65juamfe.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzs682vnk.php:31\n\
    Stack trace:\n#0 /tmp/tmpzs682vnk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzs682vnk.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = array_count_values(str_split($test));\n\
    \  arsort($letters);\n  $result = array();\n  foreach ($letters as $letter =>\
    \ $count) {\n    $result[$letter] = $count;\n  }\n  return $result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like your answer but I think it would be better to use a\
    \ `foreach` loop instead of `array_count_values` since it only counts unique values.\n\
    <|/ c |>\n<| c |>\n: I agree, `array_count_values` would be better. I'll edit\
    \ my answer.\n<|/ c |>\n<| c |>\n: I added a version using `foreach` instead of\
    \ `array_count_values`.\n<|/ c |>\n<| c |>\n: I added a version using `foreach`\
    \ instead of `array_count_values`.\n<|/ c |>\n<| c |>\n: I added a version using\
    \ `foreach` instead of `array_count_values`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    $test = \"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ \nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb33giuak.php on line 25

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqafr891e.php:32\n\
    Stack trace:\n#0 /tmp/tmpqafr891e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqafr891e.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65juamfe.php:31\n\
    Stack trace:\n#0 /tmp/tmp65juamfe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp65juamfe.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqafr891e.php:32\n\
    Stack trace:\n#0 /tmp/tmpqafr891e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqafr891e.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzs682vnk.php:31\n\
    Stack trace:\n#0 /tmp/tmpzs682vnk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzs682vnk.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $histogram = array();\n  foreach ($letters as $letter) {\n    if\
    \ (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else {\n\
    \      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdu08o1v.php:35\n\
    Stack trace:\n#0 /tmp/tmpzdu08o1v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzdu08o1v.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = array_count_values(str_split($test));\n\
    \  $letters = array_filter($letters);\n  arsort($letters);\n  $letters = array_keys($letters);\n\
    \  $letters = array_slice($letters, 0, 1);\n  return $letters;\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp34c51r8d.php on line 24

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = array_count_values(str_split($test));\n\
    \  arsort($letters);\n  $letters = array_slice($letters, 0, 1);\n  return $letters;\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `histogram(\"a b c\
    \ a b\")` returns `array(\"a\" => 2, \"b\" => 2)` instead of `array(\"a\" => 2,\
    \ \"b\" => 4)`.\n<|/ c |>\n<| c |>\n: I fixed the bug, thanks. I didn't test the\
    \ code before posting it.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    $test = \"a b c a b\";\n$letters = array_count_values(str_split($test));\narsort($letters);\n\
    $letters = array_slice($letters, 0, 1);\nprint_r($letters);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `histogram(\"a b c a b\")` returns `array(\"\
    a\" => 2, \"b\" => 2)` instead of `array(\"a\" => 2, \"b\" => 4)`.\n<|/ c |>\n\
    <| a tags=php,arrays,sorting |>\n<code>\n$test = \"a b c a b\";\n$letters = array_count_values(str_split($test));\n\
    arsort($letters);\n$letters = array_slice($letters, 0, 1);\nprint_r($letters);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `histogram(\"a b c a b\"\
    )` returns `array(\"a\" => 2, \"b\" => 2)` instead of `array(\"a\" => 2, \"b\"\
    \ => 4)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$test = \"a b c a b\";\n$letters\
    \ = array_count_values(str_split($test));\narsort($letters);\n$letters = array_slice($letters,\
    \ 0, 1);\nprint_r($letters);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c\
    \ |>\nThis doesn't work. `histogram(\"a b c a b\")` returns `array(\"a\" => 2,\
    \ \"b\" => 2)` instead of `array(\"a\" => 2, \"b\" => 4)`.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$test = \"a b c a b\";\n$letters = array_count_values(str_split($test\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp15strlup.php on line 22

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqafr891e.php:32\n\
    Stack trace:\n#0 /tmp/tmpqafr891e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqafr891e.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $tests\
    \ = explode(' ', $test);\n  foreach ($tests as $test) {\n    $letter = strtolower($test);\n\
    \    if (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else\
    \ {\n      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kggirrh.php:36\n\
    Stack trace:\n#0 /tmp/tmp8kggirrh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8kggirrh.php\
    \ on line 36\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcslb3kws.php:34\n\
    Stack trace:\n#0 /tmp/tmpcslb3kws.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcslb3kws.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = array_count_values(str_split($test));\n\
    \  arsort($letters);\n  $letters = array_slice($letters, 0, 1);\n  return $letters;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtcu1ie0.php:28\n\
    Stack trace:\n#0 /tmp/tmpbtcu1ie0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbtcu1ie0.php\
    \ on line 28\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dhq02w.php:34\n\
    Stack trace:\n#0 /tmp/tmpw5dhq02w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw5dhq02w.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 0;\n    }\n    $histogram[$letter]++;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbm0wd14.php:33\n\
    Stack trace:\n#0 /tmp/tmphbm0wd14.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphbm0wd14.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Your code is working fine but i need to use only php functions\
    \ not any other language functions. Can you please help me to solve this problem\
    \ using php functions?\n<|/ c |>\n<| c |>\nI added a PHP solution to my answer.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf338yy9_.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. I'm sorry but I don't understand how to use this code. Can\
    \ you please explain it a little bit more?\n<|/ c |>\n<| c |>\nI added some comments\
    \ to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm\
    \ sorry but I don't understand how to use this code. Can you please explain it\
    \ a little bit more?\n<|/ c |>\n<| c |>\nI added some comments to my answer. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry but I don't\
    \ understand how to use this code. Can you please explain it a little bit more?\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array = array(\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp88pwvg3k.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nI like your solution, however it only works with strings. I need a solution\
    \ that works with arrays of any type.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works for any type of array.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$array\
    \ = array(\"a\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\", \"a\");\n$result =\
    \ array();\nforeach ($array as $letter) {\n    if (!isset($result[$letter])) {\n\
    \        $result[$letter] = 1;\n    } else {\n        $result[$letter]++;\n  \
    \  }\n}\narsort($result);\n$result = array_slice($result, 0, 1);\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| c |>\nI like your solution, however it only\
    \ works with strings. I need a solution that works with arrays of any type.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"a\"\
    , \"b\", \"b\", \"b\", \"a\");\n$result = array();\nforeach ($array as $letter)\
    \ {\n    if (!isset($result[$letter])) {\n        $result[$letter] = 1;\n    }\
    \ else {\n        $result[$letter]++;\n    }\n}\narsort($result);\n$result = array_slice($result,\
    \ 0, 1);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\",\
    \ \"a\");\n$result = array();\nforeach ($array as $letter) {\n    if (!isset($result[$letter]))\
    \ {\n        $result[$letter] = 1;\n    } else {\n        $result[$letter]++;\n\
    \    }\n}\narsort($result);\n$result = array_slice($result, 0, 1);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\"\
    a\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\", \"a\");\n$result = array();\nforeach\
    \ ($array as $letter) {\n    if (!isset($result[$letter])) {\n        $result[$letter]\
    \ = 1;\n    } else {\n        $result[$letter]++;\n    }\n}\nar\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnhpbvgu9.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bvxh3no.php:31\n\
    Stack trace:\n#0 /tmp/tmp1bvxh3no.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1bvxh3no.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk5w4_ex.php:30\n\
    Stack trace:\n#0 /tmp/tmpqk5w4_ex.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqk5w4_ex.php\
    \ on line 30\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = str_split($test);\n\
    \    $histogram = array();\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztu4r8cu.php:34\n\
    Stack trace:\n#0 /tmp/tmpztu4r8cu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpztu4r8cu.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 0;\n    }\n    $histogram[$letter]++;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcx8zcn5.php:33\n\
    Stack trace:\n#0 /tmp/tmptcx8zcn5.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptcx8zcn5.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dhq02w.php:34\n\
    Stack trace:\n#0 /tmp/tmpw5dhq02w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw5dhq02w.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 1;\n    } else {\n      $histogram[$letter]++;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13xw5bdx.php:34\n\
    Stack trace:\n#0 /tmp/tmp13xw5bdx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp13xw5bdx.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcslb3kws.php:34\n\
    Stack trace:\n#0 /tmp/tmpcslb3kws.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcslb3kws.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array(\"a\", \"b\", \"c\", \"a\", \"b\", \"a\", \"b\", \"a\"\
    );\n$result = array();\n$letters = array();\nforeach ($array as $letter) {\n \
    \   if (!isset($letters[$letter])) {\n        $letters[$letter] = 1;\n    } else\
    \ {\n        $letters[$letter]++;\n    }\n}\narsort($letters);\nforeach ($letters\
    \ as $letter => $count) {\n    $result[] = $letter;\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\", \"b\"\
    , \"c\", \"a\", \"b\", \"a\", \"b\", \"a\");\n$result = array();\n$letters = array();\n\
    foreach ($array as $letter) {\n    if (!isset($letters[$letter])) {\n        $letters[$letter]\
    \ = 1;\n    } else {\n        $letters[$letter]++;\n    }\n}\narsort($letters);\n\
    foreach ($letters as $letter => $count) {\n    $result[] = $letter;\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\", \"\
    b\", \"c\", \"a\", \"b\", \"a\", \"b\", \"a\");\n$result = array();\n$letters\
    \ = array();\nforeach ($array as $letter) {\n    if (!isset($letters[$letter]))\
    \ {\n        $letters[$letter] = 1;\n    } else {\n        $letters[$letter]++;\n\
    \    }\n}\narsort($letters);\nforeach ($letters as $letter => $count) {\n    $result[]\
    \ = $letter;\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"a\", \"b\", \"a\", \"b\",\
    \ \"a\");\n$result = array();\n$letters = array();\nforeach ($array as $letter)\
    \ {\n    if (!isset($letters[$letter])) {\n        $letters[$letter] = 1;\n  \
    \  } else {\n        $letters[$letter]++;\n    }\n}\narsort($letters);\nforeach\
    \ ($letters as $letter => $count\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5f257n8s.php on line 25

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $counts = array_count_values($letters);\n  arsort($counts);\n  $result = array();\n\
    \  foreach ($counts as $letter => $count) {\n    $result[$letter] = $count;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzs0_obf9.php:32\n\
    Stack trace:\n#0 /tmp/tmpzs0_obf9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzs0_obf9.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = array_count_values(str_split($test));\n\
    \  arsort($letters);\n  $letters = array_slice($letters, 0, 1);\n  return $letters;\n\
    }\n</code>\n<|/ a tags=php,arrays,string |>\n<| c |>\nThis doesn't work if there\
    \ are multiple letters with the same number of occurrences.\n<|/ c |>\n<| c |>\n\
    : I added a version that does work. Thanks for pointing that out.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n$string = \"a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b \nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6nl8r4yt.php on line 22

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $tests\
    \ = explode(' ', $test);\n    foreach ($tests as $test) {\n        $letter = strtolower($test);\n\
    \        if (isset($histogram[$letter])) {\n            $histogram[$letter]++;\n\
    \        } else {\n            $histogram[$letter] = 1;\n        }\n    }\n  \
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcgt2_nv.php:36\n\
    Stack trace:\n#0 /tmp/tmpdcgt2_nv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdcgt2_nv.php\
    \ on line 36\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 0;\n    }\n    $histogram[$letter]++;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbm0wd14.php:33\n\
    Stack trace:\n#0 /tmp/tmphbm0wd14.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphbm0wd14.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk5w4_ex.php:30\n\
    Stack trace:\n#0 /tmp/tmpqk5w4_ex.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqk5w4_ex.php\
    \ on line 30\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 0;\n    }\n    $histogram[$letter]++;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbm0wd14.php:33\n\
    Stack trace:\n#0 /tmp/tmphbm0wd14.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphbm0wd14.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $tests\
    \ = explode(' ', $test);\n  foreach ($tests as $test) {\n    $letter = strtolower($test);\n\
    \    if (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else\
    \ {\n      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kggirrh.php:36\n\
    Stack trace:\n#0 /tmp/tmp8kggirrh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8kggirrh.php\
    \ on line 36\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk5w4_ex.php:30\n\
    Stack trace:\n#0 /tmp/tmpqk5w4_ex.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqk5w4_ex.php\
    \ on line 30\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $counts = array_count_values($letters);\n  arsort($counts);\n  $result\
    \ = array();\n  foreach ($counts as $letter => $count) {\n    $result[$letter]\
    \ = $count;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprv1y5ct8.php:33\n\
    Stack trace:\n#0 /tmp/tmprv1y5ct8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprv1y5ct8.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $tests\
    \ = explode(' ', $test);\n    foreach ($tests as $test) {\n        $letter = strtolower($test);\n\
    \        if (isset($histogram[$letter])) {\n            $histogram[$letter]++;\n\
    \        } else {\n            $histogram[$letter] = 1;\n        }\n    }\n  \
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcgt2_nv.php:36\n\
    Stack trace:\n#0 /tmp/tmpdcgt2_nv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdcgt2_nv.php\
    \ on line 36\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcslb3kws.php:34\n\
    Stack trace:\n#0 /tmp/tmpcslb3kws.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcslb3kws.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqk5w4_ex.php:30\n\
    Stack trace:\n#0 /tmp/tmpqk5w4_ex.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqk5w4_ex.php\
    \ on line 30\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = preg_split('/\\s+/', $test);\n    foreach ($letters as $letter) {\n      \
    \  if (isset($histogram[$letter])) {\n            $histogram[$letter]++;\n   \
    \     } else {\n            $histogram[$letter] = 1;\n        }\n    }\n    return\
    \ $histogram;\n}\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I believe\
    \ it can be improved by using array_count_values() instead of counting the letters\
    \ yourself.\n<|/ c |>\n<| c |>\n: Yes, it can be improved. But I wanted to keep\
    \ it simple and understandable. :)\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I believe it can be improved by using array_count_values() instead of counting\
    \ the letters yourself.\n<|/ c |>\n<| c |>\n: Yes, it can be improved. But I wanted\
    \ to keep it simple and understandable. :)\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"a\",\"b\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpim11s08c.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = str_split($test);\n\
    \    $histogram = array();\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztu4r8cu.php:34\n\
    Stack trace:\n#0 /tmp/tmpztu4r8cu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpztu4r8cu.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcslb3kws.php:34\n\
    Stack trace:\n#0 /tmp/tmpcslb3kws.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcslb3kws.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n\
    <| c |>\nThis doesn't work if the string contains repeated letters.\n<|/ c |>\n\
    <| c |>\n: It does. Try it out and see.\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it out and see.\n<|/ c |>\n<| c |>\n: It does work. Try it out and see.\n<|/\
    \ c |>\n<| c |>\n: It does work. Try it out and see.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$string = \"a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a \nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqbjvrb9m.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = 0;\n  }\n  foreach ($letters as $letter) {\n    $histogram[$letter]++;\n \
    \ }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6frr6w1h.php:34\n\
    Stack trace:\n#0 /tmp/tmp6frr6w1h.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6frr6w1h.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  arsort($histogram);\n  return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrdagpb1.php:35\n\
    Stack trace:\n#0 /tmp/tmptrdagpb1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptrdagpb1.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays,string |>\n<| a |>\n\
    <code>\n<?php\n$string = \"a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a \nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplyq6omz0.php on line 25

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    I like the use of array_count_values() here, but I believe it only works on PHP\
    \ 5.5+\n<|/ c |>\n<| c |>\n: Yes, it only works on PHP 5.5+, but I believe it\
    \ can be easily adapted to work on PHP 5.3+ (see my answer)\n<|/ c |>\n<| c |>\n\
    : I added a solution that works on PHP 5.3+ (see my answer)\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"a\", \"b\", \"a\", \"b\",\
    \ \"a\");\n$letters = array();\n$counts = array();\nforeach ($array as $letter)\
    \ {\n    $letters[] = $letter;\n    $counts[$letter] = isset($counts[$letter])\
    \ ? $counts[$letter] + 1 : 1;\n}\narsort($counts);\n$result = array();\nforeach\
    \ ($counts as $letter => $count) {\n    $result[] = array($letter, $count);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are two or\
    \ more letters with the same number of occurrences.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. Try it yourself.\n<|/ c |>\n<| c |>\n: I added a solution that works\
    \ on PHP 5.3+ (see my answer)\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    $array = array(\"a\", \"b\", \"c\", \"a\", \"b\", \"a\", \"b\", \"a\");\n$letters\
    \ = array();\n$counts = array();\nforeach ($array as $letter) {\n    $letters[]\
    \ = $letter;\n    $counts[$letter] = isset($counts[$letter]) ? $counts[$letter]\
    \ + 1 : 1;\n}\narsort($counts);\n$result = array();\nforeach ($counts as $letter\
    \ => $count) {\n    $result[] = array($letter, $count);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"a\", \"\
    b\", \"\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi6hw1qto.php on line 25

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqafr891e.php:32\n\
    Stack trace:\n#0 /tmp/tmpqafr891e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqafr891e.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 1;\n    } else {\n      $histogram[$letter]++;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppa380fkl.php:35\n\
    Stack trace:\n#0 /tmp/tmppa380fkl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppa380fkl.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $histogram = array();\n  foreach ($letters as $letter) {\n    if\
    \ (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else {\n\
    \      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdu08o1v.php:35\n\
    Stack trace:\n#0 /tmp/tmpzdu08o1v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzdu08o1v.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzs682vnk.php:31\n\
    Stack trace:\n#0 /tmp/tmpzs682vnk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzs682vnk.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"\
    a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"\
    b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"\
    c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9erqsk9d.php on line 25

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $tests\
    \ = explode(' ', $test);\n  foreach ($tests as $test) {\n    $letter = strtolower($test);\n\
    \    if (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else\
    \ {\n      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kggirrh.php:36\n\
    Stack trace:\n#0 /tmp/tmp8kggirrh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8kggirrh.php\
    \ on line 36\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dhq02w.php:34\n\
    Stack trace:\n#0 /tmp/tmpw5dhq02w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw5dhq02w.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dhq02w.php:34\n\
    Stack trace:\n#0 /tmp/tmpw5dhq02w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw5dhq02w.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $letters = preg_split('/\\s+/',\
    \ $test);\n    $histogram = array();\n    foreach ($letters as $letter) {\n  \
    \      if (isset($histogram[$letter])) {\n            $histogram[$letter]++;\n\
    \        } else {\n            $histogram[$letter] = 1;\n        }\n    }\n  \
    \  return $histogram;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. I am not familiar with PHP so I cannot understand your code. Could you\
    \ please explain it a little bit more?\n<|/ c |>\n<| c |>\nThe code I posted is\
    \ PHP code. Just copy and paste it into a file named `histogram.php` and run it\
    \ via `php histogram.php`. The code I posted is just a function which you can\
    \ call from anywhere in your PHP script. Just copy and paste it into a file named\
    \ `histogram.php` and run it via `php histogram.php`.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I tried your code and I got this error `Parse error: syntax\
    \ error, unexpected 'histogram' (T_STRING), expecting ',' or ';' in /Applications/XAMPP/xamppfiles/htdocs/histogram.php\
    \ on line 3`\n<|/ c |>\n<| c |>\nI forgot the `<?php` at the beginning. Try again\
    \ now.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your code and I got\
    \ this error `Parse error: syntax error, unexpected 'histogram' (T_STRING), expecting\
    \ ',' or ';' in /Applications/XAMPP/xamppfiles/htdocs/histogram.php on line 3`\n\
    <|/ c |>\n<| a tags=php,arrays,histogram |>\n<code>\n<?php\n$string = \"a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ \nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbmg9l77m.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 0;\n    }\n    $histogram[$letter]++;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbm0wd14.php:33\n\
    Stack trace:\n#0 /tmp/tmphbm0wd14.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphbm0wd14.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3yv5yr7k.php:34\n\
    Stack trace:\n#0 /tmp/tmp3yv5yr7k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3yv5yr7k.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 0;\n    }\n    $histogram[$letter]++;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcx8zcn5.php:33\n\
    Stack trace:\n#0 /tmp/tmptcx8zcn5.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptcx8zcn5.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = preg_split('/\\s+/',\
    \ $test);\n  $histogram = array();\n  foreach ($letters as $letter) {\n    if\
    \ (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else {\n\
    \      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdu08o1v.php:35\n\
    Stack trace:\n#0 /tmp/tmpzdu08o1v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzdu08o1v.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb33ln58r.php:30\n\
    Stack trace:\n#0 /tmp/tmpb33ln58r.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb33ln58r.php\
    \ on line 30\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqafr891e.php:32\n\
    Stack trace:\n#0 /tmp/tmpqafr891e.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqafr891e.php\
    \ on line 32\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $tests\
    \ = explode(' ', $test);\n  foreach ($tests as $test) {\n    $letter = strtolower($test);\n\
    \    if (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else\
    \ {\n      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kggirrh.php:36\n\
    Stack trace:\n#0 /tmp/tmp8kggirrh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8kggirrh.php\
    \ on line 36\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\",\
    \ \"a\");\n$result = array();\nforeach ($array as $value) {\n    $result[$value]++;\n\
    }\narsort($result);\n$result = array_keys($result);\nprint_r($result);\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$array = array(\"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"b\", \"b\", \"a\");\n$result = array();\nforeach ($array as\
    \ $value) {\n    $result[$value]++;\n}\narsort($result);\n$result = array_keys($result);\n\
    print_r($result);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=1 |>\n\
    <code>\n$array = array(\"a\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\", \"a\"\
    );\n$result = array();\nforeach ($array as $value) {\n    $result[$value]++;\n\
    }\narsort($result);\n$result = array_keys($result);\nprint_r($result);\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| a dscore=1 |>\n<code>\n$array = array(\"\
    a\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\", \"a\");\n$result = array();\nforeach\
    \ ($array as $value) {\n    $result[$value]++;\n}\narsort($result);\n$result =\
    \ array_keys($result);\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\"a\", \"b\", \"\
    c\", \"a\", \"b\", \"b\", \"b\", \"a\");\n$result = array();\nforeach ($array\
    \ as $value) {\n    $result[$value]++;\n}\narsort($result);\n$result = array_keys($result);\n\
    print_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n$array = array(\"\
    a\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\", \"a\");\n$result = array();\nforeach\
    \ ($array as $value) {\n    $result[$value]++;\n}\narsort($result);\n$result =\
    \ array_keys($result);\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ \nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpaj6iofau.php on line 25

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $tests\
    \ = explode(' ', $test);\n    foreach ($tests as $test) {\n        $letter = strtolower($test);\n\
    \        if (isset($histogram[$letter])) {\n            $histogram[$letter]++;\n\
    \        } else {\n            $histogram[$letter] = 1;\n        }\n    }\n  \
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcgt2_nv.php:36\n\
    Stack trace:\n#0 /tmp/tmpdcgt2_nv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdcgt2_nv.php\
    \ on line 36\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like\
    \ your answer but I think it would be better to use a `foreach` loop instead of\
    \ a `for` loop. Also, why not use `array_count_values()`?\n<|/ c |>\n<| c |>\n\
    I agree that `foreach` would be better. `array_count_values()` would work too,\
    \ but I thought it would be more complicated than necessary. `foreach` loops are\
    \ faster than `for` loops.\n<|/ c |>\n<| c |>\nI agree that `foreach` would be\
    \ better, but I thought it would be more complicated than necessary. `foreach`\
    \ loops are faster than `for` loops. I agree that `foreach` would be better, but\
    \ I thought it would be more complicated than necessary. `foreach` loops are faster\
    \ than `for` loops. I agree that `foreach` would be better, but I thought it would\
    \ be more complicated than necessary. `foreach` loops are faster than `for` loops.\
    \ I agree that `foreach` would be better, but I thought it would be more complicated\
    \ than necessary. `foreach` loops are faster than `for` loops. I agree that `foreach`\
    \ would be better, but I thought it would be more complicated than necessary.\
    \ `foreach` loops are faster than `for` loops.\n<|/ c |>\n<| c |>\nI agree that\
    \ `foreach` would be better, but I thought it would be more complicated than necessary.\
    \ `foreach` loops are faster than `for` loops. I agree that `foreach` would be\
    \ better, but I thought it would be more complicated than necessary. `foreach`\
    \ loops are faster than `for` loops. I agree that `foreach` would be better, but\
    \ I thought it would be more complicated than necessary. `foreach` loops are faster\
    \ than `for` loops. I agree that `foreach` would be better, but I thought it would\
    \ be more complicated than necessary. `foreach` loops are faster than `for` loops.\
    \ I agree that `foreach` would be better, but I thought it would be more complicated\
    \ than necessary. `foreach` loops are faster than `for` loops.\n<|/ c |>\n<| c\
    \ |>\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkl709wzk.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $tests\
    \ = explode(' ', $test);\n  foreach ($tests as $test) {\n    $letter = strtolower($test);\n\
    \    if (isset($histogram[$letter])) {\n      $histogram[$letter]++;\n    } else\
    \ {\n      $histogram[$letter] = 1;\n    }\n  }\n  return $histogram;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if you have a string like\
    \ \"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a \nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9wj5ng6f.php on line 29

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `histogram(\"a b c a b\")`\n<|/ c |>\n<| c |>\n: I\
    \ see what you mean. I've updated the answer to account for that.\n<|/ c |>\n\
    <| a tags=php,arrays,sorting |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"a\"\
    ,\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\"\
    ,\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"\
    ,\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\"\
    ,\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\"\
    ,\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"\
    ,\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\"\
    ,\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\"\
    ,\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"\
    ,\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\"\
    ,\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\"\
    ,\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"\
    ,\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\"\
    ,\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\"\
    ,\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"\
    ,\"a\",\"b\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7n8zhfz6.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dhq02w.php:34\n\
    Stack trace:\n#0 /tmp/tmpw5dhq02w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw5dhq02w.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = array_count_values(str_split($test));\n\
    \  arsort($letters);\n  $letters = array_keys($letters);\n  $letters = array_slice($letters,\
    \ 0, 1);\n  return $letters;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = 'a b c d e f g h i j k l m n o p q r s t u v w x y z';\n\
    $array = explode(' ', $string);\n$array = array_count_values($array);\narsort($array);\n\
    $array = array_keys($array);\n$array = array_slice($array, 0, 1);\nprint_r($array);\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpft4zdks_.php on line 23

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nI like your solution, but I wonder if there is a way to do it without\
    \ using any loops. I mean using only array functions. Thanks.\n<|/ c |>\n<| c\
    \ |>\nI added a solution without loops.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without loops.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$test = \"a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c \nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpy59q2tdy.php on line 28

    '
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dhq02w.php:34\n\
    Stack trace:\n#0 /tmp/tmpw5dhq02w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw5dhq02w.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('//', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcslb3kws.php:34\n\
    Stack trace:\n#0 /tmp/tmpcslb3kws.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcslb3kws.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  return $histogram;\n\
    }\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65juamfe.php:31\n\
    Stack trace:\n#0 /tmp/tmp65juamfe.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp65juamfe.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yqr0t69.php:35\n\
    Stack trace:\n#0 /tmp/tmp0yqr0t69.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0yqr0t69.php\
    \ on line 35\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $letters = str_split($test);\n\
    \  $histogram = array();\n  foreach ($letters as $letter) {\n    if (!isset($histogram[$letter]))\
    \ {\n      $histogram[$letter] = 0;\n    }\n    $histogram[$letter]++;\n  }\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbm0wd14.php:33\n\
    Stack trace:\n#0 /tmp/tmphbm0wd14.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphbm0wd14.php\
    \ on line 33\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    $histogram[$letter]\
    \ = isset($histogram[$letter]) ? $histogram[$letter] + 1 : 1;\n  }\n  arsort($histogram);\n\
    \  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa6m8m9kb.php:31\n\
    Stack trace:\n#0 /tmp/tmpa6m8m9kb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa6m8m9kb.php\
    \ on line 31\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n    $histogram = array();\n    $letters\
    \ = str_split($test);\n    foreach ($letters as $letter) {\n        if (isset($histogram[$letter]))\
    \ {\n            $histogram[$letter]++;\n        } else {\n            $histogram[$letter]\
    \ = 1;\n        }\n    }\n    return $histogram;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dhq02w.php:34\n\
    Stack trace:\n#0 /tmp/tmpw5dhq02w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw5dhq02w.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = str_split($test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_b8h4u.php:34\n\
    Stack trace:\n#0 /tmp/tmp27_b8h4u.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_b8h4u.php\
    \ on line 34\n"
  timestamp: 1659730870
- exit_code: 255
  program: "<?php\n// Given a string representing a space separated lowercase letters,\
    \ return an array\n// of the letter with the most repetition and containing the\
    \ corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// array(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n// >>> histogram(\"a b b a\")\n// array(\"a\" => 2,\
    \ \"b\" => 2)\n// >>> histogram(\"a b c a b\")\n// array(\"a\" => 2, \"b\" =>\
    \ 2)\n// >>> histogram(\"b b b b a\")\n// array(\"b\" => 4)\n// >>> histogram(\"\
    \")\n// array()\nfunction histogram($test) {\n  $histogram = array();\n  $letters\
    \ = preg_split('/\\s+/', $test);\n  foreach ($letters as $letter) {\n    if (isset($histogram[$letter]))\
    \ {\n      $histogram[$letter]++;\n    } else {\n      $histogram[$letter] = 1;\n\
    \    }\n  }\n  return $histogram;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nThanks for your answer. Your code is working fine but i want to know that\
    \ how can i get this result using array_count_values() function.\n<|/ c |>\n<|\
    \ c |>\n: I added a solution with `array_count_values()`.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"\
    a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"a\" => \"a\", \"b\" => \"b\",\
    \ \"c\" => \"c\", \"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"a\" => \"\
    a\", \"b\" => \"b\", \"c\" => \"c\");\n\n$result = array();\nforeach($array as\
    \ $key => $value) {\n    if(!isset($result[$value])) {\n        $result[$value]\
    \ = 1;\n    } else {\n        $result[$value]++;\n    }\n}\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"a\" => \"a\", \"b\" => \"b\",\
    \ \"c\" => \"c\", \"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"a\" => \"\
    a\", \"b\" => \"b\", \"c\" => \"c\", \"a\" => \"a\", \"b\" => \"b\", \"c\" =>\
    \ \"c\");\n$result = array();\nforeach($array as $key => $value) {\n    if(!isset($result[$value]))\
    \ {\n        $result[$value] = 1;\n    } else {\n        $result[$value]++;\n\
    \    }\n}\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"\
    a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"a\" => \"a\", \"b\" => \"b\",\
    \ \"c\" => \"c\", \"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\", \"a\" => \"\
    a\", \"b\" => \"b\", \"c\" => \"c\");\n$result = array();\nforeach($array as $key\
    \ => $value) {\n    if(!isset($result[$value])) {\n        $result[$value] = \n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5jqmmexz.php on line 28

    '
  timestamp: 1659730870
