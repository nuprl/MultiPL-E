language: php
name: HumanEval_116_sort_array
results:
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $sorted[$key] = $val;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8hoqw6p.php:26\n\
    Stack trace:\n#0 /tmp/tmpw8hoqw6p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw8hoqw6p.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $val) {\n        if\
    \ ($val < 0) {\n            $arr[$key] = -$val;\n        }\n    }\n    array_multisort(array_count_values($arr),\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1embepb3.php on line 21

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiup89n4.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiup89n4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjiup89n4.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $val) {\n        if\
    \ ($val < 0) {\n            $arr[$key] = -$val;\n        }\n    }\n    asort($arr);\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zc9psgf.php:27\n\
    Stack trace:\n#0 /tmp/tmp6zc9psgf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6zc9psgf.php\
    \ on line 27\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $binary = '';\n        while ($value > 0) {\n        \
    \    $binary .= str_pad(decbin($value), 8, '0', STR_PAD_LEFT);\n            $value\
    \ -= 1;\n        }\n        $sorted[$key] = strlen($binary);\n    }\n    asort($sorted);\n\
    \    return array_values($sorted);\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxx1zyy_v.php:30\n\
    Stack trace:\n#0 /tmp/tmpxx1zyy_v.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxx1zyy_v.php\
    \ on line 30\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr, function($a, $b) {\n        $ones\
    \ = bindec($a . \"1\");\n        $ones = $ones < 0 ? -$ones : $ones;\n       \
    \ $ones = $ones > 0 ? $ones : 1;\n        $ones = $ones * -1;\n        $twos =\
    \ bindec($b . \"1\");\n        $twos = $twos < 0 ? -$twos : $twos;\n        $twos\
    \ = $twos > 0 ? $twos : 1;\n        $twos = $twos * -1;\n        return $ones\
    \ - $twos;\n    });\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects parameter 2 to be int, object given in /tmp/tmpkl2dba5r.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkl2dba5r.php:32\n\
    Stack trace:\n#0 /tmp/tmpkl2dba5r.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkl2dba5r.php\
    \ on line 32\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $result[$key] = $val;\n    }\n    array_multisort($result,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgs8fonc9.php:25\n\
    Stack trace:\n#0 /tmp/tmpgs8fonc9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgs8fonc9.php\
    \ on line 25\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $ones = array_count_values(str_split(decbin($arr[$i])));\n\
    \        $sorted[$i] = $ones['1'] > $ones['0'] ? $ones['1'] : $ones['0'];\n  \
    \  }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr = array(1,5,2,3,4);\n$arr = array_count_values($arr);\n\
    arsort($arr);\nprint_r($arr);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk17p_gjh.php on line 21

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ones = $arr[$i];\n        $j = 0;\n        while ($j++ < $len)\
    \ {\n            if ($ones & 1) {\n                $tmp = $arr[$j];\n        \
    \        $arr[$j] = $arr[$i];\n                $arr[$i] = $tmp;\n            }\n\
    \            $ones = $arr[$j];\n        }\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwl5zq6x.php:34\n\
    Stack trace:\n#0 /tmp/tmpdwl5zq6x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdwl5zq6x.php\
    \ on line 34\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] == '1';\n        }\n        $sorted[$key] = $count ? $val : $key;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gen9665.php:31\n\
    Stack trace:\n#0 /tmp/tmp9gen9665.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9gen9665.php\
    \ on line 31\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $result[$key] = $val;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5i66pg2.php:26\n\
    Stack trace:\n#0 /tmp/tmpp5i66pg2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp5i66pg2.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwv6qgpf.php:22\n\
    Stack trace:\n#0 /tmp/tmpuwv6qgpf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuwv6qgpf.php\
    \ on line 22\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    $ones = array();\n  \
    \  $zeros = array();\n    foreach ($arr as $item) {\n        if ($item == 1) {\n\
    \            $ones[] = $item;\n        } else {\n            $zeros[] = $item;\n\
    \        }\n    }\n    if (count($ones) > 0) {\n        $result = array_merge($ones,\
    \ $zeros);\n    }\n    sort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0w4su9i.php:34\n\
    Stack trace:\n#0 /tmp/tmps0w4su9i.php(44): test()\n#1 {main}\n  thrown in /tmp/tmps0w4su9i.php\
    \ on line 34\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $result[$key] = $val;\n    }\n    array_multisort($result,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38ztyapw.php:26\n\
    Stack trace:\n#0 /tmp/tmp38ztyapw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp38ztyapw.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $sorted[$key] = $value;\n    }\n    array_multisort(array_count_values($sorted),\
    \ SORT_DESC, $sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph97yip4n.php:26\n\
    Stack trace:\n#0 /tmp/tmph97yip4n.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph97yip4n.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] === '1';\n        }\n        $sorted[$key] = $count;\n    }\n  \
    \  asort($sorted);\n    return array_values($sorted);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `sort_array(array(1,5,2,3,4))`.\n\
    <|/ c |>\n<| c |>\nI fixed it\n<|/ c |>\n<| c |>\nThis still doesn't work. Try\
    \ it with `sort_array(array(1,5,2,3,4))`.\n<|/ c |>\n<| c |>\nI fixed it\n<|/\
    \ c |>\n<| c |>\nThis still doesn't work. Try it with `sort_array(array(1,5,2,3,4))`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1_x643md.php on line 26

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $ones = array();\n  \
    \  $zeros = array();\n    foreach ($arr as $item) {\n        if ($item == 1) {\n\
    \            $ones[] = $item;\n        } else {\n            $zeros[] = $item;\n\
    \        }\n    }\n    foreach ($ones as $item) {\n        $pos = array_search($item,\
    \ $zeros);\n        $sorted[] = $zeros[$pos];\n        unset($zeros[$pos]);\n\
    \    }\n    foreach ($zeros as $item) {\n        $pos = array_search($item, $ones);\n\
    \        $sorted[] = $ones[$pos];\n        unset($ones[$pos]);\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5f_t5akp.php:41\n\
    Stack trace:\n#0 /tmp/tmp5f_t5akp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5f_t5akp.php\
    \ on line 41\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $binary = '';\n        for ($i = 0; $i < strlen($value);\
    \ $i++) {\n            $binary .= str_pad(decbin($value[$i]), 8, '0', STR_PAD_LEFT);\n\
    \        }\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n      \
    \  $binary = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0',\
    \ STR_PAD_LEFT);\n        $binary = substr($binary, -8);\n        $binary = str_pad($binary,\
    \ 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0qq2gjf3.php on line 52

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p9e8p91.php:26\n\
    Stack trace:\n#0 /tmp/tmp_p9e8p91.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_p9e8p91.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $ones = array_count_values($arr);\n    $sorted\
    \ = array();\n    foreach ($ones as $key => $val) {\n        if ($val == 1) {\n\
    \            $sorted[] = $key;\n        } else {\n            $sorted[] = abs($key);\n\
    \        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpah86npiw.php:30\n\
    Stack trace:\n#0 /tmp/tmpah86npiw.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpah86npiw.php\
    \ on line 30\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $binary = '';\n        for ($i = 0; $i < strlen($value);\
    \ $i++) {\n            $binary .= str_pad(decbin($value[$i]), 8, '0', STR_PAD_LEFT);\n\
    \        }\n        $binary = str_pad($binary, strlen($value), '0', STR_PAD_LEFT);\n\
    \        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary =\
    \ substr($binary, 0, 8);\n        $binary = (int)$binary;\n        $binary = ($binary\
    \ == 1) ? 1 : 0;\n        $sorted[$key] = $binary;\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6guy92mv.php:35\n\
    Stack trace:\n#0 /tmp/tmp6guy92mv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6guy92mv.php\
    \ on line 35\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $binary = '';\n        for ($i = 0; $i < strlen($value);\
    \ $i++) {\n            $binary .= str_pad(decbin($value[$i]), 8, '0', STR_PAD_LEFT);\n\
    \        }\n        $binary = str_pad($binary, strlen($value), '0', STR_PAD_LEFT);\n\
    \        $binaryLen = strlen($binary);\n        $ones = '';\n        for ($i =\
    \ 0; $i < $binaryLen; $i++) {\n            $ones .= $binary[$i] === '1' ? '1'\
    \ : '0';\n        }\n        $sorted[$key] = $ones;\n    }\n    return $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiscigycv.php:35\n\
    Stack trace:\n#0 /tmp/tmpiscigycv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpiscigycv.php\
    \ on line 35\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ones = array_sum(str_split(decbin($arr[$i])));\n        if\
    \ ($ones > 0) {\n            $arr[$i] = $ones;\n        } else {\n           \
    \ $arr[$i] = decbin($arr[$i]);\n        }\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_3584ea.php:30\n\
    Stack trace:\n#0 /tmp/tmpt_3584ea.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt_3584ea.php\
    \ on line 30\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $val) {\n        $count[$key]\
    \ = $val % 2;\n    }\n    array_multisort($count, SORT_DESC, $arr);\n    return\
    \ $arr;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp0pa_5yw.php on line 19

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    $size = count($arr);\n\
    \    for ($i = 0; $i < $size; $i++) {\n        $result[$i] = $arr[$i];\n    }\n\
    \    for ($i = 0; $i < $size; $i++) {\n        for ($j = $i + 1; $j < $size; $j++)\
    \ {\n            if ($arr[$i] & $arr[$j]) {\n                $result[$i] = $arr[$j];\n\
    \                $result[$j] = $arr[$i];\n            }\n        }\n    }\n  \
    \  return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxeenzouu.php:33\n\
    Stack trace:\n#0 /tmp/tmpxeenzouu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxeenzouu.php\
    \ on line 33\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 8,\
    \ '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function ($v) { return str_pad(decbin($v),\
    \ 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin\
    \ = array_map(function ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\
    \ }, $arr);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 8,\
    \ '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function ($v) { return str_pad(decbin($v),\
    \ 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin\
    \ = array_map(function ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\
    \ }, $arr);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 8,\
    \ '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function ($v) { return str_pad(decbin($v),\
    \ 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin\
    \ = array_map(function ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\
    \ }, $arr);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 8,\
    \ '0', STR_PAD_LEFT); }, $arr);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9xu4b6i_.php on line 46

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $binary = '';\n        for ($i = 0; $i < strlen($val); $i++)\
    \ {\n            $binary .= str_pad(decbin($val[$i]), 8, '0', STR_PAD_LEFT);\n\
    \        }\n        $binary = str_pad($binary, strlen($val), '0', STR_PAD_LEFT);\n\
    \        $binary = str_pad($binary, strlen($val), '0', STR_PAD_BOTH);\n      \
    \  $binary = str_pad($binary, strlen($val), '0', STR_PAD_RIGHT);\n        $binary\
    \ = str_pad($binary, strlen($val), '0', STR_PAD_BOTH);\n        $binary = str_pad($binary,\
    \ strlen($val), '0', STR_PAD_RIGHT);\n        $binary = str_pad($binary, strlen($val),\
    \ '0', STR_PAD_BOTH);\n        $binary = str_pad($binary, strlen($val), '0', STR_PAD_RIGHT);\n\
    \        $binary = str_pad($binary, strlen($val), '0', STR_PAD_BOTH);\n      \
    \  $binary = str_pad($binary, strlen($val), '0', STR_PAD_RIGHT);\n        $binary\
    \ = str_pad($binary, strlen($val), '0', STR_PAD_BOTH);\n        $binary = str_pad($binary,\
    \ strlen($val), '0', STR_PAD_RIGHT);\n        $binary = str_pad($binary, strlen($val),\
    \ '0', STR_PAD_BOTH);\n        $binary = str_pad($binary, strlen($val), '0', STR_PAD_RIGHT);\n\
    \        $binary = str_pad($binary, strlen($val), '0', STR_PAD_BOTH);\n      \
    \  $binary = str_pad($binary, strlen($val), '0', STR_PAD_RIGHT);\n        $binary\
    \ = str_pad($binary, strlen($val), '0', STR_PAD_BOTH);\n        $binary = str_pad($binary,\
    \ strlen($val), '0', STR_PAD_RIGHT);\n        $binary = str_pad($binary, strlen($val),\
    \ '0', STR_PAD_BOTH);\n        $binary = str_pad($binary, strlen($val), '0', STR_PAD_RIGHT);\n\
    \        $binary = str_pad($binary, strlen($val), '0', STR_PAD_BOTH);\n      \
    \  $binary = str_pad($binary, strlen($val\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvpdoj4or.php on line 40

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiup89n4.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiup89n4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjiup89n4.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $item)\
    \ {\n        $result[$item] = count(decbin($item));\n    }\n    asort($result);\n\
    \    return array_keys($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpv7c17w1x.php on line 15\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpv7c17w1x.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv7c17w1x.php on line 15\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv7c17w1x.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv7c17w1x.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpv7c17w1x.php:26\nStack trace:\n#0 /tmp/tmpv7c17w1x.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv7c17w1x.php on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] == '1';\n        }\n        $sorted[$key] = $count;\n    }\n   \
    \ asort($sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8un_jra.php:32\n\
    Stack trace:\n#0 /tmp/tmpm8un_jra.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpm8un_jra.php\
    \ on line 32\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    $size = count($arr);\n\
    \    for ($i = 0; $i < $size; $i++) {\n        $result[$i] = $arr[$i];\n    }\n\
    \    array_multisort(array_count_values($arr), SORT_DESC, $result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpct5147lp.php:27\n\
    Stack trace:\n#0 /tmp/tmpct5147lp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpct5147lp.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ones = bindec($arr[$i]);\n        $j = 0;\n        while ($j\
    \ < $len) {\n            if ($ones == bindec($arr[$j])) {\n                $j++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if ($j != $len) {\n            $tmp = array_splice($arr, $i, $j - $i);\n\
    \            array_splice($arr, $i, 0, $tmp);\n            $len = $j;\n      \
    \  }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3l42nzhc.php:38\n\
    Stack trace:\n#0 /tmp/tmp3l42nzhc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3l42nzhc.php\
    \ on line 38\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value < 0) {\n            $arr[$key] = -$value;\n        }\n    }\n    asort($arr);\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpro30pb2n.php:27\n\
    Stack trace:\n#0 /tmp/tmpro30pb2n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpro30pb2n.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ones = array_sum(str_split(decbin($arr[$i])));\n        if\
    \ ($ones > 0) {\n            $arr[$i] = $ones;\n        } else {\n           \
    \ $arr[$i] = decbin($arr[$i]);\n        }\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_3584ea.php:30\n\
    Stack trace:\n#0 /tmp/tmpt_3584ea.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt_3584ea.php\
    \ on line 30\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = substr($bin, 0,\
    \ strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxqai85p0.php on line 39

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $count = substr_count($bin,\
    \ '1');\n        $sorted[$key] = $count;\n    }\n    array_multisort($sorted,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9oyvi31_.php:29\n\
    Stack trace:\n#0 /tmp/tmp9oyvi31_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9oyvi31_.php\
    \ on line 29\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    $ones = array();\n  \
    \  $zeros = array();\n    foreach ($arr as $num) {\n        if ($num > 0) {\n\
    \            $ones[] = $num;\n        } else {\n            $zeros[] = $num;\n\
    \        }\n    }\n    foreach ($ones as $key => $num) {\n        $result[$key]\
    \ = $num;\n    }\n    foreach ($zeros as $key => $num) {\n        $result[$key]\
    \ = -$num;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8dh5swr.php:37\n\
    Stack trace:\n#0 /tmp/tmpc8dh5swr.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpc8dh5swr.php\
    \ on line 37\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $binary = '';\n        for ($i = 0; $i < strlen($value);\
    \ $i++) {\n            $binary .= str_pad(decbin($value[$i]), 8, '0', STR_PAD_LEFT);\n\
    \        }\n        $binary = str_pad($binary, strlen($value), '0', STR_PAD_LEFT);\n\
    \        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binaryLen\
    \ = strlen($binary);\n        $ones = str_repeat('1', $binaryLen);\n        $zeros\
    \ = str_repeat('0', $binaryLen - strlen($ones));\n        $binary = $ones . $zeros\
    \ . $binary;\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n    \
    \    $binaryLen = strlen($binary);\n        $decimal = 0;\n        for ($i = 0;\
    \ $i < $binaryLen; $i++) {\n            $decimal += intval($binary[$i]);\n   \
    \     }\n        $sorted[$key] = $decimal;\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuha7w77j.php:41\n\
    Stack trace:\n#0 /tmp/tmpuha7w77j.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpuha7w77j.php\
    \ on line 41\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $ones = bindec($arr[$i]);\n  \
    \      if ($ones == 0) {\n            $sorted[] = $arr[$i];\n        } else {\n\
    \            $sorted[] = $ones;\n        }\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bylbrik.php:32\n\
    Stack trace:\n#0 /tmp/tmp1bylbrik.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1bylbrik.php\
    \ on line 32\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr, function($a, $b) {\n        $ones\
    \ = bindec($a) & 1;\n        $twos = bindec($b) & 1;\n        if ($ones === $twos)\
    \ {\n            return 0;\n        }\n        return $ones < $twos ? -1 : 1;\n\
    \    });\n    return $arr;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a\
    \ tags=php,sorting,arrays |>\n<code>\n<?php\n$arr = array(\n    array('name' =>\
    \ 'John', 'age' => 20),\n    array('name' => 'Jane', 'age' => 30),\n    array('name'\
    \ => 'Jack', 'age' => 40),\n    array('name' => 'Jill', 'age' => 50),\n    array('name'\
    \ => 'Jack', 'age' => 60),\n    array('name' => 'Jill', 'age' => 70),\n    array('name'\
    \ => 'Jack', 'age' => 80),\n    array('name' => 'Jill', 'age' => 90),\n    array('name'\
    \ => 'Jack', 'age' => 100),\n    array('name' => 'Jill', 'age' => 110),\n    array('name'\
    \ => 'Jack', 'age' => 120),\n    array('name' => 'Jill', 'age' => 130),\n    array('name'\
    \ => 'Jack', 'age' => 140),\n    array('name' => 'Jill', 'age' => 150),\n    array('name'\
    \ => 'Jack', 'age' => 160),\n    array('name' => 'Jill', 'age' => 170),\n    array('name'\
    \ => 'Jack', 'age' => 180),\n    array('name' => 'Jill', 'age' => 190),\n    array('name'\
    \ => 'Jack', 'age' => 200),\n    array('name' => 'Jill', 'age' => 210),\n    array('name'\
    \ => 'Jack', 'age' => 220),\n    array('name' => 'Jill', 'age' => 230),\n    array('name'\
    \ => 'Jack', 'age' => 240),\n    array('name' => 'Jill', 'age' => 250),\n    array('name'\
    \ => 'Jack', 'age' => 260),\n    array('name' => 'Jill', 'age' => 270),\n    array('name'\
    \ => 'Jack', 'age' => 280),\n    array('name' => 'Jill', 'age' => 290),\n    array('name'\
    \ => 'Jack', 'age' => 300),\n    array('name' => 'Jill', 'age' => 310),\n    array('name'\
    \ => 'Jack', 'age' => 320),\n    array('name' => 'Jill', 'age' => 330),\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8re0py_1.php on line 23

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function ($i) { return str_pad(decbin($i), 8,\
    \ '0', STR_PAD_LEFT); }, $arr);\n    $bin = array_map(function ($i) { return str_pad(decbin($i),\
    \ 8, '0', STR_PAD_LEFT); }, $ones);\n    $bin = array_merge($bin, $ones);\n  \
    \  $bin = array_unique($bin);\n    $bin = array_reverse($bin);\n    $bin = array_map(function\
    \ ($i) { return str_pad(decbin($i), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin\
    \ = array_reverse($bin);\n    $bin = array_unique($bin);\n    $bin = array_reverse($bin);\n\
    \    $bin = array_map(function ($i) { return str_pad(decbin($i), 8, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_reverse($bin);\n    $bin = array_unique($bin);\n\
    \    $bin = array_reverse($bin);\n    $bin = array_map(function ($i) { return\
    \ str_pad(decbin($i), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_reverse($bin);\n\
    \    $bin = array_unique($bin);\n    $bin = array_reverse($bin);\n    $bin = array_map(function\
    \ ($i) { return str_pad(decbin($i), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin\
    \ = array_reverse($bin);\n    $bin = array_unique($bin);\n    $bin = array_reverse($bin);\n\
    \    $bin = array_map(function ($i) { return str_pad(decbin($i), 8, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_reverse($bin);\n    $bin = array_unique($bin);\n\
    \    $bin = array_reverse($bin);\n    $bin = array_map(function ($i) { return\
    \ str_pad(decbin($i), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_reverse($bin);\n\
    \    $bin = array_unique($bin);\n    $bin = array_reverse($bin);\n    $bin = array_map(function\
    \ ($i) { return str_pad(decbin($i), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin\
    \ = array_reverse($bin);\n    $bin = array_unique($bin);\n    $bin = array_reverse($bin);\n\
    \    $bin = array_map(function ($\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2enti8h9.php on line 48

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    $ones = array();\n  \
    \  $zeros = array();\n    foreach ($arr as $item) {\n        if ($item == 1) {\n\
    \            $ones[] = $item;\n        } else {\n            $zeros[] = $item;\n\
    \        }\n    }\n    sort($ones);\n    sort($zeros);\n    foreach ($ones as\
    \ $key => $value) {\n        $result[] = $value;\n    }\n    foreach ($zeros as\
    \ $key => $value) {\n        $result[] = $value;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6iw2f_ym.php:39\n\
    Stack trace:\n#0 /tmp/tmp6iw2f_ym.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6iw2f_ym.php\
    \ on line 39\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p9e8p91.php:26\n\
    Stack trace:\n#0 /tmp/tmp_p9e8p91.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_p9e8p91.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $ones = array_sum(str_split(decbin($arr[$i])));\n\
    \        $sorted[$i] = $ones;\n    }\n    array_multisort($sorted, $arr);\n  \
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hpun9cz.php:29\n\
    Stack trace:\n#0 /tmp/tmp3hpun9cz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3hpun9cz.php\
    \ on line 29\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 1, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm003l1ya.php on line 40

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = [];\n    $ones = array_fill(0, count($arr),\
    \ 0);\n    foreach ($arr as $item) {\n        $bin = decbin($item);\n        $ones[$bin{0}]\
    \ |= (1 << $bin{1}); // set bit at position $bin{1}\n    }\n    foreach ($ones\
    \ as $i => $v) {\n        if ($v) {\n            $result[] = $i;\n        }\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<|\
    \ c |>\nThis doesn't work. Try `sort_array(array(-2, -3, -4, -5, -6))`\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer. Try it yourself.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer. Try it yourself.\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer. Try it yourself.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$arr = [1,\
    \ 5, 2, 3, 4];\n$result = array_flip(array_count_values($arr));\nksort($result);\n\
    $result = array_keys($result);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<|\
    \ c |>\nThis doesn't work. Try `sort_array(array(-2, -3, -4, -5, -6))`\n<|/ c\
    \ |>\n<| c |>\n: It does. Try it yourself.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer. Try it yourself.\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer. Try it yourself.\n<|/ c |>\n<| c |>\n: I added a test case to\
    \ my answer. Try it yourself.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp1oupg5i.php on line 26

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if\
    \ ($bin[$i] === '1') {\n                $count++;\n            } else {\n    \
    \            break;\n            }\n        }\n        $sorted[$key] = $count\
    \ * 10 + $value;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tqvq9jm.php:35\n\
    Stack trace:\n#0 /tmp/tmp9tqvq9jm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9tqvq9jm.php\
    \ on line 35\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $bin = str_pad($bin, $len, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoftfj6p_.php on line 54

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3forbwwp.php:25\n\
    Stack trace:\n#0 /tmp/tmp3forbwwp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3forbwwp.php\
    \ on line 25\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpx0e1n46f.php on line 49

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = str_pad($bin, strlen($bin),\
    \ \"0\", STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), \"0\", STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ \"0\", STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), \"0\", STR_PAD_BOTH);\n\
    \        $bin = str\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbdsbv8ui.php on line 39

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value > 0) {\n            $arr[$key] = $value;\n        } else {\n       \
    \     $arr[$key] = -$value;\n        }\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_q55sns.php:28\n\
    Stack trace:\n#0 /tmp/tmpm_q55sns.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm_q55sns.php\
    \ on line 28\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if ($bin[$i]\
    \ === '1') {\n                $count++;\n            } else {\n              \
    \  break;\n            }\n        }\n        $sorted[$key] = $count;\n    }\n\
    \    asort($sorted);\n    $result = array();\n    foreach ($sorted as $key =>\
    \ $val) {\n        $result[] = $arr[$key];\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=sorting,arrays,php |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(\n\
    \    array('name' => 'John', 'age' => 25),\n    array('name' => 'Jane', 'age'\
    \ => 30),\n    array('name' => 'Jack', 'age' => 32),\n    array('name' => 'Jack',\
    \ 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name' =>\
    \ 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n    array('name' => 'Jack', 'age' => 32),\n    array('name'\
    \ => 'Jack', 'age' => 32),\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdw2kufg8.php on line 34

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3forbwwp.php:25\n\
    Stack trace:\n#0 /tmp/tmp3forbwwp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3forbwwp.php\
    \ on line 25\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $ones = array_count_values($arr);\n    $sorted\
    \ = array();\n    foreach ($ones as $num => $count) {\n        if ($count > 1)\
    \ {\n            $sorted[] = $num;\n        } else {\n            $sorted[] =\
    \ decbin($num);\n        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n<?php\n$array = array(\n    array(1,\
    \ 5, 2, 3, 4),\n    array(-2, -3, -4, -5, -6),\n    array(1, 0, 2, 3, 4)\n);\n\
    \n$result = array();\nforeach ($array as $value) {\n    $result[] = array_count_values($value);\n\
    }\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function($value) {\n    return array_count_values($value);\n\
    }, $result);\n\n$result = array_map(function(\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpddktbrea.php on line 24

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $sorted[$key] = $val;\n    }\n    array_multisort(array_count_values($sorted),\
    \ SORT_DESC, $sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprl4dv8he.php:26\n\
    Stack trace:\n#0 /tmp/tmprl4dv8he.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprl4dv8he.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] === \"1\";\n        }\n        $sorted[$key] = $count ? $val : $key;\n\
    \    }\n    return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgj0wrvr.php:30\n\
    Stack trace:\n#0 /tmp/tmpkgj0wrvr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpkgj0wrvr.php\
    \ on line 30\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $item)\
    \ {\n        $result[] = is_int($item) ? $item : count_ones($item);\n    }\n \
    \   array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7h95yvuu.php:26\n\
    Stack trace:\n#0 /tmp/tmp7h95yvuu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7h95yvuu.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin)\
    \ + strlen($count), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl1rsd23j.php on line 55

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = [];\n    $ones = [];\n    foreach ($arr\
    \ as $num) {\n        $bin = decbin($num);\n        $ones = array_merge($ones,\
    \ str_split($bin, 8));\n    }\n    foreach ($ones as $i => $one) {\n        $result[]\
    \ = $one;\n    }\n    array_multisort($result, $arr);\n    return $arr;\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| c |>\nThanks for your answer. Your solution is very\
    \ good but i can't use any external libraries. I must implement my own sorting\
    \ algorithm.\n<|/ c |>\n<| c |>\nI added my own sorting algorithm to my answer.\n\
    <|/ c |>\n<| a dscore=0 |>\nI used the code from and added a little bit of logic\
    \ to handle negative numbers. \n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprhaou5ka.php on line 25

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value < 0) {\n            $arr[$key] = -$value;\n        }\n    }\n    asort($arr);\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpro30pb2n.php:27\n\
    Stack trace:\n#0 /tmp/tmpro30pb2n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpro30pb2n.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    foreach ($arr as $key\
    \ => $value) {\n        for ($i = 0; $i < strlen($value); $i++) {\n          \
    \  $result[$key] += $value[$i];\n        }\n    }\n    foreach ($arr as $key =>\
    \ $value) {\n        $result[$key] = $result[$key] % 10;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo9u5yc5y.php:32\n\
    Stack trace:\n#0 /tmp/tmpo9u5yc5y.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo9u5yc5y.php\
    \ on line 32\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value < 0) {\n            $result[$key] = -$value;\n\
    \        } else {\n            $result[$key] = $value;\n        }\n    }\n   \
    \ asort($result);\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp300w869d.php:29\n\
    Stack trace:\n#0 /tmp/tmp300w869d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp300w869d.php\
    \ on line 29\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $sorted[$key] = $value;\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmxjwas86.php:25\n\
    Stack trace:\n#0 /tmp/tmpmxjwas86.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmxjwas86.php\
    \ on line 25\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $count = substr_count($bin,\
    \ '1');\n        if ($count > 0) {\n            $sorted[$key] = $value;\n    \
    \    } else {\n            $decimal = strlen($bin) - strlen($bin) % 2;\n     \
    \       $sorted[$key] = $decimal;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbl9uthwz.php:32\n\
    Stack trace:\n#0 /tmp/tmpbl9uthwz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbl9uthwz.php\
    \ on line 32\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort($result,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n</code>\n<|/ a tags=php,sorting |>\n\
    <| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnjdl0d21.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function($v) use ($ones) {\n        return str_pad(decbin($v),\
    \ strlen($v), '0', STR_PAD_LEFT);\n    }, $arr);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), strlen($v), '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), strlen($v), '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin\
    \ = array_map(function($v) use ($ones) {\n        return str_pad(decbin($v), strlen($v),\
    \ '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function($v) use ($ones)\
    \ {\n        return str_pad(decbin($v), strlen($v), '0', STR_PAD_LEFT);\n    },\
    \ $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return str_pad(decbin($v),\
    \ strlen($v), '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), strlen($v), '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), strlen($v), '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin\
    \ = array_map(function($v) use ($ones) {\n        return str_pad(decbin($v), strlen($v),\
    \ '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function($v) use ($ones)\
    \ {\n        return str_pad(decbin($v), strlen($v), '0', STR_PAD_LEFT);\n    },\
    \ $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return str_pad(decbin($v),\
    \ strlen($v), '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), strlen($v), '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplu7i97zs.php on line 52

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $val) {\n        if\
    \ ($val < 0) {\n            $arr[$key] = -$val;\n        }\n    }\n    asort($arr);\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zc9psgf.php:27\n\
    Stack trace:\n#0 /tmp/tmp6zc9psgf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6zc9psgf.php\
    \ on line 27\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if ($bin[$i]\
    \ === '1') {\n                $count++;\n            } else {\n              \
    \  break;\n            }\n        }\n        $sorted[$key] = $count * 10 + $val;\n\
    \    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\n\
    This doesn't work if the array contains negative numbers. Try it with `array(-2,\
    \ -3, -4, -5, -6)`.\n<|/ c |>\n<| c |>\n: Yes, you are right. I've updated my\
    \ answer. Thanks.\n<|/ c |>\n<| c |>\n: I've updated my answer. Thanks.\n<|/ c\
    \ |>\n<| c |>\n: I've updated my answer. Thanks.\n<|/ c |>\n<| c |>\n: I've updated\
    \ my answer. Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxutlgm78.php on line 29

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if ($bin[$i]\
    \ === '1') {\n                $count++;\n            } else {\n              \
    \  break;\n            }\n        }\n        $sorted[$key] = $count;\n    }\n\
    \    asort($sorted);\n    return array_values($sorted);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfhq37yab.php:35\n\
    Stack trace:\n#0 /tmp/tmpfhq37yab.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfhq37yab.php\
    \ on line 35\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp64cmavm5.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwv6qgpf.php:22\n\
    Stack trace:\n#0 /tmp/tmpuwv6qgpf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuwv6qgpf.php\
    \ on line 22\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $bin = substr($bin, strlen($bin)\
    \ - 1);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpz93sr0ci.php on line 49

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p9e8p91.php:26\n\
    Stack trace:\n#0 /tmp/tmp_p9e8p91.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_p9e8p91.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$arr = [\n    1 => 1,\n    2 => 1,\n    3 => 1,\n\
    \    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n\
    \    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15\
    \ => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n\
    \    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26\
    \ => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n\
    \    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37\
    \ => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n\
    \    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48\
    \ => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n\
    \    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59\
    \ => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n\
    \    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70\
    \ => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n\
    \    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 => 1,\n    80 => 1,\n    81\
    \ => 1,\n    8\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpr5n84s5f.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $binary = '';\n        for ($j\
    \ = 0; $j < $count; $j++) {\n            $binary .= $arr[$j] & 1 ? '1' : '0';\n\
    \        }\n        $sorted[$i] = $binary;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaobix6iw.php:31\n\
    Stack trace:\n#0 /tmp/tmpaobix6iw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpaobix6iw.php\
    \ on line 31\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $count = array_count_values($arr);\n    $sorted\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ 1) {\n            $sorted[] = $key;\n        }\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprct3kkva.php on line 23

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $ones = $arr[$i];\n        $j\
    \ = 0;\n        while ($j < $count && $ones & $arr[$j] == 0) {\n            $j++;\n\
    \        }\n        $sorted[$i] = $j;\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphixahskq.php:31\n\
    Stack trace:\n#0 /tmp/tmphixahskq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmphixahskq.php\
    \ on line 31\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = [];\n    $ones = array_count_values($arr);\n\
    \    foreach ($ones as $num => $count) {\n        $result[$num] = $count;\n  \
    \  }\n    asort($result);\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nI like this solution, because it doesn't require any additional\
    \ functions. But it does require a little more memory than my solution. My solution\
    \ uses `array_count_values` which creates a new array with the counts. Your solution\
    \ uses `array_count_values` which creates a new array with the counts and then\
    \ sorts it, which requires more memory than my solution.\n<|/ c |>\n<| c |>\n\
    I agree with you. My solution uses less memory than yours. But I thought that\
    \ my solution would be more readable and understandable. Anyway, thanks for your\
    \ comment.\n<|/ c |>\n<| c |>\nI agree with you. My solution uses less memory\
    \ than yours. But I thought that my solution would be more readable and understandable.\
    \ Anyway, thanks for your comment.\n<|/ c |>\n<| c |>\nI agree with you. My solution\
    \ uses less memory than yours. But I thought that my solution would be more readable\
    \ and understandable. Anyway, thanks for your comment.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\nasort($arr2);\n\
    $arr3 = array_keys($arr2);\n$arr4 = array_values($arr2);\n$arr5 = array_combine($arr3,\
    \ $arr4);\n$arr6 = array_flip($arr5);\n$arr7 = array_map(function($v){return $v*-1;},\
    \ $arr6);\n$arr8 = array_merge($arr, $arr7);\nprint_r($arr8);\n</code>\n<|/ a\
    \ tags=php,arrays,sorting |>\n<| c |>\nI like this solution, because it doesn't\
    \ require any additional functions. But it does require a little more memory than\
    \ my solution. My solution uses `array_count_values` which creates a new array\
    \ with the counts. Your solution uses `array_count_values` which creates a new\
    \ array with the counts and then sorts it, which requires more memory than my\
    \ solution.\n<|/ c |>\n<| c |>\nI agree with you. My solution uses less memory\
    \ than yours. But I thought that my solution would be more readable and understandable.\
    \ Anyway, thanks for your comment.\n<|/ c |>\n<|\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpeq7mfr4q.php on line 21

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function ($a) use ($ones) {\n        return\
    \ str_pad(decbin($a), 8, '0', STR_PAD_LEFT);\n    }, $arr);\n    $bin = array_map(function\
    \ ($a) use ($ones) {\n        return str_pad(implode('', $ones), 8, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n        return\
    \ substr($a, 0, $len);\n    }, $bin);\n    $bin = array_map(function ($a) use\
    \ ($len) {\n        return str_pad(decbin(bindec($a)), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n        return\
    \ str_pad(implode('', $ones), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin\
    \ = array_map(function ($a) use ($len) {\n        return substr($a, 0, $len);\n\
    \    }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n        return\
    \ str_pad(decbin(bindec($a)), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin\
    \ = array_map(function ($a) use ($len) {\n        return str_pad(implode('', $ones),\
    \ $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($a)\
    \ use ($len) {\n        return substr($a, 0, $len);\n    }, $bin);\n    $bin =\
    \ array_map(function ($a) use ($len) {\n        return str_pad(decbin(bindec($a)),\
    \ $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($a)\
    \ use ($len) {\n        return str_pad(implode('', $ones), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n        return\
    \ substr($a, 0, $len);\n    }, $bin);\n    $bin = array_map(function ($a) use\
    \ ($len) {\n        return str_pad(decbin(bindec($a)), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpahnr0nxs.php on line 71

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $sorted[$key] = $val;\n    }\n    array_multisort(array_count_values($sorted),\
    \ SORT_DESC, $sorted);\n    return $sorted;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjg687xi4.php:25\n\
    Stack trace:\n#0 /tmp/tmpjg687xi4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjg687xi4.php\
    \ on line 25\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = [];\n    $ones = [];\n    $zeros =\
    \ [];\n    foreach ($arr as $item) {\n        if ($item < 0) {\n            $ones[]\
    \ = $item;\n        } else {\n            $zeros[] = $item;\n        }\n    }\n\
    \    if (count($ones) > 0) {\n        $result = array_merge($ones, $zeros);\n\
    \        sort($result);\n    } else {\n        $result = $zeros;\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if\
    \ you have negative numbers in the array. `sort_array(array(-2, -3, -4, -5, -6))`\
    \ returns `array(-6, -5, -4, -3, -2)` instead of `array(-6, -5, -4, -3, -2, -1)`\n\
    <|/ c |>\n<| c |>\n, you are right. I've fixed the code by adding `array_reverse()`\
    \ to the `sort()` call. Thanks.\n<|/ c |>\n<| a |>\n<code>\n$array = array(1,\
    \ 5, 2, 3, 4);\n$array = array_reverse($array);\nsort($array);\nprint_r($array);\n\
    </code>\n<|/ a tags=php,arrays dscore=4 |>\n<| c |>\nThis doesn't work if you\
    \ have negative numbers in the array. `sort_array(array(-2, -3, -4, -5, -6))`\
    \ returns `array(-6, -5, -4, -3, -2)` instead of `array(-6, -5, -4, -3, -2, -1)`\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\n$array = array(1, 5, 2, 3, 4);\n$array = array_reverse($array);\n\
    sort($array);\nprint_r($array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    This doesn't work if you have negative numbers in the array. `sort_array(array(-2,\
    \ -3, -4, -5, -6))` returns `array(-6, -5, -4, -3, -2)` instead of `array(-6,\
    \ -5, -4, -3, -2, -1)`\n<|/ c |>\n<| a dscore=3 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprzenr4eu.php on line 31

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdin4926g.php on line 43

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if\
    \ ($bin[$i] === '1') {\n                $count++;\n            } else {\n    \
    \            break;\n            }\n        }\n        $sorted[$key] = $count;\n\
    \    }\n    asort($sorted);\n    return array_values($sorted);\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps6l7pprd.php on line 30

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = substr($bin, 0,\
    \ strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_RIGHT);\n       \
    \ $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin) + 1, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 1, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin) + 1, '0',\
    \ STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_RIGHT);\n       \
    \ $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_RIGHT);\n        $bin =\
    \ str_pad($bin, strlen($bin) + 1, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin) + 1, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 1, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin) + 1, '0',\
    \ STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_RIGHT);\n       \
    \ $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_RIGHT);\n        $bin =\
    \ str_pad($bin, strlen($bin) + 1, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin) + 1, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 1, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin) + 1, '0',\
    \ STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin) + 1, '\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp07728h1n.php on line 37

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort($result,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58i2jacn.php:26\n\
    Stack trace:\n#0 /tmp/tmp58i2jacn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp58i2jacn.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $bin = substr($bin, strlen($bin)\
    \ - 1, strlen($bin));\n        $bin = str_pad($bin, strlen($bin), 0);\n      \
    \  $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4a_g_2u9.php on line 49

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    $ones = array();\n  \
    \  $zeros = array();\n    foreach ($arr as $item) {\n        if ($item < 0) {\n\
    \            $result[] = $item;\n            $zeros[] = $item;\n        } else\
    \ {\n            $result[] = $item;\n            $ones[] = $item;\n        }\n\
    \    }\n    foreach ($ones as $key => $one) {\n        $result[$key] = $one;\n\
    \    }\n    foreach ($zeros as $key => $zero) {\n        $result[$key] = $zero;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj82purv0.php:38\n\
    Stack trace:\n#0 /tmp/tmpj82purv0.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpj82purv0.php\
    \ on line 38\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $ones = array();\n  \
    \  $zeros = array();\n    foreach ($arr as $item) {\n        if ($item == 0) {\n\
    \            $zeros[] = $item;\n        } else {\n            $ones[] = $item;\n\
    \        }\n    }\n    foreach ($ones as $key => $one) {\n        $sorted[$key]\
    \ = $one;\n    }\n    foreach ($zeros as $key => $zero) {\n        $sorted[$key]\
    \ = $zero;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dai9e17.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dai9e17.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6dai9e17.php\
    \ on line 37\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] === '1';\n        }\n        $sorted[$key] = $count;\n    }\n  \
    \  asort($sorted);\n    return array_values($sorted);\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for negative numbers, it just sorts them in ascending\
    \ order\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers, it just sorts\
    \ them in ascending order\n<|/ c |>\n<| a dscore=4 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpu9xn96pj.php on line 26

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p9e8p91.php:26\n\
    Stack trace:\n#0 /tmp/tmp_p9e8p91.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_p9e8p91.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiup89n4.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiup89n4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjiup89n4.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $bin = decbin($arr[$i]);\n   \
    \     $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, -8);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ 8, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, 8, '0\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpviwdsuke.php on line 43

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $binary = '';\n        for ($j\
    \ = 0; $j < 8; $j++) {\n            $binary .= ($arr[$i] & 1) ? '1' : '0';\n \
    \           $arr[$i] >>= 1;\n        }\n        $sorted[$i] = $binary;\n    }\n\
    \    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4j4zpf_j.php on line 25

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=php,sorting |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_mk3e_tn.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 1, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoyzvwhu8.php on line 40

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ones = array_sum(str_split(decbin($arr[$i])));\n        if\
    \ ($ones > 0) {\n            $arr[$i] = $ones;\n        } else {\n           \
    \ $arr[$i] = decbin($arr[$i]);\n        }\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_3584ea.php:30\n\
    Stack trace:\n#0 /tmp/tmpt_3584ea.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt_3584ea.php\
    \ on line 30\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] == 1;\n        }\n        $sorted[$key] = $count;\n    }\n    asort($sorted);\n\
    \    $result = array();\n    foreach ($sorted as $key => $val) {\n        $result[]\
    \ = $arr[$key];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2g2dz_3.php:36\n\
    Stack trace:\n#0 /tmp/tmpe2g2dz_3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe2g2dz_3.php\
    \ on line 36\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiup89n4.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiup89n4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjiup89n4.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwv6qgpf.php:22\n\
    Stack trace:\n#0 /tmp/tmpuwv6qgpf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuwv6qgpf.php\
    \ on line 22\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $ones = array();\n  \
    \  $zeros = array();\n    foreach ($arr as $num) {\n        if ($num > 0) {\n\
    \            $ones[] = $num;\n        } else {\n            $zeros[] = $num;\n\
    \        }\n    }\n    foreach ($ones as $key => $one) {\n        $sorted[$key]\
    \ = $one;\n    }\n    foreach ($zeros as $key => $zero) {\n        $sorted[$key]\
    \ = $zero;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcq4pb9f.php:37\n\
    Stack trace:\n#0 /tmp/tmplcq4pb9f.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplcq4pb9f.php\
    \ on line 37\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $ones = array();\n  \
    \  foreach ($arr as $item) {\n        $bin = decbin($item);\n        $ones = str_split($bin,\
    \ 2);\n        $ones = array_filter($ones);\n        $ones = array_map(function($x)\
    \ {\n            return $x - 1;\n        }, $ones);\n        $ones = array_count_values($ones);\n\
    \        $ones = array_map(function($x) {\n            return $x * pow(10, count($ones)\
    \ - 1);\n        }, $ones);\n        $sorted = array_merge($sorted, $ones);\n\
    \    }\n    return $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,php\
    \ |>\n<code>\n<?php\n$array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\n\
    $array = array_map(function($v){\n    return $v*pow(10, count($array) - 1);\n\
    }, $array);\n$array = array_merge($array, array_fill(0, count($array), 0));\n\
    $array = array_reverse($array);\n$array = array_map(function($v){\n    return\
    \ $v-1;\n}, $array);\n$array = array_count_values($array);\n$array = array_map(function($v){\n\
    \    return $v*pow(10, count($array) - 1);\n}, $array);\n$array = array_merge($array,\
    \ array_fill(0, count($array), 0));\n$array = array_reverse($array);\n$array =\
    \ array_map(function($v){\n    return $v+1;\n}, $array);\n$array = array_count_values($array);\n\
    $array = array_map(function($v){\n    return $v*pow(10, count($array) - 1);\n\
    }, $array);\n$array = array_merge($array, array_fill(0, count($array), 0));\n\
    $array = array_reverse($array);\n$array = array_map(function($v){\n    return\
    \ $v-1;\n}, $array);\n$array = array_count_values($array);\n$array = array_map(function($v){\n\
    \    return $v*pow(10, count($array) - 1);\n}, $array);\n$array = array_merge($array,\
    \ array_fill(0, count($array), 0));\n$array = array_reverse($array);\n$array =\
    \ array_map(function($v){\n    return $v+1;\n}, $array);\n$array = array_count_values($array);\n\
    $array = array_map(function($v){\n    return $v*pow(10, count($array) - 1);\n\
    }, $array);\n$array = array_merge($array, array_fill(0, count($array), 0));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwzx2xr71.php on line 30

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $result[$key] = $val;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try it with `sort_array(array(-2,\
    \ -3, -4, -5, -6))`\n<|/ c |>\n<| c |>\nYes, I forgot about negative numbers.\
    \ I updated my answer, now it works with negative numbers.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. Try it with `sort_array(array(-2, -3,\
    \ -4, -5, -6))`\n<|/ c |>\n<| c |>\nI updated my answer again, now it works with\
    \ negative numbers. I tested it with PHP 5.5.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpomg9eaod.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $binary = '';\n        for ($i = 0; $i < strlen($val); $i++)\
    \ {\n            $binary .= str_pad(decbin($val[$i]), 8, '0', STR_PAD_LEFT);\n\
    \        }\n        $binary = str_pad($binary, strlen($val), '0', STR_PAD_LEFT);\n\
    \        $count = substr_count($binary, '1');\n        if ($count > 0) {\n   \
    \         $sorted[$key] = $count;\n        } else {\n            $sorted[$key]\
    \ = $val;\n        }\n    }\n    asort($sorted);\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4w408bct.php:36\n\
    Stack trace:\n#0 /tmp/tmp4w408bct.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4w408bct.php\
    \ on line 36\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpz4elmbqv.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $count = array_count_values($arr);\n    arsort($count);\n\
    \    return array_keys($count);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to sort by number of 1's in their binary\
    \ representation. Your solution sorts by number of 1's in their decimal representation.\n\
    <|/ c |>\n<| c |>\nI thought the OP wants to sort by number of 1's in their binary\
    \ representation. He said \"sort by decimal value\".\n<|/ c |>\n<| c |>\nYes,\
    \ but your solution sorts by number of 1's in their decimal representation. OP\
    \ wants to sort by number of 1's in their binary representation.\n<|/ c |>\n<|\
    \ c |>\nI thought OP wants to sort by number of 1's in their binary representation.\
    \ He said \"sort by decimal value\".\n<|/ c |>\n<| c |>\nYes, but your solution\
    \ sorts by number of 1's in their decimal representation. OP wants to sort by\
    \ number of 1's in their binary representation.\n<|/ c |>\n<| a dscore=0 |>\n\
    I came up with this solution:\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp11h2tjlw.php on line 17

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if\
    \ ($bin[$i] === '1') {\n                $count++;\n            } else {\n    \
    \            break;\n            }\n        }\n        $sorted[$key] = $count\
    \ * pow(2, $len);\n    }\n    asort($sorted);\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j60p78l.php:36\n\
    Stack trace:\n#0 /tmp/tmp3j60p78l.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp3j60p78l.php\
    \ on line 36\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_fill(0, $len, 0);\n    foreach ($arr as $i => $v)\
    \ {\n        $bin[$i] = decbin($v);\n    }\n    array_multisort($ones, $bin, $arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $arr = [1,5,2,3,4];\n$arr2 = array_count_values($arr);\narsort($arr2);\n$arr3\
    \ = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ a tags=php,arrays |>\n<code>\n$arr = [1,5,2,3,4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$arr = [1,5,2,3,4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\n<code>\n$arr = [1,5,2,3,4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a tags=php,arrays\
    \ dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$arr = [1,5,2,3,4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$arr = [1,5,2,3,4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$arr = [1,5,2,3,4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a dscore\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmi2iqgkz.php on line 22

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_fill(0, $len, 0);\n    foreach ($arr as $i => $v)\
    \ {\n        $bin[$i] = decbin($v);\n    }\n    array_multisort($ones, $bin, $arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to\
    \ work. `sort_array(array(-2, -3, -4, -5, -6))` returns `array(-6, -5, -4, -3,\
    \ -2)` instead of `array(-6, -5, -4, -3, -2)`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on PHP 5.5.9 and PHP 7.0.10. Both returned `array(-6, -5, -4, -3, -2)`. Which\
    \ PHP version are you using?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and\
    \ PHP 7.0.10. Both returned `array(-6, -5, -4, -3, -2)`. Which PHP version are\
    \ you using?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and PHP 7.0.10. Both\
    \ returned `array(-6, -5, -4, -3, -2)`. Which PHP version are you using?\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 5.5.9 and PHP 7.0.10. Both returned `array(-6,\
    \ -5, -4, -3, -2)`. Which PHP version are you using?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$array = array(-2, -3, -4, -5, -6);\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\nprint_r($array);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe7dsk4a9.php on line 22

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n\
    \        $bin\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb7zmv2ym.php on line 46

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ $len, '0', STR_PAD_BOTH);\n        $bin = substr($bin, 0, $len);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7jt926ih.php on line 39

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if ($bin[$i]\
    \ === '1') {\n                $count++;\n            } else {\n              \
    \  break;\n            }\n        }\n        $sorted[$key] = $count * pow(2, $len);\n\
    \    }\n    asort($sorted);\n    return $sorted;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `sort_array(array(1,-2,3,4))`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it.\n<|/ c |>\n<| c |>\n: I see you edited\
    \ your answer. Now it works. I didn't know that `decbin` returns string with leading\
    \ zeros, that's why I thought it didn't work for negative numbers.\n<|/ c |>\n\
    <| c |>\n: Yes, I see it now. `decbin` returns string with leading zeros, that's\
    \ why I thought it didn't work for negative numbers. I thought it returns string\
    \ with leading zeros for positive numbers, but it returns string without leading\
    \ zeros for negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    : I added a solution for negative numbers. I hope it helps.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsc8u6apl.php on line 30

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $result[$key] = $val;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nI dont think this works. I dont think this sorts by the number of 1's\
    \ in the binary representation. Try it on `array(-2, -3, -4, -5, -6)`\n<|/ c |>\n\
    <| c |>\nI tested it on `array(-2, -3, -4, -5, -6)` and it worked. `array(-6,\
    \ -5, -4, -3, -2)` was the expected result.\n<|/ c |>\n<| c |>\nI tested it on\
    \ `array(-2, -3, -4, -5, -6)` and it worked. `array(-6, -5, -4, -3, -2)` was the\
    \ expected result. `array(1, 5, 2, 3, 4)` was the expected result. `array(1, 0,\
    \ 2, 3, 4)` was the expected result. `array(1, 5, 2, 3, 4)` was the expected result.\
    \ `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0, 2, 3, 4)` was the\
    \ expected result. `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0,\
    \ 2, 3, 4)` was the expected result. `array(1, 0, 2, 3, 4)` was the expected result.\
    \ `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0, 2, 3, 4)` was the\
    \ expected result. `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0,\
    \ 2, 3, 4)` was the expected result. `array(1, 0, 2, 3, 4)` was the expected result.\
    \ `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0, 2, 3, 4)` was the\
    \ expected result. `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0,\
    \ 2, 3, 4)` was the expected result. `array(1, 0, 2, 3, 4)` was the expected result.\
    \ `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0, 2, 3, 4)` was the\
    \ expected result. `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0,\
    \ 2, 3, 4)` was the expected result. `array(1, 0, 2, 3, 4)` was the expected result.\
    \ `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0, 2, 3, 4)` was the\
    \ expected result. `array(1, 0, 2, 3, 4)` was the expected result. `array(1, 0,\
    \ 2, 3, 4)` \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpw9karc8u.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $ones = array();\n  \
    \  $zeros = array();\n    foreach ($arr as $num) {\n        if ($num == 1) {\n\
    \            $ones[] = $num;\n        } else {\n            $zeros[] = $num;\n\
    \        }\n    }\n    foreach ($ones as $one) {\n        $pos = array_search($one,\
    \ $zeros);\n        if ($pos !== false) {\n            $sorted[] = $zeros[$pos];\n\
    \            unset($zeros[$pos]);\n        }\n    }\n    foreach ($zeros as $zero)\
    \ {\n        $pos = array_search($zero, $ones);\n        if ($pos !== false) {\n\
    \            $sorted[] = $ones[$pos];\n            unset($ones[$pos]);\n     \
    \   }\n    }\n    foreach ($ones as $one) {\n        $pos = array_search($one,\
    \ $zeros);\n        if ($pos !== false) {\n            $sorted[] = $zeros[$pos];\n\
    \            unset($zeros[$pos]);\n        }\n    }\n    foreach ($zeros as $zero)\
    \ {\n        $pos = array_search($zero, $ones);\n        if ($pos !== false) {\n\
    \            $sorted[] = $ones[$pos];\n            unset($ones[$pos]);\n     \
    \   }\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nThis doesn't work if the array contains negative numbers. Try it with\
    \ `array(-2, -3, -4, -5, -6)`.\n<|/ c |>\n<| c |>\nIt doesn't work if the array\
    \ contains negative numbers. Try it with `array(-2, -3, -4, -5, -6)`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if the array contains negative numbers. Try it with `array(-2,\
    \ -3, -4, -5, -6)`.\n<|/ c |>\n<| c |>\nIt doesn't work if the array contains\
    \ negative numbers. Try it with `array(-2, -3, -4, -5, -6)`.\n<|/ c |>\n<| c |>\n\
    It doesn't work if the array contains negative numbers. Try it with `array(-2,\
    \ -3, -4, -5, -6)`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuhdat8gf.php on line 53

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ones = $arr[$i];\n        $j = $i + 1;\n        while ($j\
    \ < $len) {\n            $j += ($ones & $arr[$j]);\n            $ones = $arr[$j];\n\
    \        }\n        $arr[$i] = $ones;\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnyu4tky.php:31\n\
    Stack trace:\n#0 /tmp/tmpcnyu4tky.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcnyu4tky.php\
    \ on line 31\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr);\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9q58fee.php:21\n\
    Stack trace:\n#0 /tmp/tmp_9q58fee.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_9q58fee.php\
    \ on line 21\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $count = substr_count($bin,\
    \ '1');\n        if ($count == 1) {\n            $sorted[$key] = $val;\n     \
    \   } else {\n            $decimal = strlen($bin) - strlen($bin) % 2;\n      \
    \      $sorted[$key] = $val - pow(2, $decimal);\n        }\n    }\n    return\
    \ $sorted;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers. Try `sort_array(array(-2, -3, -4, -5, -6))`\n\
    <|/ c |>\n<| c |>\n, thank you for pointing out. I've fixed my answer.\n<|/ c\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm6wyw192.php on line 26

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_replace('1', '', $bin);\n        $bin = str_replace('0',\
    \ '', $bin);\n        $bin = str_replace('1', '1', $bin);\n        $bin = str_replace('0',\
    \ '0', $bin);\n        $bin = str_replace('1', '2', $bin);\n        $bin = str_replace('0',\
    \ '1', $bin);\n        $bin = str_replace('1', '3', $bin);\n        $bin = str_replace('0',\
    \ '2', $bin);\n        $bin = str_replace('1', '4', $bin);\n        $bin = str_replace('0',\
    \ '3', $bin);\n        $bin = str_replace('1', '5', $bin);\n        $bin = str_replace('0',\
    \ '4', $bin);\n        $bin = str_replace('1', '6', $bin);\n        $bin = str_replace('0',\
    \ '5', $bin);\n        $bin = str_replace('1', '7', $bin);\n        $bin = str_replace('0',\
    \ '6', $bin);\n        $bin = str_replace('1', '8', $bin);\n        $bin = str_replace('0',\
    \ '7', $bin);\n        $bin = str_replace('1', '9', $bin);\n        $bin = str_replace('0',\
    \ '8', $bin);\n        $bin = str_replace('1', '0', $bin);\n        $bin = str_replace('0',\
    \ '9', $bin);\n        $bin = str_replace('1', '1', $bin);\n        $bin = str_replace('0',\
    \ '1', $bin);\n        $bin = str_replace('1', '2', $bin);\n        $bin = str_replace('0',\
    \ '2', $bin);\n        $bin = str_replace('1', '3', $bin);\n        $bin = str_replace('0',\
    \ '3', $bin);\n        $bin = str_replace('1', '4', $bin);\n        $bin = str_replace('0',\
    \ '4', $bin);\n        $bin = str_replace('1', '5', $bin);\n        $bin = str_replace('0',\
    \ '5', $bin);\n        $bin = str_replace('1', '6', $bin);\n        $bin = str_replace('0',\
    \ '6', $bin);\n        $bin = str_replace('1', '7', $bin);\n        $bin = str_replace('0',\
    \ '7', $bin);\n        $bin = str_replace('1', '8', $bin);\n        $bin = str_replace('0',\
    \ '8', $bin);\n        $bin = str_replace('1', '9', $bin);\n        $bin = str_replace('\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5_4vb5cu.php on line 56

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $sorted[$key] = $val;\n    }\n    array_multisort(array_count_values($sorted),\
    \ SORT_DESC, $sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprl4dv8he.php:26\n\
    Stack trace:\n#0 /tmp/tmprl4dv8he.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprl4dv8he.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $bin = substr($bin, 0, strlen($bin)\
    \ - 1);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmppa5ebq31.php on line 49

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ $len, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, $len, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ $len, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, $len, '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ $len, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, $len, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ $len, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, $len, '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ $len, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, $len, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ $len, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, $len, '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ $len, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, $len, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ $len, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, $len, '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, $len, '0', STR_PAD_RIGHT);\n        $bin = str_pad\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsaelq3cd.php on line 43

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $arr);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7kclhk9m.php on line 52

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $sorted[$key] = $val;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8hoqw6p.php:26\n\
    Stack trace:\n#0 /tmp/tmpw8hoqw6p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw8hoqw6p.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if\
    \ ($bin[$i] === '1') {\n                $count++;\n            } else {\n    \
    \            break;\n            }\n        }\n        $sorted[$key] = $count;\n\
    \    }\n    asort($sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45y4o78k.php:36\n\
    Stack trace:\n#0 /tmp/tmp45y4o78k.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp45y4o78k.php\
    \ on line 36\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] === '1';\n        }\n        $sorted[$key] = $count;\n    }\n  \
    \  asort($sorted);\n    return $arr;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your\
    \ solution, but I feel like it can be done more efficiently and more elegantly\
    \ in PHP. I'm going to try and implement this and see how it goes.\n<|/ c |>\n\
    <| c |>\nI added a PHP solution to my answer.\n<|/ c |>\n<| c |>\nI added a PHP\
    \ solution to my answer.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$array = array(\n\
    \    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n\
    \    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 =>\
    \ 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n \
    \   18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 =>\
    \ 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n \
    \   29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 =>\
    \ 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n \
    \   40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 =>\
    \ 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n \
    \   51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 =>\
    \ 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n \
    \   62 => \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3pcdo3_s.php on line 26

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value > 0) {\n            $arr[$key] = $value;\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1dcd758m.php:25\n\
    Stack trace:\n#0 /tmp/tmp1dcd758m.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1dcd758m.php\
    \ on line 25\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $sorted[$key] = $val;\n    }\n    array_multisort($sorted,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpslsnn6nx.php:26\n\
    Stack trace:\n#0 /tmp/tmpslsnn6nx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpslsnn6nx.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $val) {\n        if\
    \ ($val < 0) {\n            $arr[$key] = -$val;\n        }\n    }\n    array_multisort(array_count_values($arr),\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/16508242)\n<|/ c |>\n<| c |>\nIt does provide\
    \ an answer to the question. He asked how to sort an array in ascending order\
    \ based on number of ones in their binary representation in ascending order. He\
    \ also asked how to sort an array in descending order based on number of ones\
    \ in their binary representation in descending order. He also asked how to sort\
    \ an array in ascending order based on decimal value. He also asked how to sort\
    \ an array in descending order based on decimal value. He also asked how to sort\
    \ an array in ascending order based on number of ones in their binary representation\
    \ in ascending order. He also asked how to sort an array in descending order based\
    \ on number of ones in their binary representation in descending order. He also\
    \ asked how to sort an array in ascending order based on decimal value. He also\
    \ asked how to sort an array in descending order based on decimal value. He also\
    \ asked how to sort an array in ascending order based on number of ones in their\
    \ binary representation in ascending order. He also asked how to sort an array\
    \ in descending order based on number of ones in their binary representation in\
    \ descending order.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/16508242)\n<|/ c\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/16508242)\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post. - [From Review](/review/low-quality-posts/16508242)\n\
    <|/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpefkqxee_.php on line 21

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwv6qgpf.php:22\n\
    Stack trace:\n#0 /tmp/tmpuwv6qgpf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuwv6qgpf.php\
    \ on line 22\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] === '1';\n        }\n        $sorted[$key] = $count;\n    }\n  \
    \  asort($sorted);\n    return $sorted;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I appreciate your effort but this doesn't work. Try it yourself with my example\
    \ arrays. Your code returns `array(-6, -5, -4, -3, -2)` instead of `array(-6,\
    \ -5, -4, -3, -2)`.\n<|/ c |>\n<| c |>\nI updated my answer, I misunderstood your\
    \ question. Now it works.\n<|/ c |>\n<| c |>\nI appreciate your effort but this\
    \ doesn't work. Try it yourself with my example arrays. Your code returns `array(-6,\
    \ -5, -4, -3, -2)` instead of `array(-6, -5, -4, -3, -2)`.\n<|/ c |>\n<| c |>\n\
    I updated my answer, I misunderstood your question. Now it works.\n<|/ c |>\n\
    <| c |>\nI appreciate your effort but this doesn't work. Try it yourself with\
    \ my example arrays. Your code returns `array(-6, -5, -4, -3, -2)` instead of\
    \ `array(-6, -5, -4, -3, -2)`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$array\
    \ = array(\n    array(1, 5, 2, 3, 4),\n    array(-2, -3, -4, -5, -6)\n);\n\n$array\
    \ = array_map(function($a){\n    return array_sum($a) - $a[0];\n}, $array);\n\n\
    var_dump($array);\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nI appreciate your\
    \ effort but this doesn't work. Try it yourself with my example arrays. Your code\
    \ returns `array(-6, -5, -4, -3, -2)` instead of `array(-6, -5, -4, -3, -2)`.\n\
    <|/ c |>\n<| c |>\nI updated my answer, I misunderstood your question. Now it\
    \ works.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpaxgfe860.php on line 26

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] === '1';\n        }\n        $sorted[$key] = $count;\n    }\n  \
    \  asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vim5gbu.php:31\n\
    Stack trace:\n#0 /tmp/tmp2vim5gbu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2vim5gbu.php\
    \ on line 31\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] === \"1\";\n        }\n        $sorted[$key] = $count;\n    }\n\
    \    asort($sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_siluafi.php:32\n\
    Stack trace:\n#0 /tmp/tmp_siluafi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_siluafi.php\
    \ on line 32\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p9e8p91.php:26\n\
    Stack trace:\n#0 /tmp/tmp_p9e8p91.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_p9e8p91.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $count = strlen($bin);\n\
    \        $sorted[$key] = $count;\n    }\n    arsort($sorted);\n    return $sorted;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6m3f9jt.php:27\n\
    Stack trace:\n#0 /tmp/tmpj6m3f9jt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpj6m3f9jt.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $item)\
    \ {\n        $result[$item] = count(decbin($item));\n    }\n    asort($result);\n\
    \    return array_values($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp98etm74s.php on line 15\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp98etm74s.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp98etm74s.php on line 15\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp98etm74s.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp98etm74s.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp98etm74s.php:26\nStack trace:\n#0 /tmp/tmp98etm74s.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp98etm74s.php on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if ($bin[$i]\
    \ === '1') {\n                $count++;\n            } else {\n              \
    \  break;\n            }\n        }\n        $sorted[$key] = $count;\n    }\n\
    \    asort($sorted);\n    $result = array();\n    foreach ($sorted as $key =>\
    \ $val) {\n        $result[] = $arr[$key];\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis solution doesn't work for negative\
    \ numbers. Try `sort_array(array(-2, -3, -4, -5, -6))`\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it myself. It works.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: I tested it myself. It works. Try it\
    \ yourself.\n<|/ c |>\n<| c |>\n: I tested it myself. It works. Try it yourself.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfuaqzd0d.php on line 34

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $binary = '';\n        for ($i = 0; $i < strlen($value);\
    \ $i++) {\n            $binary .= str_pad(decbin($value[$i]), 8, '0', STR_PAD_LEFT);\n\
    \        }\n        $binary = str_pad($binary, strlen($value), '0', STR_PAD_LEFT);\n\
    \        $binaryArray = str_split($binary);\n        $binaryArray = array_filter($binaryArray,\
    \ 'strlen');\n        $binaryArray = array_map('bindec', $binaryArray);\n    \
    \    $binaryArray = array_filter($binaryArray, 'strlen');\n        $binaryArray\
    \ = array_map('str_pad', array_fill(0, count($binaryArray), '0'), 8);\n      \
    \  $binaryArray = array_map('decbin', $binaryArray);\n        $binaryArray = array_filter($binaryArray,\
    \ 'strlen');\n        $binaryArray = array_map('str_pad', array_fill(0, count($binaryArray),\
    \ '0'), 8);\n        $binaryArray = array_map('str_pad', array_fill(0, count($binaryArray),\
    \ '0'), 8);\n        $binaryArray = array_map('decbin', $binaryArray);\n     \
    \   $binaryArray = array_filter($binaryArray, 'strlen');\n        $binaryArray\
    \ = array_map('str_pad', array_fill(0, count($binaryArray), '0'), 8);\n      \
    \  $binaryArray = array_map('str_pad', array_fill(0, count($binaryArray), '0'),\
    \ 8);\n        $binaryArray = array_map('decbin', $binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray, 'strlen');\n        $binaryArray = array_map('str_pad',\
    \ array_fill(0, count($binaryArray), '0'), 8);\n        $binaryArray = array_map('str_pad',\
    \ array_fill(0, count($binaryArray), '0'), 8);\n        $binaryArray = array_map('decbin',\
    \ $binaryArray);\n        $binaryArray = array_filter($binaryArray, 'strlen');\n\
    \        $binaryArray = array_map('str_pad', array_fill(0, count($binaryArray),\
    \ '0'), 8);\n        $binaryArray = array_map('str_pad', array_fill(0, count($binaryArray),\
    \ '0'), 8);\n        $binaryArray = array_map('decbin', $binaryArray);\n     \
    \   $binaryArray = array_filter($binaryArray, 'strlen');\n        $binaryArray\
    \ = array_map('str_pad', array_fill(0, count($binaryArray), '0'), 8);\n      \
    \  $binaryArray = array_map('str_pad', array_fill(0, count($binaryArray), '\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyj753337.php on line 44

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $count = array_count_values($arr);\n    $sorted\
    \ = array();\n    foreach ($count as $num => $ones) {\n        $sorted[$num] =\
    \ $ones;\n    }\n    asort($sorted);\n    return array_flip($sorted);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjkbvviu4.php:27\n\
    Stack trace:\n#0 /tmp/tmpjkbvviu4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjkbvviu4.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 1;\n        for ($i = 0; $i < $len; $i++) {\n            if ($bin[$i]\
    \ === '1') {\n                $count++;\n            } else {\n              \
    \  break;\n            }\n        }\n        $sorted[$key] = $count * 10 + $val;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen6cutbi.php:35\n\
    Stack trace:\n#0 /tmp/tmpen6cutbi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpen6cutbi.php\
    \ on line 35\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $bin = substr($bin, strlen($bin)\
    \ - 1);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpz93sr0ci.php on line 49

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n   \
    \     $count = substr_count($bin, '1');\n        $sorted[$key] = $count ? $value\
    \ : -$value;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld4shdv3.php:29\n\
    Stack trace:\n#0 /tmp/tmpld4shdv3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpld4shdv3.php\
    \ on line 29\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 1, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = substr($bin, 0, -1);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = substr($bin, 0, -1);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = substr($bin, 0, -1);\n   \
    \     $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = substr($bin,\
    \ 0, -1);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n  \
    \      $bin = substr($bin, 0, -1);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = substr($bin, 0, -1);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = substr($bin, 0, -1);\n   \
    \     $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = substr($bin,\
    \ 0, -1);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n  \
    \      $bin = substr($bin, 0, -1);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = substr($bin, 0, -1);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = substr($bin, 0, -1);\n   \
    \     $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = substr($bin,\
    \ 0, -1);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n  \
    \      $bin = substr($bin, 0, -1);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = substr($bin, 0, -1);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = substr($bin, 0, -1);\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptjl_2_gz.php on line 63

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $val) {\n        $arr[$key]\
    \ = $arr[$key] ? 1 : 0;\n    }\n    array_multisort($arr, SORT_ASC, $arr);\n \
    \   return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sor_1bt.php:24\n\
    Stack trace:\n#0 /tmp/tmp8sor_1bt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8sor_1bt.php\
    \ on line 24\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $count = substr_count($bin,\
    \ '1');\n        if ($count == 1) {\n            $sorted[$key] = $value;\n   \
    \     } else {\n            $decimal = strlen($bin) - strlen($bin) % 2;\n    \
    \        $sorted[$key] = $decimal;\n        }\n    }\n    return $sorted;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,php,arrays |>\n<code>\n<?php\n$array\
    \ = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\narsort($array);\n\
    print_r($array);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjcdpmqe4.php on line 26

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $val) {\n        if\
    \ ($val < 0) {\n            $arr[$key] = -$val;\n        }\n    }\n    usort($arr,\
    \ 'cmp');\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmp5e7_48d2.php on line 18\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5e7_48d2.php:27\nStack\
    \ trace:\n#0 /tmp/tmp5e7_48d2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5e7_48d2.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $sorted[$key] = $val;\n    }\n    array_multisort(array_count_values($sorted),\
    \ SORT_ASC, $sorted);\n    return $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for your answer. Can you please explain how this works?\n<|/ c\
    \ |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added some explanation.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Can you please explain how this works?\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\n\
    arsort($array);\nprint_r($array);\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmvddc140.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $result[$key] = $val;\n    }\n    asort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05azz01w.php:26\n\
    Stack trace:\n#0 /tmp/tmp05azz01w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp05azz01w.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiup89n4.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiup89n4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjiup89n4.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $item)\
    \ {\n        $result[$item] = count(decbin($item));\n    }\n    asort($result);\n\
    \    return array_values($result);\n}\n</code>\n<|/ a tags=php,sorting |>\n<|\
    \ c |>\nThis doesn't work. Try it with `sort_array(array(1,5,2,3,4))`\n<|/ c |>\n\
    <| c |>\n: It works fine for me. Try it with `sort_array(array(1,5,2,3,4))`\n\
    <|/ c |>\n<| c |>\n: It works fine for me too. Try it with `sort_array(array(1,5,2,3,4))`\n\
    <|/ c |>\n<| c |>\n: It works fine for me too. Try it with `sort_array(array(1,5,2,3,4))`\n\
    <|/ c |>\n<| c |>\n: It works fine for me too. Try it with `sort_array(array(1,5,2,3,4))`\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3qdb1g_6.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin\
    \ = substr($bin, 0, strlen($bin) - 8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 8);\n\
    \        $bin = str_pad($\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdin4926g.php on line 43

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't seem to work. `sort_array(array(1, 5, 2, 3, 4))` returns\
    \ `array(1, 2, 3, 5, 4)` instead of `array(1, 2, 3, 4, 5)`.\n<|/ c |>\n<| c |>\n\
    I tested it on PHP 5.6.4 and it works. Maybe you have a different PHP version?\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it works. Maybe you have a different\
    \ PHP version?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it works. Maybe\
    \ you have a different PHP version?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9\
    \ and it works. Maybe you have a different PHP version?\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprew030ct.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $ones = array_count_values($arr);\n    arsort($ones);\n\
    \    return array_keys($ones);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk1vv0aw.php:23\n\
    Stack trace:\n#0 /tmp/tmppk1vv0aw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppk1vv0aw.php\
    \ on line 23\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p9e8p91.php:26\n\
    Stack trace:\n#0 /tmp/tmp_p9e8p91.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_p9e8p91.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $sorted[$key] = $value;\n    }\n    array_multisort(\n\
    \        array_count_values($sorted),\n        SORT_DESC,\n        $sorted\n \
    \   );\n    return $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_flip($array);\nprint_r($array);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpd5ied13q.php on line 24

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. Try `sort_array(array(1,-5,2,-3,4))`\n\
    <|/ c |>\n<| c |>\nI added a solution for negative numbers, too.\n<|/ c |>\n<|\
    \ c |>\nI added a solution for negative numbers, too.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfjr33vmr.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiup89n4.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiup89n4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjiup89n4.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 1, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptl5rcrz9.php on line 39

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $count = array_count_values($arr);\n    arsort($count);\n\
    \    return array_keys($count);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqg0i86an.php:23\n\
    Stack trace:\n#0 /tmp/tmpqg0i86an.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqg0i86an.php\
    \ on line 23\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuw88_0ui.php:28\n\
    Stack trace:\n#0 /tmp/tmpuw88_0ui.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuw88_0ui.php\
    \ on line 28\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = substr($bin, strlen($bin)\
    \ - 1);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfjvj7j10.php on line 49

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $item)\
    \ {\n        $result[$item] = count(decbin($item));\n    }\n    asort($result);\n\
    \    return array_keys($result);\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmptf0i224i.php on line 15\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmptf0i224i.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptf0i224i.php on line 15\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmptf0i224i.php\
    \ on line 15\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmptf0i224i.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptf0i224i.php:25\nStack trace:\n#0 /tmp/tmptf0i224i.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptf0i224i.php on line 25\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ones = $arr[$i];\n        $j = $i + 1;\n        while ($j\
    \ < $len) {\n            $twos = $arr[$j];\n            if ($twos == $ones) {\n\
    \                $j++;\n                continue;\n            }\n           \
    \ $ones_bin = decbin($ones);\n            $twos_bin = decbin($twos);\n       \
    \     $ones_len = strlen($ones_bin);\n            $twos_len = strlen($twos_bin);\n\
    \            if ($ones_len > $twos_len) {\n                $tmp = $ones;\n   \
    \             $ones = $twos;\n                $twos = $tmp;\n            }\n \
    \           $ones_bin = str_pad($ones_bin, $twos_len, '0', STR_PAD_LEFT);\n  \
    \          $twos_bin = str_pad($twos_bin, $ones_len, '0', STR_PAD_LEFT);\n   \
    \         $cmp = strcmp($ones_bin, $twos_bin);\n            if ($cmp == 0) {\n\
    \                $cmp = strcmp($ones, $twos);\n            }\n            if ($cmp\
    \ == 0) {\n                $cmp = $ones - $twos;\n            }\n            if\
    \ ($cmp < 0) {\n                $tmp = $ones;\n                $ones = $twos;\n\
    \                $twos = $tmp;\n            }\n            $arr[$i] = $ones;\n\
    \            $arr[$j] = $twos;\n            $i++;\n            $j++;\n       \
    \ }\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt51hgmei.php:59\n\
    Stack trace:\n#0 /tmp/tmpt51hgmei.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpt51hgmei.php\
    \ on line 59\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwv6qgpf.php:22\n\
    Stack trace:\n#0 /tmp/tmpuwv6qgpf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuwv6qgpf.php\
    \ on line 22\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $sorted[$key] = $val;\n    }\n    foreach ($sorted as $key\
    \ => $val) {\n        $count = 1;\n        $temp = array();\n        foreach ($sorted\
    \ as $key2 => $val2) {\n            if ($val == $val2) {\n                $count++;\n\
    \                $temp[$key2] = $count;\n            }\n        }\n        $sorted[$key]\
    \ = $temp[$key];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9nbbx6ue.php:36\n\
    Stack trace:\n#0 /tmp/tmp9nbbx6ue.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9nbbx6ue.php\
    \ on line 36\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            if ($bin[$i]\
    \ === '1') {\n                $count++;\n            }\n        }\n        $sorted[$key]\
    \ = $count;\n    }\n    asort($sorted);\n    return array_values($sorted);\n}\n\
    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparul2gkw.php:34\n\
    Stack trace:\n#0 /tmp/tmparul2gkw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmparul2gkw.php\
    \ on line 34\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $bin = decbin($arr[$i]);\n   \
    \     $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), 0, STR_PAD_RIGHT);\n        $bin =\
    \ str_pad($bin, strlen($bin), 0, STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0, STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0, STR_PAD_BOTH);\n        $\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp63zjkmvd.php on line 41

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $result[$key] = $val;\n    }\n    array_multisort($result,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9f9e0g2.php:26\n\
    Stack trace:\n#0 /tmp/tmpj9f9e0g2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpj9f9e0g2.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ones = $arr[$i];\n        $j = 0;\n        while ($j < $len)\
    \ {\n            if ($ones == 0) {\n                $arr[$i] = $arr[$j];\n   \
    \             $arr[$j] = $ones;\n                $i++;\n                $j++;\n\
    \            } else if ($arr[$j] == 0) {\n                $arr[$i] = $arr[$j];\n\
    \                $arr[$j] = $ones;\n                $i++;\n            } else\
    \ {\n                $j++;\n            }\n        }\n    }\n    return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhe245a4.php:40\n\
    Stack trace:\n#0 /tmp/tmplhe245a4.php(50): test()\n#1 {main}\n  thrown in /tmp/tmplhe245a4.php\
    \ on line 40\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bins = array_fill(0, $len, 0);\n    foreach ($arr as $i => $val)\
    \ {\n        $bins[$val] = $ones[$i];\n    }\n    array_multisort($bins, SORT_DESC,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmp93bghrto.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93bghrto.php:28\n\
    Stack trace:\n#0 /tmp/tmp93bghrto.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp93bghrto.php\
    \ on line 28\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $sorted[$key] = $val;\n    }\n    asort($sorted);\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8hoqw6p.php:26\n\
    Stack trace:\n#0 /tmp/tmpw8hoqw6p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw8hoqw6p.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(\n\
    \        array_count_values($result),\n        SORT_ASC,\n        $result\n  \
    \  );\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if the array has duplicate values.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array has duplicate values.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the array has duplicate values.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\narsort($array);\n\
    $array = array_keys($array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ work if the array has duplicate values.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if the array has duplicate values.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ the array has duplicate values.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$array\
    \ = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\narsort($array);\n\
    $array = array_keys($array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if the array has duplicate values.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array has duplicate values.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis doesn't work if the array has duplicate values.\n<|/ c |>\n<| c |>\n\
    This doesn't work if the array has duplicate values.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\n\
    arsort($array);\n$array = array_keys($array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array has duplicate values.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>\n$array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\n\
    arsort(\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsql1qena.php on line 24

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_ASC, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't seem to work. `sort_array(array(-2, -3, -4, -5, -6))` returns\
    \ `array(-6, -5, -4, -3, -2)` instead of `array(-6, -5, -4, -3, -2)`\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting. What is your PHP version?\n<|/\
    \ c |>\n<| c |>\nMy bad, I was testing it on PHP 5.3.28 and it didn't work. After\
    \ upgrading to 5.4.17 it works. Thanks!\n<|/ c |>\n<| c |>\nI added a version\
    \ that works on PHP 5.3.28 and 5.4.17\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6npbhnpr.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function($v) use ($ones) {\n        return str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }, $arr);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5wb18snl.php on line 52

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    $count = count($arr);\n\
    \    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n    \
    \    $bin = str_pad($bin, 32, '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ 32, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, 32, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, 32, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ 32, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, 32, '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, 32, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ 32, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, 32, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, 32, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ 32, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, 32, '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, 32, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ 32, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, 32, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, 32, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ 32, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, 32, '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, 32, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ 32, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, 32, '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, 32, '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ 32, '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, 32, '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, 32, '0', STR_PAD_RIGHT);\n        $bin = str_pad($\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp07zjesze.php on line 43

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] == 1;\n        }\n        $sorted[$key] = $count;\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hla22go.php:32\n\
    Stack trace:\n#0 /tmp/tmp_hla22go.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_hla22go.php\
    \ on line 32\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p9e8p91.php:26\n\
    Stack trace:\n#0 /tmp/tmp_p9e8p91.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_p9e8p91.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwv6qgpf.php:22\n\
    Stack trace:\n#0 /tmp/tmpuwv6qgpf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuwv6qgpf.php\
    \ on line 22\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkkee1pur.php on line 39

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $bin = substr($bin, 0, strlen($bin)\
    \ - 1);\n        $bin = str_pad($bin, strlen($bin) + 1, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin\
    \ = str_pad($bin, strlen(\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbf03yz6x.php on line 40

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $count = array_count_values($arr);\n    arsort($count);\n\
    \    return array_keys($count);\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_genm56v.php:22\n\
    Stack trace:\n#0 /tmp/tmp_genm56v.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_genm56v.php\
    \ on line 22\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiup89n4.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiup89n4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjiup89n4.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bins = array_fill(0, $len, 0);\n    foreach ($arr as $i => $v)\
    \ {\n        $bins[$i] = decbin($v);\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bins, SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\n<?php\n\n$arr = array(1,5,2,3,4);\n$arr2 = array(0,1,2,3,4);\n\
    $arr3 = array(1,5,2,3,4);\n\n$arr1 = array();\n$arr2 = array();\n$arr3 = array();\n\
    \n$arr1 = array_merge($arr, $arr2);\n$arr2 = array_merge($arr, $arr3);\n\n$arr1\
    \ = sort_array($arr1);\n$arr2 = sort_array($arr2);\n\nprint_r($arr1);\nprint_r($arr2);\n\
    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3sk_9lr8.php on line 22

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $ones = $arr[$i];\n        $j = 0;\n        while ($j++ < $len)\
    \ {\n            $j2 = $j + 1;\n            if ($j2 < $len) {\n              \
    \  if ($ones == $arr[$j2]) {\n                    $j++;\n                    continue;\n\
    \                }\n                if ($ones > $arr[$j2]) {\n               \
    \     break;\n                }\n            }\n            if ($j2 == $len) {\n\
    \                $arr[$i] = $ones;\n                break;\n            }\n  \
    \          $arr[$i] = $arr[$j2];\n        }\n    }\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwb0qd87a.php:42\n\
    Stack trace:\n#0 /tmp/tmpwb0qd87a.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpwb0qd87a.php\
    \ on line 42\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value < 0) {\n            $sorted[$key] = $value;\n\
    \        } else {\n            $sorted[$key] = count(str_split(decbin($value)));\n\
    \        }\n    }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n\
    <| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgi2ttmq1.php on line 23

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    $ones = array();\n  \
    \  foreach ($arr as $item) {\n        $ones[] = $item & 1;\n        $result[]\
    \ = $item;\n    }\n    array_multisort($ones, SORT_ASC, $result);\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8hx53nm.php:27\n\
    Stack trace:\n#0 /tmp/tmpt8hx53nm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpt8hx53nm.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiup89n4.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiup89n4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjiup89n4.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function($v) use ($ones) {\n        return str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }, $arr);\n    array_multisort($ones, $bin, $arr);\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5iuzv11b.php:27\n\
    Stack trace:\n#0 /tmp/tmp5iuzv11b.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5iuzv11b.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $count = substr_count($bin,\
    \ '1');\n        if ($count > 0) {\n            $sorted[$key] = $value;\n    \
    \    } else {\n            $sorted[$key] = $count * pow(2, $key);\n        }\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_vcymua8.php:31\n\
    Stack trace:\n#0 /tmp/tmp_vcymua8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_vcymua8.php\
    \ on line 31\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_map(function ($i) { return decbin($i); }, $arr);\n\
    \    $bin = array_map(function ($i) { return str_pad($i, strlen($i) + 1, '0',\
    \ STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($i) { return str_pad($i,\
    \ strlen($i) + 1, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function\
    \ ($i) { return str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT); }, $bin);\n  \
    \  $bin = array_map(function ($i) { return str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_map(function ($i) { return str_pad($i, strlen($i)\
    \ + 1, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($i) { return\
    \ str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function\
    \ ($i) { return str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT); }, $bin);\n  \
    \  $bin = array_map(function ($i) { return str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_map(function ($i) { return str_pad($i, strlen($i)\
    \ + 1, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($i) { return\
    \ str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function\
    \ ($i) { return str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT); }, $bin);\n  \
    \  $bin = array_map(function ($i) { return str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_map(function ($i) { return str_pad($i, strlen($i)\
    \ + 1, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($i) { return\
    \ str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function\
    \ ($i) { return str_pad($i, strlen($i) + 1, '0', STR_PAD_LEFT); }, $bin);\n  \
    \  $bin = array_map(function ($i) { return str_pad\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5j4c4bye.php on line 32

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $result[$key] = $val;\n    }\n    asort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05azz01w.php:26\n\
    Stack trace:\n#0 /tmp/tmp05azz01w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp05azz01w.php\
    \ on line 26\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    foreach ($arr as $key => $val) {\n        if\
    \ ($val < 0) {\n            $arr[$key] = -$val;\n        }\n    }\n    array_multisort(array_count_values($arr),\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpov9psvd5.php:27\n\
    Stack trace:\n#0 /tmp/tmpov9psvd5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpov9psvd5.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = [];\n    foreach ($arr as $item) {\n\
    \        $result[$item] = count(decbin($item));\n    }\n    arsort($result);\n\
    \    return array_keys($result);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. Try `sort_array(array(-2, -3, -4,\
    \ -5, -6))`\n<|/ c |>\n<| c |>\nYes, it does. `decbin(-2)` returns `10100` which\
    \ is `-2`.\n<|/ c |>\n<| c |>\nYes, it does. `decbin(-2)` returns `10100` which\
    \ is `-2`.\n<|/ c |>\n<| c |>\nYes, it does. `decbin(-2)` returns `10100` which\
    \ is `-2`.\n<|/ c |>\n<| c |>\nYes, it does. `decbin(-2)` returns `10100` which\
    \ is `-2`.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpapa6rly8.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiup89n4.php:26\n\
    Stack trace:\n#0 /tmp/tmpjiup89n4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjiup89n4.php\
    \ on line 26\n"
  timestamp: 1659730624
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThank you for your answer. Unfortunately I cannot use any external libraries.\
    \ I already tried this solution and it didn't work for me.\n<|/ c |>\n<| c |>\n\
    I updated my answer with my own solution. I hope it helps.\n<|/ c |>\n<| c |>\n\
    Thank you for your answer. Unfortunately I cannot use any external libraries.\
    \ I already tried this solution and it didn't work for me.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\nI finally found a solution that works for me. \n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphpuyazak.php on line 20

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_BOTH);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n\
    \        $bin = str\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2yho2t90.php on line 39

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $bin = substr($bin, 0,\
    \ strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin), 0);\n       \
    \ $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin),\
    \ 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_pad($bin, strlen($bin), 0);\n        $bin\
    \ = str_pad($bin, \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5_hkk6zc.php on line 49

    '
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwv6qgpf.php:22\n\
    Stack trace:\n#0 /tmp/tmpuwv6qgpf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuwv6qgpf.php\
    \ on line 22\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $len = count($arr);\n    $ones = array_fill(0,\
    \ $len, 1);\n    $bin = array_fill(0, $len, 0);\n    foreach ($arr as $i => $v)\
    \ {\n        $bin[$i] = decbin($v);\n    }\n    array_multisort($ones, $bin, $arr);\n\
    \    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ss8v18b.php:27\n\
    Stack trace:\n#0 /tmp/tmp6ss8v18b.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6ss8v18b.php\
    \ on line 27\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $bin = decbin($value);\n        $len = strlen($bin);\n\
    \        $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] === '1';\n        }\n        $sorted[$key] = $count;\n    }\n  \
    \  asort($sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9yjs2c7.php:32\n\
    Stack trace:\n#0 /tmp/tmpl9yjs2c7.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl9yjs2c7.php\
    \ on line 32\n"
  timestamp: 1659730625
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1,\
    \ 2, 3, 4, 5)\n// >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5,\
    \ -4, -3, -2)\n// >>> sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\n\
    function sort_array($arr) {\n    $sorted = array();\n    foreach ($arr as $key\
    \ => $val) {\n        $bin = decbin($val);\n        $len = strlen($bin);\n   \
    \     $count = 0;\n        for ($i = 0; $i < $len; $i++) {\n            $count\
    \ += $bin[$i] === \"1\";\n        }\n        $sorted[$key] = $count;\n    }\n\
    \    asort($sorted);\n    return array_values($sorted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd82mn5rs.php:32\n\
    Stack trace:\n#0 /tmp/tmpd82mn5rs.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpd82mn5rs.php\
    \ on line 32\n"
  timestamp: 1659730625
