name: HumanEval_127_intersection
language: php
prompt: "<?php\n// You are given two intervals,\n// where each interval is a pair\
  \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
  \ are closed which means that the interval (start, end)\n// includes both start\
  \ and end.\n// For each given interval, it is assumed that its start is less or\
  \ equal its end.\n// Your task is to determine whether the length of intersection\
  \ of these two \n// intervals is a prime number.\n// Example, the intersection of\
  \ the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a\
  \ prime number.\n// If the length of the intersection is a prime number, return\
  \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
  \ return \"NO\".\n// [input/output] samples:\n// >>> intersection(array(1, 2), array(2,\
  \ 3))\n// \"NO\"\n// >>> intersection(array(-1, 1), array(0, 4))\n// \"NO\"\n//\
  \ >>> intersection(array(-3, -1), array(-5, 5))\n// \"YES\"\nfunction intersection($interval1,\
  \ $interval2) {\n"
tests: "function candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
  \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
  \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $interval1Start=$interval1[0];\n    $interval1End=$interval1[1];\n\
    \    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n    $intersectionStart=$interval1Start;\n\
    \    $intersectionEnd=$interval1End;\n    $intersectionLength=1;\n    while($intersectionStart<=$interval1End\
    \ && $intersectionEnd<=$interval2Start) {\n        if($interval1[$intersectionStart]<=$interval2[$intersectionEnd])\
    \ {\n            $intersectionLength++;\n            $intersectionStart++;\n \
    \       }\n        else {\n            $intersectionEnd++;\n        }\n    }\n\
    \    if($intersectionStart<=$interval1End && $intersectionEnd<=$interval2Start)\
    \ {\n        if($interval1[$intersectionStart]<=$interval2[$intersectionEnd])\
    \ {\n            $intersectionLength++;\n        }\n    }\n    if($intersectionLength==1)\
    \ {\n        return \"YES\";\n    }\n    else {\n        return \"NO\";\n    }\n\
    }", "    $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n\
    \    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n  \
    \  $interval1Length = $interval1End - $interval1Start;\n    $interval2Length =\
    \ $interval2End - $interval2Start;\n    if ($interval1Start > $interval2End) {\n\
    \        $interval1End = $interval1Start;\n        $interval2End = $interval2Start;\n\
    \    }\n    if ($interval1End < $interval2Start) {\n        $interval1Start =\
    \ $interval1End;\n        $interval2Start = $interval2End;\n    }\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval1Start;\n        $interval2Start\
    \ = $interval2Start;\n    }\n    if ($interval1End < $interval2End) {\n      \
    \  $interval1End = $interval1End;\n        $interval2End = $interval2End;\n  \
    \  }\n    if ($interval1Start > $interval2Start) {\n        $interval1Start =\
    \ $interval1Start;\n        $interval2Start = $interval2Start;\n    }\n    if\
    \ ($interval1End > $interval2End) {\n        $interval1End = $interval1End;\n\
    \        $interval2End = $interval2End;\n    }\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1Start = $interval1Start;\n        $interval2Start = $interval2Start;\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1End = $interval1End;\n\
    \        $interval2End = $interval2End;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval1Start = $interval1Start;\n        $interval2End = $interval2End;\n\
    \    }\n    if ($interval1End > $interval2End) {\n        $interval1End = $interval1End;\n\
    \        $interval2End = $interval2End;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval1Start = $interval1Start;\n        $interval2End = $interval2End;\n\
    \    }\n    if ($interval1End < $interval2End) {\n        $interval1End = $interval1End;\n\
    \        $interval2End = $interval2End;\n    }\n    if ($interval1Start > $interval2End)\
    \ {\n        $interval1Start = $interval1Start;\n        $interval2End = $interval2End;\n\
    \    }\n    if ($interval1", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n    $intersectionStart = $interval1Start;\n    $intersectionEnd\
    \ = $interval1End;\n    $intersectionLength = 1;\n    \n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval2Start;\n    }\n  \
    \  if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n    \n    if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ {\n        $intersectionLength = 1;\n    }\n    \n    if ($interval1Start <=\
    \ $interval2Start && $interval1End > $interval2End) {\n        $intersectionLength\
    \ = 2;\n    }\n    \n    if ($interval1Start > $interval2Start && $interval1End\
    \ <= $interval2End) {\n        $intersectionLength = 3;\n    }\n    \n    if ($intersectionLength\
    \ > 1) {\n        $intersectionLength = 2;\n    }\n    \n    if ($intersectionLength\
    \ == 2) {\n        if ($interval1Start <= $interval2Start && $interval1End >=\
    \ $interval2End) {\n            $intersectionLength = 1;\n        }\n    }\n \
    \   \n    if ($intersectionLength > 2) {\n        $intersectionLength = 3;\n \
    \   }\n    \n    if ($intersectionLength == 1) {\n        if ($interval1Start\
    \ <= $interval2Start && $interval1End >= $interval2End) {\n            $intersectionLength\
    \ = 1;\n        }\n    }\n    \n    if ($intersectionLength == 2) {\n        if\
    \ ($interval1Start <= $interval2Start && $interval1End >= $interval2End) {\n \
    \           $intersectionLength = 1;\n        }\n    }\n    \n    if ($intersectionLength\
    \ == 3) {\n        if ($interval1Start <= $interval2Start && $interval1End >=\
    \ $interval2End) {\n            $intersectionLength = 1;\n        }\n    }\n \
    \   \n    if ($intersectionLength > 3) {\n        $intersectionLength = 2;\n \
    \   }\n    \n    if ($intersectionLength == 1) {\n        if ($interval1Start\
    \ <= $interval2Start && $interval1End >= $interval2End) {\n            $intersectionLength\
    \ = 1;\n        }\n    }\n    \n    if ($intersectionLength == 2) {\n        if\
    \ ($interval1Start <= $interval2Start && $interval1End >= $interval2End) {\n \
    \           $intersectionLength = 1;\n        }\n    }\n    \n    if ($intersectionLength\
    \ == 3) {\n        if ($interval1Start <= $interval2Start && $", "    $interval1\
    \ = array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_", "    $interval1Start = $interval1[0];\n \
    \   $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n   \
    \ $interval2End = $interval2[1];\n    $intersectionStart = max($interval1Start,\
    \ $interval2Start);\n    $intersectionEnd = min($interval1End, $interval2End);\n\
    \    $intersectionLength = abs($intersectionEnd - $intersectionStart);\n    if\
    \ ($intersectionLength === 1) {\n        return \"NO\";\n    }\n    if ($intersectionLength\
    \ > 1) {\n        return \"YES\";\n    }\n    $primeNumber = true;\n    for ($i\
    \ = 2; $i <= $intersectionLength; $i++) {\n        if ($i % 2 === 0) {\n     \
    \       $primeNumber = false;\n        }\n    }\n    if ($primeNumber) {\n   \
    \     return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1Start=$interval1[0];\n\
    \    $interval1End=$interval1[1];\n    $interval2Start=$interval2[0];\n    $interval2End=$interval2[1];\n\
    \    $interval1Length=$interval1End-$interval1Start;\n    $interval2Length=$interval2End-$interval2Start;\n\
    \    if($interval1Length==$interval2Length){\n        if($interval1Start<$interval2Start){\n\
    \            $interval1Start=$interval1Start+$interval1Length;\n        }\n  \
    \      if($interval1End>$interval2End){\n            $interval1End=$interval1End-$interval1Length;\n\
    \        }\n        if($interval1Start<$interval2End){\n            $interval1End=$interval1End-$interval1Length;\n\
    \        }\n        if($interval1Start==$interval1End){\n            return \"\
    YES\";\n        }\n        if($interval1Start<$interval2Start){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \        }\n        if($interval1End>$interval2End){\n            $interval1End=$interval1End-$interval1Length;\n\
    \        }\n        if($interval1Start<$interval2End){\n            $interval1End=$interval1End-$interval1Length;\n\
    \        }\n        if($interval1Start==$interval1End){\n            return \"\
    YES\";\n        }\n        if($interval1Start<$interval2Start){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \        }\n        if($interval1End>$interval2End){\n            $interval1End=$interval1End-$interval1Length;\n\
    \        }\n        if($interval1Start<$interval2End){\n            $interval1End=$interval1End-$interval1Length;\n\
    \        }\n        if($interval1Start==$interval1End){\n            return \"\
    YES\";\n        }\n        if($interval1Start<$interval2Start){\n            $interval1Start=$interval1Start+$interval1Length;\n\
    \        }\n        if($interval1End>$interval2End){\n            $interval1End=$interval1End-$interval1Length;\n\
    \        }\n        if($interval1Start<$interval2End){\n            $interval1End=$interval1End-$interval1Length;\n\
    \        }\n        if($interval1Start==$interval1End){\n            return \"\
    YES\";\n        }\n        if($", "    $interval1 = array_map(function ($interval)\
    \ {\n        return $interval[0];\n    }, $interval1);\n    $interval2 = array_map(function\
    \ ($interval) {\n        return $interval[0];\n    }, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ > 1) {\n        return \"NO\";\n    }\n    if (count($intersection) == 1) {\n\
    \        return \"YES\";\n    }\n    $intersection = array_map(function ($interval)\
    \ {\n        return $interval[0];\n    }, $intersection);\n    $intersection =\
    \ array_unique($intersection);\n    if (count($intersection) == 1) {\n       \
    \ return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_merge($interval1, array($interval1[0], $interval1[1] + 1));\n    $interval2\
    \ = array_merge($interval2, array($interval2[0], $interval2[1] + 1));\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_map('array_merge',\
    \ $interval2);\n    $interval1 = array_map('array_merge', $interval1);\n    $interval2\
    \ = array_map('array_merge', $interval2);\n    $interval1 = array_map('array_merge',\
    \ $interval1);\n    $interval2 = array_map('array_merge', $interval2);\n    $interval1\
    \ = array_map('array_merge', $interval1);\n    $interval2 = array_", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart >= $intersectionEnd) {\n       \
    \ return \"NO\";\n    }\n    if ($intersectionStart >= $interval1Start && $intersectionStart\
    \ <= $interval1End) {\n        return \"YES\";\n    }\n    if ($intersectionEnd\
    \ >= $interval2Start && $intersectionEnd <= $interval2End) {\n        return \"\
    YES\";\n    }\n    return \"NO\";\n}", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n\n    if ($interval1Start > $interval2Start)\
    \ {\n        $interval1Start = $interval2Start;\n    }\n    if ($interval1End\
    \ < $interval2End) {\n        $interval1End = $interval2End;\n    }\n\n    if\
    \ ($interval1Start > $interval2End) {\n        return \"NO\";\n    }\n    if ($interval1End\
    \ < $interval2Start) {\n        return \"NO\";\n    }\n\n    $intersectionStart\
    \ = $interval1Start;\n    $intersectionEnd = $interval1End;\n    while ($intersectionStart\
    \ <= $interval2End) {\n        if ($interval1End < $intersectionStart) {\n   \
    \         return \"NO\";\n        }\n        if ($interval2Start < $intersectionEnd)\
    \ {\n            return \"NO\";\n        }\n        if ($interval1Start <= $intersectionStart\
    \ && $interval2End >= $intersectionEnd) {\n            return \"YES\";\n     \
    \   }\n        $intersectionEnd = $intersectionStart + 1;\n    }\n    return \"\
    NO\";\n}\n", "    $interval1 = array_map('intval', $interval1);\n    $interval2\
    \ = array_map('intval', $interval2);\n    $interval1 = array_merge($interval1,\
    \ $interval2);\n    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $interval1 = array_slice($interval1, 0, -1);\n    $interval2 = array_slice($interval2,\
    \ 0, -1);\n    $intersect = array_intersect($interval1, $interval2);\n    if (count($intersect)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersect);\n \
    \   for ($i = 0; $i < $length; $i++) {\n        if ($intersect[$i] == $interval1[$i]\
    \ && $intersect[$i] == $interval2[$i]) {\n            $length--;\n        }\n\
    \    }\n    if ($length == 0) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 0; $i < $length; $i++) {\n        if ($intersect[$i] == $interval1[$i] && $intersect[$i]\
    \ == $interval2[$i]) {\n            $length--;\n        }\n    }\n    if ($length\
    \ == 0) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    $interval1\
    \ = array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $interval1 = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) > 0)\
    \ {\n        $intersection = array_slice($intersection, 0, -1);\n        if (count($intersection)\
    \ == 1) {\n            return 'YES';\n        } else {\n            return 'NO';\n\
    \        }\n    } else {\n        return 'NO';\n    }\n}\n", "    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    if ($length == 2)\
    \ {\n        if ($intersection[0] >= $intersection[1]) {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    $prime = true;\n    for\
    \ ($i = 3; $i <= $length; $i++) {\n        if ($length % $i == 0) {\n        \
    \    $prime = false;\n            break;\n        }\n    }\n    if ($prime) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $interval1\
    \ = array_merge($interval1, $interval2);\n    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, -1);\n    $interval2 = array_slice($interval2, 0, -1);\n    $intersect =\
    \ array_intersect($interval1, $interval2);\n    if (count($intersect) > 0) {\n\
    \        if (count($intersect) == 1) {\n            return \"YES\";\n        }\
    \ else {\n            return \"NO\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }\n}\n", "    $interval1Start = $interval1[0];\n    $interval1End\
    \ = $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End =\
    \ $interval2[1];\n\n    if ($interval1Start > $interval2Start) {\n        $interval1Start\
    \ = $interval2Start;\n    }\n    if ($interval1End < $interval2End) {\n      \
    \  $interval1End = $interval2End;\n    }\n\n    if ($interval1Start > $interval2End)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1End < $interval2Start) {\n\
    \        return \"NO\";\n    }\n\n    $intersectionStart = $interval1Start;\n\
    \    $intersectionEnd = $interval1End;\n\n    while ($intersectionStart <= $intersectionEnd)\
    \ {\n        if ($interval1Start <= $intersectionStart && $interval1End >= $intersectionStart)\
    \ {\n            $intersectionStart = $intersectionStart + 1;\n        }\n   \
    \     if ($interval1Start <= $intersectionEnd && $interval1End >= $intersectionEnd)\
    \ {\n            $intersectionEnd = $intersectionEnd - 1;\n        }\n    }\n\n\
    \    if ($intersectionStart <= $intersectionEnd) {\n        return \"YES\";\n\
    \    }\n    return \"NO\";\n}\n", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1 = array_slice($interval1,\
    \ 0, 1);\n    $interval2 = array_slice($interval2, 0, 1);\n    $intersect = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersect);\n    if ($length == 1) {\n  \
    \      return $intersect[0];\n    }\n    if ($length == 2) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 3) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 4) {\n        return $intersect[0];\n    }\n    if ($length == 5)\
    \ {\n        return $intersect[0];\n    }\n    if ($length == 6) {\n        return\
    \ $intersect[0];\n    }\n    if ($length == 7) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 8) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 9) {\n        return $intersect[0];\n    }\n    if ($length == 10)\
    \ {\n        return $intersect[0];\n    }\n    if ($length == 11) {\n        return\
    \ $intersect[0];\n    }\n    if ($length == 12) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 13) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 14) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 15) {\n        return $intersect[0];\n    }\n    if ($length == 16) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 17) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 18) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 19) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 20) {\n        return $intersect[0];\n    }\n    if ($length == 21) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 22) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 23) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 24) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 25) {\n        return $intersect[0];\n    }\n    if ($length == 26) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 27) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 28) {\n        return $intersect[0];\n    }\n    if\
    \ ($length == 29) {\n        return $intersect[0];\n    }\n    if ($length ==\
    \ 30) {\n        return $intersect[0];\n    }\n    if ($length == 31) {\n    \
    \    return $intersect[0];\n    }\n    if ($length == 32) {\n        return $intersect[0];\n\
    \    }\n    if ($length == 33) {\n        return $intersect[0];\n    }", "   \
    \ $interval1Start = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start\
    \ = $interval2[0];\n    $interval2End = $interval2[1];\n\n    if ($interval1Start\
    \ > $interval2Start) {\n        $interval1Start = $interval2Start;\n    }\n  \
    \  if ($interval1End < $interval2End) {\n        $interval1End = $interval2End;\n\
    \    }\n\n    if ($interval1Start <= $interval1End && $interval2Start <= $interval2End)\
    \ {\n        $interval1Length = $interval1End - $interval1Start;\n        $interval2Length\
    \ = $interval2End - $interval2Start;\n\n        if ($interval1Length > $interval2Length)\
    \ {\n            $interval1Length = $interval2Length;\n        }\n\n        if\
    \ ($interval1Length == 1) {\n            return \"YES\";\n        }\n        if\
    \ ($interval1Length == 2) {\n            return \"NO\";\n        }\n        if\
    \ ($interval1Length == 3) {\n            return \"YES\";\n        }\n        if\
    \ ($interval1Length == 5) {\n            return \"YES\";\n        }\n        if\
    \ ($interval1Length == 7) {\n            return \"YES\";\n        }\n        if\
    \ ($interval1Length == 9) {\n            return \"YES\";\n        }\n        if\
    \ ($interval1Length == 11) {\n            return \"YES\";\n        }\n       \
    \ if ($interval1Length == 13) {\n            return \"YES\";\n        }\n    \
    \    if ($interval1Length == 17) {\n            return \"YES\";\n        }\n \
    \       if ($interval1Length == 19) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 23) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 29) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 31) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 37) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 43) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 49) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 71) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 79) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 89) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 97) {\n            return \"YES\";\n        }\n\
    \        if ($interval1Length == 117) {\n            return \"YES\";\n       \
    \ }\n        if ($interval1Length == 127) {\n            return \"YES\";\n   \
    \     }\n        if ($interval1Length == 131) {\n            return \"YES\";\n\
    \        }\n        if ($interval1Length == 139) {\n            return \"YES\"\
    ;\n        }\n", "    $interval1 = array_map(function($v){return $v[0];}, $interval1);\n\
    \    $interval2 = array_map(function($v){return $v[0];}, $interval2);\n    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return $intersection[0];\n    }\n    if ($length\
    \ == 2) {\n        return $intersection[0];\n    }\n    if ($length == 2) {\n\
    \        return $intersection[1];\n    }\n    if ($length == 2) {\n        return\
    \ $intersection[0];\n    }\n}\n", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    $interval1Length = $interval1End - $interval1Start;\n\
    \    $interval2Length = $interval2End - $interval2Start;\n    if ($interval1Start\
    \ >= $interval2End || $interval2Start >= $interval1End) {\n        return \"NO\"\
    ;\n    }\n    if ($interval1Start <= $interval2Start && $interval1End >= $interval2End)\
    \ {\n        return \"YES\";\n    }\n    if ($interval1Start <= $interval2Start\
    \ && $interval1End <= $interval2End) {\n        $intersectionLength = $interval1End\
    \ - $interval1Start;\n        if ($intersectionLength == $interval2Length) {\n\
    \            return \"YES\";\n        }\n    }\n    return \"NO\";\n}", "    $interval1\
    \ = array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_map('intval',\
    \ $intersection);\n    $length = count($intersection);\n    if ($length == 1)\
    \ {\n        return \"YES\";\n    }\n    $prime = true;\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        if ($intersection[$i] % 2 == 0) {\n            $prime\
    \ = false;\n            break;\n        }\n    }\n    return $prime ? \"YES\"\
    \ : \"NO\";\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
