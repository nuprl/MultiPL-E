name: HumanEval_54_same_chars
language: php
prompt: "<?php\n// Check if two words have the same characters.\n// >>> same_chars(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\"\
  )\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"\
  eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\"\
  )\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\n\
  function same_chars($s0, $s1) {\n"
tests: "function candidate(...$args) {\n    return same_chars(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\", \"dddddddabc\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"dddddddabc\"\
  , \"abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  eabcd\", \"dddddddabc\") !== false) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"abcd\", \"dddddddabcf\") !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\"\
  , \"aaccc\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \", $s1);\n    $s0 = preg_replace('/[\\n\\r]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n\\r]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n\
    \    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n   \
    \ $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n   \
    \ $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n   \
    \ $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n   \
    \ $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n   \
    \ $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n   \
    \ $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\\
    n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\n]+/', \"\\n\", $s1);\n   \
    \ $s0 = preg_replace('/[\\n]+/', \"\\n\", $s0);\n    $s1 = preg_replace('/[\\\
    n]+/', \"\\n\", $s1);\n    $s0 = preg_replace('/[\\n]+/', \"\\n\", $s", "  $s0\
    \ = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s0);\n  $s1 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $s1);\n  if (strlen($s0) == strlen($s1)) {\n   \
    \ for ($i = 0; $i < strlen($s0); $i++) {\n      if ($s1[$i] != $s0[$i]) {\n  \
    \      return false;\n      }\n    }\n    return true;\n  }\n  return false;\n\
    }\n", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \",\
    \ \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n   \
    \ $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\"\
    , \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n   \
    \ $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\"\
    , \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n   \
    \ $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\"\
    , \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n   \
    \ $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\"\
    , \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n   \
    \ $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\"\
    , \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n   \
    \ $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\"\
    , \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n   \
    \ $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\"\
    , \"\", $s1);", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/(^|[^a-zA-Z])/', '', $s1);\n    $s0 = preg_replace('/(^|[^a-zA-Z])/',\
    \ '', $s0);\n    $s1 = preg_replace('/", "    $s0 = str_replace(array(\"\\n\"\
    , \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\",\
    \ \"\\t\"), '', $s1);\n    $s0 = preg_replace('/[^a-zA-Z0-9\\s]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-zA-Z0-9\\s]/', '', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+/', ' ', $s0);\n    $s1 = preg_replace('/\\s+/', ' ', $s1);\n    $s0 = preg_replace('/\\\
    s+", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\
    \", $s1);\n    $len = min(strlen($s0), strlen($s1));\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n\
    }", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(\" \", \"\"\
    , $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    if (strlen($s0) > strlen($s1))\
    \ {\n        $s0 = substr($s0, 1, strlen($s0));\n    } else {\n        $s1 = substr($s1,\
    \ 1, strlen($s1));\n    }\n    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 =\
    \ str_replace(\" \", \"\", $s1);\n    $s0 = str_replace(\"z\", \"zz\", $s0);\n\
    \    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"z\", \"zz\"\
    , $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z\", \"zz\", $s1);\n    $s0 = str_replace(\"\
    z\", \"zz\", $s0);\n    $s1 = str_replace(\"z", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "  $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s0);\n  $s1\
    \ = str_replace(array(\"\\n\", \"\\r\"), \"\", $s1);\n  return $s0 === $s1;\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 == $s1;\n\
    }", "    $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\", \" \"), \"\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\", \"\\t\", \" \"), \"\", $s1);\n\
    \    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0) &&\n    \
    \       strpos($s0, $s1) !== false;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\"\
    \ \", \"\", $s1);\n    $len = max(strlen($s0), strlen($s1));\n    $i = 0;\n  \
    \  while ($i < $len) {\n        if ($s1[$i] != $s0[$i]) return false;\n      \
    \  $i++;\n    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1) {\n\
    \        return true;\n    }\n    $s0 = preg_replace('/[^A-Z]/', '', $s0);\n \
    \   $s1 = preg_replace('/[^A-Z]/', '', $s1);\n    if ($s0 === $s1) {\n       \
    \ return true;\n    }\n    $s0 = preg_replace('/[^A-Za-z0-9]/', '', $s0);\n  \
    \  $s1 = preg_replace('/[^A-Za-z0-9]/', '', $s1);\n    if ($s0 === $s1) {\n  \
    \      return true;\n    }\n    return false;\n}\n", "    $s0 = str_replace(\"\
    \ \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n\
    \    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    return $s0 === $s1;\n}", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    , \"\\t\"), '', $s1);\n    $s0 = preg_replace('/[^a-zA-Z0-9\\s]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-zA-Z0-9\\s]/', '', $s1);\n    return strlen($s0)\
    \ == strlen($s1) && strlen($s0) == strlen($s0);\n}\n", "    $s0 = str_replace(array(\"\
    \\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\
    \\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0\
    \ = str_replace(array(\"\\t\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\t\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\"\
    , \"\\t\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\\
    t\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\", \"\
    \\t\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\", \"\\n\", \"\\t\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), \"\\\
    n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\"\
    , \"\\r\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\\
    n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\", \"\
    \\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\"\
    , \"\\r\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\r\", \"\\n\", \"\\r\", \"\\n\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 =\
    \ str_replace(array(\"\\n\", \"\\r\", \"\\n\", \"\\r\", \"\\n\", \"\\r\"), \"\\\
    n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\n\", \"\\n\", \"\
    \\r\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\"\
    , \"\\r\", \"\\n\", \"\\r\", \"\\n\", \"\\r\", \"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\n\", \"\\r\", \"\\n\", \"\\\
    r\", \"\\n\", \"\\r\", \"\\n\", \"\\r\"), \"\\n\", $s0);\n    $", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if (strlen($s0)\
    \ == strlen($s1)) {\n        $s0 = preg_replace('/[^a-z]/', '', $s0);\n      \
    \  $s1 = preg_replace('/[^a-z]/', '', $s1);\n        foreach (str_split($s0) as\
    \ $i => $c) {\n            if ($c != $s1[$i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    return false;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution, however it fails when\
    \ the two strings are of different lengths. I added a solution that will handle\
    \ that case as well.\n<|/ c |>\n<| c |>\nThanks, I added a solution that will\
    \ handle that case as well.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string1\
    \ = \"eabcdzzzz\";\n$string2 = \"dddzzzzzzzddeddabc\";\n\n$string1 = preg_replace('/[^a-z]/',\
    \ '', $string1);\n$string2 = preg_replace('/[^a-z]/', '', $string2);\n\nif(strlen($string1)\
    \ != strlen($string2))\n{\n    return false;\n}\n\n$string1 = str_split($string1);\n\
    $string2 = str_split($string2);\n\n$string1 = array_count_values($string1);\n\
    $string2 = array_count_values($string2);\n\n$string1 = array_filter($string1);\n\
    $string2 = array_filter($string2);\n\n$string1 = array_keys($string1);\n$string2\
    \ = array_keys($string2);\n\n$string1 = array_flip($string1);\n$string2 = array_flip($string2);\n\
    \n$string1 = array_intersect($string1, $string2);\n$string2 = array_intersect($string2,\
    \ $string1);\n\nreturn count($string1) == count($string2);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,string |>\n<code>", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return strlen($s0)\
    \ == strlen($s1) && strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0);\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return strlen($s0) == strlen($s1) && strlen($s0) == strlen($s0)\
    \ &&\n        array_reduce(str_split($s0), function($carry, $char) {\n       \
    \     return $carry && $char == $s1[$carry];\n        }, true);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `same_chars(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\")` returns `true` but `same_chars(\"abcd\", \"dddddddabc\"\
    )` returns `false`.\n<|/ c |>\n<| c |>\n: I tested it and it works. I added some\
    \ test cases to my answer. Maybe you missed something?\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it works. I added some test cases to my answer. Maybe you missed\
    \ something?\n<|/ c |>\n<| c |>\n: I added some test cases to my answer. Maybe\
    \ you missed something?\n<|/ c |>\n<| c |>\nI tested it again and it works. I\
    \ added some test cases to my answer. Maybe you missed something?\n<|/ c |>\n\
    <| a tags=php,string |>\n<code>", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}\n",
  "    $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $s1);\n    $s0 = preg_replace('/[^a-z0-9]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z0-9]/', '', $s1);\n    return $s0 === $s1;\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "    $s0 = str_replace(\" \", \"\",\
    \ $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n    $len = max(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  $s0\
    \ = str_replace(\" \", \"\", $s0);\n  $s1 = str_replace(\" \", \"\", $s1);\n \
    \ $len = max(strlen($s0), strlen($s1));\n  for($i = 0; $i < $len; $i++) {\n  \
    \  if($s1[$i] != $s0[$i]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\\
    n\\s*\\n/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*\\n/', \"\\\
    n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n/', \"\\n\\n\", $s1);\n\
    \    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*$/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*$/',\
    \ \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n\\s*$/', \"\\n\\n\"\
    , $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s0);\n    $s1 =\
    \ preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\\
    n\\s*\\n/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*\\n/', \"\\\
    n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n/', \"\\n\\n\", $s1);\n\
    \    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*$/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*$/',\
    \ \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n\\s*$/', \"\\n\\n\"\
    , $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s0);\n    $s1 =\
    \ preg_replace('/(^|\\n)\\s*$/', \"\\n\\n\", $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*\\n/', \"\\n\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\\
    n\\s*\\n/', \"\\n\\n\", $s", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n \
    \   $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nThis doesn't work if the two strings are different\
    \ lengths.\n<|/ c |>\n<| c |>\nIt doesn't work because `strlen` returns number\
    \ of characters, not number of bytes. So if your string contains characters with\
    \ code point above 255 (like emojis), `strlen` will return number of characters,\
    \ not number of bytes.\n<|/ c |>\n<| c |>\nI tested it and it works. I used it\
    \ on PHP 5.6.\n<|/ c |>\n<| c |>\nIt doesn't work if you have a string with emojis.\
    \ It will count the emoji as one character.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if you have a string with emojis. It will count the emoji as one character.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "    $s0 = str_replace(\" \", \"\", $s0);\n\
    \    $s1 = str_replace(\" \", \"\", $s1);\n    $len = min(strlen($s0), strlen($s1));\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i]) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    ), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\\
    r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\\r\", \"\\r\\n\"), \"\\n\"\
    , $s0);\n    $s1 = str_replace(array(\"\\n\\r\", \"\\r\\n\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\\n\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\\n\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\\r\"), \"\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\
    \\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\r\"), \"\", $s1);\n    $s0\
    \ = str_replace(array(\"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\\
    n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\r\"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\\
    n\\r\", \"\\r\\n\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\n\\r\", \"\
    \\r\\n\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\r\\n\"), \"\\n\", $s0);\n\
    \    $s1 = str_replace(array(\"\\r\\n\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\
    \\n\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\\r\"), \"\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\"), \"\", $s0);\n    $s1\
    \ = str_replace(array(\"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\\
    r\"), \"\", $", "    $s0 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\r\", \"\\t\"), '', $s1);\n    return\
    \ strlen($s0) == strlen($s1) && strlen($s0) == strlen(preg_replace('/[^'.preg_quote($s0).'\\\
    s]/', '', $s1));\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1\
    \ = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1) {\n        return\
    \ true;\n    }\n    $s0 = preg_replace('/[^a-z]/i', '', $s0);\n    $s1 = preg_replace('/[^a-z]/i',\
    \ '', $s1);\n    if ($s0 === $s1) {\n        return true;\n    }\n    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    return false;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1)\
    \ {\n        return true;\n    }\n    $s0 = preg_replace('/[^a-z]/i', '', $s0);\n\
    \    $s1 = preg_replace('/[^a-z]/i', '', $s1);\n    if ($s0 === $s1) {\n     \
    \   return true;\n    }\n    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1\
    \ = preg_replace('/[^a-z]/', '', $s1);\n    if ($s0 === $s1) {\n        return\
    \ true;\n    }\n    $s0 = preg_replace('/[^a-z]/i', '', $s0);\n    $s1 = preg_replace('/[^a-z]/i',\
    \ '', $s1);\n    if ($s0 === $s1) {\n        return true;\n    }\n    return false;\n\
    }\n", "    $s0 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1\
    \ = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*\\n/', \"\\n$1\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\\
    n\\s*\\n/', \"\\n$1\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*\\n/', \"\
    \\n$1\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n/', \"\\n$1\\n\", $s1);\n\
    \    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n$1\\n\", $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*$/', \"\\n$1\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*$/',\
    \ \"\\n$1\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n\\s*$/', \"\\n$1\\\
    n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n$1\\n\", $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)\\s*$/', \"\\n$1\\n\", $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*\\n/', \"\\n$1\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\\
    n\\s*\\n/', \"\\n$1\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*\\n/', \"\
    \\n$1\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n/', \"\\n$1\\n\", $s1);\n\
    \    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n$1\\n\", $s0);\n    $s1 = preg_replace('/(^|\\\
    n)\\s*$/', \"\\n$1\\n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*\\n\\s*$/',\
    \ \"\\n$1\\n\", $s0);\n    $s1 = preg_replace('/(^|\\n)\\s*\\n\\s*$/', \"\\n$1\\\
    n\", $s1);\n    $s0 = preg_replace('/(^|\\n)\\s*$/', \"\\n$1\\n\", $s0);\n   \
    \ $s1 = preg_replace('/(^|\\n)\\s*$/', \"\\n$1\\n\", $s1);\n    $s0 = preg_replace('/(^|\\\
    n)\\s*\\n\\s*\\n/', \"\\n$1\\n\", $s0);\n", "  $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n  $s1 = preg_replace('/[^a-z]/', '', $s1);\n  if (strlen($s0) ==\
    \ strlen($s1)) {\n    for ($i = 0; $i < strlen($s0); $i++) {\n      if ($s1[$i]\
    \ != $s0[$i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\
    \  return false;\n}\n", "    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\",\
    \ $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\", $s1);\n    $s0 =\
    \ preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\\
    s]/\", \"\", $s1);\n    return $s0 === $s1;\n}", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 == $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(\"\\0\", '',\
    \ $s0);\n    $s1 = str_replace(\"\\0\", '', $s1);\n    $len = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $len; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    n\", \"\\r\", \"\\t\", \" \"), \"\", $s0);\n    $s1 = str_replace(array(\"\\n\"\
    , \"\\r\", \"\\t\", \" \"), \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\\
    s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n\
    \    $s0 = preg_replace(\"/[^a-zA-Z\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"\
    /[^a-zA-Z\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\
    \", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0\
    \ = preg_replace(\"/[^a-zA-Z\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z\\\
    s]/\", \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n\
    \    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^a-zA-Z\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z\\s]/\", \"\"\
    , $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 =\
    \ preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z\\\
    s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z\\s]/\", \"\", $s1);\n \
    \   $s0 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z\\s]/\", \"\
    \", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"\
    /[^a-zA-Z0-9\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\"\
    , \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z\\s]/\", \"\", $s0);\n    $s1\
    \ = preg_replace(\"/[^a-zA-Z\\s]/\", \"\", $s1);\n    $s0 = preg_replace(\"/[^a-zA-Z0-9\\\
    s]/\", \"\", $s0);\n    $s1 = preg_replace(\"/[^a-zA-Z0-9\\s]/\", \"\", $s1);\n\
    \    $s0 = preg_replace(\"/[^a-zA-Z\\s]/\", \"\", $s0);\n    $s1 = preg_replace(\"\
    /[^a-zA-Z\\s]/", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| c |>\nThanks, this works great. Just a quick question, how would I go\
    \ about adding an additional condition to this? For example if $s1 was \"abcd\"\
    \ and the $s0 was \"eabcdzzzz\" then it would return true. Thanks again!\n<|/\
    \ c |>\n<| c |>\nI added an additional condition to my answer. Does that help?\n\
    <|/ c |>\n<| c |>\nThanks again for the help, this is great. Just one more question,\
    \ how would I go about adding an additional condition to this? For example if\
    \ $s1 was \"abcd\" and the $s0 was \"eabcdzzzz\" then it would return true. Thanks\
    \ again!\n<|/ c |>\n<| c |>\nI added an additional condition to my answer. Does\
    \ that help?\n<|/ c |>\n<| c |>\nThanks again for the help, this is great. Just\
    \ one more question, how would I go about adding an additional condition to this?\
    \ For example if $s1 was \"abcd\" and the $s0 was \"eabcdzzzz\" then it would\
    \ return true. Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n$s1 = preg_replace('/[^a-z]/', '', $s1);\n</code>\nThis code removes\
    \ everything but letters from $s0 and $s1. So if $s0 contains \"abcd\" and $s1\
    \ contains \"eabcdzzzz\", then $s0 will be \"abcd\" and $s1 will be \"eabcdzzzz\"\
    . \n<code>\n$s0 = preg_replace('/[^a-z]/', '', $s0);\n$s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n$s0 = preg_replace('/[^a-z]/', '', $s0);\n$s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n</code>\nThis code removes everything but letters from $s0 and $s1.\
    \ So if $s0 contains \"abcd\" and $s1 contains \"eabcdzzzz\", then $s0 will be\
    \ \"abcd\" and $s1 will be \"eabcdzzzz\". \n<code>\n$s0 = preg_", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}", "    $s0 = str_replace(array(\"\\n\", \"\\t\", \"\\r\"), \"\", $s0);\n\
    \    $s1 = str_replace(array(\"\\n\", \"\\t\", \"\\r\"), \"\", $s1);\n    if (strlen($s0)\
    \ > strlen($s1)) {\n        $s0 = substr($s0, 1, strlen($s0));\n    } else {\n\
    \        $s1 = substr($s1, 1, strlen($s1));\n    }\n    $n = min(strlen($s0),\
    \ strlen($s1));\n    for ($i = 0; $i < $n; $i++) {\n        if ($s1[$i] != $s0[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \", \"\", $s1);\n\
    \    $len = min(strlen($s0), strlen($s1));\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($s1[$i] != $s0[$i]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    $s0 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\r\"), \"\\n\"\
    , $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\\
    n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1\
    \ = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\
    \\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\\
    n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0\
    \ = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\
    \\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\\
    n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1\
    \ = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\
    \\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\\
    n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0\
    \ = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\
    \\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\\
    n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1\
    \ = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\
    \\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\\
    n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\\n\", $s1);\n    $s0\
    \ = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\n+/', \"\
    \\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n    $s1 = preg_replace('/\\\
    n+/', \"\\n\", $s1);\n    $s0 = preg_replace('/\\n+/', \"\\n\", $s0);\n", "  \
    \  $s0 = str_replace(\"\\0\", \"\", $s0);\n    $s1 = str_replace(\"\\0\", \"\"\
    , $s1);\n    return $s0 == $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 === $s1;\n\
    }\n", "    $s0 = str_replace(\" \", \"\", $s0);\n    $s1 = str_replace(\" \",\
    \ \"\", $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    n\", \"\\r\", \"\\t\"), '', $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"\
    , \"\\t\"), '', $s1);\n    return $s0 === $s1;\n}", "  $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n  $s1 = preg_replace('/[^a-z]/', '', $s1);\n  return $s0 === $s1;\n\
    }\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 == $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}", "  $s0 = preg_replace('/[^a-z]/', '',\
    \ $s0);\n  $s1 = preg_replace('/[^a-z]/', '', $s1);\n  return $s0 === $s1;\n}\n",
  "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = str_replace(array(\"\\\
    r\\n\", \"\\r\"), \"\\n\", $s0);\n    $s1 = str_replace(array(\"\\r\\n\", \"\\\
    r\"), \"\\n\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\",\
    \ $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n    $s0\
    \ = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \\n\", $s0);\n    $s1 = str_replace(array(\"\\n\", \"\\r\"), \"\\n\", $s1);\n\
    \    $s0 = str_replace(array(\"\\r\", \"\\n\"), \"\", $s0);\n    $s1 = str_replace(array(\"\
    \\r\", \"\\n\"), \"\", $s1);\n    $s0 = str_replace(array(\"\\n\", \"\\r\"), \"\
    \\n\", $s0);\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/',\
    \ '', $s0);\n    $s1 = preg_replace('/[^a-z]/', '', $s1);\n    return $s0 ===\
    \ $s1;\n}\n", "    $s0 = preg_replace('/[^a-z]/', '', $s0);\n    $s1 = preg_replace('/[^a-z]/',\
    \ '', $s1);\n    return $s0 === $s1;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
