name: HumanEval_16_count_distinct_characters
language: php
prompt: "<?php\n// Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n//\
  \ 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters($string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return count_distinct_characters(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"\") !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"abcde\") !== 5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"abcdecadeCADE\") !== 5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"aaaaAAAAaaaa\") !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"Jerry jERRY JeRRRY\") !== 5) { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $characters = array_count_values(str_split($string));\n    return\
    \ count(array_filter($characters, function($value) { return $value > 1; }));\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $string[$i];\n        if (!array_key_exists($character,\
    \ $characters)) {\n            $characters[$character] = 0;\n        }\n     \
    \   $characters[$character]++;\n    }\n    return array_sum($characters);\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are repeated characters\
    \ in the string.\n<|/ c |>\n<| c |>\nThis doesn't work if there are repeated characters\
    \ in the string.\n<|/ c |>\n<| c |>\nThis doesn't work if there are repeated characters\
    \ in the string.\n<|/ c |>\n<| c |>\nThis doesn't work if there are repeated characters\
    \ in the string.\n<|/ c |>\n<| c |>\nThis doesn't work if there are repeated characters\
    \ in the string.\n<|/ c |>\n<| a dscore=5 |>\n<code>", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nI like this solution, but I feel like it could be improved.\
    \ For example, what if there are two or more characters that are the same? For\
    \ example, `count_distinct_characters(\"abcabcdef\")` returns `4`, when it should\
    \ be `3`.\n<|/ c |>\n<| c |>\nI agree, that could be improved. But I thought the\
    \ OP was looking for a solution that would work for any string, not just those\
    \ that consist of only lowercase letters. I guess I misunderstood the OP's question.\n\
    <|/ c |>\n<| c |>\nI agree, that could be improved. But I thought the OP was looking\
    \ for a solution that would work for any string, not just those that consist of\
    \ only lowercase letters. I guess I misunderstood the OP's question.\n<|/ c |>\n\
    <| c |>\nI agree, that could be improved. But I thought the OP was looking for\
    \ a solution that would work for any string, not just those that consist of only\
    \ lowercase letters. I guess I misunderstood the OP's question.\n<|/ c |>\n<|\
    \ c |>\nI agree, that could be improved. But I thought the OP was looking for\
    \ a solution that would work for any string, not just those that consist of only\
    \ lowercase letters. I guess I misunderstood the OP's question.\n<|/ c |>\n<|\
    \ a tags=php,string |>\n<code>\n<?php\n$string = \"abcde\";\n$string = strtolower($string);\n\
    $string = preg_replace('/(.)\\1{2,}/', '', $string);\necho $string;", "    $chars\
    \ = preg_split('//', $string);\n    $chars = array_map('strtolower', $chars);\n\
    \    return count(array_unique($chars));\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| a dscore=1 |>\n<code>", "    $characters\
    \ = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) { return $count > 1; }));\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,string |>\n<code>\n<?php\n$string = \"abc def ghi jkl mno pqr stuv\
    \ wxyz\";\n$array = explode(\" \", $string);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_count_values($array);\n$array = array_filter($array);\n$array =\
    \ array_keys($array);\n$array = array_values($array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_count_values($array);\n$array = array_filter($array);\n$array =\
    \ array_keys($array);\n$array = array_values($array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_count_values($array);\n$array = array_filter($array);\n$array =\
    \ array_keys($array);\n$array = array_values($array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_count_values($array);\n$array = array_filter($array);\n$array =\
    \ array_keys($array);\n$array = array_values($array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_count_values($array);\n$array = array_filter($array);\n$array =\
    \ array_keys($array);\n$array = array_values($array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_count_values($array);\n$array = array_filter($array);\n$array =\
    \ array_keys($array);\n$array = array_values($array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);",
  "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($value) { return $value > 1; }));\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. Your code works fine for small strings, but for\
    \ large strings it takes too much time. Can you suggest any improvement?\n<|/\
    \ c |>\n<| c |>\nI added a faster solution\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works fine for small strings, but for large strings it takes\
    \ too much time. Can you suggest any improvement?\n<|/ c |>\n<| c |>\nI added\
    \ a faster solution\n<|/ c |>\n<| a tags=php,string,algorithm |>\n<code>\n<?php",
  "    return count(array_unique(str_split(strtolower($string))));\n}\n", "    $characters\
    \ = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) { return $count > 1; }));\n}\n", "    $characters = array();\n\
    \    foreach (str_split($string) as $char) {\n        $characters[$char] = isset($characters[$char])\
    \ ? $characters[$char] + 1 : 1;\n    }\n    return count($characters);\n}\n",
  "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $counts =\
    \ array_count_values($chars);\n    return count($counts);\n}\n</code>\n<|/ a tags=php,string,algorithm\
    \ |>\n<| c |>\nI like your solution, however it fails for \"Jerry\" which should\
    \ return 4, but returns 3.\n<|/ c |>\n<| c |>\n: I fixed the bug, thanks. I forgot\
    \ that `preg_split` returns an array of the split string, and that array is counted\
    \ twice.\n<|/ c |>\n<| c |>\nI like your solution, however it fails for \"Jerry\"\
    \ which should return 4, but returns 3.\n<|/ c |>\n<| c |>\n: I fixed the bug,\
    \ thanks. I forgot that `preg_split` returns an array of the split string, and\
    \ that array is counted twice.\n<|/ c |>\n<| c |>\nI like your solution, however\
    \ it fails for \"Jerry\" which should return 4, but returns 3.\n<|/ c |>\n<| a\
    \ tags=php,string,algorithm |>\n<code>\n$string = \"Jerry\";\n$chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n$counts = array_count_values($chars);\n\
    $count = count($counts);\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like your solution,\
    \ however it fails for \"Jerry\" which should return 4, but returns 3.\n<|/ c\
    \ |>\n<| c |>\nI like your solution, however it fails for \"Jerry\" which should\
    \ return 4, but returns 3.\n<|/ c |>\n<| c |>\nI like your solution, however it\
    \ fails for \"Jerry\" which should return 4, but returns 3.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\n$string = \"Jerry\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $counts = array_count_values($chars);\n$count = count($counts);\n</code>\n<|/\
    \ a tags=php,string,algorithm |>\n<| a tags=php,string,algorithm |>\n<code>\n\
    $string = \"Jerry\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $counts = array_count_values($chars);\n$count = count($counts);\n</code>\n<|/\
    \ a dscore=3 |>\n", "    $characters = array();\n    $length = strlen($string);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $character = $string[$i];\n \
    \       if (!isset($characters[$character])) {\n            $characters[$character]\
    \ = 1;\n        } else {\n            $characters[$character]++;\n        }\n\
    \    }\n    return count($characters);\n}\n</code>\n<|/ a tags=php,string |>\n\
    <| c |>\nThis code does not work. `count_distinct_characters(\"abc\")` returns\
    \ `3` instead of `2`.\n<|/ c |>\n<| c |>\n: Thanks for pointing that out. I've\
    \ fixed it now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$string = 'abc';\n$count\
    \ = substr_count($string, 'a');\n</code>\n<|/ a tags=php,string |>\n<| c |>\n\
    This code does not work. `substr_count($string, 'a')` returns `3` instead of `2`.\n\
    <|/ c |>\n<| c |>\n: It does work. `substr_count($string, 'a')` returns `2`.\n\
    <|/ c |>\n<| c |>\n: It does work. `substr_count($string, 'a')` returns `2`.\n\
    <|/ c |>\n<| c |>\n: It does work. `substr_count($string, 'a')` returns `2`.\n\
    <|/ c |>\n<| c |>\n: It does work. `substr_count($string, 'a')` returns `2`.\n\
    <|/ c |>\n<| a tags=php,string |>\n<code>\n$string = 'abc';\n$count = substr_count($string,\
    \ 'a');\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis code does not work. `substr_count($string,\
    \ 'a')` returns `3` instead of `2`.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    $string = 'abc';\n$count = substr_count($string, 'a');\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis code does not work. `substr_count($string, 'a')` returns `3`\
    \ instead of `2`.\n<|/ c |>\n<| c |>\nThis code does not work. `substr_count($string,\
    \ 'a')` returns `3` instead of `2`.\n<|/ c |>\n<| a tags=php,string |>\n<code>",
  "    $characters = array();\n    $length = strlen($string);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $character = $string[$i];\n        if (!isset($characters[$character]))\
    \ {\n            $characters[$character] = 1;\n        } else {\n            $characters[$character]++;\n\
    \        }\n    }\n    return count($characters);\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $string[$i];\n        if (!array_key_exists($character,\
    \ $characters)) {\n            $characters[$character] = 1;\n        } else {\n\
    \            $characters[$character]++;\n        }\n    }\n    return array_sum($characters);\n\
    }\n", "    $characters = array();\n    foreach (str_split($string) as $char) {\n\
    \        $characters[$char] = isset($characters[$char]) ? $characters[$char] +\
    \ 1 : 1;\n    }\n    return count(array_keys($characters));\n}\n</code>\n<|/ a\
    \ tags=php,string,algorithm |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"abcabc\" where there are two 'a's but only one 'b'.\n<|/ c |>\n<| c |>\n\
    It doesn't work because you only count the number of distinct characters, not\
    \ the number of distinct characters in each string. Try it out with your example\
    \ string.\n<|/ c |>\n<| c |>\n: Yes, I see what you mean. I've updated my answer\
    \ to account for that case.\n<|/ c |>\n<| c |>\n: I added a PHP implementation\
    \ of this algorithm to my answer.\n<|/ c |>\n<| c |>\n: I added a PHP implementation\
    \ of this algorithm to my answer.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n<?php",
  "    $chars = array_count_values(str_split($string));\n    return count(array_filter($chars,\
    \ function($count) { return $count > 1; }));\n}\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| c |>\nThanks so much! This was exactly what I was looking for. :)\n<|/\
    \ c |>\n<| c |>\nThis doesn't work when there are multiple repeated characters,\
    \ e.g. `count_distinct_characters('abcabc')` returns `3` instead of `2`.\n<|/\
    \ c |>\n<| a tags=php,string,arrays |>\n<code>", "    $characters = array();\n\
    \    foreach (str_split($string) as $char) {\n        $characters[$char] = isset($characters[$char])\
    \ ? $characters[$char] + 1 : 1;\n    }\n    return count($characters);\n}\n",
  "    $characters = array();\n    foreach (str_split($string) as $char) {\n     \
    \   $characters[$char] = isset($characters[$char]) ? $characters[$char] + 1 :\
    \ 1;\n    }\n    return count($characters);\n}\n</code>\n<|/ a tags=php,string,arrays,count\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine but i was looking\
    \ for something that could count the characters in an array and return the number\
    \ of distinct characters. I edited my question to make it more clear.\n<|/ c |>\n\
    <| c |>\n: I updated my answer with a function that counts distinct characters\
    \ in a string.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$string = 'abcdefghijklmnopqrstuvwxyz';\n\
    $array = str_split($string);\n$count = count($array);\n$distinct = 0;\nforeach($array\
    \ as $char){\n    if(!in_array($char, $array)){\n        $distinct++;\n    }\n\
    }\necho $distinct;\n</code>\n<|/ a tags=php,string,arrays,count |>\n<| c |>\n\
    Thanks for your answer. Your code works fine but i was looking for something that\
    \ could count the characters in an array and return the number of distinct characters.\
    \ I edited my question to make it more clear.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $string = 'abcdefghijklmnopqrstuvwxyz';\n$array = str_split($string);\n$count\
    \ = count($array);\n$distinct = 0;\nforeach($array as $char){\n    if(!in_array($char,\
    \ $array)){\n        $distinct++;\n    }\n}\necho $distinct;\n</code>\n<|/ a tags=php,string,arrays,count\
    \ |>\n<| a dscore=0 |>\n<code>\n$string = 'abcdefghijklmnopqrstuvwxyz';\n$array\
    \ = str_split($string);\n$count = count($array);\n$distinct = 0;\nforeach($array\
    \ as $char){\n    if(!in_array($char, $array)){\n        $distinct++;\n    }\n\
    }\necho $distinct;\n</code>\n<|/ a tags=php,string,arrays,count |>\n<| c |>\n\
    Thanks for your answer. Your code works fine but i was looking for something that\
    \ could count the characters in an array and return the number of distinct characters.\
    \ I edited my question to make it more clear.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $string", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return count(array_unique($chars));\n}\n", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $chars\
    \ = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a tags=php,string,arrays |>\n<| c |>\nThis doesn't work if you\
    \ have multiple spaces between words. `count_distinct_characters('  a  ')` returns\
    \ `2` instead of `3`.\n<|/ c |>\n<| c |>\nYes, it does. Try it yourself.\n<|/\
    \ c |>\n<| c |>\nIt does. Try it yourself.\n<|/ c |>\n<| c |>\nYes, it does. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\nIt does. Try it yourself.\n<|/ c |>\n<| a tags=php,string,arrays\
    \ |>\n<code>", "    $characters = array_count_values(str_split($string));\n  \
    \  return count(array_filter($characters, function($count) {\n        return $count\
    \ > 1;\n    }));\n}\n</code>\n<|/ a tags=php,string,arrays |>\n<| a tags=php,string,arrays\
    \ |>\n<code>", "    $chars = preg_split('//', $string);\n    $count = count($chars);\n\
    \    $distinct_chars = array();\n    foreach ($chars as $char) {\n        $distinct_chars[$char]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n", "    $characters\
    \ = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($value) { return $value > 1; }));\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=1 |>\n<code>", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string);\n    $chars = array_map('strtolower',\
    \ $chars);\n    return count(array_unique($chars));\n}\n", "    $chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    $counts = array_count_values($chars);\n\
    \    return count($counts);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if there are multiple spaces between words. Try it with `count_distinct_characters(\"\
    abc def\")`.\n<|/ c |>\n<| c |>\nYes, it does. Try it with `count_distinct_characters(\"\
    abc def\")`.\n<|/ c |>\n<| c |>\nOh sorry, I missed that case. Yes, it works.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n$string = \"abc def\";\n$chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n$counts = array_count_values($chars);\n\
    $count = count($counts);\n</code>\n<|/ a tags=php,string |>\n<| a dscore=1 |>\n\
    <code>\n$string = \"abc def\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $counts = array_count_values($chars);\n$count = count($counts);\n</code>\n<|/\
    \ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n$string = \"abc def\"\
    ;\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n$counts = array_count_values($chars);\n\
    $count = count($counts);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $string = \"abc def\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $counts = array_count_values($chars);\n$count = count($counts);\n</code>\n<|/\
    \ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n$string = \"abc def\"\
    ;\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n$counts = array_count_values($chars);\n\
    $count = count($counts);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string |>\n\
    <code>\n$string = \"abc def\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $counts = array_count_values($chars);\n$count = ", "    return preg_match_all('/./u',\
    \ $string, $matches) ? count($matches[0]) : 0;\n}\n", "    $chars = array();\n\
    \    foreach (str_split($string) as $char) {\n        $chars[$char] = isset($chars[$char])\
    \ ? $chars[$char] + 1 : 1;\n    }\n    return count(array_keys($chars));\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer! I actually did something\
    \ similar, but I used a for loop to go through each character in the string and\
    \ count how many times each character occurred. My question was more about how\
    \ to do this without using a for loop. Thanks again though!\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't use a for loop\n<|/ c |>\n<| c |>\nThanks for\
    \ the answer! I actually did something similar, but I used a for loop to go through\
    \ each character in the string and count how many times each character occurred.\
    \ My question was more about how to do this without using a for loop. Thanks again\
    \ though!\n<|/ c |>\n<| c |>\nI added a solution that doesn't use a for loop\n\
    <|/ c |>\n<| a tags=php,string,arrays |>\n<code>\n$string = \"Jerry\";\n$chars\
    \ = str_split($string);\n$count = count($chars);\n$chars = array_count_values($chars);\n\
    $chars = array_filter($chars);\n$chars = array_keys($chars);\n$chars = array_slice($chars,\
    \ 0, $count);\n$chars = implode('', $chars);\necho $chars;\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for the answer! I actually did something similar, but I\
    \ used a for loop to go through each character in the string and count how many\
    \ times each character occurred. My question was more about how to do this without\
    \ using a for loop. Thanks again though!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $string = \"Jerry\";\n$chars = str_split($string);\n$count = count($chars);\n\
    $chars = array_count_values($chars);\n$chars = array_filter($chars);\n$chars =\
    \ array_keys($chars);\n$chars = array_slice($chars, 0, $count);\n$chars = implode('',\
    \ $chars);\necho $chars;\n</code>\n<|/ a tags=php,string,arrays |>\n<| c |>\n\
    Thanks for the answer! I actually did something similar, but I used a for loop\
    \ to go through each character in the string and count how many times each ",
  "    return count(array_count_values(str_split($string)));\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks so much for this! I used this in my project and was able\
    \ to get it working in about 30 seconds. I used the array_count_values function\
    \ and was able to get it down to about 30 seconds. Thanks again!\n<|/ c |>\n<|\
    \ a tags=php,string,arrays |>\n<code>\n$string = \"abcde\";\n$array = str_split($string);\n\
    $count = count($array);\n$unique = array_count_values($array);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_values($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique", "    return count(array_unique(str_split(strtolower($string))));\n}\n\
    </code>\n<|/ a tags=php,string,arrays |>\n<| c |>\nThis doesn't work if you have\
    \ more than 1 character per word. For example, `count_distinct_characters(\"abc\
    \ def\")` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nYes, I noticed that\
    \ after I posted my answer. I've updated my answer to account for that.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if you have more than 1 character per word. For\
    \ example, `count_distinct_characters(\"abc def\")` returns `3` instead of `2`.\n\
    <|/ c |>\n<| c |>\nI updated my answer to account for that as well. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| c |>\nThis doesn't work if you have more than\
    \ 1 character per word. For example, `count_distinct_characters(\"abc def\")`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| a dscore=5 tags=php,string,arrays\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $array = array_count_values($array);\n$array = array_filter($array);\n$array =\
    \ array_keys($array);\n$array = array_values($array);\n$array = array_unique($array);\n\
    $array = array_flip($array);\n$array = array_map(function($v){return $v+1;}, $array);\n\
    $array = array_combine($array, $array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_unique($array);\n$array = array_flip($array);\n$array = array_map(function($v){return\
    \ $v+1;}, $array);\n$array = array_combine($array, $array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_unique($array);\n$array = array_flip($array);\n$array = array_map(function($v){return\
    \ $v+1;}, $array);\n$array = array_combine($array, $array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n", "    return count(array_unique(str_split(strtolower($string))));\n}\n",
  "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n</code>\n<|/ a\
    \ tags=php,string,algorithm |>\n<| c |>\nThis doesn't seem to work. `count_distinct_characters(\"\
    abc\")` returns `1` instead of `3`.\n<|/ c |>\n<| c |>\nI see what you mean. I've\
    \ updated the answer to account for that.\n<|/ c |>\n<| c |>\nThis doesn't seem\
    \ to work. `count_distinct_characters(\"abc\")` returns `1` instead of `3`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer to account for\
    \ that.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count =\
    \ count($chars);\n    $distinct_chars = array_count_values($chars);\n    return\
    \ $distinct_chars[$string];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>", "    $characters = array_count_values(str_split($string));\n    return\
    \ count(array_filter($characters, function($count) { return $count > 1; }));\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work if you have duplicate\
    \ letters in the string. For example, `count_distinct_characters('abcabc')` returns\
    \ `3` instead of `4`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. I also tested it on `'abcabc'` which returns `4`.\n<|/ c |>\n<| c |>\nOh\
    \ sorry, I missed the part where you said \"regardless of case\". My bad.\n<|/\
    \ c |>\n<| c |>\nI added a version that does case insensitivity as well. :)\n\
    <|/ c |>\n<| a tags=php,string |>\n<code>", "    $characters = array();\n    $length\
    \ = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n        $character\
    \ = $string[$i];\n        if (!isset($characters[$character])) {\n           \
    \ $characters[$character] = 1;\n        } else {\n            $characters[$character]++;\n\
    \        }\n    }\n    return count($characters);\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) { return $value >\
    \ 1; }));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm\
    \ sorry I didn't specify this in the question, but I do need to count the occurrences\
    \ of each character in the string. For example, the string \"Jerry\" should return\
    \ an array with two elements: [\"J\", 2], [\"e\", 1] and [\"r\", 1]. Your function\
    \ only returns [\"J\", 1] and [\"e\", 1]. Thanks again!\n<|/ c |>\n<| c |>\nOh,\
    \ I see. I've updated my answer accordingly.\n<|/ c |>\n<| c |>\nThanks again!\
    \ I really appreciate it!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$string\
    \ = \"Jerry\";\n$array = array();\n$array = str_split($string);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    print_r($array);", "    $chars = array();\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        $chars[$string[$i]] = 1;\n    }\n    return count(array_keys($chars));\n\
    }\n", "    $characters = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return count(array_unique($characters));\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,string,algorithm |>\n<code>", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars\
    \ = array();\n    foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n", "    return\
    \ count(array_unique(str_split(strtolower($string))));\n}\n", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string);\n    $chars = array_map('strtolower',\
    \ $chars);\n    $chars = array_unique($chars);\n    return count($chars);\n}\n",
  "    return count(array_unique(str_split(strtolower($string))));\n}\n", "    $chars\
    \ = preg_split('//', $string);\n    $chars = array_map('strtolower', $chars);\n\
    \    return count(array_unique($chars));\n}\n", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis doesn't work for me. `count_distinct_characters(\"\
    Jerry\")` returns `4` instead of `3`.\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine for me. Are you sure you copied the code correctly? What version of PHP\
    \ are you using?\n<|/ c |>\n<| c |>\nI copied it exactly as you wrote it. I just\
    \ tried it again and it works now. Thanks!\n<|/ c |>\n<| c |>\nNo problem. Glad\
    \ I could help.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$string = \"Jerry\";\n$array\
    \ = str_split($string);\n$count = count($array);\n$unique = array_count_values($array);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys(", "    $chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count\
    \ = count($chars);\n    $distinct_chars = array_count_values($chars);\n    return\
    \ $count - array_sum($distinct_chars);\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) { return $value >\
    \ 1; }));\n}\n", "    $chars = array_count_values(str_split($string));\n    return\
    \ array_sum(array_filter($chars, function($v) { return $v > 1; }));\n}\n", " \
    \   $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n", "    return count(array_unique(str_split($string)));\n}\n", "    return\
    \ count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $chars\
    \ = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $chars = array_count_values(str_split($string));\n    return count(array_filter($chars,\
    \ function($count) { return $count > 1; }));\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI used this solution:\n<code>",
  "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) { return $count > 1; }));\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a tags=php,string |>\n<code>\n$string = \"Hello World\";\n$string = strtolower($string);\n\
    $string = preg_replace('/[^a-z]/', '', $string);\n$string = preg_replace('/\\\
    s+/', '', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = ", "    $chars = array();\n\
    \    $char_count = 0;\n    foreach (str_split($string) as $char) {\n        $chars[$char]\
    \ = $char;\n        $char_count++;\n    }\n    return $char_count;\n}\n", "  \
    \  $chars = preg_split('//', $string);\n    $count = count($chars);\n    $chars\
    \ = array_map('strtolower', $chars);\n    $chars = array_count_values($chars);\n\
    \    return $count;\n}\n", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $characters = array();\n    foreach (str_split($string) as $char) {\n\
    \        $characters[$char] = isset($characters[$char]) ? $characters[$char] +\
    \ 1 : 1;\n    }\n    return count($characters);\n}\n", "    return preg_match_all('/[[:upper:]]/',\
    \ $string) + preg_match_all('/[[:lower:]]/', $string);\n}\n", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work if you have a string with unicode characters. `count_distinct_characters('\xC3\
    \u0153\xC3\xBC\xC3\xB6\xC3\xBC\xC3\xBC')` returns `4` instead of `3`.\n<|/ c |>\n\
    <| c |>\n: It does work if you use mb_* functions. I tested it before posting\
    \ my answer. `mb_count_chars()` returns `3` instead of `4`.\n<|/ c |>\n<| c |>\n\
    : I tested it again and it works fine for me. `mb_count_chars()` returns `3` instead\
    \ of `4`.\n<|/ c |>\n<| c |>\n: I tested it again and it works fine for me. `mb_count_chars()`\
    \ returns `3` instead of `4`.\n<|/ c |>\n<| c |>\n: I tested it again and it works\
    \ fine for me. `mb_count_chars()` returns `3` instead of `4`.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $count = count($chars);\n    $distinct_chars = array();\n    foreach ($chars\
    \ as $char) {\n        $distinct_chars[strtolower($char)] = 1;\n    }\n    return\
    \ $count - count($distinct_chars);\n}\n", "    $characters = array();\n    foreach\
    \ (str_split($string) as $char) {\n        $characters[$char] = isset($characters[$char])\
    \ ? $characters[$char] + 1 : 1;\n    }\n    return count(array_keys($characters));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Jerry\"\
    ;\n$characters = str_split($string);\n$unique = array_count_values($characters);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = implode($unique);\necho $unique;\n\
    </code>\n<|/ a tags=php,string,arrays |>\n<| a tags=php,string,arrays |>\n<code>\n\
    <?php\n$string = \"Jerry\";\n$characters = str_split($string);\n$unique = array_count_values($characters);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, 1);\n$unique = implode($unique);\necho $unique;",
  "    $characters = array();\n    foreach (str_split($string) as $char) {\n     \
    \   $characters[$char] = isset($characters[$char]) ? $characters[$char] + 1 :\
    \ 1;\n    }\n    return count($characters);\n}\n", "    return count(array_unique(str_split(strtolower($string))));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ so much for your help! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem. Glad\
    \ I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Jerry\"\
    ;\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n$chars = array_unique($chars);\n\
    $chars = array_count_values($chars);\n$chars = array_filter($chars);\n$chars =\
    \ array_keys($chars);\n$chars = array_values($chars);\n$chars = array_slice($chars,\
    \ 0, 1);\n$chars = array_slice($chars, 1);\n$chars = array_slice($chars, 0, -1);\n\
    $chars = array_slice($chars, -1);\n$chars = array_slice($chars, 0, 1);\n$chars\
    \ = array_slice($chars, 1);\n$chars = array_slice($chars, 0, -1);\n$chars = array_slice($chars,\
    \ -1);\n$chars = array_slice($chars, 0, 1);\n$chars = array_slice($chars, 1);\n\
    $chars = array_slice($chars, 0, -1);\n$chars = array_slice($chars, -1);\n$chars\
    \ = array_slice($chars, 0, 1);\n$chars = array_slice($chars, 1);\n$chars = array_slice($chars,\
    \ 0, -1);\n$chars = array_slice($chars, -1);\n$chars = array_slice($chars, 0,\
    \ 1);\n$chars = array_slice($chars, 1);\n$chars = array_slice($chars, 0, -1);\n\
    $chars = array_slice($chars, -1);\n$chars = array_slice($chars, 0, 1);\n$chars\
    \ = array_slice($chars, 1);\n$chars = array_slice($chars, 0, -1);\n$chars = array_slice($chars,\
    \ -1);\n$chars = array_slice($chars, 0, 1);\n$chars = array_slice($chars, 1);\n\
    $chars = array_slice($chars, 0, -1);\n$chars = array_slice($chars, -1);\n$chars\
    \ = array_slice($chars, 0, 1);\n$chars = array_slice($chars, 1);\n$chars = array_slice($chars,\
    \ 0, -1);\n$chars = array_slice($chars, -1);\n$chars = array_slice($chars, 0,\
    \ 1);\n", "    $chars = preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,string,count |>\n<code>\n$string = \"Hello World\"\
    ;\n$array = explode(\" \", $string);\n$count = count($array);\necho $count;\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$string = \"Hello World\"\
    ;\n$array = explode(\" \", $string);\n$count = count($array);\necho $count;\n\
    </code>\n<|/ a tags=php,string,count |>\n<| a dscore=0 |>\n<code>\n$string = \"\
    Hello World\";\n$array = explode(\" \", $string);\n$count = count($array);\necho\
    \ $count;\n</code>\n<|/ a tags=php,string,count |>\n<| a tags=php,string,count\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\necho $count;\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,string,count\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\necho $count;\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\necho $count;\n</code>\n<|/ a tags=php,string,count |>\n\
    <| a |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\necho $count;\n</code>\n<|/ a dscore=0 tags=php,string,count\
    \ |>\n<| a tags=php,string,count |>\n<code>\n$string = \"Hello World\";\n$array\
    \ = explode(\" \", $string);\n$count = count($array);\necho $count;\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$string = \"Hello World\";\n$array\
    \ = explode(\" \", $string);\n$count = count($array);\necho $count;\n</code>\n\
    <|/ a tags=php,string,count |>\n<| a dscore=0 |>\n<code>\n$string = \"Hello World\"\
    ;\n$array = explode(\" ", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $count = count($chars);\n    $distinct_chars = array();\n    foreach ($chars\
    \ as $char) {\n        $distinct_chars[$char] = 1;\n    }\n    return $count;\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $characters[$string[$i]] = 1;\n    }\n \
    \   return count(array_keys($characters));\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = array();\n    foreach (str_split($string) as $char) {\n  \
    \      $chars[$char] = isset($chars[$char]) ? $chars[$char] + 1 : 1;\n    }\n\
    \    return count($chars);\n}\n", "    $chars = preg_split('//', $string);\n \
    \   $count = count($chars);\n    $chars = array_map('strtolower', $chars);\n \
    \   $chars = array_count_values($chars);\n    return $count;\n}\n", "    $characters\
    \ = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($value) { return $value !== 1; }));\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis does not answer the question of how to count the distinct\
    \ characters in a string. Your answer counts how many times each character appears\
    \ in the string. Which is not what the OP asked for.\n<|/ c |>\n<| c |>\nI believe\
    \ this answers the question of how to count the distinct characters in a string.\
    \ OP wants to count how many distinct characters there are in a string. Your answer\
    \ counts how many times each character appears in the string. Which is not what\
    \ the OP asked for.\n<|/ c |>\n<| c |>\nThis answer does not answer the question.\
    \ The OP asked how to count the distinct characters in a string. Your answer counts\
    \ how many times each character appears in the string. Which is not what the OP\
    \ asked for.\n<|/ c |>\n<| c |>\nThe OP asked for \"how many distinct characters\
    \ (regardless of case) does it consist of\", which this answer does.\n<|/ c |>\n\
    <| c |>\nThis answer does not answer the question. The OP asked how to count the\
    \ distinct characters in a string. Your answer counts how many times each character\
    \ appears in the string. Which is not what the OP asked for.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n$count = preg_match_all('/./u',\
    \ $string, $matches);\n$count = count($matches[0]);\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThis answer does not answer the question. The OP asked how to count the\
    \ distinct characters in a string. Your answer counts how many times each character\
    \ appears in the string. Which is not what the OP asked for.\n<|/ c |>\n<| c |>\n\
    This answer does not answer the question. The OP asked how to count the distinct\
    \ characters in a string. Your answer counts how many times each character appears\
    \ in the string. Which is not what the OP asked for.\n<|/ c |>\n<| c |>\nThis\
    \ answer does not answer the question. The OP asked how to count the distinct\
    \ characters in a string. Your answer counts how many times each character appears\
    \ in the string. Which is not what the OP asked for.\n<|/ c |>\n<| c |>\nThis\
    \ answer does not answer the question. The OP asked how to count the distinct ",
  "    $chars = preg_split('//', $string);\n    $chars = array_map('strtolower', $chars);\n\
    \    return count(array_unique($chars));\n}\n</code>\n<|/ a tags=php,string |>\n\
    <| c |>\nThis doesn't work if there are multiple spaces between words. For example,\
    \ `count_distinct_characters('  a  ')` returns `1` instead of `2`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are multiple spaces between words. For example,\
    \ `count_distinct_characters('  a  ')` returns `1` instead of `2`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if there are multiple spaces between words. For example,\
    \ `count_distinct_characters('  a  ')` returns `1` instead of `2`.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $count = count($chars);\n    $chars = array_map('strtolower', $chars);\n\
    \    $count = count(array_unique($chars));\n    return $count;\n}\n", "    return\
    \ count(array_unique(str_split(strtolower($string))));\n}\n</code>\n<|/ a tags=php,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"abBcCdD\" because\
    \ it will return \"4\" instead of \"3\".\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it yourself. It returns `3` for `\"abBcCdD\"`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it doesn't work. Try it yourself. It returns \"4\" for `\"abBcCdD\"`.\n\
    <|/ c |>\n<| c |>\n: It returns `3` for `\"abBcCdD\"`. Try it yourself. It returns\
    \ `3` for `\"abBcCdD\"`.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work.\
    \ Try it yourself. It returns \"4\" for `\"abBcCdD\"`.\n<|/ c |>\n<| a tags=php,string,arrays\
    \ |>\n<code>\n$string = 'abBcCdD';\n$array = str_split(strtolower($string));\n\
    $count = count($array);\n$unique = array_count_values($array);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique, 0,\
    \ count($unique) - 1);\n$unique = array_slice($unique, 0, count($unique) - 1);\n\
    $unique = array_slice($unique, 0, count($unique) - 1);\n$unique = array_slice($unique,\
    \ 0, count($unique) - 1);\n$unique = array_slice($unique, 0, count($unique) -\
    \ 1);\n$unique = array_slice($unique, 0, count($unique) - 1);\n$unique = array_slice($unique,\
    \ 0, count($unique) - 1);\n$unique = array_slice($unique, 0, count($unique) -\
    \ 1);\n$unique = array_slice($unique, 0, count($unique) - 1);\n$unique = array_slice($unique,\
    \ 0, count($unique) - 1);\n$unique = array_slice($unique, 0, count($unique) -\
    \ 1);\n$unique = array_slice($unique, 0, count($unique) - 1);\n$unique = array_slice($unique,\
    \ 0, count($unique) - 1);\n$unique = array_slice($unique, 0, count($", "    return\
    \ count(array_unique(str_split(strtolower($string))));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/10407887)\n<|/ c |>\n<| c |>\nI added an explanation\
    \ as to why this works.\n<|/ c |>\n<| c |>\nThis does not provide an answer to\
    \ the question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/10407887)\n<|/ c\
    \ |>\n<| c |>\nI added an explanation as to why this works.\n<|/ c |>\n<| a |>\n\
    <code>\n<?php\n$string = \"Hello World\";\n$string = strtolower($string);\n$string\
    \ = preg_replace('/[^a-z]/', '', $string);\n$string = preg_replace('/\\s+/', '',\
    \ $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/",
  "    return count(array_unique(str_split($string)));\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis doesn't work if you have multiple spaces between words. Example:\
    \ `count_distinct_characters(\"hello world\")` returns `5` instead of `4`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have multiple spaces between words.\
    \ Example: `count_distinct_characters(\"hello world\")` returns `5` instead of\
    \ `4`.\n<|/ c |>\n<| a tags=php,string |>\n<code>", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) { return $count >\
    \ 1; }));\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string,algorithm |>\n\
    <code>\n$string = \"Jerry\";\n$array = str_split($string);\n$count = count($array);\n\
    $unique = array_count_values($array);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_map(function($v){return $v+1;}, $unique);\n$unique = array_combine($unique,\
    \ $unique);\n$unique = array_values($unique);\n$unique = implode('', $unique);\n\
    echo $unique;\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string,algorithm |>\n\
    <code>\n<?php\n$string = \"Jerry\";\n$array = str_split($string);\n$count = count($array);\n\
    $unique = array_count_values($array);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_slice($unique, 0, $count);\n$unique\
    \ = array_map(function($v){return $v+1;}, $unique);\n$unique = array_combine($unique,\
    \ $unique);\n$unique = array_values($unique);\n$unique = implode('', $unique);\n\
    echo $unique;", "    $chars = array();\n    foreach (str_split($string) as $char)\
    \ {\n        $chars[$char] = isset($chars[$char]) ? $chars[$char] + 1 : 1;\n \
    \   }\n    return count($chars);\n}\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n\
    }\n", "    $characters = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return count(array_unique($characters));\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if you have multiple spaces between words. `count_distinct_characters(\"\
    abc def\")` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI added a fix for\
    \ that\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string = 'abc def ghi jkl\
    \ mno pqr';\n$array = explode(\" \", $string);\n$array = array_unique($array);\n\
    $count = count($array);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if you have multiple spaces between words. `count_distinct_characters(\"abc\
    \ def\")` returns `3` instead of `2`.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    $string = 'abc def ghi jkl mno pqr';\n$array = explode(\" \", $string);\n$array\
    \ = array_unique($array);\n$count = count($array);\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if you have multiple spaces between words. `count_distinct_characters(\"\
    abc def\")` returns `3` instead of `2`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    $string = 'abc def ghi jkl mno pqr';\n$array = explode(\" \", $string);\n$array\
    \ = array_unique($array);\n$count = count($array);\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a tags=php,string |>\n<code>\n$string = 'abc def ghi jkl mno pqr';\n\
    $array = explode(\" \", $string);\n$array = array_unique($array);\n$count = count($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = 'abc def ghi jkl\
    \ mno pqr';\n$array = explode(\" \", $string);\n$array = array_unique($array);\n\
    $count = count($array);\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = 'abc def ghi jkl ", "    $chars = array();\n    foreach\
    \ (str_split($string) as $char) {\n        $chars[$char] = isset($chars[$char])\
    \ ? $chars[$char] + 1 : 1;\n    }\n    return count($chars);\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for the answer. Your code works fine for small\
    \ strings, but for large strings it takes too much time. I am looking for a faster\
    \ solution. Thanks again.\n<|/ c |>\n<| c |>\nI updated my answer with a faster\
    \ solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code\
    \ works fine for small strings, but for large strings it takes too much time.\
    \ I am looking for a faster solution. Thanks again.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer with a faster solution. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code works fine for small strings, but for large strings\
    \ it takes too much time. I am looking for a faster solution. Thanks again.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php", "    $chars = preg_split('//', $string, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", "    $chars\
    \ = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n\
    \    $distinct_chars = array_count_values($chars);\n    return $count - array_sum($distinct_chars);\n\
    }\n", "    return count(array_unique(str_split($string)));\n}\n</code>\n<|/ a\
    \ tags=php,string,arrays |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/11905646)\n<|/ c |>\n<| c |>\n\
    I believe it does answer the question. He wants to know how many distinct characters\
    \ there are in a string. He also said he was looking for a PHP solution. He also\
    \ said he was looking for a PHP solution. He also said he was looking for a PHP\
    \ solution. He also said he was looking for a PHP solution. He also said he was\
    \ looking for a PHP solution. He also said he was looking for a PHP solution.\
    \ He also said he was looking for a PHP solution. He also said he was looking\
    \ for a PHP solution. He also said he was looking for a PHP solution. He also\
    \ said he was looking for a PHP solution. He also said he was looking for a PHP\
    \ solution. He also said he was looking for a PHP solution. He also said he was\
    \ looking for a PHP solution. He also said he was looking for a PHP solution.\
    \ He also said he was looking for a PHP solution. He also said he was looking\
    \ for a PHP solution. He also said he was looking for a PHP solution. He also\
    \ said he was looking for a PHP solution. He also said he was looking for a PHP\
    \ solution. He also said he was looking for a PHP solution. He also said he was\
    \ looking for a PHP solution. He also said he was looking for a PHP solution.\
    \ He also said he was looking for a PHP solution. He also said he was looking\
    \ for a PHP solution. He also said he was looking for a PHP solution. He also\
    \ said he was looking for a PHP solution. He also said he was looking for a PHP\
    \ solution. He also said he was looking for a PHP solution. He also said he was\
    \ looking for a PHP solution. He also said he was looking for a PHP solution.\
    \ He also said he was looking for a PHP solution. He also said he was looking\
    \ for a PHP solution. He also said he was looking for a PHP solution. He also\
    \ said he was looking for a PHP solution. He also said he was looking for a PHP\
    \ solution. He also said he was looking for a PHP solution. He also said he was\
    \ looking for a PHP solution", "    return count(preg_split('//u', $string, -1,\
    \ PREG_SPLIT_NO_EMPTY));\n}\n", "    return count(array_count_values(str_split($string)));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have multiple\
    \ spaces between words. For example, `count_distinct_characters(\"  a  \")` returns\
    \ `2` instead of `3`.\n<|/ c |>\n<| c |>\nI believe that is the intended behavior.\
    \ From the OP's question: \"*I want to count how many distinct characters are\
    \ in a string*\" which would return `3` for `\"  a  \"`.\n<|/ c |>\n<| c |>\n\
    Yes, but if you have multiple spaces between words, then `count_distinct_characters(\"\
    \  a  \")` returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nI believe that is the\
    \ intended behavior. From the OP's question: \"*I want to count how many distinct\
    \ characters are in a string*\" which would return `3` for `\"  a  \"`.\n<|/ c\
    \ |>\n<| c |>\nI believe that is the intended behavior. From the OP's question:\
    \ \"*I want to count how many distinct characters are in a string*\" which would\
    \ return `3` for `\"  a  \"`.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string\
    \ = \"Hello World\";\n$array = explode(\" \", $string);\n$count = count($array);\n\
    $distinctCharacters = array_count_values($array);\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work if you have multiple spaces between words. For example,\
    \ `count_distinct_characters(\"  a  \")` returns `2` instead of `3`.\n<|/ c |>\n\
    <| a tags=php,string |>\n<code>\n$string = \"Hello World\";\n$array = explode(\"\
    \ \", $string);\n$count = count($array);\n$distinctCharacters = array_count_values($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you have multiple spaces\
    \ between words. For example, `count_distinct_characters(\"  a  \")` returns `2`\
    \ instead of `3`.\n<|/ c |>\n<| c |>\nI believe that is the intended behavior.\
    \ From the OP's question: \"*I want to count how many distinct characters are\
    \ in a string*\" which would return `3` for `\"  a  \"`.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = explode(\" ", "    $chars =\
    \ preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $chars = array_map('strtolower',\
    \ $chars);\n    return count(array_unique($chars));\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n", "    $characters = array();\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $character = $string[$i];\n        if (!array_key_exists($character,\
    \ $characters)) {\n            $characters[$character] = 1;\n        } else {\n\
    \            $characters[$character]++;\n        }\n    }\n    return count($characters);\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n$string\
    \ = \"Hello World\";\n$string = strtolower($string);\n$string = preg_replace('/[^a-z]/',\
    \ '', $string);\n$string = preg_replace('/\\s+/', '', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', '\
    \ ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\\
    s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ', $string);\n$string\
    \ = preg_replace('/\\s+/', ' ', $string);\n$string = preg_replace('/\\s+/', ' ",
  "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution. Although it does require PHP\
    \ >= 5.5.0 which I do not have access to. Thanks for the answer though.\n<|/ c\
    \ |>\n<| c |>\n: I added a PHP 5.3 compatible version\n<|/ c |>\n<| c |>\nI added\
    \ a PHP 5.3 compatible version\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $chars\
    \ = preg_split('//', $string);\n    $chars = array_map('strtolower', $chars);\n\
    \    return count(array_unique($chars));\n}\n", "    $chars = preg_split('//',\
    \ $string);\n    $chars = array_map('strtolower', $chars);\n    $chars = array_count_values($chars);\n\
    \    return count(array_filter($chars));\n}\n</code>\n<|/ a |>\n<| a |>\n<code>",
  "    return count(array_unique(str_split(strtolower($string))));\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there's a way\
    \ to do this without having to loop through the entire string. I'm thinking there\
    \ might be a way to do this with regex or something, but I'm not familiar enough\
    \ with regex to know how.\n<|/ c |>\n<| c |>\nI added a regex solution as well.\
    \ Not sure if that's any better, but it's another option.\n<|/ c |>\n<| c |>\n\
    Thanks for the regex solution! I like it. I think I might stick with this solution\
    \ for now, but I definitely learned a lot from your solution. Thanks!\n<|/ c |>\n\
    <| a tags=php,string |>\n<code>\n$string = \"Jerry\";\n$array = str_split(strtolower($string));\n\
    $count = count($array);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work\
    \ if there are multiple instances of the same letter, e.g. \"Jerry\" would return\
    \ 2 instead of 3.\n<|/ c |>\n<| c |>\n: I believe that is the desired behavior.\
    \ He wants to count the distinct characters in a string. He doesn't want to count\
    \ the number of occurrences of letters in a string.\n<|/ c |>\n<| c |>\n: I believe\
    \ that is the desired behavior. He wants to count the distinct characters in a\
    \ string. He doesn't want to count the number of occurrences of letters in a string.\n\
    <|/ c |>\n<| c |>\n: I believe that is the desired behavior. He wants to count\
    \ the distinct characters in a string. He doesn't want to count the number of\
    \ occurrences of letters in a string.\n<|/ c |>\n<| c |>\n: I believe that is\
    \ the desired behavior. He wants to count the distinct characters in a string.\
    \ He doesn't want to count the number of occurrences of letters in a string.\n\
    <|/ c |>\n<| a |>\n<code>\n$string = \"Jerry\";\n$array = str_split(strtolower($string));\n\
    $count = count($array);\n</code>\n<|/ a tags=php,string dscore=1 |>\n<| c |>\n\
    This doesn't work if there are multiple instances of the same letter, e.g. \"\
    Jerry\" would return 2 instead of 3.\n<|/ c |>\n<| c |>\n: I believe that is the\
    \ desired behavior. He wants to count the distinct characters in a string. He\
    \ doesn't want to count the number of occurrences of letters in a string.\n<|/\
    \ c |>\n<| a tag", "    $chars = array();\n    foreach (str_split($string) as\
    \ $char) {\n        $chars[$char] = isset($chars[$char]) ? $chars[$char] + 1 :\
    \ 1;\n    }\n    return count($chars);\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) {\n        return\
    \ $value > 1;\n    }));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your answer, but this doesn't answer the question. I'm looking for a way to\
    \ count the number of distinct characters in a string regardless of case. Your\
    \ answer counts distinct characters in all cases.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a function that counts distinct characters in all cases.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I'm looking for a way to count the\
    \ number of distinct characters in a string regardless of case. Your answer counts\
    \ distinct characters in all cases.\n<|/ c |>\n<| c |>\nI updated my answer to\
    \ include a function that counts distinct characters in all cases.\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\n$string = \"Jerry\";\n$array = str_split($string);\n$count\
    \ = count($array);\n$unique = array_count_values($array);\n$unique = array_filter($unique);\n\
    $count = count($unique);\necho $count;", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    <?php", "    $chars = preg_split('//', $string);\n    $chars = array_map('strtolower',\
    \ $chars);\n    $chars = array_count_values($chars);\n    return count(array_filter($chars,\
    \ function($value) { return $value > 1; }));\n}\n", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count\
    \ = count($chars);\n    $distinct_chars = array_count_values($chars);\n    return\
    \ $distinct_chars[$string];\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return array_sum(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n", "    $chars = array_count_values(str_split($string));\n\
    \    return array_sum(array_filter($chars, function($count) { return $count >\
    \ 1; }));\n}\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $count = count($chars);\n    $distinct = 0;\n    foreach ($chars as $char)\
    \ {\n        $distinct += mb_strlen($char, 'UTF-8');\n    }\n    return $count;\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $chars\
    \ = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n", "    return count(array_unique(str_split($string)));\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis doesn't work if the string contains any non-alphanumeric\
    \ characters. For example, `count_distinct_characters('\"abc\"')` returns `3`\
    \ instead of `4`.\n<|/ c |>\n<| c |>\n: Yes, it does. `count_distinct_characters('\"\
    abc\"')` returns `3` because `\"abc\"` contains 3 distinct characters, `'a'`,\
    \ `'b'` and `'c'`.\n<|/ c |>\n<| c |>\n: I added a function that counts distinct\
    \ characters, regardless of case.\n<|/ c |>\n<| c |>\n: I added a function that\
    \ counts distinct characters, regardless of case.\n<|/ c |>\n<| c |>\n: I added\
    \ a function that counts distinct characters, regardless of case.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$string = 'abc';\n$array = str_split($string);\n\
    $count = count($array);\n$unique = array_count_values($array);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_count_values($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_unique($unique);\n$unique = array_count_values($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_keys($unique);\n$unique\
    \ = array_values($unique);\n$unique = array_unique($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_keys($unique);\n$unique\
    \ = array_values($unique);\n$unique = array_unique($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_unique($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_keys($unique);\n$unique\
    \ = array_values($unique);\n$unique = ", "    return count(array_unique(str_split($string)));\n\
    }\n", "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n", "    return\
    \ count(array_unique(str_split($string)));\n}\n", "    $chars = array_count_values(str_split($string));\n\
    \    return count(array_filter($chars, function($count) { return $count > 1; }));\n\
    }\n</code>\n<|/ a tags=php,string,arrays,count |>\n<| a tags=php,string,arrays,count\
    \ |>\n<code>\n$string = \"Hello World\";\n$array = str_split($string);\n$count\
    \ = count($array);\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis answer does not\
    \ provide an explanation as to why this works.\n<|/ c |>\n<| c |>\nThis answer\
    \ does not provide an explanation as to why this works.\n<|/ c |>\n<| c |>\nThis\
    \ answer does not provide an explanation as to why this works.\n<|/ c |>\n<| a\
    \ tags=php,string,arrays,count |>\n<code>\n$string = \"Hello World\";\n$array\
    \ = str_split($string);\n$count = count($array);\n</code>\n<|/ a dscore=5 |>\n\
    <| a tags=php,string,arrays,count |>\n<code>\n$string = \"Hello World\";\n$array\
    \ = str_split($string);\n$count = count($array);\n</code>\n<|/ a dscore=5 |>\n\
    <| a dscore=5 |>\n<code>\n$string = \"Hello World\";\n$array = str_split($string);\n\
    $count = count($array);\n</code>\n<|/ a tags=php,string,arrays,count |>\n<| a\
    \ dscore=5 |>\n<code>\n$string = \"Hello World\";\n$array = str_split($string);\n\
    $count = count($array);\n</code>\n<|/ a tags=php,string,arrays,count |>\n<| a\
    \ tags=php,string,arrays,count |>\n<code>\n$string = \"Hello World\";\n$array\
    \ = str_split($string);\n$count = count($array);\n</code>\n<|/ a dscore=5 |>\n\
    <| a tags=php,string,arrays,count |>\n<code>\n$string = \"Hello World\";\n$array\
    \ = str_split($string);\n$count = count($array);\n</code>\n<|/ a dscore=5 |>\n\
    <| a dscore=5 |>\n<code>\n$string = \"Hello World\";\n$array = str_split($string);\n\
    $count = count($array);\n</code>\n<|/ a tags=php,string,arrays,count |>\n<| a\
    \ dscore=5 |>\n<code>\n$string = \"Hello World\";\n$array = str_split($string);\n\
    $count = count(", "    $chars = array_count_values(str_split($string));\n    return\
    \ count(array_filter($chars, function($count) {\n        return $count > 1;\n\
    \    }));\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work when\
    \ there are multiple occurrences of the same character in a string. For example,\
    \ `count_distinct_characters(\"abcabc\") returns 3` instead of `2`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are multiple occurrences of the same character\
    \ in a string. For example, `count_distinct_characters(\"abcabc\") returns 3`\
    \ instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work when there are multiple\
    \ occurrences of the same character in a string. For example, `count_distinct_characters(\"\
    abcabc\") returns 3` instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work when\
    \ there are multiple occurrences of the same character in a string. For example,\
    \ `count_distinct_characters(\"abcabc\") returns 3` instead of `2`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work when there are multiple occurrences of the same character\
    \ in a string. For example, `count_distinct_characters(\"abcabc\") returns 3`\
    \ instead of `2`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n$string = \"abcabc\";\n\
    $chars = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique, 0,\
    \ $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) { return $count >\
    \ 1; }));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't\
    \ seem to work. `count_distinct_characters(\"abcabc\") returns 3` while it should\
    \ return `2`.\n<|/ c |>\n<| c |>\nIt doesn't work. `count_distinct_characters(\"\
    abcabc\") returns 3` while it should return `2`.\n<|/ c |>\n<| c |>\n: It does\
    \ work. `count_distinct_characters(\"abcabc\") returns 2` while it should return\
    \ `3`.\n<|/ c |>\n<| c |>\n: It does work. `count_distinct_characters(\"abcabc\"\
    ) returns 2` while it should return `3`.\n<|/ c |>\n<| c |>\n: It does work. `count_distinct_characters(\"\
    abcabc\") returns 2` while it should return `3`.\n<|/ c |>\n<| a dscore=5 |>\n\
    <code>\n$string = \"abcabc\";\n$chars = str_split($string);\n$count = count($chars);\n\
    $unique = array_count_values($chars);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_slice($unique, 0, $count);\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nThis doesn't seem to work. `count_distinct_characters(\"\
    abcabc\") returns 3` while it should return `2`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `count_distinct_characters(\"abcabc\") returns 2` while it should return `3`.\n\
    <|/ c |>\n<| c |>\nIt does work. `count_distinct_characters(\"abcabc\") returns\
    \ 2` while it should return `3`.\n<|/ c |>\n<| c |>\nIt does work. `count_distinct_characters(\"\
    abcabc\") returns 2` while it should return `3`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `count_distinct_characters(\"abcabc\") returns 2` while it should return `3`.\n\
    <|/ c |>\n<| a dscore=5 tags=php,string |>\n<code>\n$string = \"abcabc\";\n$chars\
    \ = str_split($string);\n$count = count($chars);", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n</code>\n<|/ a tags=php,string,regex\
    \ |>\n<| c |>\nThis doesn't work if the string contains unicode characters. For\
    \ example, `count_distinct_characters('\u0130stanbul')` returns `1` instead of\
    \ `2`.\n<|/ c |>\n<| c |>\n: That's because your string contains unicode characters.\
    \ If you want a solution that works with unicode characters, please update your\
    \ question to include an example string that includes unicode characters.\n<|/\
    \ c |>\n<| c |>\n: I've updated my answer to include a solution that works with\
    \ unicode characters.\n<|/ c |>\n<| c |>\n: I've updated my answer to include\
    \ a solution that works with unicode characters.\n<|/ c |>\n<| c |>\n: I've updated\
    \ my answer to include a solution that works with unicode characters.\n<|/ c |>\n\
    <| a tags=php,string,regex |>\n<code>\n$string = 'abcde';\n$string = preg_replace('/./u',\
    \ '', $string);\n$string = preg_replace('/[^a-z]/', '', $string);\n$string = preg_replace('/[^A-Z]/',\
    \ '', $string);\n$string = preg_replace('/[^0-9]/', '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/", "    $characters = array();\n   \
    \ $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ $character = $string[$i];\n        if (!isset($characters[$character])) {\n\
    \            $characters[$character] = 1;\n        } else {\n            $characters[$character]++;\n\
    \        }\n    }\n    return count($characters);\n}\n", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,string,count\
    \ |>\n<code>\n<?php\n$string = \"Hello World\";\n$array = explode(\" \", $string);\n\
    $count = count($array);\necho $count;", "    return count(preg_split('//u', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    return count(array_unique(str_split($string)));\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for \"Jerry\" because\
    \ it returns 4 instead of 3.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself.\
    \ It returns 3 because there are 3 distinct characters in the string.\n<|/ c |>\n\
    <| c |>\nI see what you mean. My mistake.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for \"Jerry\" because it returns 4 instead of 3.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. My mistake.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n<?php\n$string\
    \ = \"Jerry\";\n$array = str_split($string);\n$count = count($array);\n$unique\
    \ = array_count_values($array);\n$unique = array_filter($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_unique($unique);\n$unique =\
    \ array_slice($unique, 0, $count);\n$unique = array_slice($unique, count($unique)\
    \ - 1);\n$unique = implode($unique);\necho $unique;", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n", "    $chars = preg_split('//', $string);\n    $chars\
    \ = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $count\
    \ = count($chars);\n    $distinct_chars = array_count_values($chars);\n    return\
    \ $count - array_sum($distinct_chars);\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\n$string = \"Jerry\";\n$chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    $count = count($chars);\n$distinct_chars = array_count_values($chars);\n$total_distinct_chars\
    \ = $count - array_sum($distinct_chars);\n</code>\n<|/ a dscore=0 tags=php,string\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"Jerry\";\n$chars = preg_split('//',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY);\n$count = count($chars);\n$distinct_chars\
    \ = array_count_values($chars);\n$total_distinct_chars = $count - array_sum($distinct_chars);\n\
    echo $total_distinct_chars;", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($count) {\n        return\
    \ $count > 1;\n    }));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work if there are repeated characters in the string. For example, `count_distinct_characters('abcabc')`\
    \ returns `3` instead of `4`.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I've updated my answer to account for that case.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$string = \"abc\";\n$count = count(array_count_values(str_split($string)));\n\
    </code>\n<|/ a tags=php,string |>\n<| a dscore=2 |>\n<code>\n$string = \"abc\"\
    ;\n$count = count(array_count_values(str_split($string)));\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a tags=php,string |>\n<code>\n$string = \"abc\";\n$count = count(array_count_values(str_split($string)));\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,string |>\n<code>\n$string = \"abc\"\
    ;\n$count = count(array_count_values(str_split($string)));\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = \"abc\";\n$count = count(array_count_values(str_split($string)));\n\
    </code>\n<|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n$string =\
    \ \"abc\";\n$count = count(array_count_values(str_split($string)));\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\n$string = \"abc\";\n$count = count(array_count_values(str_split($string)));\n\
    </code>\n<|/ a tags=php,string dscore=1 |>\n<| a tags=php,string |>\n<code>\n\
    $string = \"abc\";\n$count = count(array_count_values(str_split($string)));\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = \"abc\";\n$count\
    \ = count(array_count_values(str_split($string)));\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = \"abc\";\n$count = count(array_count_values(str_split($string)));\n\
    </code>\n<|/ a tags=php,string |>\n<| a dscore=1 |>\n<code>\n$string", "    $characters\
    \ = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) { return $count > 1; }));\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. Unfortunately, this doesn't work. `count_distinct_characters(\"\
    Jerry\")` returns `4` instead of `3`.\n<|/ c |>\n<| c |>\nI updated my answer.\
    \ Now it works. I tested it on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Unfortunately, this doesn't work. `count_distinct_characters(\"\
    Jerry\")` returns `4` instead of `3`.\n<|/ c |>\n<| c |>\nI updated my answer.\
    \ Now it works. I tested it on PHP 5.3.10 and PHP 5.4.4.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. Unfortunately, this doesn't work. `count_distinct_characters(\"\
    Jerry\")` returns `4` instead of `3`.\n<|/ c |>\n<| a tags=php,string,algorithm\
    \ |>\n<code>\n<?php", "    $chars = preg_split('//', $string);\n    $chars = array_map('strtolower',\
    \ $chars);\n    return count(array_unique($chars));\n}\n", "    $characters =\
    \ array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($value) {\n        return $value > 1;\n    }));\n}\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis doesn't work if you have duplicate characters. For\
    \ example, if your string was \"abcabc\", it would return 3 instead of 4.\n<|/\
    \ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I've updated\
    \ my answer.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string = 'abc';\n$chars\
    \ = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = implode('', $unique);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$string = 'abc';\n$chars\
    \ = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = implode('', $unique);\n\
    </code>\n<|/ a tags=php,string |>\n<| a dscore=1 |>\n<code>\n$string = 'abc';\n\
    $chars = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = implode('', $unique);\n\
    </code>\n<|/ a tags=php,string |>\n<| a dscore=0 |>\n<code>\n$string = 'abc';\n\
    $chars = str_split($string);\n$count = count($chars);\n$unique = array_count_values($chars);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique, 0, $count);\n$unique = implode('', $unique);\n\
    </code>\n<|/ a tags=php,string |>\n", "    $chars = array_count_values(str_split($string));\n\
    \    return count(array_filter($chars, function($value) { return $value > 1; }));\n\
    }\n", "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThanks for your answer. Your code is very similar to my\
    \ own solution, except that yours uses `str_split` instead of `str_word_count`.\
    \ However, `str_word_count` doesn't count the characters that are not letters.\
    \ For example, `str_word_count(\"Jerry\")` returns `array(0 => 1, 1 => 1, 2 =>\
    \ 1)` instead of `array(0 => 1, 1 => 2, 2 => 1)`.\n<|/ c |>\n<| c |>\nAh, I see.\
    \ Yes, I missed that point. I'll update my answer accordingly.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nI came up with a solution using array_count_values and array_filter:\n\
    <code>\n<?php", "    return count(array_unique(str_split($string)));\n}\n", " \
    \   return count(array_unique(str_split(strtolower($string))));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a string like \"abCdEfGhIjKlMNOPqRsTUVWXYZ\"\
    \n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it, and it works\
    \ fine.\n<|/ c |>\n<| c |>\nI tested it and it doesn't work. Try it on \"abCdEfGhIjKlMNOPqRsTUVWXYZ\"\
    \n<|/ c |>\n<| c |>\n: It works fine for me. Try it here: http://codepad.org/4sMjLzYH\n\
    <|/ c |>\n<| c |>\n: It works fine for me too. Try it here: http://codepad.org/4sMjLzYH\n\
    <|/ c |>\n<| a tags=php,string |>\n<code>\n$string = \"abCdEfGhIjKlMNOPqRsTUVWXYZ\"\
    ;\n$string = strtolower($string);\n$string = preg_replace('/[^a-z]/', '', $string);\n\
    $string = preg_replace('/[^A-Z]/', '', $string);\n$string = preg_replace('/[^0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^",
  "    return count(array_unique(str_split($string)));\n}\n", "    return count(array_count_values(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n", "    $chars = array_count_values(str_split($string));\n\
    \    return count(array_filter($chars, function($v) { return $v > 1; }));\n}\n\
    </code>\n<|/ a tags=php,string,algorithm |>\n<| c |>\nThis doesn't work. Try it\
    \ with `count_distinct_characters(\"abBcC\")`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `count_distinct_characters(\"abBcC\")`.\n<|/ c |>\n<| c |>\nIt does\
    \ work. Try it with `count_distinct_characters(\"abBcC\")`.\n<|/ c |>\n<| c |>\n\
    It does work. Try it with `count_distinct_characters(\"abBcC\")`.\n<|/ c |>\n\
    <| c |>\nIt does work. Try it with `count_distinct_characters(\"abBcC\")`.\n<|/\
    \ c |>\n<| a dscore=3 |>\n<code>\n$string = \"abBcC\";\n$array = str_split($string);\n\
    $count = count($array);\n$unique = array_count_values($array);\n$unique = array_filter($unique);\n\
    $unique = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = array_slice($unique, 0, $count);\n$unique = array_slice($unique,\
    \ 0, $count);\n$", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n", "    $characters = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return count(array_unique($characters));\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) {\n        return\
    \ $value > 1;\n    }));\n}\n", "    $chars = preg_split('//', $string);\n    $count\
    \ = count($chars);\n    $chars = array_map('strtolower', $chars);\n    $count\
    \ = count($chars);\n    return $count;\n}\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   $characters = array();\n    foreach (str_split($string) as $char) {\n    \
    \    $characters[strtolower($char)] = 1;\n    }\n    return count($characters);\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if there are multiple spaces between the words. Try it with `count_distinct_characters(\"\
    Hello World\")`.\n<|/ c |>\n<| c |>\nYes, I noticed that after I posted my answer.\
    \ I've updated my answer to account for multiple spaces.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI wrote a PHP function that counts distinct characters in a string. It also\
    \ handles multiple spaces between words.\n<code>", "    $characters = array();\n\
    \    foreach (str_split($string) as $character) {\n        $characters[$character]\
    \ = isset($characters[$character]) ? $characters[$character] + 1 : 1;\n    }\n\
    \    return count($characters);\n}\n", "    $chars = array();\n    $char_count\
    \ = 0;\n    foreach (str_split($string) as $char) {\n        $chars[$char] = 1;\n\
    \        $char_count += 1;\n    }\n    return $char_count;\n}\n", "    $characters\
    \ = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($value) { return $value > 1; }));\n}\n</code>\n<|/ a tags=php,string,arrays,count\
    \ |>\n<| c |>\nThis doesn't work if the string contains multiple repeated characters.\
    \ For example, `count_distinct_characters('abcabc')` returns `3` instead of `2`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the string contains multiple repeated\
    \ characters. For example, `count_distinct_characters('abcabc')` returns `3` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work if the string contains multiple\
    \ repeated characters. For example, `count_distinct_characters('abcabc')` returns\
    \ `3` instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work if the string contains\
    \ multiple repeated characters. For example, `count_distinct_characters('abcabc')`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nThis doesn't work if the string\
    \ contains multiple repeated characters. For example, `count_distinct_characters('abcabc')`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| a tags=php,string,arrays,count |>\n\
    <code>\n$string = 'abcabc';\n$array = str_split($string);\n$count = count($array);\n\
    $unique = array_count_values($array);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_count_values($unique);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_count_values($unique);\n$", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   $chars = array_count_values(str_split($string));\n    return count(array_filter($chars,\
    \ function($count) { return $count > 1; }));\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis doesn't work for me. `count_distinct_characters(\"abc\")`\
    \ returns `1` instead of `2`.\n<|/ c |>\n<| c |>\nI tested it and it works fine\
    \ for me. Are you sure you copied the code correctly? Maybe you forgot to add\
    \ `return $count;` at the end of the function?\n<|/ c |>\n<| c |>\nYes, I copied\
    \ it exactly. Maybe it's my PHP version? I'm using 5.3.10. I'll try upgrading\
    \ and see if it makes a difference.\n<|/ c |>\n<| c |>\nI upgraded to 5.3.10 and\
    \ it still doesn't work. I'm going to try upgrading my PHP version and see if\
    \ that helps.\n<|/ c |>\n<| c |>\nI upgraded to 5.3.10 and it still doesn't work.\
    \ I'm going to try upgrading my PHP version and see if that helps.\n<|/ c |>\n\
    <| a tags=php,string |>\n<code>\n<?php\n$string = \"abc\";\n$count = substr_count($string,\
    \ \"a\");\necho $count;", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) { return $value >\
    \ 1; }));\n}\n", "    $characters = array();\n    foreach (str_split($string)\
    \ as $char) {\n        $characters[strtolower($char)] = 1;\n    }\n    return\
    \ count($characters);\n}\n", "    return count(preg_split('//u', $string, -1,\
    \ PREG_SPLIT_NO_EMPTY));\n}\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $count = count($chars);\n    $distinct = 0;\n    foreach ($chars as $char)\
    \ {\n        if (ctype_upper($char)) {\n            $distinct++;\n        }\n\
    \    }\n    return $count;\n}\n", "    return count(preg_split('//u', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $chars = preg_split('//', $string, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars = array();\n\
    \    foreach ($chars as $char) {\n        $distinct_chars[$char] = 1;\n    }\n\
    \    return $count - count($distinct_chars);\n}\n", "    $chars = array_count_values(str_split($string));\n\
    \    return count(array_filter($chars, function($count) {\n        return $count\
    \ > 1;\n    }));\n}\n", "    return preg_match_all('/[[:upper:]]/', $string) +\
    \ preg_match_all('/[[:lower:]]/', $string);\n}\n", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) {\n        return\
    \ $value > 1;\n    }));\n}\n", "    $chars = preg_split('//', $string);\n    $count\
    \ = count($chars);\n    $distinct_chars = array_count_values($chars);\n    return\
    \ $distinct_chars[$string];\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis\
    \ doesn't work for strings with repeated characters, e.g. \"abcabc\" returns 3\
    \ instead of 4.\n<|/ c |>\n<| c |>\nI believe that is the intended behavior. OP\
    \ asked for \"how many distinct characters\" and I believe that is the intended\
    \ behavior.\n<|/ c |>\n<| c |>\nI believe that is the intended behavior. OP asked\
    \ for \"how many distinct characters\" and I believe that is the intended behavior.\n\
    <|/ c |>\n<| c |>\nI believe that is the intended behavior. OP asked for \"how\
    \ many distinct characters\" and I believe that is the intended behavior.\n<|/\
    \ c |>\n<| c |>\nI believe that is the intended behavior. OP asked for \"how many\
    \ distinct characters\" and I believe that is the intended behavior.\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\n$string = \"abcabc\";\n$chars = preg_split('//', $string);\n\
    $count = count($chars);\n$distinct_chars = array_count_values($chars);\necho $distinct_chars[$string];",
  "    $chars = array_count_values(str_split($string));\n    return count(array_filter($chars,\
    \ function($value) { return $value > 1; }));\n}\n", "    $characters = array();\n\
    \    foreach (str_split($string) as $char) {\n        $characters[$char] = isset($characters[$char])\
    \ ? $characters[$char] + 1 : 1;\n    }\n    return count($characters);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with `count_distinct_characters(\"\
    abbcccdd\")`. It returns `5` instead of `3`.\n<|/ c |>\n<| c |>\nYes, I noticed\
    \ that after I posted my answer. Thanks for pointing it out.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"abbcccdd\";\n$count = preg_match_all('/./u', $string,\
    \ $matches);\n$count = count($matches[0]);\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work. Try it with `count_distinct_characters(\"abbcccdd\")`. It returns\
    \ `5` instead of `3`.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string = \"\
    abbcccdd\";\n$count = preg_match_all('/./u', $string, $matches);\n$count = count($matches[0]);\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$string = \"abbcccdd\";\n\
    $count = preg_match_all('/./u', $string, $matches);\n$count = count($matches[0]);\n\
    </code>\n<|/ a tags=php,string |>\n<| a |>\n<code>\n$string = \"abbcccdd\";\n\
    $count = preg_match_all('/./u', $string, $matches);\n$count = count($matches[0]);\n\
    </code>\n<|/ a tags=php,string dscore=1 |>\n<| a tags=php,string |>\n<code>\n\
    $string = \"abbcccdd\";\n$count = preg_match_all('/./u', $string, $matches);\n\
    $count = count($matches[0]);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $string = \"abbcccdd\";\n$count = preg_match_all('/./u', $string, $matches);\n\
    $count = count($matches[0]);\n</code>\n<|/ a tags=php,string |>\n<| a dscore=1\
    \ |>\n<code>\n$string = \"abbcccdd\";\n", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $count = count($chars);\n    $distinct_chars\
    \ = array();\n    foreach ($chars as $char) {\n        $distinct_chars[strtolower($char)]\
    \ = 1;\n    }\n    return $count - count($distinct_chars);\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis doesn't work if there are multiple spaces between words. For\
    \ example, `count_distinct_characters(\"abc def ghi\")` returns `3` instead of\
    \ `4`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it by adding `trim()`\
    \ before splitting. Thanks for pointing that out.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"abc def ghi\";\n$chars = preg_split('//', $string, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n$count = count($chars);\n$distinct_chars = array();\n\
    foreach ($chars as $char) {\n    $distinct_chars[strtolower($char)] = 1;\n}\n\
    $distinct_chars = array_count_values($distinct_chars);\n$distinct_chars = array_filter($distinct_chars);\n\
    $distinct_chars = array_keys($distinct_chars);\n$distinct_chars = array_values($distinct_chars);\n\
    $distinct_chars = array_unique($distinct_chars);\n$distinct_chars = array_count_values($distinct_chars);\n\
    $distinct_chars = array_filter($distinct_chars);\n$distinct_chars = array_keys($distinct_chars);\n\
    $distinct_chars = array_values($distinct_chars);\n$distinct_chars = array_unique($distinct_chars);\n\
    $distinct_chars = array_count_values($distinct_chars);\n$distinct_chars = array_filter($distinct_chars);\n\
    $distinct_chars = array_keys($distinct_chars);\n$distinct_chars = array_values($distinct_chars);\n\
    $distinct_chars = array_unique($distinct_chars);\n$distinct_chars = array_count_values($distinct_chars);\n\
    $distinct_chars = array_filter($distinct_chars);\n$distinct_chars = array_keys($distinct_chars);\n\
    $distinct_chars = array_values($distinct_chars);\n$distinct_chars = array_unique($distinct_chars);\n\
    $distinct_chars = array_count_values($distinct_chars);\n$distinct_char", "   \
    \ $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $counts =\
    \ array_count_values($chars);\n    return count($counts);\n}\n", "    $chars =\
    \ array_count_values(str_split($string));\n    return array_sum(array_keys($chars));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there are multiple\
    \ characters in the same group. For example, `count_distinct_characters(\"abcabc\"\
    ) => 3`, but `count_distinct_characters(\"abcab\") => 2`\n<|/ c |>\n<| c |>\n\
    Yes, I noticed that and fixed it now. Thanks for pointing it out.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "    $characters = array();\n    foreach (str_split($string)\
    \ as $char) {\n        $characters[$char] = isset($characters[$char]) ? $characters[$char]\
    \ + 1 : 1;\n    }\n    return count($characters);\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"aAa\" which should\
    \ return 2.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it out and see.\n<|/ c |>\n\
    <| c |>\n: It doesn't work if you have a string like \"aAa\" which should return\
    \ 2.\n<|/ c |>\n<| c |>\n: It doesn't work if you have a string like \"aAa\" which\
    \ should return 2.\n<|/ c |>\n<| c |>\n: It doesn't work if you have a string\
    \ like \"aAa\" which should return 2.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    $string = 'aAa';\n$chars = str_split($string);\n$count = count($chars);\n$unique\
    \ = array_count_values($chars);\n$unique = array_filter($unique);\n$unique = array_keys($unique);\n\
    $unique = array_values($unique);\n$unique = array_slice($unique, 0, $count);\n\
    $unique = array_slice($unique, 0, count($unique) - 1);\n$unique = array_unique($unique);\n\
    $unique = implode('', $unique);\n$unique = str_replace('', '', $unique);\n$unique\
    \ = preg_replace('/[^A-Za-z0-9]/', '', $unique);\n$unique = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $unique);\n$unique = preg_replace('/[^A-Za-z0-9]/', '', $unique);\n$unique\
    \ = preg_replace('/[^A-Za-z0-9]/', '', $unique);\n$unique = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $unique);\n$unique = preg_replace('/[^A-Za-z0-9]/', '', $unique);\n$unique\
    \ = preg_replace('/[^A-Za-z0-9]/', '', $unique);\n$unique = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $unique);\n$unique = preg_replace('/[^A-Za-z0-9]/', '', $unique);\n$unique\
    \ = preg_replace('/[^A-Za-z0-9]/', '', $unique);\n$unique = preg_replace('/[^A-Za-z0-9]/',\
    \ '', $unique);\n$unique = preg_replace('/", "    $chars = array_count_values(str_split($string));\n\
    \    return count(array_filter($chars, function($char) {\n        return $char\
    \ > 1;\n    }));\n}\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    return count(array_unique($chars));\n}\n", "    $chars = preg_split('//u',\
    \ $string);\n    $count = count($chars);\n    $distinct_chars = array();\n   \
    \ foreach ($chars as $char) {\n        if (in_array($char, $distinct_chars)) {\n\
    \            $count--;\n        } else {\n            $distinct_chars[] = $char;\n\
    \        }\n    }\n    return $count;\n}\n", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $characters = preg_split('//',\
    \ $string);\n    $distinct_characters = array();\n    foreach ($characters as\
    \ $character) {\n        $distinct_characters[] = strtolower($character);\n  \
    \  }\n    return count($distinct_characters);\n}\n", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    return count(preg_split('//u',\
    \ $string, -1, PREG_SPLIT_NO_EMPTY));\n}\n", "    $chars = preg_split('//', $string);\n\
    \    $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n</code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work if you have multiple\
    \ spaces between words. e.g. \"Hello World\" would return 5 instead of 4.\n<|/\
    \ c |>\n<| a dscore=3 |>\n<code>", "    $chars = preg_split('//', $string, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", "    $chars\
    \ = array();\n    foreach (str_split($string) as $char) {\n        $chars[$char]\
    \ = isset($chars[$char]) ? $chars[$char] + 1 : 1;\n    }\n    return count(array_keys($chars));\n\
    }\n", "    return count(preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works\
    \ but it is very slow. My original code was much faster.\n<|/ c |>\n<| c |>\n\
    I tested it on `count_distinct_characters(\"Jerry\")` with your original code\
    \ and it took about 1.5 seconds. I added a version that uses `preg_split` which\
    \ should be much faster.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code\
    \ works but it is very slow. My original code was much faster.\n<|/ c |>\n<| c\
    \ |>\nI tested it on `count_distinct_characters(\"Jerry\")` with your original\
    \ code and it took about 1.5 seconds. I added a version that uses `preg_split`\
    \ which should be much faster.\n<|/ c |>\n<| c |>\nThanks for your answer. Your\
    \ code works but it is very slow. My original code was much faster.\n<|/ c |>\n\
    <| a dscore=1 |>\nI tested it on count_distinct_characters(\"Jerry\") with your\
    \ original code and it took about 1.5 seconds. I added a version that uses preg_split\
    \ which should be much faster.\n<code>", "    $chars = preg_split('//', $string,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    return count(array_unique($chars));\n}\n", " \
    \   $characters = array();\n    foreach (str_split($string) as $character) {\n\
    \        $characters[$character] = isset($characters[$character]) ? $characters[$character]\
    \ + 1 : 1;\n    }\n    return count($characters);\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| c |>\nThis doesn't seem to work. `count_distinct_characters(\"abc\")`\
    \ returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nIt does work. `count_distinct_characters(\"\
    abc\")` returns `2`. `count_distinct_characters(\"abcABC\")` returns `3`. `count_distinct_characters(\"\
    abcABC\")` returns `3`.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question.\
    \ My apologies.\n<|/ c |>\n<| c |>\nNo worries, I appreciate your effort!\n<|/\
    \ c |>\n<| a tags=php,string |>\n<code>\n$string = \"abcABC\";\n$string = preg_replace('/[^A-Za-z]/',\
    \ '', $string);\n$string = preg_replace('/[^A-Za-z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string\
    \ = preg_replace('/[^a-zA-Z0-9]/', '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/',\
    \ '', $string);\n$string = preg_replace('/[^a-zA-Z0-9]/', '', ", "    $chars =\
    \ preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    $chars = array_count_values($chars);\n\
    \    return count($chars);\n}\n", "    $characters = array();\n    $length = strlen($string);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $character = $string[$i];\n \
    \       if (!array_key_exists($character, $characters)) {\n            $characters[$character]\
    \ = 1;\n        } else {\n            $characters[$character]++;\n        }\n\
    \    }\n    return count($characters);\n}\n", "    return count(array_count_values(str_split($string)));\n\
    }\n", "    $chars = preg_split('//', $string, -1, PREG_SPLIT_NO_EMPTY);\n    return\
    \ count(array_unique($chars));\n}\n</code>\n<|/ a tags=php,string,arrays |>\n\
    <| c |>\nI like your solution, however it only works with ASCII characters. If\
    \ you try it with unicode characters, it fails.\n<|/ c |>\n<| c |>\n: Yes, I know.\
    \ That's why I wrote \"regardless of case\".\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works with unicode characters.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works with unicode characters.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that works with unicode characters.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$string\
    \ = 'abc';\n$array = str_split($string);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_unique($array);\n$array = array_slice($array, 0, 1);\n$array =\
    \ array_slice($array, 0, -1);\n$array = array_slice($array, 0, -2);\n$array =\
    \ array_slice($array, 0, -3);\n$array = array_slice($array, 0, -4);\n$array =\
    \ array_slice($array, 0, -5);\n$array = array_slice($array, 0, -6);\n$array =\
    \ array_slice($array, 0, -7);\n$array = array_slice($array, 0, -8);\n$array =\
    \ array_slice($array, 0, -9);\n$array = array_slice($array, 0, -10);\n$array =\
    \ array_slice($array, 0, -11);\n$array = array_slice($array, 0, -12);\n$array\
    \ = array_slice($array, 0, -13);\n$array = array_slice($array, 0, -14);\n$array\
    \ = array_slice($array, 0, -15);\n$array = array_slice($array, 0, -16);\n$array\
    \ = array_slice($array, 0, -17);\n$array = array_slice($array, 0, -18);\n$array\
    \ = array_slice($array, 0, -19);\n$array = array_slice($array, 0, -20);\n$array\
    \ = array_slice($array, 0, -21);\n$array = array_slice($array, 0, -22);\n$array\
    \ = array_slice($array, 0, -23);\n$array = array_slice($array, 0, -24);\n$array\
    \ = array_slice($array, 0, -25);\n$array = array_slice($array, 0, -26);\n$array\
    \ = array_slice($array, 0, -27);\n$", "    $characters = array_count_values(str_split($string));\n\
    \    return count(array_filter($characters, function($value) {\n        return\
    \ $value > 1;\n    }));\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to make it work with PHP 7. `array_count_values`\
    \ doesn't exist in PHP 7 and `str_split` doesn't exist in PHP 5.6\n<|/ c |>\n\
    <| c |>\nI added a PHP 7 version to my answer.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"Jerry\";\n$array = str_split($string);\n$count = count($array);\n\
    $unique = array_count_values($array);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = implode($unique);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"Jerry\";\n$array = str_split($string);\n$count = count($array);\n\
    $unique = array_count_values($array);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = implode($unique);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\n$string = \"Jerry\";\n$array = str_split($string);\n$count = count($array);\n\
    $unique = array_count_values($array);\n$unique = array_filter($unique);\n$unique\
    \ = array_keys($unique);\n$unique = array_values($unique);\n$unique = array_slice($unique,\
    \ 0, $count);\n$unique = implode($unique);\n</code>\n<|/ a tags=php,string |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$string = \"Jerry\";\n$array =\
    \ str_split($string);\n$count = count($array);\n$unique = array_count_values($array);\n\
    $unique = array_filter($unique);\n$unique = array_keys($unique);\n$unique = array_values($unique);\n\
    $unique = array_slice($unique", "    $chars = preg_split('//', $string);\n   \
    \ $chars = array_map('strtolower', $chars);\n    return count(array_unique($chars));\n\
    }\n", "    $characters = array_count_values(str_split($string));\n    return count(array_filter($characters,\
    \ function($count) {\n        return $count > 1;\n    }));\n}\n</code>\n<|/ a\
    \ tags=php,arrays,string |>\n<| c |>\nThis doesn't work if the string contains\
    \ any non-alphanumeric characters. For example, this returns `1` for `\"aA\"`.\n\
    <|/ c |>\n<| c |>\nYes, it does. I tested it before posting it. I also tested\
    \ it on PHP 5.6.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. I also tested it on PHP 5.6.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.6.\n<|/ c |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$string = \"abcde\";\n$array = str_split($string);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_unique($array);\n$array = array_flip($array);\n$array = array_map(function($v){return\
    \ $v+1;}, $array);\n$array = array_combine($array, $array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_unique($array);\n$array = array_flip($array);\n$array = array_map(function($v){return\
    \ $v+1;}, $array);\n$array = array_combine($array, $array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_unique($array);\n$array = array_flip($array);\n$array = array_map(function($v){return\
    \ $v+1;}, $array);\n$array = array_combine($array, $array);\n$array = array_count_values($array);\n\
    $array = array_filter($array);\n$array = array_keys($array);\n$array = array_values($array);\n\
    $array = array_unique($array);\n$array = array_flip($array);\n$array = array_map(function($v){return\
    \ $v+1;}, $array);\n$array = array_"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
