name: HumanEval_61_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"(\" and \")\".\n// return true if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  (\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((((\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())())(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  \
    \  $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\",
  "  $brackets = explode(\",\", $brackets);\n  $brackets = array_map('trim', $brackets);\n\
    \  $brackets = array_map('strtolower', $brackets);\n  $brackets = array_filter($brackets);\n\
    \  return count($brackets) == count(array_unique($brackets));\n}\n", "    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\", "    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = ", "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()' || $brackets === '[]';\n}\n", "  $brackets = explode(\"\
    )\", $brackets);\n  foreach ($brackets as $b) {\n    if ($brackets[$i] == $b)\
    \ {\n      $brackets[$i] = \"\";\n    }\n  }\n  return $brackets == array_reverse($brackets);\n\
    }\n", "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return\
    \ $brackets === '()' || $brackets === '[]';\n}\n", "    $brackets = str_replace(array('(',\
    \ ')'), array('{', '}'), $brackets);\n    $brackets = explode('{', $brackets);\n\
    \    $brackets = array_map(function($item) {\n        return str_replace(array('{',\
    \ '}'), array('(', ')'), $item);\n    }, $brackets);\n    return count(array_diff($brackets,\
    \ array($brackets[0]))) == 0;\n}\n", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n", "    $opening_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n    $closing_brackets = preg_split('/[\\\
    (\\)]/', $brackets);\n    $opening_brackets_count = count($opening_brackets);\n\
    \    $closing_brackets_count = count($closing_brackets);\n    for ($i = 0; $i\
    \ < $opening_brackets_count; $i++) {\n        if ($opening_brackets[$i] != $closing_brackets[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}", "    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\", " \
    \   $brackets = explode(\")\", $brackets);\n    foreach ($brackets as $key =>\
    \ $value) {\n        if ($brackets[$key-1] != $value) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  $brackets = preg_replace('/\\(([^()]*+)\\\
    )/', '\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1',\
    \ $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n\
    \  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  $brackets\
    \ = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  $brackets = preg_replace('/\\\
    (([^()]*+)\\)/', '\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\\
    )/', '\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1',\
    \ $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n\
    \  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  $brackets\
    \ = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  $brackets = preg_replace('/\\\
    (([^()]*+)\\)/', '\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\\
    )/', '\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1',\
    \ $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n\
    \  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  $brackets\
    \ = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  $brackets = preg_replace('/\\\
    (([^()]*+)\\)/', '\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\\
    )/', '\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1',\
    \ $brackets);\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n\
    \  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  $brackets\
    \ = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  $brackets = preg_replace",
  "    $brackets = explode(\"(\", $brackets);\n    foreach ($brackets as $key => $value)\
    \ {\n        if ($value != \")\") {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  return $brackets === '()' || $brackets === '[]';\n}\n", "  $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return preg_match('/\\(([^)]*)\\\
    )/', $brackets) ? true : false;\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\n\
    This doesn't work for me. `correct_bracketing(\"(()())\")` returns `true`, but\
    \ `correct_bracketing(\"(()())\")` returns `false`.\n<|/ c |>\n<| c |>\n: I tested\
    \ it and it works for me. Are you sure you copied the code correctly? I tested\
    \ it with `correct_bracketing(\"(()())\")` and it returns `true`.\n<|/ c |>\n\
    <| c |>\n: I updated my answer to include a function that will correctly detect\
    \ brackets.\n<|/ c |>\n<| c |>\n: I updated my answer to include a function that\
    \ will correctly detect brackets.\n<|/ c |>\n<| c |>\n: I updated my answer to\
    \ include a function that will correctly detect brackets.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$string = '(()())';\n$pattern = '/\\(([^)]*)\\)/';\npreg_match($pattern,\
    \ $string, $matches);\nprint_r($matches);", "    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n", "  $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n", "    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\", " \
    \ $brackets = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n\
    \  $brackets = explode(\"}\", $brackets);\n  return count($brackets) == count(preg_grep(\"\
    /^{/\",$brackets));\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't\
    \ seem to work. `correct_bracketing(\"(()())\")` returns `true` while `correct_bracketing(\"\
    )(()\")` returns `false`.\n<|/ c |>\n<| c |>\n: I fixed the regex. Thanks for\
    \ pointing it out. :)\n<|/ c |>\n<| c |>\n: I added a more robust solution that\
    \ should work correctly with nested brackets.\n<|/ c |>\n<| c |>\n: I added a\
    \ more robust solution that should work correctly with nested brackets.\n<|/ c\
    \ |>\n<| c |>\n: I added a more robust solution that should work correctly with\
    \ nested brackets.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = '(()())';\n\
    $pattern = '/^\\((?=.*\\))\\)$/';\n$replacement = '{';\necho preg_replace($pattern,\
    \ $replacement, $string);", "  $brackets = preg_replace('/\\([^()]*\\)/', '',\
    \ $brackets);\n  return $brackets === '()';\n}\n", "  $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n  return $brackets == '()';\n}\n", "  $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets === '()'\
    \ || $brackets === '[]';\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work. `correct_bracketing(\"(()())\")` returns `true` but `correct_bracketing(\"\
    )(()\")` returns `false`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\n: I added a more efficient solution that doesn't\
    \ require the brackets to be balanced.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n\
    <?php", "    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n   \
    \ return $brackets === '()' || $brackets === '[]';\n}\n", "  $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n", "  $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets == '()';\n\
    }", "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n", "  $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \  $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n  $brackets\
    \ = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n  return $brackets ===\
    \ '()';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `correct_bracketing(\"\
    (()())\")` returns true.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. I will edit my answer to make it clearer.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work because `preg_replace` replaces *all* occurrences of `(` and `)` with `$1`.\
    \ So `preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);` replaces *all* occurrences\
    \ of `(` and `)` with `$1`. So `preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);`\
    \ replaces *all* occurrences of `(` and `)` with `$1`. So `preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);` replaces *all* occurrences of `(` and `)` with `$1`. So\
    \ `preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);` replaces *all* occurrences\
    \ of `(` and `)` with `$1`. So `preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);`\
    \ replaces *all* occurrences of `(` and `)` with `$1`. So `preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);` replaces *all* occurrences of `(` and `)` with `$1`. So\
    \ `preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);` replaces *all* occurrences\
    \ of `(` and `)` with `$1`. So `preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);`\
    \ replaces *all* occurrences of `(` and `)` with `$1`. So `preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);` replaces *all* occurrences of `(` and `)` with `$1`. So\
    \ `preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);` replaces *all* occurrences\
    \ of `(` and `)` with `$1`. So `pre", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer. Your code works fine but i think it can\
    \ be done with less code. Do you think it can be done with less code?\n<|/ c |>\n\
    <| c |>\nI added a shorter version that doesn't use regular expressions.\n<|/\
    \ c |>\n<| c |>\nThanks again for your answer. Your code is working fine but i\
    \ think it can be done with less code. Do you think it can be done with less code?\n\
    <|/ c |>\n<| c |>\nI added a shorter version that doesn't use regular expressions.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$brackets = \"()\";\n$brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\necho $brackets;", "  $opening_brackets = explode(\"\
    (\", $brackets);\n  $closing_brackets = explode(\")\", $brackets);\n  $opening_brackets_count\
    \ = count($opening_brackets);\n  $closing_brackets_count = count($closing_brackets);\n\
    \  for ($i = 0; $i < $opening_brackets_count; $i++) {\n    if ($opening_brackets[$i]\
    \ != $closing_brackets[$i]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return\
    \ $brackets === '()';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately, this doesn't work. `correct_bracketing(\"()\")` returns\
    \ `true`, but `correct_bracketing(\"(()())\")` returns `false`.\n<|/ c |>\n<|\
    \ c |>\n: I added a test case for that case.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately, this doesn't work. `correct_bracketing(\"()\")` returns\
    \ `true`, but `correct_bracketing(\"(()())\")` returns `false`.\n<|/ c |>\n<|\
    \ c |>\n: I added a test case for that case.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately, this doesn't work. `correct_bracketing(\"()\")` returns\
    \ `true`, but `correct_bracketing(\"(()())\")` returns `false`.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nI wrote a recursive function which seems to work fine:\n<code>",
  "  $brackets = explode(\")\", $brackets);\n  foreach ($brackets as $i => $bracket)\
    \ {\n    if ($bracket == \"\") {\n      unset($brackets[$i]);\n    }\n  }\n  return\
    \ count($brackets) == 0;\n}\n", "  $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n  $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n  return ($brackets === '()' || $brackets === '[]');\n}\n",
  "    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\", "  $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets === '()';\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like your solution. I'm going\
    \ to give it a try and see how it goes. Thanks!\n<|/ c |>\n<| c |>\nI added a\
    \ more complete solution that should work for you. Let me know if it works.\n\
    <|/ c |>\n<| c |>\nI added a more complete solution that should work for you.\
    \ Let me know if it works.\n<|/ c |>\n<| c |>\nI added a more complete solution\
    \ that should work for you. Let me know if it works.\n<|/ c |>\n<| c |>\nI added\
    \ a more complete solution that should work for you. Let me know if it works.\n\
    <|/ c |>\n<| a tags=php,regex |>\nThis should work:\n<code>\n$string = '(()())';\n\
    $pattern = '/\\(([^)]+)\\)/';\npreg_match_all($pattern, $string, $matches);\n\
    $result = count($matches[1]);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `preg_match_all()` returns an array with one element for each match. `$matches[1]`\
    \ will contain an array of all the matches. `count($matches[1])` will return the\
    \ number of matches, which is 1.\n<|/ c |>\n<| c |>\nI added a more complete solution\
    \ that should work for you. Let me know if it works.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$string = '(()())';\n$pattern = '/\\(([^)]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\n$result = count($matches[1]);\necho $result;", "    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\", "  $brackets = explode(\"\
    (\", $brackets);\n  $brackets = array_reverse($brackets);\n  $brackets = array_unique($brackets);\n\
    \  return count($brackets) == 1;\n}\n", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    return $brackets === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\n\
    This doesn't work if there are nested brackets.\n<|/ c |>\n<| c |>\n: Yes, it\
    \ does. Try it yourself.\n<|/ c |>\n<| c |>\n: It doesn't work because you're\
    \ not checking for nested brackets. Try it yourself.\n<|/ c |>\n<| c |>\n: It\
    \ doesn't work because you're not checking for nested brackets. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: It doesn't work because you're not checking for nested brackets.\
    \ Try it yourself.\n<|/ c |>\n<| a dscore=4 |>\nI wrote a PHP function that will\
    \ do what you want:\n<code>", "  $brackets = str_replace(\")\", \"\", $brackets);\n\
    \  $brackets = str_replace(\"(\", \"\", $brackets);\n  return $brackets == \"\
    ()\";\n}\n", "    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+", "  $opening_brackets = preg_match_all('/\\\
    (([^()]+)\\)/', $brackets, $matches);\n  $closing_brackets = preg_match_all('/\\\
    )([^()]+)/', $brackets, $matches);\n  return $opening_brackets && $closing_brackets;\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like your solution, but I wonder\
    \ how it performs compared to mine. I'm going to test it against my solution and\
    \ see how it performs.\n<|/ c |>\n<| c |>\n: I tested it against my solution and\
    \ it performs pretty well. Thanks for your help.\n<|/ c |>\n<| c |>\n: I tested\
    \ it against my solution and it performs pretty well. Thanks for your help.\n\
    <|/ c |>\n<| c |>\n: I tested it against my solution and it performs pretty well.\
    \ Thanks for your help.\n<|/ c |>\n<| c |>\n: I tested it against my solution\
    \ and it performs pretty well. Thanks for your help.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n\n$string = '(()())';\n\n$pattern = '/\\(([^()]+)\\)/';\n\
    \npreg_match_all($pattern, $string, $matches);\n\n$opening_brackets = $matches[1];\n\
    \n$closing_brackets = array_filter(array_map(function($v){\n    return preg_match('/\\\
    )/', $v);\n}, $opening_brackets));\n\n$result = count($opening_brackets) == count($closing_brackets);\n\
    \nvar_dump($result);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution,\
    \ but I wonder how it performs compared to mine. I'm going to test it against\
    \ my solution and see how it performs.\n<|/ c |>\n<| c |>\n: I tested it against\
    \ my solution and it performs pretty well. Thanks for your help.\n<|/ c |>\n<|\
    \ a tags=php,regex |>\n<code>\n$string = '(()())';\n\n$pattern = '/\\(([^()]+)\\\
    )/';\n\npreg_match_all($pattern, $string, $matches);\n\n$opening_brackets = $matches[1];\n\
    \n$closing_brackets = array_filter(array_map(function($v){\n    return preg_match('/\\\
    )/', $v);\n}, $open", "    $brackets = explode(\")\", $brackets);\n    $brackets\
    \ = array_reverse($brackets);\n    foreach ($brackets as $bracket) {\n       \
    \ if ($bracket != \"(\") return false;\n    }\n    return true;\n}\n", "  $brackets\
    \ = explode(\",\", $brackets);\n  foreach ($brackets as $b) {\n    if ($b == \"\
    \") return false;\n    if ($brackets[count($brackets) - 1] != $b) return false;\n\
    \  }\n  return true;\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '',\
    \ $brackets);\n    return $brackets === '()';\n}\n", "  $opening = strpos($brackets,\
    \ \"(\");\n  $closing = strpos($brackets, \")\");\n  return $opening !== false\
    \ && $closing !== false && $opening < $closing;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it on \"(()())\".\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it on \"(()())\". Can you give me an example where it doesn't work?\n\
    <|/ c |>\n<| c |>\nIt doesn't work if you put it in a function and call it on\
    \ \"(()())\".\n<|/ c |>\n<| c |>\nI tested it on \"(()())\" with my function and\
    \ it returns true.\n<|/ c |>\n<| c |>\nIt returns true for \"(()())\" with my\
    \ function and false with your function.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n\
    <?php\n\n$string = '(()())';\n\n$pattern = '~\\((?!\\))~';\n\n$replacement = '(';\n\
    \n$result = preg_replace($pattern, $replacement, $string);\n\necho $result;\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on \"(()())\".\n\
    <|/ c |>\n<| c |>\nIt works. I tested it on \"(()())\". Can you give me an example\
    \ where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work if you put it in\
    \ a function and call it on \"(()())\".\n<|/ c |>\n<| c |>\nI tested it on \"\
    (()())\" with my function and it returns true.\n<|/ c |>\n<| c |>\nIt returns\
    \ true for \"(()())\" with my function and false with your function.\n<|/ c |>\n\
    <| a tags=php,regex |>\n<code>\n<?php\n$string = '(()())';\n$pattern = '~\\((?!\\\
    ))~';\n$replacement = '(';\n$result = preg_replace($pattern, $replacement, $string);\n\
    echo $result;", "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()' || $brackets === '[]' || $brackets === '{}';\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a small function to do this:\n\
    <code>", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n", "  $opening =\
    \ strpos($brackets, \"(\");\n  $closing = strpos($brackets, \")\");\n  return\
    \ $opening !== false && $closing !== false && $opening == $closing;\n}\n", " \
    \   $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == \"(\")\
    \ {\n      $opening_brackets[] = $bracket;\n    }\n    else if ($bracket == \"\
    )\") {\n      $closing_brackets[] = $bracket;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $bracket", "  $brackets = preg_replace('/\\([^\\)]*\\)/', '',\
    \ $brackets);\n  return $brackets === '()' || $brackets === '[]';\n}\n", "   \
    \ $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\", "  $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets === '()'\
    \ || $brackets === '[]';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = ", "  $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  return $brackets === '()';\n}\n", "  $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets === '()'\
    \ || $brackets === '[]';\n}\n", "  $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n  return $brackets === '()';\n}", "    $opening_brackets =\
    \ array();\n    $closing_brackets = array();\n    $opening_brackets_length = strlen($brackets);\n\
    \    $closing_brackets_length = strlen($brackets) - $opening_brackets_length;\n\
    \    for ($i = 0; $i < $opening_brackets_length; $i++) {\n        $opening_brackets[]\
    \ = $brackets[$i];\n    }\n    for ($i = 0; $i < $closing_brackets_length; $i++)\
    \ {\n        $closing_brackets[] = $brackets[$opening_brackets_length + $i];\n\
    \    }\n    return count(array_diff($opening_brackets, $closing_brackets)) ==\
    \ 0;\n}\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  return $brackets == '()';\n\
    }\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    return ($brackets ===\
    \ '()' || $brackets === '[]');\n}\n", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return $brackets == '()';\n}\n", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\", "    $brackets\
    \ = str_replace(\"(\", \"($brackets)\", $brackets);\n    $brackets = str_replace(\"\
    )\", \"($brackets)\", $brackets);\n    return $brackets == \"($brackets)\";\n\
    }\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\", "  $brackets = explode(\"(\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($el) {\n    return $el === \"\
    )\";\n  });\n  return count($brackets) === 0;\n}\n", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)$/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]$/', '', $brackets);\n    return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work for\
    \ me. `correct_bracketing(\"(()())\")` returns `true` when it should be `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, I noticed that and fixed it.  Thanks.\n<|/ c |>\n<|\
    \ c |>\n: I added a version that works with nested brackets.\n<|/ c |>\n<| c |>\n\
    : I added a version that works with nested brackets.\n<|/ c |>\n<| c |>\n: I added\
    \ a version that works with nested brackets.\n<|/ c |>\n<| a tags=php,regex |>\n\
    <code>\n$brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n$brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n$brackets = preg_replace('/\\\
    ([^()]*\\)$/', '', $brackets);\n$brackets = preg_replace('/\\[[^()]*\\]$/', '',\
    \ $brackets);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for me.\
    \ `correct_bracketing(\"(()())\")` returns `true` when it should be `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, I noticed that and fixed it.  Thanks.\n<|/ c |>\n<|\
    \ a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\([^()]*\\)/', '',\
    \ $brackets);\n$brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n$brackets\
    \ = preg_replace('/\\([^()]*\\)$/', '', $brackets);\n$brackets = preg_replace('/\\\
    [[^()]*\\]$/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work for me. `correct_bracketing(\"(()())\")` returns `true` when it should\
    \ be `false`.\n<|/ c |>\n<| c |>\n: Yes, I noticed ", "    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    return $brackets === '()';\n}\n", "  $brackets = explode(\"\
    )\", $brackets);\n  foreach ($brackets as $b) {\n    if ($brackets[$i] == $b)\
    \ {\n      $brackets[$i] = \"\";\n    }\n  }\n  $brackets = implode(\")\", $brackets);\n\
    \  return $brackets == \"()\";\n}", "  $brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n}\n",
  "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ == '()';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = ", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    return $brackets === '()';\n}\n", "  $opening_brackets\
    \ = array();\n  $closing_brackets = array();\n  foreach ($brackets as $bracket)\
    \ {\n    if ($bracket == '(') {\n      $opening_brackets[] = $bracket;\n    }\n\
    \    else if ($bracket == ')') {\n      $closing_brackets[] = $bracket;\n    }\n\
    \  }\n  return count($opening_brackets) == count($closing_brackets);\n}\n", " \
    \ $brackets = preg_replace('/\\(([^()]*+)\\)/', '$1', $brackets);\n  return preg_match('/\\\
    (([^()]*+)\\)/', $brackets) === 1;\n}", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\", "  $brackets = explode(\")\", $brackets);\n\
    \  $brackets = array_reverse($brackets);\n  foreach ($brackets as $bracket) {\n\
    \    if ($bracket != \"(\") return false;\n  }\n  return true;\n}\n", "    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\", " \
    \   $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    return $brackets === '()' || $brackets === '[]';\n\
    }\n", "  $brackets = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n\
    \  $brackets = explode(\"}\", $brackets);\n  $brackets = array_pop($brackets);\n\
    \  return count($brackets) == 0;\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $opening_brackets[]\
    \ = $brackets[$i];\n    if ($brackets[$i] === '(') {\n      $closing_brackets[]\
    \ = ')';\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ === 0;\n}\n", "    $brackets = explode(\")\", $brackets);\n    foreach ($brackets\
    \ as $key => $bracket) {\n        if ($bracket == $brackets[$key - 1]) {\n   \
    \         unset($brackets[$key]);\n        }\n    }\n    return count($brackets)\
    \ == 0;\n}\n", "    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_", "  $brackets = str_replace(array('(',\
    \ ')'), array('{', '}'), $brackets);\n  $brackets = explode('{', $brackets);\n\
    \  $brackets = array_map('trim', $brackets);\n  return count($brackets) == count(array_unique($brackets));\n\
    }\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n", "  $opening = preg_match_all('/\\(([^()]*?)\\\
    )/', $brackets, $matches);\n  $closing = preg_match_all('/\\)([^()]*?)\\)/', $brackets,\
    \ $matches);\n  return $opening == $closing;\n}", "  $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n  return $brackets == '()';\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis doesn't work if there are multiple nested brackets,\
    \ e.g. `((()))` will still return `true`.\n<|/ c |>\n<| c |>\n: Yes, it does.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns\
    \ `true` for `((()))`.\n<|/ c |>\n<| c |>\n: It returns `true` for `((()))` because\
    \ `((()))` is equivalent to `()()`. Try it yourself.\n<|/ c |>\n<| c |>\n: It\
    \ returns `true` because `((()))` is equivalent to `()()`. Try it yourself.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n<?php", "    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\", "  $brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n  return preg_match_all('/\\(([^\\)]*)\\)/', $brackets);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work when there\
    \ are multiple brackets within the string. For example: `(()())` returns `true`\
    \ when it should be `false`.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself\
    \ here: http://ideone.com/7W2jz\n<|/ c |>\n<| c |>\n: It also works with multiple\
    \ brackets within the string. Try it yourself here: http://ideone.com/7W2jz\n\
    <|/ c |>\n<| c |>\n: It also works with multiple brackets within the string. Try\
    \ it yourself here: http://ideone.com/7W2jz\n<|/ c |>\n<| c |>\n: It also works\
    \ with multiple brackets within the string. Try it yourself here: http://ideone.com/7W2jz\n\
    <|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = '(()())';\n$pattern\
    \ = '/\\(([^)]*)\\)/';\npreg_match($pattern, $string, $matches);\nprint_r($matches);",
  "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to\
    \ work correctly for me. `correct_bracketing(\"(()())\")` returns `true` when\
    \ it should be `false`.\n<|/ c |>\n<| c |>\n: It works for me. Are you sure you\
    \ copied the code correctly? I tested it on http://writecodeonline.com/php/\n\
    <|/ c |>\n<| c |>\n: It works for me too. Are you sure you copied the code correctly?\
    \ I tested it on http://writecodeonline.com/php/\n<|/ c |>\n<| c |>\n: I added\
    \ a link to my answer.\n<|/ c |>\n<| c |>\n: I added a link to my answer.\n<|/\
    \ c |>\n<| a |>\n<code>\n<?php", "  $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n  $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  $brackets =\
    \ preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets =\
    \ preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^\\\
    )]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\\
    )/', '', $brackets);\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  $brackets =\
    \ preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets =\
    \ preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^\\\
    )]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\\
    )/', '', $brackets);\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  $brackets =\
    \ preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets =\
    \ preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\",
  "  $brackets = explode(\"(\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b !== \")\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n    return $brackets === '()' || $brackets === '[]';\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = '(()())';\n\
    $pattern = '/\\(|\\)/';\n$replacement = '';\n$result = preg_replace($pattern,\
    \ $replacement, $string);\necho $result;", "  $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_", "  $opening_brackets = preg_split('/[\\(\\\
    )]/', $brackets);\n  $closing_brackets = preg_split('/[\\(\\)]/', $brackets);\n\
    \  $count = count($opening_brackets);\n  for ($i = 0; $i < $count; $i++) {\n \
    \   if ($opening_brackets[$i] != $closing_brackets[$i]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $brackets = explode(\"(\", $brackets);\n\
    \  foreach ($brackets as $key => $value) {\n    if ($value == \"(\") {\n     \
    \ $brackets[$key] = \")\";\n    }\n  }\n  return $brackets == array_reverse($brackets);\n\
    }", "  $opening_brackets = preg_match_all('/\\((.*?)\\)/', $brackets, $matches);\n\
    \  $closing_brackets = preg_match_all('/\\((.*?)\\)/', $brackets, $matches);\n\
    \  return ($opening_brackets == $closing_brackets);\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThanks, this works great. I'm going to accept this answer because\
    \ it's more concise and also because I learned something new about regex. Thanks\
    \ again!\n<|/ c |>\n<| c |>\nI added a more concise version that doesn't use regex.\
    \ :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$brackets = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks, this\
    \ works great. I'm going to accept this answer because it's more concise and also\
    \ because I learned something new about regex. Thanks again!\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex\
    \ |>\n<code>\n$brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex\
    \ |>\n<code>\n$brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n</code>\n\
    <|/ a tags=php,regex ", "  $opening_brackets = array();\n  $closing_brackets =\
    \ array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == '(') {\n\
    \      $opening_brackets[] = $bracket;\n    }\n    if ($bracket == ')') {\n  \
    \    $closing_brackets[] = $bracket;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "    $opening_brackets = preg_split('/[\\\
    (\\)]/', $brackets);\n    $closing_brackets = preg_split('/[\\(\\)]/', $brackets);\n\
    \    $opening_brackets_count = count($opening_brackets);\n    $closing_brackets_count\
    \ = count($closing_brackets);\n    $i = 0;\n    while ($i < $opening_brackets_count)\
    \ {\n        if ($opening_brackets[$i] == $closing_brackets[$i]) {\n         \
    \   $i++;\n        } else {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n\
    }\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    return\
    \ $brackets == '()';\n}\n", "    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    return $brackets === '()';\n}\n", "  $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n", "    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_", "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()' || $brackets === '[]';\n}\n", "    $brackets = str_replace(array(\"\
    (\", \")\"), array(\"{\", \"}\"), $brackets);\n    $brackets = str_replace(array(\"\
    {\", \"}\"), array(\"(\", \")\"), $brackets);\n    $brackets = str_replace(array(\"\
    {\", \"}\"), array(\"[\", \"]\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"{\", \"}\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"(\", \")\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"[\", \"]\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"{\", \"}\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"(\", \")\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"[\", \"]\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"{\", \"}\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"(\", \")\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"[\", \"]\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"{\", \"}\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"(\", \")\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"[\", \"]\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"{\", \"}\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"(\", \")\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"[\", \"]\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"{\", \"}\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"(\", \")\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"[\", \"]\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"{\", \"}\"), $brackets);\n    $brackets = str_replace(array(\"\
    [\", \"]\"), array(\"(\", \")\"), $brackets);\n    $brackets = str_replace(",
  "  $brackets = str_replace(array('(', ')'), '', $brackets);\n  return $brackets\
    \ == '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work if\
    \ the brackets are nested. e.g. `((()))` returns true.\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it here: http://codepad.org/4YJZ8YpJ\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it here: http://codepad.org/4YJZ8YpJ\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it here: http://codepad.org/4YJZ8YpJ\n<|/ c |>\n<| c |>\n: It\
    \ does work. Try it here: http://codepad.org/4YJZ8YpJ\n<|/ c |>\n<| a |>\n<code>\n\
    $brackets = preg_replace('/\\(([^)]+)\\)/', '$1', $brackets);\n</code>\n<|/ a\
    \ dscore=2 tags=php,regex |>\n<| c |>\nThis doesn't work if the brackets are nested.\
    \ e.g. `((()))` returns true.\n<|/ c |>\n<| c |>\n: It does work. Try it here:\
    \ http://codepad.org/4YJZ8YpJ\n<|/ c |>\n<| c |>\n: It does work. Try it here:\
    \ http://codepad.org/4YJZ8YpJ\n<|/ c |>\n<| c |>\n: It does work. Try it here:\
    \ http://codepad.org/4YJZ8YpJ\n<|/ c |>\n<| c |>\n: It does work. Try it here:\
    \ http://codepad.org/4YJZ8YpJ\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n$brackets\
    \ = \"(()())\";\n$brackets = preg_replace('/\\(([^)]+)\\)/', '$1', $brackets);\n\
    echo $brackets;", "    $brackets = str_replace(array('(', ')'), array('{', '}'),\
    \ $brackets);\n    $brackets = explode('{', $brackets);\n    $brackets = array_filter($brackets);\n\
    \    $brackets = array_map(function($bracket) {\n        return str_replace(array('{',\
    \ '}'), array('(', ')'), $bracket);\n    }, $brackets);\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to do it without using regular\
    \ expressions.\n<|/ c |>\n<| c |>\n: I added a function that doesn't use regular\
    \ expressions.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using regex:\n<code>",
  "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n</code>\n<|/ a tags=php,regex,string |>\n\
    <| c |>\nThis doesn't work if there are nested brackets inside brackets.\n<|/\
    \ c |>\n<| c |>\n: It works fine for me. Try it out here: http://ideone.com/YJj0U\n\
    <|/ c |>\n<| c |>\n: It also works fine for me. Try it out here: http://ideone.com/YJj0U\n\
    <|/ c |>\n<| c |>\n: It also works fine for me. Try it out here: http://ideone.com/YJj0U\n\
    <|/ c |>\n<| c |>\n: It also works fine for me. Try it out here: http://ideone.com/YJj0U\n\
    <|/ c |>\n<| a tags=php,regex,string |>\n<code>\n$str = '(()())';\n$str = preg_replace('/\\\
    ([^\\)]*\\)/', '', $str);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if there are nested brackets inside brackets.\n<|/ c |>\n<| c |>\n: It works\
    \ fine for me. Try it out here: http://ideone.com/YJj0U\n<|/ c |>\n<| c |>\n:\
    \ It also works fine for me. Try it out here: http://ideone.com/YJj0U\n<|/ c |>\n\
    <| c |>\n: It also works fine for me. Try it out here: http://ideone.com/YJj0U\n\
    <|/ c |>\n<| c |>\n: It also works fine for me. Try it out here: http://ideone.com/YJj0U\n\
    <|/ c |>\n<| a tags=php,regex,string |>\n<code>\n$str = '(()())';\n$str = preg_replace('/\\\
    ([^\\)]*\\)/', '', $str);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ if there are nested brackets inside brackets.\n<|/ c |>\n<| a tags=php,regex,string\
    \ |>\n<code>\n$str = '(()())';\n$str = preg_replace('/\\([^\\)]*\\)/', '', $str);\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return preg_match('/\\(([^()]*\\))/', $brackets);\n}\n\
    </code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks, this works great. Although\
    \ I did have to change it to `preg_match('/\\(([^()]*\\))/', $brackets);` because\
    \ `preg_replace` doesn't support `preg_match`\n<|/ c |>\n<| c |>\nAh, yeah, I\
    \ forgot about that. I'll update my answer.\n<|/ c |>\n<| a tags=php,regex |>\n\
    <code>\n<?php\n$string = \"(()())\";\n$pattern = '/\\(([^()]*\\))/';\npreg_match($pattern,\
    \ $string, $matches);\nprint_r($matches);", "    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_", "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return\
    \ $brackets === '()';\n}\n", "  $brackets = explode(\")\", $brackets);\n  foreach\
    \ ($brackets as $i => $b) {\n    if ($i > 0) {\n      if ($brackets[$i - 1] !=\
    \ $b) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", " \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"\
    (()())\")` returns `true` but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: I tested it and it works fine. Are you sure you copied the\
    \ code correctly? I tested it with `correct_bracketing(\"(()())\")` returning\
    \ `true` and `correct_bracketing(\")(()\")` returning `false`.\n<|/ c |>\n<| c\
    \ |>\n: I added a test case to my answer. Maybe you didn't copy the code correctly?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer. Maybe you didn't copy the\
    \ code correctly?\n<|/ c |>\n<| c |>\n: I added a test case to my answer. Maybe\
    \ you didn't copy the code correctly?\n<|/ c |>\n<| a dscore=2 |>\nThis should\
    \ work:\n<code>\n$brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n</code>\n\
    <|/ a tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n\
    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a |>\n<code>\n$brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    </code>\n<|/ a dscore=1 tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n$brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    </code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n$brackets =\
    \ preg_replace('/\\([^)]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);", "    $brackets = explode(\")\", $brackets);\n    foreach ($brackets\
    \ as $key => $value) {\n        if ($brackets[$key-1] != $value) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n", "    $brackets =\
    \ preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    return $brackets == '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\n\
    This doesn't seem to work. `correct_bracketing(\"(()())\")` returns true.\n<|/\
    \ c |>\n<| c |>\n: I tested it and it works fine. Are you sure you copied it correctly?\
    \ I tested it on PHP 5.3.10 and PHP 5.2.17. Both returned `true`.\n<|/ c |>\n\
    <| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17. Both returned `true`.\n<|/\
    \ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17. Both returned `true`.\n\
    <|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17. Both returned `true`.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\)/', '',\
    \ $brackets);\n$brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n$brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n$brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\nreturn $brackets == '()';", "    $brackets = preg_replace('/\\\
    (([^()]*+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]*+)\\\
    )/', '$1', $brackets);\n    return $brackets === '()';\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks, this works perfectly. I'm still a bit confused though.\
    \ Why does it work? What does it do?\n<|/ c |>\n<| c |>\nIt works by replacing\
    \ every `(` with a `[` then every `)` with a `]` then it checks to see if the\
    \ resulting string has only one `[` and `]`. If it does, then it returns true.\
    \ Otherwise, it returns false.\n<|/ c |>\n<| c |>\nAh I see. So it checks to see\
    \ if the brackets are balanced before it replaces them? I thought it replaced\
    \ them and then checked if the brackets are balanced afterwards. Thanks again!\n\
    <|/ c |>\n<| c |>\nYes, it replaces them first, then checks to see if the brackets\
    \ are balanced.\n<|/ c |>\n<| a tags=regex,php |>\n<code>\n<?php", "  $brackets\
    \ = preg_replace('/\\(([^)]+)\\)/', '\\\\1', $brackets);\n  return preg_match('/\\\
    (([^)]+)\\)/', $brackets) === 1;\n}\n", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = ", "  $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your code works\
    \ fine for brackets such as \"(()())\" but fails for \"(()())(()())\". Do you\
    \ know why?\n<|/ c |>\n<| c |>\nI tested it on \"(()())(()())\" and it returned\
    \ true.\n<|/ c |>\n<| c |>\nI tested it on \"(()())(()())\" and it returned true.\
    \ Do you know why?\n<|/ c |>\n<| c |>\nI tested it on \"(()())(()())\" and it\
    \ returned true. Do you know why?\n<|/ c |>\n<| c |>\nI tested it on \"(()())(()())\"\
    \ and it returned true. Do you know why?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    return $brackets === '()';\n}\n", "  $opening_brackets = array();\n\
    \  $closing_brackets = array();\n  $brackets_count = count($brackets);\n  for\
    \ ($i = 0; $i < $brackets_count; $i++) {\n    $opening_brackets[] = $brackets[$i];\n\
    \    if ($brackets[$i] === '(') {\n      $closing_brackets[] = ')';\n    }\n \
    \ }\n  return $brackets_count === count(array_unique($opening_brackets)) &&\n\
    \         $brackets_count === count(array_unique($closing_brackets));\n}\n", " \
    \   $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  $opening_brackets[$i] = $brackets[$i];\n        if ($brackets[$i] === \"(\"\
    ) {\n            $closing_brackets[$i] = \")\";\n        }\n    }\n    for ($i\
    \ = 0; $i < $brackets_count; $i++) {\n        if ($brackets[$i] === $closing_brackets[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer! I ended up using\
    \ your solution and it works great.\n<|/ c |>\n<| a tags=php,regex |>\nI ended\
    \ up using Jonathan's solution and it works great.\n<code>", "  $opening_brackets\
    \ = array();\n  $closing_brackets = array();\n  foreach ($brackets as $bracket)\
    \ {\n    if ($bracket == '(') {\n      $opening_brackets[] = $bracket;\n    }\
    \ else if ($bracket == ')') {\n      $closing_brackets[] = $bracket;\n    }\n\
    \  }\n  return count($opening_brackets) == count($closing_brackets);\n}\n", " \
    \ $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n", "    $brackets = preg_replace('/\\([^\\\
    )]*\\)/', '', $brackets);\n    return $brackets === '()' || $brackets === '[]';\n\
    }\n", "  $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n  return\
    \ $brackets === '()';\n}\n", "  $opening = strpos($brackets, \"(\");\n  $closing\
    \ = strpos($brackets, \")\");\n  return $opening !== false && $closing !== false\
    \ && $opening < $closing;\n}\n", "    $opening_brackets = array();\n    $closing_brackets\
    \ = array();\n    foreach ($brackets as $bracket) {\n        if ($bracket == \"\
    (\") {\n            $opening_brackets[] = $bracket;\n        } else if ($bracket\
    \ == \")\") {\n            $closing_brackets[] = $bracket;\n        }\n    }\n\
    \    return count($opening_brackets) == count($closing_brackets);\n}\n", "   \
    \ $brackets = explode(\"(\", $brackets);\n    $brackets = array_reverse($brackets);\n\
    \    $brackets = array_filter($brackets);\n    return count($brackets) == 0;\n\
    }\n", "  $opening = strpos($brackets, \"(\");\n  $closing = strpos($brackets,\
    \ \")\");\n  return $opening !== false && $closing !== false && $opening - $closing\
    \ === strlen($brackets) - 1;\n}\n", "  $brackets = explode(\")\", $brackets);\n\
    \  foreach ($brackets as $i => $bracket) {\n    if ($bracket == $brackets[$i -\
    \ 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_", "    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]+)\\)/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\\
    )/', '$1', $brackets);\n    $brackets = preg_replace('/\\(([^()]+)\\)/', '$1',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]+", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\", "  $opening_brackets\
    \ = preg_match_all('/\\(([^()]*+)\\)/', $brackets, $matches);\n  $closing_brackets\
    \ = preg_match_all('/\\)([^()]*+)/', $brackets, $matches);\n  return $opening_brackets\
    \ == $closing_brackets;\n}\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  return $brackets === '()' || $brackets === '[]';\n}\n", "   \
    \ $brackets = str_replace(array('(', ')'), '', $brackets);\n    $brackets = explode(')',\
    \ $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets = array_filter($brackets);\n\
    \    return count($brackets) == 0;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks\
    \ for your answer. Your code works perfectly for me. Thanks again.\n<|/ c |>\n\
    <| a tags=php,regex |>\n<code>", "  $brackets = explode(\")\", $brackets);\n \
    \ foreach ($brackets as $key => $value) {\n    if ($value != \"(\") {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    return $brackets === '()' || $brackets ===\
    \ '[]';\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"\
    (()())\")` returns `true` but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting it. I also tested\
    \ it on [rubular](http://rubular.com/r/8Kq0YZl8nj).\n<|/ c |>\n<| c |>\n: I added\
    \ a test case for that case.\n<|/ c |>\n<| c |>\n: I added a test case for that\
    \ case.\n<|/ c |>\n<| c |>\n: I added a test case for that case.\n<|/ c |>\n<|\
    \ a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\([^\\)]*\\)/', '',\
    \ $brackets);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for me.\
    \ `correct_bracketing(\"(()())\")` returns `true` but `correct_bracketing(\")(()\"\
    )` returns `false`.\n<|/ c |>\n<| c |>\n: I added a test case for that case.\n\
    <|/ c |>\n<| c |>\n: I added a test case for that case.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\"\
    )` returns `true` but `correct_bracketing(\")(()\")` returns `false`.\n<|/ c |>\n\
    <| a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\([^\\)]*\\)/', '',\
    \ $brackets);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n$brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\([^\\)]*\\)/', '',\
    \ $brackets);\n</code>\n<|/ a dscore=1 |>\n", "    $brackets = explode(\")\",\
    \ $brackets);\n    foreach ($brackets as $i => $bracket) {\n        if ($bracket\
    \ == $brackets[$i - 1]) {\n            unset($brackets[$i]);\n        }\n    }\n\
    \    return count($brackets) == 0;\n}\n", "  $brackets = preg_replace('/\\([^\\\
    )]*\\)/', '', $brackets);\n  return $brackets === '()' || $brackets === '[]';\n\
    }\n", "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return\
    \ $brackets === '()';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. I've tried your solution and it works fine. I've also added a more generic\
    \ solution that also works with nested brackets.\n<|/ c |>\n<| a dscore=1 |>\n\
    I wrote a recursive function that checks if a string is balanced or not.\n<code>",
  "    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)', '', $brackets);\n    $brackets = preg_replace('/\\", "  $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, however it fails\
    \ for `
  "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n", "  $brackets = explode(\",\", $brackets);\n  $brackets = array_map('trim',\
    \ $brackets);\n  $brackets = array_filter($brackets);\n  foreach ($brackets as\
    \ $b) {\n    if ($b !== \"\") {\n      if ($brackets[count($brackets) - 1] ===\
    \ $b) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n", " \
    \ $brackets = preg_replace('/\\(([^)]+)\\)/', '$1', $brackets);\n  return $brackets\
    \ === '()';\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    return $brackets === '()' || $brackets === '[]';\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,regex |>\nI believe this should work:\n\
    <code>\n$string = '(()())';\n$string = preg_replace('/\\(([^()]+)\\)/', '[$1]',\
    \ $string);\n$string = preg_replace('/\\[[^()]+\\]/', '[$1]', $string);\n$string\
    \ = preg_replace('/\\(([^()]+)\\)/', '[$1]', $string);\n$string = preg_replace('/\\\
    [[^()]+\\]/', '[$1]', $string);\necho $string;\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't work. Try it with `'(()())'`.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it with `'(()())'`.\n<|/ c |>\n<| c |>\n: It does work. Try it with\
    \ `'(()())'`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `'(()())'`.\n<|/\
    \ c |>\n<| c |>\n: It does work. Try it with `'(()())'`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$string = '(()())';\n$string = preg_replace('/\\(([^()]+)\\)/',\
    \ '[$1]', $string);\n$string = preg_replace('/\\[[^()]+\\]/', '[$1]', $string);\n\
    $string = preg_replace('/\\(([^()]+)\\)/', '[$1]', $string);\n$string = preg_replace('/\\\
    [[^()]+\\]/', '[$1]', $string);\necho $string;\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a dscore=1 |>\n<code>\n$string = '(()())';\n$string = preg_replace('/\\\
    (([^()]+)\\)/', '[$1]', $string);\n$string = preg_replace('/\\[[^()]+\\]/', '[$1]',\
    \ $string);\n$", "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()' || $brackets === '[]' || $brackets === '{}';\n}\n",
  "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]' || $brackets === '{}';\n}\n", "  $brackets =\
    \ preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n$string = '(()())';\n\
    $pattern = '/\\(|\\)/g';\n$replacement = '';\n$result = preg_replace($pattern,\
    \ $replacement, $string);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $string = '(()())';\n$pattern = '/\\(|\\)/g';\n$replacement = '';\n$result = preg_replace($pattern,\
    \ $replacement, $string);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = '(()())';\n$pattern = '/\\(|\\)/g';\n$replacement = '';\n\
    $result = preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,regex |>\n<code>\n<?php\n$string = '(()())';\n$pattern = '/\\\
    (|\\)/g';\n$replacement = '';\n$result = preg_replace($pattern, $replacement,\
    \ $string);\necho $result;", "    $brackets = explode(\",\", $brackets);\n   \
    \ $brackets = array_map(\"trim\", $brackets);\n    $brackets = array_map(\"strtolower\"\
    , $brackets);\n    $brackets = array_filter($brackets);\n    $brackets = array_unique($brackets);\n\
    \    $brackets = array_map(\"trim\", $brackets);\n    $brackets = array_map(\"\
    str_replace\", $brackets, array(\"(\", \")\"));\n    return count($brackets) ==\
    \ count(array_unique($brackets));\n}\n", "  $brackets = preg_replace('/\\(([^()]*+)\\\
    )/', '$1', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ `true` when it should be `false`\n<|/ c |>\n<| c |>\n: I tested it and it works\
    \ fine for me. Are you sure you copied it correctly?\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n<?php", "  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()' || $brackets === '[]';\n}\n", "    $brackets = explode(\"\
    )\", $brackets);\n    foreach ($brackets as $i => $bracket) {\n        if ($bracket\
    \ == $brackets[$i - 1]) {\n            unset($brackets[$i]);\n        }\n    }\n\
    \    return count($brackets) == 0;\n}\n", "    $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_", " \
    \ $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like this solution,\
    \ but I wonder if it will handle nested brackets correctly. For example, `correct_bracketing(\"\
    (()())\")` returns `true`, but `correct_bracketing(\"(()())(())\")` returns `false`.\
    \ Do you have a solution for that?\n<|/ c |>\n<| c |>\nI added a solution for\
    \ nested brackets.\n<|/ c |>\n<| a tags=php,regex |>\n<code>", "  $brackets =\
    \ explode(\",\", $brackets);\n  $brackets = array_map(\"trim\", $brackets);\n\
    \  foreach ($brackets as $b) {\n    if ($b === \"\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    $brackets = explode(\"(\", $brackets);\n\
    \    $brackets = array_reverse($brackets);\n    $brackets = array_merge($brackets,\
    \ array($brackets[0]));\n    $brackets = array_unique($brackets);\n    $brackets\
    \ = array_reverse($brackets);\n    return $brackets[0] === $brackets[1];\n}\n",
  "  $brackets = explode(\")\", $brackets);\n  foreach ($brackets as $i => $bracket)\
    \ {\n    if ($bracket == $brackets[$i - 1]) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "  $brackets = explode(\")\", $brackets);\n  foreach ($brackets\
    \ as $key => $value) {\n    if ($brackets[$key-1] != $value) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  foreach ($brackets as $bracket) {\n    if ($bracket == '(') {\n\
    \      $opening_brackets[] = $bracket;\n    } else if ($bracket == ')') {\n  \
    \    $closing_brackets[] = $bracket;\n    }\n  }\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n", "  $brackets = preg_replace('/\\(([^()]*?)\\\
    )/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\
    \\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n\
    \  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets\
    \ = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\\
    (([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\\
    )/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\
    \\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n\
    \  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets\
    \ = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\\
    (([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\\
    )/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\
    \\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n\
    \  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets\
    \ = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\\
    (([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\\
    )/', '\\\\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\
    \\1', $brackets);\n  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n\
    \  $brackets = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets\
    \ = preg_replace('/\\(([^()]*?)\\)/', '\\\\1', $brackets);\n  $brackets = preg_replace",
  "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n", "  $brackets = explode(\")\", $brackets);\n  foreach ($brackets\
    \ as $b) {\n    if ($brackets[$i] == $b) {\n      $brackets[$i] = \"\";\n    }\n\
    \  }\n  return implode(\")\", $brackets) == $brackets;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,regex |>\n<code>", "  $open_brackets = preg_match_all('/\\\
    (([^()]+)\\)/', $brackets, $matches);\n  $closed_brackets = preg_match_all('/\\\
    )([^()]+\\))/', $brackets, $matches);\n  return $open_brackets == $closed_brackets;\n\
    }", "  $brackets = explode(\"(\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($value) {\n    return $value !==\
    \ \"\";\n  });\n  return count($brackets) === 0;\n}\n", "    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\", "    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    return $brackets === '()'\
    \ || $brackets === '[]';\n}\n", "  $opening_brackets = array();\n  $closing_brackets\
    \ = array();\n  $brackets_count = count($brackets);\n  for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n    $opening_brackets[] = $brackets[$i];\n  }\n  for ($i = 0; $i <\
    \ $brackets_count; $i++) {\n    $closing_brackets[] = $brackets[$brackets_count\
    \ - $i - 1];\n  }\n  return $opening_brackets == $closing_brackets;\n}\n", " \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n", "    $brackets = preg_replace('/\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_", " \
    \   $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n",
  "    $brackets = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n\
    \    $brackets = explode(\"}\", $brackets);\n    $brackets = array_pop($brackets);\n\
    \    $brackets = array_pop($brackets);\n    $brackets = array_pop($brackets);\n\
    \    $brackets = array_pop($brackets);\n    return $brackets == \"{\";\n}\n",
  "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = ", "  $opening_brackets = preg_split('/[\\(\\)]/',\
    \ $brackets);\n  $closing_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $opening_brackets\
    \ = array_filter($opening_brackets);\n  $closing_brackets = array_filter($closing_brackets);\n\
    \  return count($opening_brackets) == count($closing_brackets);\n}\n", "    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    return $brackets == '()'\
    \ || $brackets == '[]' || $brackets == '{}';\n}\n", "    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    return $brackets === '()' || $brackets ===\
    \ '[]';\n}\n", "    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = ", "  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  return $brackets === '()';\n}\n", "  $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets === '()';\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks so much for this. I didn't know about preg_replace.\
    \ I'm going to try this out and see how it goes. Thanks again!\n<|/ c |>\n<| c\
    \ |>\nI added a test case to my answer, and tested it against your test cases.\
    \ I believe it works.\n<|/ c |>\n<| c |>\nThanks so much for this. I didn't know\
    \ about preg_replace. I'm going to try this out and see how it goes. Thanks again!\n\
    <|/ c |>\n<| c |>\nI added a test case to my answer, and tested it against your\
    \ test cases. I believe it works.\n<|/ c |>\n<| c |>\nThanks so much for this.\
    \ I didn't know about preg_replace. I'm going to try this out and see how it goes.\
    \ Thanks again!\n<|/ c |>\n<| a |>\n<code>\n<?php\n$string = \"(()())\";\n$string\
    \ = preg_replace('/\\([^()]*\\)/', '', $string);\necho $string;", "  $brackets\
    \ = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n  $brackets\
    \ = str_replace(array(\"{\", \"}\"), array(\"(\", \")\"), $brackets);\n  return\
    \ preg_match(\"/{$brackets}+/\", $brackets);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThis doesn't work if brackets are nested inside each other. For example,\
    \ `correct_bracketing(\"(()())\")` returns `true` instead of `false`.\n<|/ c |>\n\
    <| c |>\n: I added a function that should handle nested brackets.\n<|/ c |>\n\
    <| c |>\n: I added a function that should handle nested brackets.\n<|/ c |>\n\
    <| c |>\n: I added a function that should handle nested brackets.\n<|/ c |>\n\
    <| c |>\n: I added a function that should handle nested brackets.\n<|/ c |>\n\
    <| a tags=php,regex |>\n<code>\n<?php", "    $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\", "    $brackets = explode(\")\",\
    \ $brackets);\n    foreach ($brackets as $i => $bracket) {\n        if ($bracket\
    \ != $brackets[$i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    return $brackets\
    \ === '()';\n}\n", "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \  return $brackets === '()';\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `\"(()())\"`\n<|/ c |>\n<| c |>\n: It does work. Try it with\
    \ `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `\"(()())\"`.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it with `\"(()())\"`.\n<|/ c |>\n<| a tags=php,regex |>\n\
    <code>\n<?php\n$string = '(()())';\n$pattern = '/\\(([^()]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\n$matches = $matches[1];\n$matches = array_unique($matches);\n\
    $matches = array_filter($matches);\n$matches = array_map(function($v){\n    return\
    \ preg_replace('/\\(([^()]+)\\)/', '', $v);\n}, $matches);\n$matches = array_unique($matches);\n\
    $matches = array_filter($matches);\n$matches = array_map(function($v){\n    return\
    \ preg_replace('/\\(([^()]+)\\)/', '', $v);\n}, $matches);\n$matches = array_unique($matches);\n\
    $matches = array_filter($matches);\n$matches = array_map(function($v){\n    return\
    \ preg_replace('/\\(([^()]+)\\)/', '', $v);\n}, $matches);\n$matches = array_unique($matches);\n\
    $matches = array_filter($matches);\n$matches = array_map(function($v){\n    return\
    \ preg_replace('/\\(([^()]+)\\)/', '', $v);\n}, $matches);\n$matches = array_unique($matches);\n\
    $matches = array_filter($matches);\n$matches = array_map(function($v){\n    return\
    \ preg_replace('/\\(([^()]+)\\)/', '', $v);\n}, $matches);\n$matches = array_unique($matches);\n\
    $matches = array_filter($matches);\n$matches = array_map(function($v){\n    return\
    \ preg_replace('/\\(([^()]+)\\)/', '', $v);\n}, $matches);\n$matches = array_unique($matches);\n\
    $matches = array_filter($matches);\n", "    $brackets = explode(\")\", $brackets);\n\
    \    foreach ($brackets as $key => $value) {\n        if ($key > 0) {\n      \
    \      if ($brackets[$key - 1] != $value) {\n                return false;\n \
    \           }\n        }\n    }\n    return true;\n}\n", "    $opening_brackets\
    \ = array();\n    $closing_brackets = array();\n    $brackets_count = count($brackets);\n\
    \    for ($i = 0; $i < $brackets_count; $i++) {\n        $opening_brackets[] =\
    \ $brackets[$i];\n    }\n    $opening_brackets_count = count($opening_brackets);\n\
    \    for ($i = 0; $i < $opening_brackets_count; $i++) {\n        $closing_brackets[$i]\
    \ = $opening_brackets[$i];\n    }\n    $closing_brackets_count = count($closing_brackets);\n\
    \    for ($i = 0; $i < $closing_brackets_count; $i++) {\n        $closing_brackets[$i]\
    \ = $closing_brackets[$i].\")\";\n    }\n    $opening_brackets_count = count($opening_brackets);\n\
    \    for ($i = 0; $i < $opening_brackets_count; $i++) {\n        $closing_brackets[$i]\
    \ = $closing_brackets[$i].\"(\";\n    }\n    $closing_brackets_count = count($closing_brackets);\n\
    \    for ($i = 0; $i < $closing_brackets_count; $i++) {\n        if ($opening_brackets[$i]\
    \ != $closing_brackets[$i]) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\n", "  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \  return $brackets === '()' || $brackets === '[]';\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ `true` but `correct_bracketing(\")(()\")` returns `false`.\n<|/ c |>\n<| c |>\n\
    : I tested it on PHP 5.3.10 and PHP 5.3.8. Both returned `true`.\n<|/ c |>\n<|\
    \ c |>\n: I tested it on PHP 5.3.10 and PHP 5.3.8. Both returned `true`.\n<|/\
    \ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.3.8. Both returned `true`.\n\
    <|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.3.8. Both returned `true`.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>", "  $brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n  return $brackets === '()';\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't seem to work. `correct_bracketing(\"(()())\")` returns\
    \ `true` when it should be `false`.\n<|/ c |>\n<| c |>\n: I fixed the regex to\
    \ remove unnecessary brackets.\n<|/ c |>\n<| c |>\n: I added a test case to my\
    \ answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php", "  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return\
    \ $brackets === '()';\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,regex |>\n\
    I came up with a solution that uses preg_replace_callback to find all pairs of\
    \ matching brackets and then uses array_diff to find the ones that don't match.\
    \ \n<code>\n$brackets = preg_replace_callback('/\\(([^()]*\\))/', \n    function($matches)\
    \ {\n        $openingBrackets = $matches[1];\n        $closingBrackets = preg_replace('/\\\
    ([^()]*\\)/', '', $matches[0]);\n        return array_diff($openingBrackets, $closingBrackets);\n\
    \    }, $brackets);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,regex |>\nThis\
    \ regex will match all pairs of brackets regardless of nesting level:\n<code>\n\
    \\(([^()]*\\))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$brackets\
    \ = preg_replace('/\\(([^()]*\\))/', '', $brackets);\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a dscore=1 |>\n<code>\n$brackets = preg_replace('/\\(([^()]*\\))/', '',\
    \ $brackets);\n</code>\n<|/ a tags=php,regex |>\n<| a |>\n<code>\n$brackets =\
    \ preg_replace('/\\(([^()]*\\))/', '', $brackets);\n</code>\n<|/ a dscore=1 tags=php,regex\
    \ |>\n<| a dscore=1 |>\n<code>\n$brackets = preg_replace('/\\(([^()]*\\))/', '',\
    \ $brackets);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n\
    $brackets = preg_replace('/\\(([^()]*\\))/', '', $brackets);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$brackets = preg_replace('/\\(([^()]*\\))/', '',\
    \ $brackets);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex |>\n<code>\n\
    $brackets = preg_replace('/\\(([^()]*\\))/', '', $brackets);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$brackets = preg_", "    $opening_brackets = preg_split('/[\\\
    (\\)]/', $brackets);\n    $closing_brackets = preg_split('/[\\(\\)]/', $brackets);\n\
    \    $opening_brackets = array_reverse($opening_brackets);\n    $closing_brackets\
    \ = array_reverse($closing_brackets);\n    $opening_brackets = array_diff($opening_brackets,\
    \ $closing_brackets);\n    return count($opening_brackets) == 0;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
