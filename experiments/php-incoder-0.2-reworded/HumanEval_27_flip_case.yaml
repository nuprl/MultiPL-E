name: HumanEval_27_flip_case
language: php
prompt: "<?php\n// For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case($string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
  ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    return strtoupper(strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '$' => '\\\\$', '(' =>\
    \ '\\\\(', '*' => '\\\\*', ')' => '\\\\)', '+' => '\\\\+', ',' => '\\\\,', '-'\
    \ => '\\\\-', '.' => '\\\\.', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\\=',\
    \ '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\\
    ^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{", "    return strtoupper(preg_replace('/./u', '',\n      \
    \  str_replace('l','O',\n        str_replace('I','i',\n        str_replace('L','L',\n\
    \        str_replace('O','o',\n        str_replace('e','E',\n        str_replace('H','h',\n\
    \        str_replace('S','s',\n        str_replace('T','t',\n        str_replace('N','n',\n\
    \        str_replace('R','r',\n        str_replace('D','d',\n        str_replace('M','m',\n\
    \        str_replace('P','p',\n        str_replace('U','u',\n        str_replace('F','f',\n\
    \        str_replace('G','g',\n        str_replace('Y','y',\n        str_replace('X','x',\n\
    \        str_replace('Z','z',\n        str_replace('J','j',\n        str_replace('K','k',\n\
    \        str_replace('V','v',\n        str_replace('B','b',\n        str_replace('Z','z',\n\
    \        str_replace('X','x',\n        str_replace('Y','y',\n        str_replace('W','w',\n\
    \        str_replace('V','v',\n        str_replace('U','u',\n        str_replace('T','t',\n\
    \        str_replace('S','s',\n        str_replace('R','r',\n        str_replace('N','n',\n\
    \        str_replace('D','d',\n        str_replace('M','m',\n        str_replace('P','p',\n\
    \        str_replace('F','f',\n        str_replace('G','g',\n        str_replace('Y','y',\n\
    \        str_replace('X','x',\n        str_replace('Z','z',\n        str_replace('J','j',\n\
    \        str_replace('K','k',\n        str_replace('V','v',\n        str_replace('B','b',\n\
    \        str_replace('Z','z',\n        str_replace('X','x',\n        str_replace('Y','y',\n\
    \        str_replace('W','w',\n        str_replace('V','v',\n        str_replace('U','u',\n\
    \        str_replace('T','t',\n        str_replace('S','s',\n        str_replace('R','r',\n\
    \        str_replace('N','n',\n        str_replace('D','d',\n        str_replace('M','m',\n\
    \        str_replace('P','p',\n        str_replace('F','f',\n        str_replace('G','g',\n\
    \        str_replace('Y','y',\n        str_replace('X','x',\n        str_replace('Z','z',\n\
    \        str_replace('J','j',\n        str_replace('K','k',\n        str_replace('V','v',\n\
    \        str_replace('B','b',\n        str_replace('Z", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', '',\n  \
    \      strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'))\n    ));\n}", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\\(', '*' => '\\\\*', ')' => '\\\
    \\)', ';' => '\\\\;', ':' => '\\\\:', '=' => '\\\\=', '<' => '\\\\<', '>' => '\\\
    \\>', '|' => '\\\\|', '\\\\' => '\\\\\\\\')));\n}", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}", "    return strtr($string, array('!' => '!!', '?' => '??',\
    \ '\"' => '???', '\\'' => '????', '(' => '????(', ')' => '????)', ',' => '????,',\
    \ ';' => '????;', ':' => '????:', '=' => '????=', '&' => '????&', '=' => '????=',\
    \ '?' => '?????', '!' => '????!', ':' => '????:', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '$' => '\\\\$', '(' => '\\\\\
    (', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\
    \\-', '.' => '\\\\.', '/' => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\
    \\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{", "    return preg_replace('/./u', 'u', $string);\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        ['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        $string)));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis\
    \ doesn't work for all cases. For example, `flip_case(\"Hello\")` returns `hELLO`,\
    \ but `flip_case(\"HelloWorld\")` returns `HellOWorld`.\n<|/ c |>\n<| c |>\nI\
    \ added a second example to my answer to show how it handles multiple cases. I\
    \ hope it helps.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = \"Hello\"\
    ;\n$string = preg_replace('/([a-z])/i', '$1', $string);\necho $string;", "   \
    \ return preg_replace('/./u', 'u', strtoupper($string));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        $string\n    )\n    )\n);", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\
    \\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\\
    '' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(', ')'\
    \ => ')', '*' => '*', ',' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')", "    return preg_replace('/([a-z])/i', '\\U$1\\E', $string);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't\
    \ specify that I was looking for a PHP solution. I've added that to the question.\n\
    <|/ c |>\n<| c |>\nI added a PHP solution to my answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ '\\U$1\\E', $string);\necho $string;", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}", "    return strtoupper(preg_replace('/./u', '',\n  \
    \      strtr($string, array('a'=>'A','b'=>'B','c'=>'C','d'=>'D','e'=>'E','f'=>'F','g'=>'G','h'=>'H','i'=>'I','j'=>'J','k'=>'K','l'=>'L','m'=>'M','n'=>'N','o'=>'O','p'=>'P','q'=>'Q','r'=>'R','s'=>'S','t'=>'T','u'=>'U','v'=>'V','w'=>'W','x'=>'X','y'=>'Y','z'=>'Z'))\n\
    \    ));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\
    \\'', '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\\(', ')' => '\\\\)', '*' =>\
    \ '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\\-', '.' => '\\\\.', '/'\
    \ => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\\=', '<' => '\\\\<',\
    \ '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~'));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}",
  "    return strtoupper(preg_replace('/([a-z])/', '$1', $string));\n}", "    return\
    \ strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\\
    '\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '=' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '??", "    return strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\')));\n}", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", "    return\
    \ strtoupper(mb_convert_case($string, MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n\
    <|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't seem to work. `mb_convert_case`\
    \ doesn't seem to support UTF-8 strings. I get the following error: `Warning:\
    \ mb_convert_case() expects parameter 1 to be string, object given`\n<|/ c |>\n\
    <| c |>\nI added a fix for UTF-8 support\n<|/ c |>\n<| c |>\nI added a fix for\
    \ UTF-8 support\n<|/ c |>\n<| c |>\nI added a fix for UTF-8 support\n<|/ c |>\n\
    <| c |>\nI added a fix for UTF-8 support\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello World!\";\n$string = preg_replace('/\\p{L}/u',\
    \ '', $string);\necho $string;\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello World!\";\n$string = pre", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '\\\\' => '\\\\\\\\', \"\
    '\" => '\\\\\\'', '(' => '\\\\(', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\\
    +', ',' => '\\\\,', '-' => '\\\\-', '.' => '\\\\.', ':' => '\\\\:', ';' => '\\\
    \\;', '<' => '\\\\<', '=' => '\\\\=', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '",
  "    return strtoupper(preg_replace('/./u', '',\n        strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\n            'f'=>'F', 'g'=>'G', 'h'=>'H',\
    \ 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\n            'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\n            't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z',\n            'A'=>'a', 'B'=>'b', 'C'=>'c',\
    \ 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g',\n            'H'=>'h', 'I'=>'i', 'J'=>'j',\
    \ 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n',\n            'O'=>'o', 'P'=>'p', 'Q'=>'q',\
    \ 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u',\n            'V'=>'v', 'W'=>'w', 'X'=>'x',\
    \ 'Y'=>'y', 'Z'=>'z')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/',\
    \ '$1', $string));\n}\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n",
  "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ `Fatal error: Call to undefined function preg_replace()`\n<|/ c |>\n<| c |>\n\
    Sorry, I forgot to include `preg_replace()`. I updated my answer.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I tried your code, but I got this error `Fatal\
    \ error: Call to undefined function preg_replace()`\n<|/ c |>\n<| c |>\nSorry,\
    \ I forgot to include `preg_replace()`. I updated my answer.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I tried your code, but I got this error `Fatal error:\
    \ Call to undefined function preg_replace()`\n<|/ c |>\n<| a tags=php,preg-replace,string,regex\
    \ |>\n<code>\n<?php\n$string = \"Hello\";\n$pattern = '/./u';\n$replacement =\
    \ 'u';\necho preg_replace($pattern, $replacement, $string);", "    return strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'')));\n}", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\"' => '\"\"', \"'\" => '''')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\"' => '\"\"', \"'\" => '''')));\n}\n", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '\\'')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for all cases. For example, `flip_case(\"\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9", "    return\
    \ strtoupper(strtr($string, array('!' => '!', '?' => '?', '$' => '$', '&' => '&',\
    \ '\\'' => '\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '<', ')' => '(',\
    \ '>' => '<', ':' => '=', ';' => '<', '=' => '=', '@' => '@', '[' => '[', ']'\
    \ => '[', '{' => '[', '}' => '[', '\\\\' => '\\\\', '^' => '^', '~' => '~', '*'\
    \ => '*', ',' => '<', ')' => '(', '>' => '<', ':' => '=', ';' => '<', '=' => '=',\
    \ '@' => '@', '[' => '[', ']' => '[', '{' => '[', '}' => '[', '\\\\' => '\\\\\
    ', '^' => '^', '~' => '~', '*' => '*', ',' => '<', ')' => '(', '>' => '<', ':'\
    \ => '=', ';' => '<', '=' => '=', '@' => '@', '[' => '[', ']' => '[', '{' => '[',\
    \ '}' => '[', '\\\\' => '\\\\', '^' => '^', '~' => '~', '*' => '*', ',' => '<',\
    \ ')' => '(', '>' => '<', ':' => '=', ';' => '<', '=' => '=', '@' => '@', '['\
    \ => '[', ']' => '[', '{' => '[', '}' => '[', '\\\\' => '\\\\', '^' => '^', '~'\
    \ => '~', '*' => '*', ',' => '<', ')' => '(', '>' => '<', ':' => '=', ';' => '<',\
    \ '=' => '=', '@' => '@', '[' => '[', ']' => '[', '{' => '[', '}' => '[', '\\\\\
    ' => '\\\\', '^' => '^', '~' => '~', '*' => '*', ',' => '<', ')' => '(', '>' =>\
    \ '<', ':' => '=', ';' => '<', '=' => '=', '@' => '@', '[' => '[', ']' => '[',\
    \ '{' => '[', '}' => '[', '\\\\' => '\\\\', '^' => '^', '~' => '~', '*' => '*',\
    \ ',' => '<', ')' => '(', '>' => '<', ':' => '=', ';' => '<', '=' => '=', '@'\
    \ => '@', '[' => '[', ']' => '[', '{' => '[', '}' => '[', '\\\\' => '\\\\', '^'\
    \ => '^', '~' => '~', '*' => '*', ',' => '<', ')' => '(', '>' => '<', ':' => '=',\
    \ ';' => '<', '=' => '=', '@' => '@', '[' => '[', ']' => '[', '{' => '[', '}'\
    \ => '[", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "   \
    \ return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '')));\n}", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a',\
    \ 'A', 'I', 'O', 'U'], ['a','A','I','O','U'], $string)));\n}\n", "    return preg_replace('/./u',\
    \ 'u', $string);\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' =>\
    \ '\\\\&', '(' => '\\\\(', '*' => '\\\\*', ')' => '\\\\)', ';' => '\\\\;', ':'\
    \ => '\\\\:', '=' => '\\\\=', '@' => '\\\\@', '[' => '\\\\[', ']' => '\\\\]',\
    \ '^' => '\\\\^', '\\\\' => '\\\\\\\\'));\n}", "    return strtoupper(strtr($string,\
    \ 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', '',\n        str_replace(['a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!', '?'\
    \ => '??', '\\'' => '\\'')));\n}\n", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return preg_replace('/./u', 'u', $string);\n}\n",
  "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", " \
    \   return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n",
  "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}\n", "    return strtoupper(strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\'')));\n}", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        $string)));\n\
    }", "    return preg_replace('/([a-z])/', '$U$1$1', $string);\n}", "    return\
    \ strtr($string, array_flip(array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z')));\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more elegant and readable than the other answers.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, this is much more elegant and readable than the other\
    \ answers.\n<|/ c |>\n<| c |>\nI agree with you, this is much more elegant and\
    \ readable than the other answers.\n<|/ c |>\n<| c |>\nI agree with you, this\
    \ is much more elegant and readable than the other answers.\n<|/ c |>\n<| c |>\n\
    I agree with you, this is much more elegant and readable than the other answers.\n\
    <|/ c |>\n<| a |>\n<code>\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")',\
    \ $string);\n</code>\n<|/ a tags=php,string,replace dscore=5 |>\n<| c |>\nThis\
    \ doesn't work for non-ASCII characters. I suggest using [this answer](https://stackoverflow.com/a/4709441/632951)\
    \ instead.\n<|/ c |>\n<| c |>\nThis doesn't work for non-ASCII characters. I suggest\
    \ using [this answer](https://stackoverflow.com/a/4709441/632951) instead.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for non-ASCII characters. I suggest using [this\
    \ answer](https://stackoverflow.com/a/4709441/632951) instead.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for non-ASCII characters. I suggest using [this answer](https://stackoverflow.com/a/4709441/632951)\
    \ instead.\n<|/ c |>\n<| c |>\nThis doesn't work for non-ASCII characters. I suggest\
    \ using [this answer](https://stackoverflow.com/a/4709441/632951) instead.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")',\
    \ $string);\n</code>\n<|/ a tags=php,string,replace |>", "    return strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' =>\
    \ '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&'));\n}\n", "  \
    \  return strtoupper(preg_replace('/./u', 'u', $string));\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this solution, however it fails on \"\xDF\" which should\
    \ be \"SS\"\n<|/ c |>\n<| c |>\n: Yes, it fails on \"\xDF\" which should be \"\
    SS\".  I added a solution that handles this.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that handles this.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}", "    return strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '(' => '\\\\(', ')' => '\\\
    \\)', '*' => '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\\-', '.' => '\\\
    \\.', '/' => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\\=', '<' => '\\\
    \\<', '>' => '\\\\>', '&' => '\\\\&', '|' => '\\\\|', '~' => '\\\\~'));\n}\n",
  "    return strtoupper(preg_replace('/./u', '',\n        strtr($string, array('a'=>'A','b'=>'B','c'=>'C','d'=>'D','e'=>'E','f'=>'F','g'=>'G','h'=>'H','i'=>'I','j'=>'J','k'=>'K','l'=>'L','m'=>'M','n'=>'N','o'=>'O','p'=>'P','q'=>'Q','r'=>'R','s'=>'S','t'=>'T','u'=>'U','v'=>'V','w'=>'W','x'=>'X','y'=>'Y','z'=>'Z'))\n\
    \    ));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' =>\
    \ '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so\
    \ much! I used this and added a little bit of code to make it case insensitive.\
    \ Thanks again!\n<|/ c |>\n<| a dscore=2 |>\nI used the answer from and added\
    \ a little bit of code to make it case insensitive.\n<code>", "    return strtr($string,\
    \ array_flip(array('!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '+',\
    \ '=', '{', '}', '[', ']', '|', '\\\\', ':', ';', '<', '>', '?', ':', '\"', \"\
    '\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtr($string, array_flip(str_split($string)));\n\
    }\n</code>\n<|/ a tags=php,string,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $string = \"Hello World\";\n$string = strtolower($string);\n$string = ucfirst($string);\n\
    echo $string;", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C',\
    \ 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K',\
    \ 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\
    \ 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}",
  "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}\n", "    return strtoupper(strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\\
    ' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')', '*' => '*', ','\
    \ => '', ')' => '', '(' => '', '[' => '[', ']' => ']', '{' => '{', '}' => '',\
    \ '=' => '', ':' => '', ';' => '', '!' => '', '?' => '', '\\'' => '\\'', '\"'\
    \ => '\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')',\
    \ '*' => '*', ',' => '', ')' => '', '(' => '', '[' => '[', ']' => ']', '{' =>\
    \ '{', '}' => '', '=' => '', ':' => '', ';' => '', '!' => '', '?' => '', '\\''\
    \ => '\\'', '\"' => '\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' =>\
    \ '(', ')' => ')', '*' => '*', ',' => '', ')' => '', '(' => '', '[' => '[', ']'\
    \ => ']', '{' => '{', '}' => '', '=' => '', ':' => '', ';' => '', '!' => '', '?'\
    \ => '', '\\'' => '\\'', '\"' => '\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\'\\\
    '\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', ')' => '', '(' => '', '['\
    \ => '[', ']' => ']', '{' => '{', '}' => '', '=' => '', ':' => '', ';' => '',\
    \ '!' => '', '?' => '', '\\'' => '\\'', '\"' => '\\\"', '\\\\' => '\\\\\\\\',\
    \ \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', ')' =>\
    \ '', '(' => '', '[' => '[', ']' => ']', '{' => '{', '}' => '', '=' => '', ':'\
    \ => '', ';' => '', '!' => '', '?' => '', '\\'' => '\\'', '\"' => '\\\"', '\\\\\
    ' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')', '*' => '*', ','\
    \ => '', ')' => '', '('));\n}", "    return strtoupper(preg_replace('/./u', 'u',\
    \ $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "   \
    \ return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\"' => '???',\
    \ '\\'' => '????', '(' => '????', '[' => '????', '{' => '????')));\n}\n", "  \
    \  return preg_replace('/./u', 'u', $string);\n}\n", "    return strtoupper(preg_replace('/([a-z])/',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}\n", "    return strtoupper(strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\\
    ')));\n}", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return\
    \ strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return preg_replace('/([a-z])/', '$U$1$1', $string);\n}", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(mb_convert_case($string, MB_CASE_TITLE,\
    \ \"UTF-8\"));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello\";\n$string = preg_replace('/([a-z])/', '$1',\
    \ $string);\n$string = preg_replace('/([A-Z])/', '$1', $string);\necho $string;\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,string,regex |>\n<code>\n$string = \"\
    Hello\";\n$string = preg_replace('/([a-z])/', '$1', $string);\n$string = preg_replace('/([A-Z])/',\
    \ '$1', $string);\necho $string;\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello\";\n$string = preg_replace('/([a-z])/', '$1',\
    \ $string);\n$string = preg_replace('/([A-Z])/', '$1', $string);\necho $string;\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$string = \"Hello\";\n$string\
    \ = preg_replace('/([a-z])/', '$1', $string);\n$string = preg_replace('/([A-Z])/',\
    \ '$1', $string);\necho $string;\n</code>\n<|/ a tags=php,string,regex |>\n<|\
    \ a tags=php,string,regex |>\n<code>\n$string = \"Hello\";\n$string = preg_replace('/([a-z])/',\
    \ '$1', $string);\n$string = preg_replace('/([A-Z])/', '$1', $string);\necho $string;\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,string,regex |>\n<code>\n$string = \"\
    Hello\";\n$string = preg_replace('/([a-z])/', '$1', $string);\n$string = preg_replace('/([A-Z])/',\
    \ '$1', $string);\necho $string;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$string = \"Hello\";\n$string = preg_replace('/([a-z])/', '$1', $string);\n\
    $string = preg_replace('/([A-Z])/', '$1', $string);\necho $string;\n</code>\n\
    <|/ a tags=php,string,regex |>\n<| a dscore=1 |>\n<code>\n$string = \"Hello\"\
    ;\n$string = preg_replace('/([a-z])/', '$1', $string);\n$string = preg_replace('/([A-Z",
  "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for all languages. For example, it doesn't\
    \ work for Chinese.\n<|/ c |>\n<| c |>\nI believe that this is because Chinese\
    \ has different capitalization rules. For example, `\xDF` should be `SS` in Chinese,\
    \ but `\xDF` should be `SS` in English.\n<|/ c |>\n<| c |>\nYes, that's exactly\
    \ what I was thinking. Thanks for clarifying.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/./u', 'u',\
    \ strtolower($string));\necho $string;\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    This doesn't work for all languages. For example, it doesn't work for Chinese.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for all languages. For example, it doesn't\
    \ work for Chinese.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n$string = \"Hello World\"\
    ;\n$string = preg_replace('/./u', 'u', strtolower($string));\necho $string;\n\
    </code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't work for all languages.\
    \ For example, it doesn't work for Chinese.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/./u', 'u',\
    \ strtolower($string));\necho $string;\n</code>\n<|/ a dscore=3 |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/./u', 'u',\
    \ strtolower($string));\necho $string;\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/./u', 'u',\
    \ strtolower($string));\necho $string;\n</code>\n<|/ a tags=php,string,regex |>\n\
    <| a tags=php,string,regex |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/./u',\
    \ 'u', strtolower($string));\necho $string;\n</code>\n<|/ a dscore=3 |>\n<| a\
    \ tags=php,string,regex |>\n<code>\n$string = \"Hello World\";\n$string = pre",
  "    return preg_replace('/./u', 'u', strtoupper($string));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the string contains\
    \ any non-ASCII characters.\n<|/ c |>\n<| c |>\n: It does work, if you read the\
    \ comments below the code snippet.\n<|/ c |>\n<| c |>\n: It doesn't work if you\
    \ read the comments below the code snippet.\n<|/ c |>\n<| c |>\n: It doesn't work\
    \ if you read the comments below the code snippet.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work if you read the comments below the code snippet.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the string contains\
    \ any non-ASCII characters.\n<|/ c |>\n<| c |>\n: It does work, if you read the\
    \ comments below the code snippet.\n<|/ c |>\n<| c |>\n: It doesn't work if you\
    \ read the comments below the code snippet.\n<|/ c |>\n<| c |>\n: It doesn't work\
    \ if you read the comments below the code snippet.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = 'Hello World';\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if the string contains\
    \ any non-ASCII characters.\n<|/ c |>\n<| c |>\n: It does work, if you read the\
    \ comments below the code snippet.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = 'Hello World';\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a tags=php,string |>\n<| c |>\nThis doesn't work if the string contains\
    \ any non-ASCII characters.\n<|/ c |>\n<| c |>\n: It does work, if you read the\
    \ comments below the code snippet.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    $string = 'Hello World';\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',\
    \ 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',\
    \ 'X', 'Y', 'Z'],\n        ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \        $string)));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nI like\
    \ your solution, however it fails for strings like \"aBcDeFgHijkLmNoPqRsTuVwXyZ\"\
    \n<|/ c |>\n<| c |>\nYes, I agree. My solution only works for the example given\
    \ in the question. I'll update my answer to include a more general solution.\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a more general solution that\
    \ will work for any string.\n<|/ c |>\n<| a tags=php,string,regex |>\n<code>\n\
    $string = \"aBcDeFgHijkLmNoPqRsTuVwXyZ\";\n$string = preg_replace('/./u', '',\n\
    \    str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n    ['A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z'],\n    $string));\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I like your solution, however it fails for strings like \"aBcDeFgHijkLmNoPqRsTuVwXyZ\"\
    \n<|/ c |>\n<| c |>\nI updated my answer to include a more general solution that\
    \ will ", "    return strtoupper(preg_replace('/./u', '',\n        str_replace('\
    \ ', '', ucwords(strtolower($string)))));\n}", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '\\\\\
    ' => '\\\\\\\\', \"'\" => '\\\\\\'', \"\\n\" => '\\\\n', '\\r' => '\\\\r', \"\\\
    t\" => '\\\\t', \"\\0\" => '\\\\0', '\\00' => '\\\\00', \"\\x0B\" => '\\\\x0B',\
    \ \"\\x0C\" => '\\\\x0C', \"\\x0D\" => '\\\\x0D', \"\\x0E\" => '\\\\x0E', \"\\\
    x0F\" => '\\\\x0F', \"\\x10\" => '\\\\x10', \"\\x11\" => '\\\\x11', \"\\x12\"\
    \ => '\\\\x12', \"\\x13\" => '\\\\x13', \"\\x14\" => '\\\\x14', \"\\x15\" => '\\\
    \\x15', \"\\x16\" => '\\\\x16', \"\\x17\" => '\\\\x17', \"\\x18\" => '\\\\x18',\
    \ \"\\x19\" => '\\\\x19', \"\\x1a\" => '\\\\x1a', \"\\x1b\" => '\\\\x1b', \"\\\
    x1c\" => '\\\\x1c', \"\\x1d\" => '\\\\x1d', \"\\x1e\" => '\\\\x1e', \"\\x1f\"\
    \ => '\\\\x1f', \"\\x20\" => '\\\\x20', \"\\x21\" => '\\\\x21', \"\\x22\" => '\\\
    \\x22', \"\\x23\" => '\\\\x23', \"\\x24\" => '\\\\x24', \"\\x25\" => '\\\\x25',\
    \ \"\\x26\" => '\\\\x26', \"\\x27\" => '\\\\x27', \"\\x28\" => '\\\\x28', \"\\\
    x29\" => '\\\\x29', \"\\x2a\" => '\\\\x2a', \"\\x2b\" => '\\\\x2b', \"\\x2c\"\
    \ => '\\\\x2c', \"\\x2d\" => '\\\\x2d', \"\\x2e\" => '\\\\x2e', \"\\x2f\" => '\\\
    \\x2f', \"\\x30\" => '\\\\x30', \"\\x31\" => '\\\\x31', \"\\x32\" => '\\\\x32',\
    \ \"\\x33\" => '\\\\x33', \"\\x34\" => '\\\\x34', \"\\x35\" => '\\\\x35', \"\\\
    x36\" => '\\\\x36', \"\\x37\" => '\\\\x37', \"\\x38\" => '\\\\x38', \"\\x39\"\
    \ => '\\\\x39', \"\\x3a\" => '\\\\x3a', \"\\x3b\" => '\\\\x3b', \"\\x3c\" => '\\\
    \\x3c', \"\\x3d\" => '\\\\x3d', \"\\x3e\" => '\\\\x3e', \"\\x3f\" => '\\\\x3f',\
    \ \"\\x40\" => '\\\\x40', \"\\x41\" => '\\\\x41', \"\\x42\" => '\\\\x42', \"\\\
    x43\" => '\\\\x43', \"\\x44\" => '\\\\x44', \"\\x45\" => '\\\\x45', \"\\x46\"\
    \ => '\\\\x46', \"\\x47\" => '\\\\x47', \"\\x48\" => '\\\\x48', \"\\x49\" => '\\\
    \\x49', \"\\x4a\" => '\\\\x4a', \"\\x4b\" => '\\\\x4b', \"\\x4c\" => '\\\\x4c',\
    \ \"\\x4d\" => '\\\\x4d', \"\\x4e\" => '\\\\x4e', \"\\x4f\" => '\\\\x4f', \"\\\
    x50\" => '\\\\x50', \"\\x51\" => '\\\\x51', \"\\x52\" => '\\\\x52', \"\\x53\"\
    \ => '\\\\x53', \"", "    return strtoupper(mb_convert_case($string, MB_CASE_TITLE,\
    \ 'UTF-8'));\n}\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C',\
    \ 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K',\
    \ 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\
    \ 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '')));\n}", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n",
  "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n", "    return\
    \ strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}", "    return strtoupper(preg_replace('/([a-z])/',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a',\
    \ 'A', 'I', 'O', 'U'], ['a','A','I','O','U'], $string)));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtr($string, array('a'=>'A', 'b'=>'B',\
    \ 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J',\
    \ 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R',\
    \ 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}",
  "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\
    \ 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\
    \ 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return\
    \ strtoupper(strtr($string, array('!' => '!', '?' => '?', '$' => '$', '&' => '&',\
    \ '\\'' => '\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', \"'\" => \"'\"\
    , '<' => '<', '>' => '>', '{' => '{', '}' => '}')));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n",
  "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' =>\
    \ '&&', '\\'' => '\\'\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', ')'\
    \ => '', ';' => '', ':' => '', '=' => '', '+' => '++', '=' => '', '>' => '', '='\
    \ => '', '<' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '", "    return\
    \ strtoupper(mb_convert_case($string, MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI used the answer from and added some improvements\
    \ to it.\n<code>", "    return strtoupper(preg_replace('/./u', '',\n        strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'))\n    ));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\"' => '\"\"', '\\'' => '\\'\\'', '(' => '(', ')' =>\
    \ ')', ';' => '', ':' => '', '=' => '=', '&' => '&', '=' => '=', '=' => '=', '='\
    \ => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=',\
    \ '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '='\
    \ => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=',\
    \ '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '='\
    \ => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=',\
    \ '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '='\
    \ => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=',\
    \ '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '='\
    \ => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=',\
    \ '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '='\
    \ => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=',\
    \ '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '='\
    \ => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=',\
    \ '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '='\
    \ => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=',\
    \ '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '='\
    \ => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=', '=' => '=',\
    \ '=' => '=', '=' => '=', '=' => '=", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', '',\n  \
    \      str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\
    \ 'V', 'W', 'X', 'Y', 'Z'],\n        $string)));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ '$1', $string);\necho $string;\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i', '$1',\
    \ $string);\necho $string;\n</code>\n<|/ a tags=php,string |>\n<| a |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/([a-z])/i', '$1', $string);\n\
    echo $string;\n</code>\n<|/ a tags=php,string dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i', '$1',\
    \ $string);\necho $string;\n</code>\n<|/ a tags=php,string |>\n<| a dscore=2 |>\n\
    <code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i', '$1',\
    \ $string);\necho $string;\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ '$1', $string);\necho $string;\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ '$1', $string);\necho $string;\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i', '$1',\
    \ $string);\necho $string;\n</code>\n<|/ a tags=php,string |>\n<| a |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/([a-z])/i', '$1', $string);\n\
    echo $string;\n</code>\n<|/ a dscore=1 tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ '$1', $string);\necho $string;\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\\(', ')' => '\\\\)', '*'\
    \ => '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\\-', '.' => '\\\\.',\
    \ '/' => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\\=', '<' => '\\\\\
    <', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '[' => '\\\\[', ']' => '\\\\]', '{' => '\\\\{', '}' => '\\\\}', '~' => '~'));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'')));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\', \"\
    '\" => '\\'\\'\\'', '(' => '(', ')' => ')', '{' => '{', '}' => '}')));\n}", " \
    \   return strtoupper(preg_replace('/./u', '',\n        strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'))\n    ));\n}\n", "    return strtoupper(preg_replace('/./u', 'u',\
    \ strtolower($string)));\n}\n", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\\'' => '\\'')));\n}\n</code>\n<|/ a tags=php,string,regex\
    \ |>\n<| c |>\nThanks for your answer. Your solution is very good but i want to\
    \ know that how can i use preg_replace to replace all special characters with\
    \ their ascii code like \"!\" with its ascii code \"33\" like that. Can you please\
    \ help me with that?\n<|/ c |>\n<| c |>\nI added a solution for you. Let me know\
    \ if it works for you.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution\
    \ is very good but i want to know that how can i use preg_replace to replace all\
    \ special characters with their ascii code like \"!\" with its ascii code \"33\"\
    \ like that. Can you please help me with that?\n<|/ c |>\n<| c |>\nI added a solution\
    \ for you. Let me know if it works for you.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your solution is very good but i want to know that how can i use preg_replace\
    \ to replace all special characters with their ascii code like \"!\" with its\
    \ ascii code \"33\" like that. Can you please help me with that?\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\n<?php\n$string = \"Hello\";\n$string = preg_replace(\"\
    /[^a-zA-Z0-9]/\", \"\", $string);\necho $string;", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' =>\
    \ '\\\\&', '(' => '\\\\(', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\+', ','\
    \ => '\\\\,', '-' => '\\\\-', '.' => '\\\\.', '/' => '\\\\/', ':' => '\\\\:',\
    \ ';' => '\\\\;', '<' => '\\\\<', '=' => '\\\\=', '>' => '\\\\>', '|' => '\\\\\
    |', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '=' => '\\\\=', '|' => '\\\
    \\|', '~' => '\\\\~', '", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return preg_replace('/./u', 'u', strtolower($string));\n}\n", "   \
    \ return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(', ')' =>\
    \ ')', '*' => '*', ',' => '', ')' => '', ';' => '', ':' => '', '=' => '', '+'\
    \ => '++', '=' => '', '>' => '', '<' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '=' => '', '='\
    \ => '', '=' => '', '", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C',\
    \ 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K',\
    \ 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\
    \ 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(', ')' =>\
    \ ')', '*' => '***', '+' => '++', ',' => '===', '=' => '==', ';' => ';;', '<'\
    \ => '<<', '>' => '>>', '|' => '||', '~' => '~', '^' => '^~', '?' => '??', '!'\
    \ => '!!')));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '\\U$1',\
    \ $string));\n}\n</code>\n<|/ a tags=php,string |>\n<| c |>\nI like this solution.\
    \ Although it does require a regex to do the conversion. I'm sure it could be\
    \ done with string functions as well.\n<|/ c |>\n<| c |>\nI agree, this is probably\
    \ the best solution. Although I did a quick test and found that `strtoupper` does\
    \ not work correctly with accented characters. `strtoupper(\"\xC9\")` returns\
    \ `\xC9` instead of `\xC9\xC9`. So I guess this solution only works correctly\
    \ with ASCII characters. I did a quick test with accented characters and it worked\
    \ fine.\n<|/ c |>\n<| c |>\nYes, I tested with accented characters and it worked\
    \ fine. I'm glad you found a solution that works for you.\n<|/ c |>\n<| c |>\n\
    I did a quick test with accented characters and it worked fine. I'm glad you found\
    \ a solution that works for you.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    $string = \"Hello\";\n$string = str_replace(\"l\", \"L\", $string);\n$string =\
    \ str_replace(\"o\", \"O\", $string);\necho $string;\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis solution doesn't work for me. `str_replace` doesn't replace\
    \ all occurrences.\n<|/ c |>\n<| c |>\nThis solution doesn't work for me. `str_replace`\
    \ doesn't replace all occurrences.\n<|/ c |>\n<| c |>\nThis solution doesn't work\
    \ for me. `str_replace` doesn't replace all occurrences.\n<|/ c |>\n<| c |>\n\
    This solution doesn't work for me. `str_replace` doesn't replace all occurrences.\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work for me. `str_replace` doesn't replace\
    \ all occurrences.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n$string = \"Hello\"\
    ;\n$string = str_replace(\"l\", \"L\", $string);\n$string = str_replace(\"o\"\
    , \"O\", $string);\necho $string;\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis solution\
    \ doesn't work for me. `str_replace` doesn't replace all occurrences.\n<|/ c |>\n\
    <| c |>\nThis solution doesn't work for me. ", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'))\n    ));\n}\n", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(strtr($string,\
    \ 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '=' => '???', '-'\
    \ => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '??", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$string = 'Hello World';\n\
    $string = preg_replace('/([a-z])/i', 'strtoupper(\"$1\")', $string);\necho $string;",
  "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\"' => '???',\
    \ '\\'' => '????', '(' => '????(', ')' => '????))'));\n}\n", "    return preg_replace('/([a-z])/',\
    \ '$U$1$1', $string);\n}\n", "    return strtoupper(strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '\\\\' => '\\\\\\\\\
    ', \"'\" => '\\\\\\'', \"\\r\" => '\\\\r', \"\\n\" => '\\\\n', \"\\t\" => '\\\\\
    t', \"\\0\" => '\\\\0', \"\\x0B\" => '\\\\x0B', \"\\x0C\" => '\\\\x0C', \"\\x0D\"\
    \ => '\\\\x0D', \"\\x0E\" => '\\\\x0E', \"\\x0F\" => '\\\\x0F', \"\\x10\" => '\\\
    \\x10', \"\\x11\" => '\\\\x11', \"\\x12\" => '\\\\x12', \"\\x13\" => '\\\\x13',\
    \ \"\\x14\" => '\\\\x14', \"\\x15\" => '\\\\x15', \"\\x16\" => '\\\\x16', \"\\\
    x17\" => '\\\\x17', \"\\x18\" => '\\\\x18', \"\\x19\" => '\\\\x19', \"\\x1a\"\
    \ => '\\\\x1a', \"\\x1b\" => '\\\\x1b', \"\\x1c\" => '\\\\x1c', \"\\x1d\" => '\\\
    \\x1d', \"\\x1e\" => '\\\\x1e', \"\\x1f\" => '\\\\x1f', \"\\x20\" => '\\\\x20',\
    \ \"\\x21\" => '\\\\x21', \"\\x22\" => '\\\\x22', \"\\x23\" => '\\\\x23', \"\\\
    x24\" => '\\\\x24', \"\\x25\" => '\\\\x25', \"\\x26\" => '\\\\x26', \"\\x27\"\
    \ => '\\\\x27', \"\\x28\" => '\\\\x28', \"\\x29\" => '\\\\x29', \"\\x2a\" => '\\\
    \\x2a', \"\\x2b\" => '\\\\x2b', \"\\x2c\" => '\\\\x2c', \"\\x2d\" => '\\\\x2d',\
    \ \"\\x2e\" => '\\\\x2e', \"\\x2f\" => '\\\\x2f', \"\\x30\" => '\\\\x30', \"\\\
    x31\" => '\\\\x31', \"\\x32\" => '\\\\x32', \"\\x33\" => '\\\\x33', \"\\x34\"\
    \ => '\\\\x34', \"\\x35\" => '\\\\x35', \"\\x36\" => '\\\\x36', \"\\x37\" => '\\\
    \\x37', \"\\x38\" => '\\\\x38', \"\\x39\" => '\\\\x39', \"\\x3a\" => '\\\\x3a',\
    \ \"\\x3b\" => '\\\\x3b', \"\\x3c\" => '\\\\x3c', \"\\x3d\" => '\\\\x3d', \"\\\
    x3e\" => '\\\\x3e', \"\\x3f\" => '\\\\x3f', \"\\x40\" => '\\\\x40', \"\\x41\"\
    \ => '\\\\x41', \"\\x42\" => '\\\\x42', \"\\x43\" => '\\\\x43', \"\\x44\" => '\\\
    \\x44', \"\\x45\" => '\\\\x45', \"\\x46\" => '\\\\x46', \"\\x47\" => '\\\\x47',\
    \ \"\\x48\" => '\\\\x48', \"\\x49\" => '\\\\x49', \"\\x4a\" => '\\\\x4a', \"\\\
    x4b\" => '\\\\x4b', \"\\x4c\" => '\\\\x4c', \"\\x4d\" => '\\\\x4d', \"\\x4e\"\
    \ => '\\\\x4e', \"\\x4f\" => '\\\\x4f', \"\\x50\" => '\\\\x50', \"\\x51\" => '\\\
    \\x51', \"\\x52\" => '\\\\x52', \"\\x53\" => '\\\\x53', \"\\x54\" => '", "   \
    \ return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n</code>\n\
    <|/ a tags=php,string,arrays,preg-replace |>\n<| a |>\n<code>\n$string = \"Hello\
    \ World\";\n$string = preg_replace('/./u', 'u', strtolower($string));\n</code>\n\
    <|/ a tags=php,string,arrays,preg-replace dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a tags=php,string,arrays,preg-replace |>\n<| a tags=php,string,arrays,preg-replace\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/./u', 'u',\
    \ strtolower($string));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a tags=php,string,arrays,preg-replace |>\n<| a dscore=0 |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a tags=php,string,arrays,preg-replace |>\n<| a dscore=0 |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a tags=php,string,arrays,preg-replace |>\n<| a dscore=0 |>\n<code>\n\
    $string = \"Hello World\";\n$string = preg_replace('/./u', 'u', strtolower($string));\n\
    </code>\n<|/ a tags=php,string,arrays,preg-replace |>\n<| a tags=php,string,arrays,preg-replace\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/./u', 'u',\
    \ strtolower($string));\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,string,arrays,preg-replace\
    \ |>\n<code>\n$string = \"Hello World\";\n$string = preg_replace('/./u', 'u',\
    \ strtolower($string));\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $string = \"Hello World", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n\
    </code>\n<|/ a tags=php,string |>\n<| c |>\nI like this solution, although it\
    \ does require a lot of extra processing (like looping through each character\
    \ in the string). But it does seem to be the most efficient solution.\n<|/ c |>\n\
    <| c |>\nYes, it does require a lot of extra processing (like looping through\
    \ each character in the string). But it does seem to be the most efficient solution.\n\
    <|/ c |>\n<| a tags=php,string |>\n<code>", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"')));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "   \
    \ return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '')));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' =>\
    \ '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '$' => '\\\\$',\
    \ '('=>'\\\\(', '=>'=>', '=' => '\\\\=', '<' => '\\\\<', '>' => '\\\\>', '{' =>\
    \ '\\\\{', '}' => '\\\\}', '[' => '\\\\[', ']' => '\\\\]', '\\\\' => '\\\\\\\\\
    ')));\n}", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\'')));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '\\\
    U$1', $string));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}\n", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '\\\\1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', '',\n\
    \        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        ['A', 'B', 'C', 'D', 'E',\
    \ 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\
    \ 'V', 'W', 'X', 'Y', 'Z'], \n        $string)));\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
