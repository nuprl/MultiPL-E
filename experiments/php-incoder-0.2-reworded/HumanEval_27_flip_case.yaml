name: HumanEval_27_flip_case
language: php
prompt: "<?php\n// For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case($string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
  ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    return strtoupper(strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '$' => '\\\\$', '(' =>\
    \ '\\\\(', '*' => '\\\\*', ')' => '\\\\)', '+' => '\\\\+', ',' => '\\\\,', '-'\
    \ => '\\\\-', '.' => '\\\\.', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\\=',\
    \ '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\\
    ^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{", "    return strtoupper(preg_replace('/./u', '',\n      \
    \  str_replace('l','O',\n        str_replace('I','i',\n        str_replace('L','L',\n\
    \        str_replace('O','o',\n        str_replace('e','E',\n        str_replace('H','h',\n\
    \        str_replace('S','s',\n        str_replace('T','t',\n        str_replace('N','n',\n\
    \        str_replace('R','r',\n        str_replace('D','d',\n        str_replace('M','m',\n\
    \        str_replace('P','p',\n        str_replace('U','u',\n        str_replace('F','f',\n\
    \        str_replace('G','g',\n        str_replace('Y','y',\n        str_replace('X','x',\n\
    \        str_replace('Z','z',\n        str_replace('J','j',\n        str_replace('K','k',\n\
    \        str_replace('V','v',\n        str_replace('B','b',\n        str_replace('Z','z',\n\
    \        str_replace('X','x',\n        str_replace('Y','y',\n        str_replace('W','w',\n\
    \        str_replace('V','v',\n        str_replace('U','u',\n        str_replace('T','t',\n\
    \        str_replace('S','s',\n        str_replace('R','r',\n        str_replace('N','n',\n\
    \        str_replace('D','d',\n        str_replace('M','m',\n        str_replace('P','p',\n\
    \        str_replace('F','f',\n        str_replace('G','g',\n        str_replace('Y','y',\n\
    \        str_replace('X','x',\n        str_replace('Z','z',\n        str_replace('J','j',\n\
    \        str_replace('K','k',\n        str_replace('V','v',\n        str_replace('B','b',\n\
    \        str_replace('Z','z',\n        str_replace('X','x',\n        str_replace('Y','y',\n\
    \        str_replace('W','w',\n        str_replace('V','v',\n        str_replace('U','u',\n\
    \        str_replace('T','t',\n        str_replace('S','s',\n        str_replace('R','r',\n\
    \        str_replace('N','n',\n        str_replace('D','d',\n        str_replace('M','m',\n\
    \        str_replace('P','p',\n        str_replace('F','f',\n        str_replace('G','g',\n\
    \        str_replace('Y','y',\n        str_replace('X','x',\n        str_replace('Z','z',\n\
    \        str_replace('J','j',\n        str_replace('K','k',\n        str_replace('V','v',\n\
    \        str_replace('B','b',\n        str_replace('Z", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', '',\n  \
    \      strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'))\n    ));\n}", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\\(', '*' => '\\\\*', ')' => '\\\
    \\)', ';' => '\\\\;', ':' => '\\\\:', '=' => '\\\\=', '<' => '\\\\<', '>' => '\\\
    \\>', '|' => '\\\\|', '\\\\' => '\\\\\\\\')));\n}", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}", "    return strtr($string, array('!' => '!!', '?' => '??',\
    \ '\"' => '???', '\\'' => '????', '(' => '????(', ')' => '????)', ',' => '????,',\
    \ ';' => '????;', ':' => '????:', '=' => '????=', '&' => '????&', '=' => '????=',\
    \ '?' => '?????', '!' => '????!', ':' => '????:', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '$' => '\\\\$', '(' => '\\\\\
    (', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\
    \\-', '.' => '\\\\.', '/' => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\
    \\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{", "    return preg_replace('/./u', 'u', $string);\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        ['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        $string)));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n</code>\n<|/ a tags=php,string,regex |>\n<| c |>\nThis\
    \ doesn't work for all cases. For example, `flip_case(\"Hello\")` returns `hELLO`,\
    \ but `flip_case(\"HelloWorld\")` returns `HellOWorld`.\n<|/ c |>\n<| c |>\nI\
    \ added a second example to my answer to show how it handles multiple cases. I\
    \ hope it helps.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = \"Hello\"\
    ;\n$string = preg_replace('/([a-z])/i', '$1', $string);\necho $string;", "   \
    \ return preg_replace('/./u', 'u', strtoupper($string));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        $string\n    )\n    )\n);", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\
    \\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\\
    '' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\''\
    \ => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' =>\
    \ '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\\
    &', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&'\
    \ => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\
    \\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"\
    ', '&' => '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\'\\'', '(' => '(', ')'\
    \ => ')', '*' => '*', ',' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')' => '', ')'\
    \ => '', ')' => '', ')", "    return preg_replace('/([a-z])/i', '\\U$1\\E', $string);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm sorry I didn't\
    \ specify that I was looking for a PHP solution. I've added that to the question.\n\
    <|/ c |>\n<| c |>\nI added a PHP solution to my answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$string = \"Hello World\";\n$string = preg_replace('/([a-z])/i',\
    \ '\\U$1\\E', $string);\necho $string;", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}", "    return strtoupper(preg_replace('/./u', '',\n  \
    \      strtr($string, array('a'=>'A','b'=>'B','c'=>'C','d'=>'D','e'=>'E','f'=>'F','g'=>'G','h'=>'H','i'=>'I','j'=>'J','k'=>'K','l'=>'L','m'=>'M','n'=>'N','o'=>'O','p'=>'P','q'=>'Q','r'=>'R','s'=>'S','t'=>'T','u'=>'U','v'=>'V','w'=>'W','x'=>'X','y'=>'Y','z'=>'Z'))\n\
    \    ));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\
    \\'', '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\\(', ')' => '\\\\)', '*' =>\
    \ '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\\-', '.' => '\\\\.', '/'\
    \ => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\\=', '<' => '\\\\<',\
    \ '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~'));\n}", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}",
  "    return strtoupper(preg_replace('/([a-z])/', '$1', $string));\n}", "    return\
    \ strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '&' => '&&', '\\'' => '\\\
    '\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.' => '', '.'\
    \ => '', '.' => '', '.' => '', '.' => '", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '=' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' =>\
    \ '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???', '-' => '???',\
    \ '-' => '???', '-' => '???', '-' => '???', '-' => '??", "    return strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n\
    }", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\' => '\\\\\\\\')));\n}", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", "    return\
    \ strtoupper(mb_convert_case($string, MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n\
    <|/ a tags=php,string,regex |>\n<| c |>\nThis doesn't seem to work. `mb_convert_case`\
    \ doesn't seem to support UTF-8 strings. I get the following error: `Warning:\
    \ mb_convert_case() expects parameter 1 to be string, object given`\n<|/ c |>\n\
    <| c |>\nI added a fix for UTF-8 support\n<|/ c |>\n<| c |>\nI added a fix for\
    \ UTF-8 support\n<|/ c |>\n<| c |>\nI added a fix for UTF-8 support\n<|/ c |>\n\
    <| c |>\nI added a fix for UTF-8 support\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello World!\";\n$string = preg_replace('/\\p{L}/u',\
    \ '', $string);\necho $string;\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ seem to work. `preg_replace` doesn't seem to support UTF-8 strings. I get the\
    \ following error: `Warning: preg_replace() [function.preg-replace]: Compilation\
    \ failed: invalid UTF-8 string at offset 0`.\n<|/ c |>\n<| a tags=php,string,regex\
    \ |>\n<code>\n$string = \"Hello World!\";\n$string = pre", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '\\\\' => '\\\\\\\\', \"\
    '\" => '\\\\\\'', '(' => '\\\\(', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\\
    +', ',' => '\\\\,', '-' => '\\\\-', '.' => '\\\\.', ':' => '\\\\:', ';' => '\\\
    \\;', '<' => '\\\\<', '=' => '\\\\=', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\
    \\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\
    \\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\\{', '}' => '\\\
    \\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\\$', '{' => '\\\
    \\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\^', '$' => '\\\
    \\$', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '",
  "    return strtoupper(preg_replace('/./u', '',\n        strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\n            'f'=>'F', 'g'=>'G', 'h'=>'H',\
    \ 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\n            'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\n            't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z',\n            'A'=>'a', 'B'=>'b', 'C'=>'c',\
    \ 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g',\n            'H'=>'h', 'I'=>'i', 'J'=>'j',\
    \ 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n',\n            'O'=>'o', 'P'=>'p', 'Q'=>'q',\
    \ 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u',\n            'V'=>'v', 'W'=>'w', 'X'=>'x',\
    \ 'Y'=>'y', 'Z'=>'z')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/',\
    \ '$1', $string));\n}\n</code>\n<|/ a tags=php,string |>\n<| a tags=php,string\
    \ |>\n<code>", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n}\n",
  "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error\
    \ `Fatal error: Call to undefined function preg_replace()`\n<|/ c |>\n<| c |>\n\
    Sorry, I forgot to include `preg_replace()`. I updated my answer.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I tried your code, but I got this error `Fatal\
    \ error: Call to undefined function preg_replace()`\n<|/ c |>\n<| c |>\nSorry,\
    \ I forgot to include `preg_replace()`. I updated my answer.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I tried your code, but I got this error `Fatal error:\
    \ Call to undefined function preg_replace()`\n<|/ c |>\n<| a tags=php,preg-replace,string,regex\
    \ |>\n<code>\n<?php\n$string = \"Hello\";\n$pattern = '/./u';\n$replacement =\
    \ 'u';\necho preg_replace($pattern, $replacement, $string);", "    return strtr($string,\
    \ array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G',\
    \ 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O',\
    \ 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W',\
    \ 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'')));\n}", "    return strtoupper(strtr($string, array('!'\
    \ => '!!', '?' => '??', '\"' => '\"\"', \"'\" => '''')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\"' => '\"\"', \"'\" => '''')));\n}\n", " \
    \   return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' =>\
    \ '\\'')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for all cases. For example, `flip_case(\"\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\
    \xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9\xC9", "    return\
    \ strtoupper(strtr($string, array('!' => '!', '?' => '?', '$' => '$', '&' => '&',\
    \ '\\'' => '\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '<', ')' => '(',\
    \ '>' => '<', ':' => '=', ';' => '<', '=' => '=', '@' => '@', '[' => '[', ']'\
    \ => '[', '{' => '[', '}' => '[', '\\\\' => '\\\\', '^' => '^', '~' => '~', '*'\
    \ => '*', ',' => '<', ')' => '(', '>' => '<', ':' => '=', ';' => '<', '=' => '=',\
    \ '@' => '@', '[' => '[', ']' => '[', '{' => '[', '}' => '[', '\\\\' => '\\\\\
    ', '^' => '^', '~' => '~', '*' => '*', ',' => '<', ')' => '(', '>' => '<', ':'\
    \ => '=', ';' => '<', '=' => '=', '@' => '@', '[' => '[', ']' => '[', '{' => '[',\
    \ '}' => '[', '\\\\' => '\\\\', '^' => '^', '~' => '~', '*' => '*', ',' => '<',\
    \ ')' => '(', '>' => '<', ':' => '=', ';' => '<', '=' => '=', '@' => '@', '['\
    \ => '[', ']' => '[', '{' => '[', '}' => '[', '\\\\' => '\\\\', '^' => '^', '~'\
    \ => '~', '*' => '*', ',' => '<', ')' => '(', '>' => '<', ':' => '=', ';' => '<',\
    \ '=' => '=', '@' => '@', '[' => '[', ']' => '[', '{' => '[', '}' => '[', '\\\\\
    ' => '\\\\', '^' => '^', '~' => '~', '*' => '*', ',' => '<', ')' => '(', '>' =>\
    \ '<', ':' => '=', ';' => '<', '=' => '=', '@' => '@', '[' => '[', ']' => '[',\
    \ '{' => '[', '}' => '[', '\\\\' => '\\\\', '^' => '^', '~' => '~', '*' => '*',\
    \ ',' => '<', ')' => '(', '>' => '<', ':' => '=', ';' => '<', '=' => '=', '@'\
    \ => '@', '[' => '[', ']' => '[', '{' => '[', '}' => '[', '\\\\' => '\\\\', '^'\
    \ => '^', '~' => '~', '*' => '*', ',' => '<', ')' => '(', '>' => '<', ':' => '=',\
    \ ';' => '<', '=' => '=', '@' => '@', '[' => '[', ']' => '[', '{' => '[', '}'\
    \ => '[", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "   \
    \ return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\
    '')));\n}", "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['a',\
    \ 'A', 'I', 'O', 'U'], ['a','A','I','O','U'], $string)));\n}\n", "    return preg_replace('/./u',\
    \ 'u', $string);\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' =>\
    \ '\\\\&', '(' => '\\\\(', '*' => '\\\\*', ')' => '\\\\)', ';' => '\\\\;', ':'\
    \ => '\\\\:', '=' => '\\\\=', '@' => '\\\\@', '[' => '\\\\[', ']' => '\\\\]',\
    \ '^' => '\\\\^', '\\\\' => '\\\\\\\\'));\n}", "    return strtoupper(strtr($string,\
    \ 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}", "    return\
    \ strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', '',\n        str_replace(['a', 'b', 'c', 'd',\
    \ 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\
    \ 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}", "    return strtoupper(preg_replace('/([a-z])/i', '$1',\
    \ $string));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!', '?'\
    \ => '??', '\\'' => '\\'')));\n}\n", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return preg_replace('/./u', 'u', $string);\n}\n",
  "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n", " \
    \   return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n}\n",
  "    return strtoupper(preg_replace('/./u', '',\n        str_replace(['A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}\n", "    return strtoupper(strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\'')));\n}", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        $string)));\n\
    }", "    return preg_replace('/([a-z])/', '$U$1$1', $string);\n}", "    return\
    \ strtr($string, array_flip(array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z')));\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted\
    \ answer. Much more elegant and readable than the other answers.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, this is much more elegant and readable than the other\
    \ answers.\n<|/ c |>\n<| c |>\nI agree with you, this is much more elegant and\
    \ readable than the other answers.\n<|/ c |>\n<| c |>\nI agree with you, this\
    \ is much more elegant and readable than the other answers.\n<|/ c |>\n<| c |>\n\
    I agree with you, this is much more elegant and readable than the other answers.\n\
    <|/ c |>\n<| a |>\n<code>\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")',\
    \ $string);\n</code>\n<|/ a tags=php,string,replace dscore=5 |>\n<| c |>\nThis\
    \ doesn't work for non-ASCII characters. I suggest using [this answer](https://stackoverflow.com/a/4709441/632951)\
    \ instead.\n<|/ c |>\n<| c |>\nThis doesn't work for non-ASCII characters. I suggest\
    \ using [this answer](https://stackoverflow.com/a/4709441/632951) instead.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for non-ASCII characters. I suggest using [this\
    \ answer](https://stackoverflow.com/a/4709441/632951) instead.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for non-ASCII characters. I suggest using [this answer](https://stackoverflow.com/a/4709441/632951)\
    \ instead.\n<|/ c |>\n<| c |>\nThis doesn't work for non-ASCII characters. I suggest\
    \ using [this answer](https://stackoverflow.com/a/4709441/632951) instead.\n<|/\
    \ c |>\n<| a dscore=5 |>\n<code>\n$string = preg_replace('/([a-z])/e', 'strtoupper(\"\
    $1\")', $string);\n$string = preg_replace('/([A-Z])/e', 'strtolower(\"$1\")',\
    \ $string);\n</code>\n<|/ a tags=php,string,replace |>", "    return strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' =>\
    \ '\\\\&', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&'));\n}\n", "  \
    \  return strtoupper(preg_replace('/./u', 'u', $string));\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like this solution, however it fails on \"\xDF\" which should\
    \ be \"SS\"\n<|/ c |>\n<| c |>\n: Yes, it fails on \"\xDF\" which should be \"\
    SS\".  I added a solution that handles this.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that handles this.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}", "    return strtr($string, array('!' => '!!',\
    \ '?' => '??', '\\'' => '\\\\\\'', '\"' => '\\\\\"', '(' => '\\\\(', ')' => '\\\
    \\)', '*' => '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\\-', '.' => '\\\
    \\.', '/' => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\\=', '<' => '\\\
    \\<', '>' => '\\\\>', '&' => '\\\\&', '|' => '\\\\|', '~' => '\\\\~'));\n}\n",
  "    return strtoupper(preg_replace('/./u', '',\n        strtr($string, array('a'=>'A','b'=>'B','c'=>'C','d'=>'D','e'=>'E','f'=>'F','g'=>'G','h'=>'H','i'=>'I','j'=>'J','k'=>'K','l'=>'L','m'=>'M','n'=>'N','o'=>'O','p'=>'P','q'=>'Q','r'=>'R','s'=>'S','t'=>'T','u'=>'U','v'=>'V','w'=>'W','x'=>'X','y'=>'Y','z'=>'Z'))\n\
    \    ));\n}\n", "    return strtoupper(strtr($string, array('!' => '!!', '?' =>\
    \ '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks so\
    \ much! I used this and added a little bit of code to make it case insensitive.\
    \ Thanks again!\n<|/ c |>\n<| a dscore=2 |>\nI used the answer from and added\
    \ a little bit of code to make it case insensitive.\n<code>", "    return strtr($string,\
    \ array_flip(array('!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '+',\
    \ '=', '{', '}', '[', ']', '|', '\\\\', ':', ';', '<', '>', '?', ':', '\"', \"\
    '\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':',\
    \ '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\"\
    , '<', '>', '?', ':', '\"', \"'\", '<', '>', '?', ':', '\"', \"'\", '<', '>',\
    \ '?', ':', '\"', \"'\", '<', '>', '?', ':", "    return strtoupper(preg_replace('/./u',\
    \ 'u', strtolower($string)));\n}\n", "    return strtr($string, array_flip(str_split($string)));\n\
    }\n</code>\n<|/ a tags=php,string,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $string = \"Hello World\";\n$string = strtolower($string);\n$string = ucfirst($string);\n\
    echo $string;", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C',\
    \ 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K',\
    \ 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S',\
    \ 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}",
  "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\
    \ 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'],\n\
    \        ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],\n\
    \        $string)));\n}\n", "    return strtoupper(strtr($string, array('!' =>\
    \ '!!', '?' => '??', '\\'' => '\\'')));\n}\n", "    return strtoupper(strtr($string,\
    \ array('!' => '!!', '?' => '??', '\\'' => '\\'\\'', '\"' => '\\\"\\\"', '\\\\\
    ' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')', '*' => '*', ','\
    \ => '', ')' => '', '(' => '', '[' => '[', ']' => ']', '{' => '{', '}' => '',\
    \ '=' => '', ':' => '', ';' => '', '!' => '', '?' => '', '\\'' => '\\'', '\"'\
    \ => '\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')',\
    \ '*' => '*', ',' => '', ')' => '', '(' => '', '[' => '[', ']' => ']', '{' =>\
    \ '{', '}' => '', '=' => '', ':' => '', ';' => '', '!' => '', '?' => '', '\\''\
    \ => '\\'', '\"' => '\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' =>\
    \ '(', ')' => ')', '*' => '*', ',' => '', ')' => '', '(' => '', '[' => '[', ']'\
    \ => ']', '{' => '{', '}' => '', '=' => '', ':' => '', ';' => '', '!' => '', '?'\
    \ => '', '\\'' => '\\'', '\"' => '\\\"', '\\\\' => '\\\\\\\\', \"'\" => '\\'\\\
    '\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', ')' => '', '(' => '', '['\
    \ => '[', ']' => ']', '{' => '{', '}' => '', '=' => '', ':' => '', ';' => '',\
    \ '!' => '', '?' => '', '\\'' => '\\'', '\"' => '\\\"', '\\\\' => '\\\\\\\\',\
    \ \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')', '*' => '*', ',' => '', ')' =>\
    \ '', '(' => '', '[' => '[', ']' => ']', '{' => '{', '}' => '', '=' => '', ':'\
    \ => '', ';' => '', '!' => '', '?' => '', '\\'' => '\\'', '\"' => '\\\"', '\\\\\
    ' => '\\\\\\\\', \"'\" => '\\'\\'\\'', '(' => '(', ')' => ')', '*' => '*', ','\
    \ => '', ')' => '', '('));\n}", "    return strtoupper(preg_replace('/./u', 'u',\
    \ $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i', '$1', $string));\n\
    }\n", "    return strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "   \
    \ return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\"' => '???',\
    \ '\\'' => '????', '(' => '????', '[' => '????', '{' => '????')));\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
