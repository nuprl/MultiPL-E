name: HumanEval_27_flip_case
language: php
prompt: "<?php\n// For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case($string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return flip_case(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"Hello!\") !== \"hELLO!\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"These violent delights have violent ends\"\
  ) !== \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    return strtoupper(strtr($string, array('!' => '!!', '?' => '??',\
    \ '\\'' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '$' => '\\\\$', '(' =>\
    \ '\\\\(', '*' => '\\\\*', ')' => '\\\\)', '+' => '\\\\+', ',' => '\\\\,', '-'\
    \ => '\\\\-', '.' => '\\\\.', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\\=',\
    \ '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\\\
    ^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{", "    return strtoupper(preg_replace('/./u', '',\n      \
    \  str_replace('l','O',\n        str_replace('I','i',\n        str_replace('L','L',\n\
    \        str_replace('O','o',\n        str_replace('e','E',\n        str_replace('H','h',\n\
    \        str_replace('S','s',\n        str_replace('T','t',\n        str_replace('N','n',\n\
    \        str_replace('R','r',\n        str_replace('D','d',\n        str_replace('M','m',\n\
    \        str_replace('P','p',\n        str_replace('U','u',\n        str_replace('F','f',\n\
    \        str_replace('G','g',\n        str_replace('Y','y',\n        str_replace('X','x',\n\
    \        str_replace('Z','z',\n        str_replace('J','j',\n        str_replace('K','k',\n\
    \        str_replace('V','v',\n        str_replace('B','b',\n        str_replace('Z','z',\n\
    \        str_replace('X','x',\n        str_replace('Y','y',\n        str_replace('W','w',\n\
    \        str_replace('V','v',\n        str_replace('U','u',\n        str_replace('T','t',\n\
    \        str_replace('S','s',\n        str_replace('R','r',\n        str_replace('N','n',\n\
    \        str_replace('D','d',\n        str_replace('M','m',\n        str_replace('P','p',\n\
    \        str_replace('F','f',\n        str_replace('G','g',\n        str_replace('Y','y',\n\
    \        str_replace('X','x',\n        str_replace('Z','z',\n        str_replace('J','j',\n\
    \        str_replace('K','k',\n        str_replace('V','v',\n        str_replace('B','b',\n\
    \        str_replace('Z','z',\n        str_replace('X','x',\n        str_replace('Y','y',\n\
    \        str_replace('W','w',\n        str_replace('V','v',\n        str_replace('U','u',\n\
    \        str_replace('T','t',\n        str_replace('S','s',\n        str_replace('R','r',\n\
    \        str_replace('N','n',\n        str_replace('D','d',\n        str_replace('M','m',\n\
    \        str_replace('P','p',\n        str_replace('F','f',\n        str_replace('G','g',\n\
    \        str_replace('Y','y',\n        str_replace('X','x',\n        str_replace('Z','z',\n\
    \        str_replace('J','j',\n        str_replace('K','k',\n        str_replace('V','v',\n\
    \        str_replace('B','b',\n        str_replace('Z", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}\n", "    return strtoupper(preg_replace('/./u', '',\n  \
    \      strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E',\
    \ 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M',\
    \ 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U',\
    \ 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'))\n    ));\n}", "    return\
    \ strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\'' => '\\\\\\'',\
    \ '\"' => '\\\\\"', '&' => '\\\\&', '(' => '\\\\(', '*' => '\\\\*', ')' => '\\\
    \\)', ';' => '\\\\;', ':' => '\\\\:', '=' => '\\\\=', '<' => '\\\\<', '>' => '\\\
    \\>', '|' => '\\\\|', '\\\\' => '\\\\\\\\')));\n}", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}\n", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ 'u', $string));\n}", "    return strtr($string, array('!' => '!!', '?' => '??',\
    \ '\"' => '???', '\\'' => '????', '(' => '????(', ')' => '????)', ',' => '????,',\
    \ ';' => '????;', ':' => '????:', '=' => '????=', '&' => '????&', '=' => '????=',\
    \ '?' => '?????', '!' => '????!', ':' => '????:', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????',\
    \ '=' => '????=', '?' => '?????', '=' => '????=', '?' => '?????', '=' => '????=',\
    \ '", "    return strtoupper(strtr($string, array('!' => '!!', '?' => '??', '\\\
    '' => '\\\\\\'', '\"' => '\\\\\"', '&' => '\\\\&', '$' => '\\\\$', '(' => '\\\\\
    (', ')' => '\\\\)', '*' => '\\\\*', '+' => '\\\\+', ',' => '\\\\,', '-' => '\\\
    \\-', '.' => '\\\\.', '/' => '\\\\/', ':' => '\\\\:', ';' => '\\\\;', '=' => '\\\
    \\=', '<' => '\\\\<', '>' => '\\\\>', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{' => '\\\\{', '}' => '\\\\}', '|' => '\\\\|', '~' => '\\\\~', '^' => '\\\
    \\^', '{", "    return preg_replace('/./u', 'u', $string);\n}\n", "    return\
    \ strtoupper(preg_replace('/./u', 'u', $string));\n}\n", "    return strtoupper(preg_replace('/([a-z])/i',\
    \ '$1', $string));\n}", "    return strtoupper(strtr($string, 'abcdefghijklmnopqrstuvwxyz',\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n}\n", "    return strtr($string, array('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z'));\n}\n", "    return strtoupper(preg_replace('/./u', 'u', strtolower($string)));\n\
    }\n", "    return strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D',\
    \ 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L',\
    \ 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T',\
    \ 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return\
    \ strtr($string, array('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z'));\n}", "    return strtoupper(mb_convert_case($string,\
    \ MB_CASE_TITLE, 'UTF-8'));\n}\n", "    return strtoupper(preg_replace('/./u',\
    \ '',\n        str_replace(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\
    \ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\
    \ 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        ['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], \n        $string)));\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
