name: HumanEval_31_is_prime
language: php
prompt: "<?php\n// Return true if a given number is prime, and false otherwise.\n\
  // >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
  // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
  // false\n// >>> is_prime(1)\n// false\nfunction is_prime($n) {\n"
tests: "function candidate(...$args) {\n    return is_prime(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(101) !== true) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(11) !== true) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(13441) !== true) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(61) !== true) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(4) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
  \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !==\
  \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17) !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(85) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(77) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(255379) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = abs($n);\n    $i = 1;\n    while($i <= sqrt($n)) {\n     \
    \   if($n % $i == 0) {\n            return false;\n        }\n        $i++;\n\
    \    }\n    return true;\n}\n", "    if ($n < 2) {\n        return false;\n  \
    \  }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n\
    \        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    $n = abs($n);\n\
    \    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n       \
    \ return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n\
    \    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for($i =\
    \ 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    $n = abs($n);\n\
    \    if ($n < 2)\n        return false;\n    if ($n == 2)\n        return true;\n\
    \    if ($n % 2 == 0)\n        return false;\n    $root = $this->sqrt($n);\n \
    \   $f = 1;\n    for($i = 3; $i <= $root; $i += 2)\n        if ($n % $i == 0)\n\
    \            $f = false;\n    return $f;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n\n    // Trial division check\n    if ($n % 2 == 0) {\n     \
    \   return false;\n    }\n\n    // Sieve of Eratosthenes\n    $limit = (int) sqrt($n);\n\
    \    for ($i = 2; $i <= $limit; $i++) {\n        if ($n % $i == 0) {\n       \
    \     return false;\n        }\n    }\n\n    return true;\n}\n", "    $n = abs($n);\n\
    \    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n       \
    \ return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n\
    \    $root = $this->sqrt($n);\n    $f = 1;\n    for($i = 3; $i <= $root; $i +=\
    \ 2) {\n        if ($n % $i == 0) {\n            $f = false;\n            break;\n\
    \        }\n    }\n    return $f;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 =\
    \ $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n\
    \ % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if ($n <= 1) return false;\n    if ($n == 2) return true;\n    if ($n\
    \ % 2 == 0) return false;\n    if ($n % 3 == 0) return false;\n    if ($n % 5\
    \ == 0) return false;\n    if ($n % 7 == 0) return false;\n    if ($n % 11 ==\
    \ 0) return false;\n    if ($n % 13 == 0) return false;\n    if ($n % 17 == 0)\
    \ return false;\n    if ($n % 19 == 0) return false;\n    if ($n % 23 == 0) return\
    \ false;\n    if ($n % 29 == 0) return false;\n    if ($n % 31 == 0) return false;\n\
    \    if ($n % 37 == 0) return false;\n    if ($n % 41 == 0) return false;\n  \
    \  if ($n % 43 == 0) return false;\n    if ($n % 47 == 0) return false;\n    if\
    \ ($n % 53 == 0) return false;\n    if ($n % 59 == 0) return false;\n    if ($n\
    \ % 61 == 0) return false;\n    if ($n % 67 == 0) return false;\n    if ($n %\
    \ 71 == 0) return false;\n    if ($n % 73 == 0) return false;\n    if ($n % 79\
    \ == 0) return false;\n    if ($n % 83 == 0) return false;\n    if ($n % 89 ==\
    \ 0) return false;\n    if ($n % 97 == 0) return false;\n    if ($n % 101 == 0)\
    \ return false;\n    if ($n % 103 == 0) return false;\n    if ($n % 107 == 0)\
    \ return false;\n    if ($n % 111 == 0) return false;\n    if ($n % 117 == 0)\
    \ return false;\n    if ($n % 121 == 0) return false;\n    if ($n % 127 == 0)\
    \ return false;\n    if ($n % 131 == 0) return false;\n    if ($n % 137 == 0)\
    \ return false;\n    if ($n % 141 == 0) return false;\n    if ($n % 147 == 0)\
    \ return false;\n    if ($n % 151 == 0) return false;\n    if ($n % 157 == 0)\
    \ return false;\n    if ($n % 161 == 0) return false;\n    if ($n % 167 == 0)\
    \ return false;\n    if ($n % 173 == 0) return false;\n    if ($n % 179 == 0)\
    \ return false;\n    if ($n % 181 == 0) return false;\n    if ($n % 187 == 0)\
    \ return false;\n    if ($n % 191 == 0) return false;\n    if ($n % 193 == 0)\
    \ return false;\n    if ($n % 197 == 0) return false;\n    if ($n % 199 == 0)\
    \ return false;\n    if ($n % 201 == 0) return false;\n    if ($n % 207 == 0)\
    \ return false;\n    if ($n % 211 == 0) return false;\n    if ($n % 213 == 0)\
    \ return false;\n    if ($n % 217 == 0) return false;\n    if ($n % 221 == 0)\
    \ return false;\n    if ($n % 227 == 0) return false;\n    if ($n % 229", "  \
    \  if ($n < 2) {\n        return false;\n    }\n\n    // Trial division avoids\
    \ problems with negative numbers.\n    if ($n < 7) {\n        return $n % 2 ===\
    \ 0;\n    }\n\n    // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n\
    \    // If any of these numbers is composite then return false.\n    for ($i =\
    \ 2; $i <= sqrt($n); $i++) {\n        if ($n % $i === 0) {\n            return\
    \ false;\n        }\n    }\n\n    return true;\n}\n", "    if ($n < 2) {\n   \
    \     return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n\
    \    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n\
    \        if ($n % $i == 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    $n = abs($n);\n    if ($n < 2)\n        return false;\n\
    \    if ($n == 2)\n        return true;\n    if ($n % 2 == 0)\n        return\
    \ false;\n    $root = $this->sqrt($n);\n    for($i = 3; $i <= $root; $i += 2)\n\
    \        if ($n % $i == 0)\n            return false;\n    return true;\n}\n",
  "    if ($n < 2) {\n        return false;\n    }\n\n    // Test for primeness up\
    \ to sqrt(n)\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        if ($n % $i\
    \ == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n",
  "    $n = abs($n);\n    if ($n < 2)\n        return false;\n    if ($n == 2)\n \
    \       return true;\n    if ($n % 2 == 0)\n        return false;\n    $root =\
    \ $this->sqrt($n);\n    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n %\
    \ $i == 0)\n            return false;\n    }\n    return true;\n}\n", "    if\
    \ ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return\
    \ true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root\
    \ = $this->sqrt($n);\n    $f = 1;\n    for($i = 3; $i <= $root; $i += 2) {\n \
    \       if ($n % $i == 0) {\n            $f = false;\n            break;\n   \
    \     }\n    }\n    return $f;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    for ($i =\
    \ 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for ($i = 3; $i * $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    if\
    \ ($n <= 1)\n        return false;\n    if ($n == 2)\n        return true;\n \
    \   if ($n % 2 == 0)\n        return false;\n    $root = $this->sqrt($n);\n  \
    \  for($i = 3; $i <= $root; $i += 2)\n        if ($n % $i == 0)\n            return\
    \ false;\n    return true;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis\
    \ doesn't work for me. `is_prime(6)` returns true, but `is_prime(7)` returns false.\
    \ `is_prime(8)` returns true, but `is_prime(9)` returns false. `is_prime(10)`\
    \ returns true, but `is_prime(11)` returns false. `is_prime(12)` returns true,\
    \ but `is_prime(13)` returns false. `is_prime(14)` returns true, but `is_prime(15)`\
    \ returns false. `is_prime(16)` returns true, but `is_prime(17)` returns false.\
    \ `is_prime(18)` returns true, but `is_prime(19)` returns false. `is_prime(20)`\
    \ returns true, but `is_prime(21)` returns false. `is_prime(22)` returns true,\
    \ but `is_prime(23)` returns false. `is_prime(24)` returns true, but `is_prime(25)`\
    \ returns false. `is_prime(26)` returns true, but `is_prime(27)` returns false.\
    \ `is_prime(28)` returns true, but `is_prime(29)` returns false. `is_prime(30)`\
    \ returns true, but `is_prime(31)` returns false. `is_prime(32)` returns true,\
    \ but `is_prime(33)` returns false. `is_prime(34)` returns true, but `is_prime(35)`\
    \ returns false. `is_prime(36)` returns true, but `is_prime(37)` returns false.\
    \ `is_prime(38)` returns true, but `is_prime(39)` returns false. `is_prime(40)`\
    \ returns true, but `is_prime(41)` returns false. `is_prime(42)` returns true,\
    \ but `is_prime(43)` returns false. `is_prime(44)` returns true, but `is_prime(45)`\
    \ returns false. `is_prime(46)` returns true, but `is_prime(47)` returns false.\
    \ `is_prime(48)` returns true, but `is_prime(49)` returns false. `is_prime(50)`\
    \ returns true, but `is_prime(51)", "  if ($n < 2) {\n    return false;\n  }\n\
    \n  // Trial division algorithm from http://primes.utm.edu/prove/prove2_3.html\n\
    \  $m = $n;\n  for ($i = 3; $i <= sqrt($n); $i += 2) {\n    if ($n % $i == 0)\
    \ {\n      $m = $i . ' ' . $m;\n    }\n  }\n\n  return $m == $n;\n}\n", "    if\
    \ ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return\
    \ true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root\
    \ = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <=\
    \ $root; $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n %\
    \ 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $f\
    \ = 1;\n    for($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n\
    \            $f = false;\n            break;\n        }\n    }\n    return $f;\n\
    }\n", "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n \
    \       return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n \
    \   }\n    $root = $this->sqrt($n);\n    for ($i = 3; $i * $i <= $root; $i +=\
    \ 2) {\n        if ($n % $i == 0) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n\
    \    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n   \
    \     return false;\n    }\n    $root = $this->sqrt($n);\n    for($i = 3; $i <=\
    \ $root; $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n %\
    \ 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $f\
    \ = 1;\n    for($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n\
    \            $f = false;\n            break;\n        }\n    }\n    return $f;\n\
    }\n", "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n \
    \       return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n \
    \   }\n    $root = $this->sqrt($n);\n    for ($i = 3; $i <= $root; $i += 2) {\n\
    \        if ($n % $i == 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n    if\
    \ ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    if ($n <\
    \ 2) {\n        return false;\n    }\n\n    // Trial division avoids problems\
    \ with negative numbers.\n    if ($n % 2 == 0) {\n        $is_prime = true;\n\
    \        for ($i = 3; $i * $i <= $n; $i += 2) {\n            if ($n % $i == 0)\
    \ {\n                $is_prime = false;\n                break;\n            }\n\
    \        }\n    } else {\n        $is_prime = false;\n    }\n\n    return $is_prime;\n\
    }\n", "  if ($n < 2) {\n    return false;\n  }\n\n  // Trial division test\n \
    \ for ($i = 3; $i * $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      return false;\n\
    \    }\n  }\n\n  // If we get here, it's prime.\n  return true;\n}\n", "    if\
    \ ($n <= 1) return false;\n    if ($n == 2) return true;\n    if ($n % 2 == 0)\
    \ return false;\n    if ($n % 3 == 0) return false;\n    if ($n % 5 == 0) return\
    \ false;\n    if ($n % 7 == 0) return false;\n    if ($n % 11 == 0) return false;\n\
    \    if ($n % 13 == 0) return false;\n    if ($n % 17 == 0) return false;\n  \
    \  if ($n % 19 == 0) return false;\n    if ($n % 23 == 0) return false;\n    if\
    \ ($n % 29 == 0) return false;\n    if ($n % 31 == 0) return false;\n    if ($n\
    \ % 37 == 0) return false;\n    if ($n % 41 == 0) return false;\n    if ($n %\
    \ 43 == 0) return false;\n    if ($n % 47 == 0) return false;\n    if ($n % 53\
    \ == 0) return false;\n    if ($n % 59 == 0) return false;\n    if ($n % 61 ==\
    \ 0) return false;\n    if ($n % 67 == 0) return false;\n    if ($n % 71 == 0)\
    \ return false;\n    if ($n % 73 == 0) return false;\n    if ($n % 79 == 0) return\
    \ false;\n    if ($n % 83 == 0) return false;\n    if ($n % 89 == 0) return false;\n\
    \    if ($n % 97 == 0) return false;\n    if ($n % 101 == 0) return false;\n \
    \   if ($n % 103 == 0) return false;\n    if ($n % 107 == 0) return false;\n \
    \   if ($n % 111 == 0) return false;\n    if ($n % 117 == 0) return false;\n \
    \   if ($n % 121 == 0) return false;\n    if ($n % 127 == 0) return false;\n \
    \   if ($n % 131 == 0) return false;\n    if ($n % 137 == 0) return false;\n \
    \   if ($n % 141 == 0) return false;\n    if ($n % 147 == 0) return false;\n \
    \   if ($n % 151 == 0) return false;\n    if ($n % 157 == 0) return false;\n \
    \   if ($n % 161 == 0) return false;\n    if ($n % 167 == 0) return false;\n \
    \   if ($n % 173 == 0) return false;\n    if ($n % 179 == 0) return false;\n \
    \   if ($n % 183 == 0) return false;\n    if ($n % 189 == 0) return false;\n \
    \   if ($n % 193 == 0) return false;\n    if ($n % 197 == 0) return false;\n \
    \   if ($n % 201 == 0) return false;\n    if ($n % 207 == 0) return false;\n \
    \   if ($n % 211 == 0) return false;\n    if ($n % 215 == 0) return false;\n \
    \   if ($n % 217 == 0) return false;\n    if ($n % 221 == 0) return false;\n \
    \   if ($n % 227 == 0) return false;\n    if ($n % 231 == 0) return false;\n \
    \   if ($n % 237 == 0) return false;\n    if ($n % 24", "    if ($n < 2) {\n \
    \       return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n\
    \    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $root2 = $this->sqrt($root);\n    for($i = 3; $i <= $root; $i += 2) {\n \
    \       if ($n % $i == 0) {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n    if\
    \ ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    $n = abs($n);\n\
    \    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n       \
    \ return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n\
    \    $root = $this->sqrt($n);\n    $f = 1;\n    for($i = 3; $i <= $root; $i +=\
    \ 2) {\n        if ($n % $i == 0) {\n            $f = false;\n            break;\n\
    \        }\n    }\n    return $f;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $f = 1;\n\
    \    for($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n      \
    \      $f = false;\n            break;\n        }\n    }\n    return $f;\n}",
  "    if ($n <= 1) return false;\n    if ($n == 2) return true;\n    if ($n % 2 ==\
    \ 0) return false;\n    if ($n % 3 == 0) return false;\n    if ($n % 5 == 0) return\
    \ false;\n    if ($n % 7 == 0) return false;\n    if ($n % 11 == 0) return false;\n\
    \    if ($n % 13 == 0) return false;\n    if ($n % 17 == 0) return false;\n  \
    \  if ($n % 19 == 0) return false;\n    if ($n % 23 == 0) return false;\n    if\
    \ ($n % 29 == 0) return false;\n    if ($n % 31 == 0) return false;\n    if ($n\
    \ % 37 == 0) return false;\n    if ($n % 41 == 0) return false;\n    if ($n %\
    \ 43 == 0) return false;\n    if ($n % 47 == 0) return false;\n    if ($n % 53\
    \ == 0) return false;\n    if ($n % 59 == 0) return false;\n    if ($n % 61 ==\
    \ 0) return false;\n    if ($n % 67 == 0) return false;\n    if ($n % 71 == 0)\
    \ return false;\n    if ($n % 73 == 0) return false;\n    if ($n % 79 == 0) return\
    \ false;\n    if ($n % 83 == 0) return false;\n    if ($n % 89 == 0) return false;\n\
    \    if ($n % 97 == 0) return false;\n    if ($n % 101 == 0) return false;\n \
    \   if ($n % 103 == 0) return false;\n    if ($n % 107 == 0) return false;\n \
    \   if ($n % 111 == 0) return false;\n    if ($n % 117 == 0) return false;\n \
    \   if ($n % 121 == 0) return false;\n    if ($n % 127 == 0) return false;\n \
    \   if ($n % 131 == 0) return false;\n    if ($n % 137 == 0) return false;\n \
    \   if ($n % 141 == 0) return false;\n    if ($n % 147 == 0) return false;\n \
    \   if ($n % 151 == 0) return false;\n    if ($n % 157 == 0) return false;\n \
    \   if ($n % 161 == 0) return false;\n    if ($n % 167 == 0) return false;\n \
    \   if ($n % 173 == 0) return false;\n    if ($n % 179 == 0) return false;\n \
    \   if ($n % 181 == 0) return false;\n    if ($n % 187 == 0) return false;\n \
    \   if ($n % 191 == 0) return false;\n    if ($n % 193 == 0) return false;\n \
    \   if ($n % 197 == 0) return false;\n    if ($n % 199 == 0) return false;\n \
    \   if ($n % 201 == 0) return false;\n    if ($n % 207 == 0) return false;\n \
    \   if ($n % 211 == 0) return false;\n    if ($n % 213 == 0) return false;\n \
    \   if ($n % 217 == 0) return false;\n    if ($n % 221 == 0) return false;\n \
    \   if ($n % 225 == 0) return false;\n    if ($n % 23", "    if ($n < 2) {\n \
    \       return false;\n    }\n\n    // Trial division via trial division means\
    \ we can use a\n    // simple test to see if a number is prime.\n    // If n is\
    \ less than or equal to 1, then n is prime.\n    if ($n <= 1) {\n        return\
    \ true;\n    }\n\n    // Test for divisibility by 2, 3, 5, and 7.\n    // If n\
    \ is divisible by any number other than these\n    // then n is not prime.\n \
    \   $n2 = $n / 2;\n    $n3 = $n / 3;\n    $n5 = $n / 5;\n    $n7 = $n / 7;\n\n\
    \    // If n is divisible by all of these numbers,\n    // then n is prime.\n\
    \    if ($n2 === $n3 && $n3 === $n5 && $n5 === $n7) {\n        return true;\n\
    \    }\n\n    // If n is not divisible by 2 or 3 but is divisible by 5\n    //\
    \ and 7, then n is prime.\n    if ($n2 !== $n3 && $n3 !== $n5 && $n5 === $n7)\
    \ {\n        return true;\n    }\n\n    // If n is not divisible by 5 and 7, then\
    \ n is prime.\n    if ($n5 !== $n7) {\n        return true;\n    }\n\n    // If\
    \ n is not divisible by 7, then n is prime.\n    return false;\n}\n", "    if\
    \ ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return\
    \ true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root\
    \ = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    $f = 1;\n    for($i\
    \ = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            $f =\
    \ false;\n            break;\n        }\n    }\n    if ($f == true) {\n      \
    \  return true;\n    }\n    return false;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n\n    // Trial division algorithm from http://en.wikipedia.org/wiki/Primality_test#Trial_division_of_a_number\n\
    \    $limit = $n - 1;\n    $num_div = 2;\n    while ($num_div <= $limit) {\n \
    \       if ($n % $num_div == 0) {\n            return false;\n        }\n    \
    \    $num_div += 2;\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    if ($n <\
    \ 2) {\n        return false;\n    }\n\n    // Trial division algorithm from https://en.wikipedia.org/wiki/Primality_test#Trial_division_of_a_prime_number\n\
    \    $limit = $n - 1;\n    $num_primes = 2;\n    $num_tests = $limit;\n    $prime_found\
    \ = false;\n\n    while ($num_tests > 1) {\n        if ($num_primes <= $num_tests)\
    \ {\n            $num_tests = $num_tests - 1;\n            $num_primes = $num_primes\
    \ + 1;\n        }\n        else {\n            $num_tests = $num_tests - $num_primes;\n\
    \            $num_primes = $num_primes + 1;\n        }\n\n        if ($num_tests\
    \ == 1) {\n            $prime_found = true;\n            break;\n        }\n \
    \   }\n\n    return $prime_found;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 =\
    \ $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n\
    \ % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    $n = abs($n);\n    $i = 1;\n    while($i <= sqrt($n)) {\n        if(!($n\
    \ % $i)) {\n            return false;\n        }\n        $i++;\n    }\n    return\
    \ true;\n}\n", "  if ($n < 2) {\n    return false;\n  }\n\n  // Trial division\
    \ algorithm from http://en.wikipedia.org/wiki/Primality_test#Trial_division_of_a_number\n\
    \  $n2 = $n / 2;\n  for ($i = 3; $i * $i <= $n2; $i++) {\n    if ($n % $i == 0)\
    \ {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "    if ($n < 2)\
    \ {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n\
    \        if ($n % $i == 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n\n  \
    \  // Trial division algorithm from http://en.wikipedia.org/wiki/Primality_test#Trial_division_of_a_number\n\
    \    $n2 = $n / 2;\n    $n3 = $n / 3;\n    $n5 = $n / 5;\n\n    // Assume no prime\
    \ number greater than sqrt(n).\n    $max_trial = sqrt($n);\n\n    for($i = 0;\
    \ $i < $max_trial; $i++) {\n        if ($n % $i == 0) {\n            return false;\n\
    \        }\n    }\n\n    // Check all odd numbers up to sqrt(n).\n    for($i =\
    \ 1; $i <= $n2; $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n\
    \        }\n    }\n\n    // Check all even numbers up to sqrt(n).\n    for($i\
    \ = 1; $i <= $n3; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n\n    // Check all numbers from 3 to sqrt(n).\n  \
    \  for($i = 3; $i <= $n5; $i += 2) {\n        if ($n % $i == 0) {\n          \
    \  return false;\n        }\n    }\n\n    return true;\n}\n", "    $n = abs($n);\n\
    \    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n       \
    \ return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n\
    \    $root = $this->sqrt($n);\n    for ($i = 3; $i <= $root; $i += 2) {\n    \
    \    if ($n % $i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    $n = abs($n);\n    $n = $n <= 1 ? 1 : ($n % 2 == 0 ? 3 : ($n\
    \ % 3 == 0 ? 6 : ($n % 5 == 0 ? 9 : ($n % 7 == 0 ? 12 : ($n % 11 == 0 ? 17 : ($n\
    \ % 13 == 0 ? 21 : ($n % 17 == 0 ? 25 : ($n % 19 == 0 ? 29 : ($n % 23 == 0 ? 33\
    \ : ($n % 29 == 0 ? 37 : ($n % 33 == 0 ? 41 : ($n % 37 == 0 ? 47 : ($n % 41 ==\
    \ 0 ? 53 : ($n % 47 == 0 ? 59 : ($n % 53 == 0 ? 63 : ($n % 59 == 0 ? 69 : ($n\
    \ % 63 == 0 ? 73 : ($n % 69 == 0 ? 79 : ($n % 79 == 0 ? 83 : ($n % 83 == 0 ? 87\
    \ : ($n % 87 == 0 ? 91 : ($n % 91 == 0 ? 97 : ($n % 97 == 0 ? 103 : ($n % 103\
    \ == 0 ? 107 : ($n % 107 == 0 ? 111 : ($n % 111 == 0 ? 117 : ($n % 117 == 0 ?\
    \ 123 : ($n % 123 == 0 ? 127 : ($n % 127 == 0 ? 131 : ($n % 131 == 0 ? 137 : ($n\
    \ % 137 == 0 ? 143 : ($n % 143 == 0 ? 147 : ($n % 147 == 0 ? 151 : ($n % 151 ==\
    \ 0 ? 157 : ($n % 157 == 0 ? 163 : ($n % 163 == 0 ? 167 : ($n % 167 == 0 ? 173\
    \ : ($n % 173 == 0 ? 177 : ($n % 177 == 0 ? 181 : ($n % 181 == 0 ? 187 : ($n %\
    \ 187 == 0 ? 193 : ($n % 193 == 0 ? 197 : ($n % 197 == 0 ? 201 : ($n % 201 ==\
    \ 0 ? 207 : ($n % 207 == 0 ? 211 : ($n % 211 == 0 ? 217 : ($n % 217 == 0 ? 223\
    \ : ($n % 223 == 0 ? 227 : ($n % 227 == 0 ? 235 : ($n % 235 == 0 ? 239 : ($n %\
    \ 239 == 0 ? 243 : ($n % 243 == 0 ? 247 : ($n % 247 == 0 ? 251 : ($n % 251 ==\
    \ 0 ? 257 : ($n % 257 == 0 ? 263 : ($n % 263 == 0 ? 267 : ($n % 267 == 0 ? 273\
    \ : ($n % 273 == 0 ? 277 || ($n % 277 == 0 ? 283 : ($n % 283 == 0 ? 287 : ($n\
    \ % 287 == 0 ? 293 : ($n % 293 == 0 ? 297 : ($n % 297 == 0 ? 301 : ($n % 301 ==\
    \ 0 ? 307 : ($n % 307 == 0 ? 313 : ($n % 313 == 0 ? 317 : ($n % 317 == 0 ? 323\
    \ : ($n % 323 == 0 ? ", "    $n = abs($n);\n    $n = $n <= 1 ? 1 : ($n % 2 ? 0\
    \ : $n);\n    $i = 1;\n    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n\
    \            return false;\n        }\n        $i++;\n    }\n    return true;\n\
    }\n", "    $n = abs($n);\n    $n = $n <= 1 ? 1 : ($n % 2 == 0 ? 3 : ($n % 3 ==\
    \ 0 ? 6 : ($n % 5 == 0 ? 9 : ($n % 7 == 0 ? 12 : ($n % 11 == 0 ? 17 : ($n % 13\
    \ == 0 ? 21 : ($n % 17 == 0 ? 25 : ($n % 19 == 0 ? 29 : ($n % 23 == 0 ? 33 : ($n\
    \ % 29 == 0 ? 37 : ($n % 33 == 0 ? 41 : ($n % 37 == 0 ? 47 : ($n % 41 == 0 ? 53\
    \ : ($n % 43 == 0 ? 59 : ($n % 47 == 0 ? 63 : ($n % 53 == 0 ? 69 : ($n % 59 ==\
    \ 0 ? 73 : ($n % 63 == 0 ? 79 : ($n % 79 == 0 ? 83 : ($n % 83 == 0 ? 89 : ($n\
    \ % 89 == 0 ? 97 : ($n % 97 == 0 ? 103 : ($n % 103 == 0 ? 113 : ($n % 113 == 0\
    \ ? 127 : ($n % 127 == 0 ? 131 : ($n % 131 == 0 ? 137 : ($n % 137 == 0 ? 143 :\
    \ ($n % 143 == 0 ? 151 : ($n % 151 == 0 ? 157 : ($n % 157 == 0 ? 163 : ($n % 163\
    \ == 0 ? 169 : ($n % 169 == 0 ? 173 : ($n % 173 == 0 ? 181 : ($n % 181 == 0 ?\
    \ 187 : ($n % 187 == 0 ? 193 : ($n % 193 == 0 ? 199 : ($n % 199 == 0 ? 203 : ($n\
    \ % 203 == 0 ? 211 : ($n % 211 == 0 ? 217 : ($n % 217 == 0 ? 223 : ($n % 223 ==\
    \ 0 ? 229 : ($n % 229 == 0 ? 233 : ($n % 233 == 0 ? 239 : ($n % 239 == 0 ? 243\
    \ : ($n % 243 == 0 ? 251 : ($n % 251 == 0 ? 257 : ($n % 257 == 0 ? 263 : ($n %\
    \ 263 == 0 ? 269 : ($n % 269 == 0 ? 273 : ($n % 273 == 0 ? 277 : ($n % 277 ==\
    \ 0 ? 283 : ($n % 283 == 0 ? 289 : ($n % 289 == 0 ? 293 : ($n % 293 == 0 ? 297\
    \ : ($n % 297 == 0 ? 303 : ($n % 303 == 0 ? 309 : ($n % 309 == 0 ? 313 : ($n %\
    \ 313 == 0 ? 317 : ($n % 317 == 0 ? 323 : ($n % 323 == 0 ? 327 : ($n % 327 ==\
    \ 0 ? 333 : ($n % 333 == 0 ? 337 : ($n % 337 == 0 ? 343 : ($n % 343 == 0 ? 347\
    \ : ($n % 347 == 0 ? 353 : ($n % 353 == 0 ? 359 : ($n % 359 == 0 ? 363 : ($n %\
    \ 363 == 0 ? 367 : ", "  if ($n < 2) {\n    return false;\n  }\n  if ($n == 2)\
    \ {\n    return true;\n  }\n  if ($n % 2 == 0) {\n    return false;\n  }\n  $root\
    \ = $this->sqrt($n);\n  for ($i = 3; $i <= $root; $i += 2) {\n    if ($n % $i\
    \ == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    if ($n\
    \ < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n\
    \        if ($n % $i == 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n    if\
    \ ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $root = $this->sqrt($n);\n    $f = 1;\n    for($i = 3; $i\
    \ <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            $f = false;\n\
    \            break;\n        }\n    }\n    return $f;\n}\n", "    if ($n < 2)\
    \ {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    if ($n <\
    \ 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $root2 = $this->sqrt($root);\n    for($i = 3; $i <= $root; $i += 2) {\n \
    \       if ($n % $i == 0) {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n    if\
    \ ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $root = $this->sqrt($n);\n    for ($i = 3; $i * $i <= $root;\
    \ $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n\n    // Trial division algorithm from http://primes.utm.edu/prove/prove2_3.html\n\
    \    // See also http://en.wikipedia.org/wiki/Trial_division\n    $nsqr = $n %\
    \ $n;\n    if ($nsqr == 0) {\n        return true;\n    }\n\n    $max = (int)\
    \ sqrt($n);\n    $i = 1;\n    while ($i <= $max) {\n        if ($n % $i == 0)\
    \ {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis algorithm is very inefficient. Try\
    \ it on `is_prime(101)` - it takes about 5 seconds to complete.\n<|/ c |>\n<|\
    \ c |>\n: I agree, it's very inefficient. I've added a faster algorithm that uses\
    \ trial division.\n<|/ c |>\n<| c |>\n: I added a faster algorithm that uses trial\
    \ division.\n<|/ c |>\n<| c |>\n: I added a faster algorithm that uses trial division.\n\
    <|/ c |>\n<| c |>\n: I added a faster algorithm that uses trial division.\n<|/\
    \ c |>\n<| a tags=php,primes,algorithm |>\n<code>", "    $n = abs($n);\n    if\
    \ ($n < 2)\n        return false;\n    if ($n == 2)\n        return true;\n  \
    \  if ($n % 2 == 0)\n        return false;\n    $root = $this->sqrt($n);\n   \
    \ $f = 1;\n    for($i = 3; $i <= $root; $i += 2)\n        if ($n % $i == 0)\n\
    \            return false;\n    return true;\n}\n", "    $n = abs($n);\n    if\
    \ ($n < 2)\n        return false;\n    if ($n == 2)\n        return true;\n  \
    \  if ($n % 2 == 0)\n        return false;\n    $root = $this->sqrt($n);\n   \
    \ for($i = 3; $i <= $root; $i += 2)\n        if ($n % $i == 0)\n            return\
    \ false;\n    return true;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 =\
    \ $this->sqrt($root);\n    $f = 1;\n    while($root2 != 1) {\n        $f = ($n\
    \ % $root) == 0 ? $f : false;\n        $root2 = $this->sqrt($root);\n    }\n \
    \   return $f ? $n : false;\n}", "    $n = abs($n);\n    if ($n < 2) return false;\n\
    \    if ($n == 2) return true;\n    if ($n % 2 == 0) return false;\n    $i = $n\
    \ - 1;\n    while($i >= 2) {\n        if ($n % $i == 0) return false;\n      \
    \  $i--;\n    }\n    return true;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $f = 1;\n\
    \    for($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n      \
    \      $f = false;\n            break;\n        }\n    }\n    return $f;\n}\n",
  "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return\
    \ true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root\
    \ = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <=\
    \ $root; $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n %\
    \ 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    for\
    \ ($i = 3; $i * $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2)\
    \ {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for ($i = 3; $i * $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    if\
    \ ($n <= 1) return false;\n    if ($n == 2) return true;\n    if ($n % 2 == 0)\
    \ return false;\n    if ($n % 3 == 0) return false;\n    if ($n % 5 == 0) return\
    \ false;\n    $i = 5;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0)\
    \ return false;\n        $i += 6;\n    }\n    return true;\n}\n", "    if ($n\
    \ < 2) {\n        return false;\n    }\n\n    // Check up to sqrt(n).\n    $limit\
    \ = $sqrt_limit;\n    for ($i = 3; $i <= $limit; $i += 2) {\n        if ($n %\
    \ $i == 0) {\n            return false;\n        }\n    }\n\n    // Check odd\
    \ factors up to sqrt(n).\n    $limit = $sqrt_limit;\n    for ($i = 3; $i <= $limit;\
    \ $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n       \
    \ }\n    }\n\n    // If we got this far, it's prime.\n    return true;\n}\n",
  "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return\
    \ true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root\
    \ = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <=\
    \ $root; $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n %\
    \ 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2\
    \ = $this->sqrt($root);\n    for($i = 3; $i <= $root; $i += 2) {\n        if ($n\
    \ % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n \
    \       return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n \
    \   }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for\
    \ ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n", "    if ($n <\
    \ 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n", "    if ($n <\
    \ 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $f = 1;\n    for($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i ==\
    \ 0) {\n            $f = false;\n            break;\n        }\n    }\n    return\
    \ $f;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2)\
    \ {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n\
    \    }\n    $root = $this->sqrt($n);\n    $i = 3;\n    while ($i <= $root) {\n\
    \        if ($n % $i == 0) {\n            return false;\n        }\n        $i\
    \ += 2;\n    }\n    return true;\n}\n", "    $n = abs($n);\n    $i = 1;\n    while($i\
    \ <= sqrt($n)) {\n        if($n % $i == 0) {\n            return false;\n    \
    \    }\n        $i++;\n    }\n    return true;\n}\n", "    if ($n <= 1)\n    \
    \    return false;\n    if ($n == 2)\n        return true;\n    if ($n % 2 ==\
    \ 0)\n        return false;\n    if ($n % 3 == 0)\n        return false;\n   \
    \ $i = 5; // max i such that i*i <= n\n    while($i <= sqrt($n)) {\n        if\
    \ ($n % $i == 0)\n            return false;\n        $i += 6;\n    }\n    return\
    \ true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n    if ($n ==\
    \ 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n\
    \    }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for($i\
    \ = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n", "    if ($n <=\
    \ 1)\n        return false;\n    if ($n == 2)\n        return true;\n    if ($n\
    \ % 2 == 0)\n        return false;\n    if ($n % 3 == 0)\n        return false;\n\
    \    \n    $limit = $n - 1;\n    \n    // Trial division by primes less than the\
    \ square root of the number.\n    for ($i = 3; $i * $i <= $limit; $i += 2) {\n\
    \        if ($n % $i == 0)\n            return false;\n    }\n    \n    // If\
    \ we get this far, we've found a prime number.\n    return true;\n}\n", "    if\
    \ ($n < 2) {\n        return false;\n    }\n\n    // Test if n is prime.\n   \
    \ if ($n == 2) {\n        return true;\n    }\n\n    // Test if n is even.\n \
    \   if ($n % 2 == 0) {\n        return false;\n    }\n\n    // Test if n is odd.\n\
    \    if ($n % 2 == 1) {\n        return true;\n    }\n\n    // Find square root\
    \ of n.\n    $sqrtn = sqrt($n);\n\n    // Test if n is prime.\n    if ($sqrtn\
    \ % 2 == 0) {\n        return false;\n    }\n\n    // Test if n is odd.\n    if\
    \ ($sqrtn % 2 == 1) {\n        return true;\n    }\n\n    // If n is composite.\n\
    \    // Find prime factors of n.\n    $factors = array();\n    for ($i = 3; $i\
    \ <= $sqrtn; $i += 2) {\n        if ($n % $i == 0) {\n            $factors[] =\
    \ $i;\n        }\n    }\n\n    // If n is composite and has no factors other than\
    \ 1 and itself,\n    // then n is prime.\n    if (count($factors) == 1 && $factors[0]\
    \ == $n) {\n        return true;\n    }\n\n    // If n is composite and has factors\
    \ other than 1 and itself, then\n    // n is not prime.\n    if (count($factors)\
    \ > 1 && count(array_unique($factors)) == count($factors)) {\n        return false;\n\
    \    }\n\n    // If n is composite and has factors other than 1 and itself, then\n\
    \    // n is not prime.\n    if (count($factors) > 1 && count(array_unique($factors))\
    \ > 1) {\n        return false;\n    }\n\n    // If n is composite and has factors\
    \ other than 1 and itself, then\n    // n is not prime.\n    if (count($factors)\
    \ > 1 && count(array_unique($factors)) > 2) {\n        return false;\n    }\n\n\
    \    // If n is composite and has factors other than 1 and itself, then\n    //\
    \ n is not prime.\n    if (count($factors) > 2 && count(array_unique($factors))\
    \ > 2) {\n        return false;\n    }\n\n    // If n is composite and has factors\
    \ other than 1 and itself, then\n    // n is not prime.\n    if (count($factors)\
    \ > 3 && count(array_unique($factors)) > 3) {\n        return false;\n    }\n\n\
    \    // If n is composite and has factors other than 1 and itself, then\n    //\
    \ n is not prime.\n    if (count($factors) > 4 && count(array_unique($factors))\
    \ > 4) {\n        return false;\n    }\n\n    // If n is composite and has factors\
    \ other than 1 and itself, then\n    // n is not prime.\n    if (count($factors)\
    \ > 5 && count(array_unique($factors)) > 5) {\n        return false;\n    }\n\n\
    \    // If n is composite and has factors other than ", "    $n = abs($n);\n \
    \   if ($n < 2)\n        return false;\n    if ($n == 2)\n        return true;\n\
    \    if ($n % 2 == 0)\n        return false;\n    if ($n % 3 == 0)\n        return\
    \ false;\n    $i = 3;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0)\n\
    \            return false;\n        $i += 2;\n    }\n    return true;\n}\n", " \
    \   if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return\
    \ true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root\
    \ = $this->sqrt($n);\n    for($i = 3; $i <= $root; $i += 2) {\n        if ($n\
    \ % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n \
    \       return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n \
    \   }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for\
    \ ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    $n = abs($n);\n    if\
    \ ($n < 2) return false;\n    if ($n == 2) return true;\n    if ($n % 2 == 0)\
    \ return false;\n    if ($n % 3 == 0) return false;\n    if ($n % 5 == 0) return\
    \ false;\n    $m = $n / 5;\n    if ($m == 2) return true;\n    if ($m == 3) return\
    \ true;\n    if ($m == 5) return true;\n    if ($m == 7) return true;\n    if\
    \ ($m == 11) return true;\n    if ($m == 13) return true;\n    if ($m == 17) return\
    \ true;\n    if ($m == 19) return true;\n    if ($m == 23) return true;\n    if\
    \ ($m == 29) return true;\n    if ($m == 31) return true;\n    if ($m == 37) return\
    \ true;\n    if ($m == 43) return true;\n    if ($m == 59) return true;\n    if\
    \ ($m == 61) return true;\n    if ($m == 67) return true;\n    if ($m == 71) return\
    \ true;\n    if ($m == 73) return true;\n    if ($m == 79) return true;\n    if\
    \ ($m == 83) return true;\n    if ($m == 89) return true;\n    if ($m == 97) return\
    \ true;\n    if ($m == 101) return true;\n    if ($m == 103) return true;\n  \
    \  if ($m == 107) return true;\n    if ($m == 109) return true;\n    if ($m ==\
    \ 113) return true;\n    if ($m == 127) return true;\n    if ($m == 131) return\
    \ true;\n    if ($m == 137) return true;\n    if ($m == 139) return true;\n  \
    \  if ($m == 147) return true;\n    if ($m == 151) return true;\n    if ($m ==\
    \ 157) return true;\n    if ($m == 163) return true;\n    if ($m == 167) return\
    \ true;\n    if ($m == 173) return true;\n    if ($m == 179) return true;\n  \
    \  if ($m == 181) return true;\n    if ($m == 191) return true;\n    if ($m ==\
    \ 197) return true;\n    if ($m == 199) return true;\n    if ($m == 211) return\
    \ true;\n    if ($m == 223) return true;\n    if ($m == 227) return true;\n  \
    \  if ($m == 229) return true;\n    if ($m == 233) return true;\n    if ($m ==\
    \ 239) return true;\n    if ($m == 241) return true;\n    if ($m == 251) return\
    \ true;\n    if ($m == 253) return true;\n    if ($m == 257) return true;\n  \
    \  if ($m == 263) return true;\n    if ($m == 269) return true;\n    if ($m ==\
    \ 271) return true;\n    if ($m == ", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 =\
    \ $this->sqrt($root);\n    $f = 1;\n    $s = 0;\n    while ($root2 != $root) {\n\
    \        $s = $s + 1;\n        $f = $f * $root2;\n        $root2 = $this->sqrt($root2);\n\
    \    }\n    if ($s == 0) {\n        return false;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return true;\n    }\n    $f = 1;\n    $s = 0;\n    while ($root2\
    \ != $root) {\n        $s = $s + 1;\n        $f = $f * $root2;\n        $root2\
    \ = $this->sqrt($root2);\n    }\n    if ($s == 0) {\n        return true;\n  \
    \  }\n    return false;\n}\n", "    if ($n < 2) {\n        return false;\n   \
    \ }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n\
    \        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    if ($n <\
    \ 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n\
    \        if ($n % $i == 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n\n  \
    \  // Trial division algorithm from https://en.wikipedia.org/wiki/Primality_test#Trial_division\n\
    \    $limit = $n - 1;\n    $num_primes = 0;\n    $num_composites = 0;\n    $composites\
    \ = 0;\n\n    // Test for factors up to sqrt($n)\n    for ($i = 2; $i <= $limit;\
    \ $i++) {\n        if ($n % $i == 0) {\n            $num_primes++;\n        }\
    \ else {\n            $num_composites++;\n            $composites++;\n       \
    \ }\n    }\n\n    // If $num_composites is odd, then $n is prime\n    if ($num_composites\
    \ % 2 == 1) {\n        return true;\n    }\n\n    // If $num_primes is odd, then\
    \ $n is composite\n    if ($num_primes % 2 == 1) {\n        return false;\n  \
    \  }\n\n    // If $num_primes is even, then $n is composite if $num_composites\
    \ is even\n    if ($num_primes % 2 == 0 && $num_composites % 2 == 0) {\n     \
    \   return true;\n    }\n\n    // If $num_primes is odd, then $n is prime if $num_composites\
    \ is odd\n    if ($num_primes % 2 == 1) {\n        return false;\n    }\n\n  \
    \  // If $num_primes is even, then $n is prime if $num_composites is even\n  \
    \  if ($num_primes % 2 == 0 && $num_composites % 2 == 1) {\n        return true;\n\
    \    }\n\n    // If $num_primes is odd, then $n is prime if $num_composites is\
    \ odd\n    if ($num_primes % 2 == 1) {\n        return false;\n    }\n\n    //\
    \ If $num_primes is even, then $n is prime if $num_composites is even\n    if\
    \ ($num_primes % 2 == 0 && $num_composites % 2 == 1) {\n        return true;\n\
    \    }\n\n    // If $num_primes is odd, then $n is prime if $num_composites is\
    \ odd\n    if ($num_primes % 2 == 1) {\n        return false;\n    }\n\n    //\
    \ If $num_primes is even, then $n is prime if $num_composites is even\n    if\
    \ ($num_primes % 2 == 0 && $num_composites % 2 == 1) {\n        return true;\n\
    \    }\n\n    // If $num_primes is odd, then $n is prime if $num_composites is\
    \ odd\n    if ($num_primes % 2 == 1) {\n        return false;\n    }\n\n    //\
    \ If $num_primes is even, then $n is prime if $num_composites is even\n    if\
    \ ($num_primes % 2 == 0 && $num_composites % 2 == 1) {\n        return true;\n\
    \    }\n\n    // If $num_primes is odd, then $n is prime if $num_composites is\
    \ odd\n    if ($num_primes % 2 == 1) {\n        return false;\n    }", "    $n\
    \ = abs($n);\n    $n = $n <= 1 ? 1 : ($n % 2 == 0 ? 3 : ($n % 3 == 0 ? 6 : ($n\
    \ % 5 == 0 ? 9 : ($n % 7 == 0 ? 12 : false))));\n    return $n !== 1;\n}\n", " \
    \   if ($n < 2) {\n        return false;\n    }\n\n    // Sieve of Eratosthenes\
    \ (http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n    $primes = array();\n\
    \    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n     \
    \       $primes[] = $i;\n        }\n    }\n\n    return count($primes) == 1;\n\
    }\n", "    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n \
    \       return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n \
    \   }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for\
    \ ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n\n    // Test for divisibility by 2, 3, 5, and 7.\n\
    \    if ($n % 2 == 0 || $n % 3 == 0 || $n % 5 == 0 || $n % 7 == 0) {\n       \
    \ return false;\n    }\n\n    // If n is less than or equal to 3, then 2 is the\
    \ only possible factor.\n    if ($n <= 3) {\n        return true;\n    }\n\n \
    \   // Set $i to sqrt(n) to avoid repeated square roots.\n    $i = 4;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            return false;\n\
    \        }\n        $i += 2;\n    }\n\n    return true;\n}\n", "    if ($n < 2)\
    \ {\n        return false;\n    }\n\n    // Trial division algorithm from https://en.wikipedia.org/wiki/Primality_test#Trial_division_of_a_prime_number\n\
    \    $limit = $n - 1;\n    $sqrtLimit = $limit * $limit;\n    $m = $limit;\n \
    \   do {\n        if ($n % $m === 0) {\n            return false;\n        }\n\
    \        $m++;\n    } while ($m <= $sqrtLimit);\n    return true;\n}\n", "   \
    \ $n = abs($n);\n    $m = 1;\n    while ($m <= $n) {\n        if ($n % $m == 0)\
    \ {\n            return false;\n        }\n        $m++;\n    }\n    return true;\n\
    }\n", "  if ($n < 2) {\n    return false;\n  }\n  if ($n == 2) {\n    return true;\n\
    \  }\n  if ($n % 2 == 0) {\n    return false;\n  }\n  $root = $this->sqrt($n);\n\
    \  for ($i = 3; $i <= $root; $i += 2) {\n    if ($n % $i == 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "    $n = abs($n);\n    if ($n < 2)\
    \ return false;\n    if ($n == 2) return true;\n    if ($n % 2 == 0) return false;\n\
    \    if ($n % 3 == 0) return false;\n    if ($n % 5 == 0) return false;\n    $m\
    \ = $n / 5;\n    $k = floor($m);\n    $lcm = bcmul($k, $m);\n    $is_prime = true;\n\
    \    for ($i = 5; $i <= $k; $i++) {\n        if ($i % $i == 0 || $i % $lcm  ==\
    \ 0) {\n            $is_prime = false;\n            break;\n        }\n    }\n\
    \    return $is_prime;\n}\n", "    $n = abs($n);\n    $n = $n <= 1 ? 1 : ($n %\
    \ 2 == 0 ? 3 : ($n % 3 == 0 ? 6 : ($n % 5 == 0 ? 9 : ($n % 7 == 0 ? 12 : false)))));\n\
    \    return $n <= 1;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n\
    \    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n   \
    \     return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    if ($n <\
    \ 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return true;\n\
    \    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n\
    \        if ($n % $i == 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n    if\
    \ ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ false;\n    }\n    $root = $this->sqrt($n);\n    $i = 3;\n    while ($i <= $root)\
    \ {\n        if ($n % $i == 0) {\n            return false;\n        }\n     \
    \   $i += 2;\n    }\n    return true;\n}\n", "    $n = abs($n);\n    $n = $n <=\
    \ 1 ? 1 : ($n % 2 == 0 ? 3 : ($n % 3 == 0 ? 5 : $n));\n    $i = 1;\n    while($i\
    \ <= $n) {\n        if(!($n % $i)) {\n            return false;\n        }\n \
    \       $i++;\n    }\n    return true;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n %\
    \ 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2\
    \ = $this->sqrt($root);\n    for($i = 3; $i <= $root; $i += 2) {\n        if ($n\
    \ % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    $n = abs($n);\n    $i = 1;\n    while($i <= sqrt($n)) {\n        if($n\
    \ % $i == 0) {\n            return false;\n        }\n        $i++;\n    }\n \
    \   return true;\n}\n", "    if ($n < 2) {\n        return false;\n    }\n   \
    \ if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n      \
    \  return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}", "    $n = abs($n);\n\
    \    $i = 1;\n    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n      \
    \      return false;\n        }\n        $i++;\n    }\n    return true;\n}\n",
  "  if ($n < 2) {\n    return false;\n  }\n  if ($n == 2) {\n    return true;\n \
    \ }\n  if ($n % 2 == 0) {\n    return false;\n  }\n  $i = 3;\n  while (true) {\n\
    \    if ($i % 2 == 0) {\n      return false;\n    }\n    $i += 2;\n    if ($i\
    \ > $n) {\n      return false;\n    }\n  }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
