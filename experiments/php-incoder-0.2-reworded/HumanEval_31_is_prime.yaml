name: HumanEval_31_is_prime
language: php
prompt: "<?php\n// Return true if a given number is prime, and false otherwise.\n\
  // >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
  // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
  // false\n// >>> is_prime(1)\n// false\nfunction is_prime($n) {\n"
tests: "function candidate(...$args) {\n    return is_prime(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(6) !== false) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(101) !== true) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(11) !== true) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(13441) !== true) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(61) !== true) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(4) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(1) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
  \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(11) !==\
  \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17) !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(85) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(77) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(255379) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = abs($n);\n    $i = 1;\n    while($i <= sqrt($n)) {\n     \
    \   if($n % $i == 0) {\n            return false;\n        }\n        $i++;\n\
    \    }\n    return true;\n}\n", "    if ($n < 2) {\n        return false;\n  \
    \  }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n\
    \        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    $n = abs($n);\n\
    \    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n       \
    \ return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n\
    \    $root = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for($i =\
    \ 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    $n = abs($n);\n\
    \    if ($n < 2)\n        return false;\n    if ($n == 2)\n        return true;\n\
    \    if ($n % 2 == 0)\n        return false;\n    $root = $this->sqrt($n);\n \
    \   $f = 1;\n    for($i = 3; $i <= $root; $i += 2)\n        if ($n % $i == 0)\n\
    \            $f = false;\n    return $f;\n}\n", "    if ($n < 2) {\n        return\
    \ false;\n    }\n\n    // Trial division check\n    if ($n % 2 == 0) {\n     \
    \   return false;\n    }\n\n    // Sieve of Eratosthenes\n    $limit = (int) sqrt($n);\n\
    \    for ($i = 2; $i <= $limit; $i++) {\n        if ($n % $i == 0) {\n       \
    \     return false;\n        }\n    }\n\n    return true;\n}\n", "    $n = abs($n);\n\
    \    if ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n       \
    \ return true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n\
    \    $root = $this->sqrt($n);\n    $f = 1;\n    for($i = 3; $i <= $root; $i +=\
    \ 2) {\n        if ($n % $i == 0) {\n            $f = false;\n            break;\n\
    \        }\n    }\n    return $f;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    $root2 =\
    \ $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n\
    \ % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if ($n <= 1) return false;\n    if ($n == 2) return true;\n    if ($n\
    \ % 2 == 0) return false;\n    if ($n % 3 == 0) return false;\n    if ($n % 5\
    \ == 0) return false;\n    if ($n % 7 == 0) return false;\n    if ($n % 11 ==\
    \ 0) return false;\n    if ($n % 13 == 0) return false;\n    if ($n % 17 == 0)\
    \ return false;\n    if ($n % 19 == 0) return false;\n    if ($n % 23 == 0) return\
    \ false;\n    if ($n % 29 == 0) return false;\n    if ($n % 31 == 0) return false;\n\
    \    if ($n % 37 == 0) return false;\n    if ($n % 41 == 0) return false;\n  \
    \  if ($n % 43 == 0) return false;\n    if ($n % 47 == 0) return false;\n    if\
    \ ($n % 53 == 0) return false;\n    if ($n % 59 == 0) return false;\n    if ($n\
    \ % 61 == 0) return false;\n    if ($n % 67 == 0) return false;\n    if ($n %\
    \ 71 == 0) return false;\n    if ($n % 73 == 0) return false;\n    if ($n % 79\
    \ == 0) return false;\n    if ($n % 83 == 0) return false;\n    if ($n % 89 ==\
    \ 0) return false;\n    if ($n % 97 == 0) return false;\n    if ($n % 101 == 0)\
    \ return false;\n    if ($n % 103 == 0) return false;\n    if ($n % 107 == 0)\
    \ return false;\n    if ($n % 111 == 0) return false;\n    if ($n % 117 == 0)\
    \ return false;\n    if ($n % 121 == 0) return false;\n    if ($n % 127 == 0)\
    \ return false;\n    if ($n % 131 == 0) return false;\n    if ($n % 137 == 0)\
    \ return false;\n    if ($n % 141 == 0) return false;\n    if ($n % 147 == 0)\
    \ return false;\n    if ($n % 151 == 0) return false;\n    if ($n % 157 == 0)\
    \ return false;\n    if ($n % 161 == 0) return false;\n    if ($n % 167 == 0)\
    \ return false;\n    if ($n % 173 == 0) return false;\n    if ($n % 179 == 0)\
    \ return false;\n    if ($n % 181 == 0) return false;\n    if ($n % 187 == 0)\
    \ return false;\n    if ($n % 191 == 0) return false;\n    if ($n % 193 == 0)\
    \ return false;\n    if ($n % 197 == 0) return false;\n    if ($n % 199 == 0)\
    \ return false;\n    if ($n % 201 == 0) return false;\n    if ($n % 207 == 0)\
    \ return false;\n    if ($n % 211 == 0) return false;\n    if ($n % 213 == 0)\
    \ return false;\n    if ($n % 217 == 0) return false;\n    if ($n % 221 == 0)\
    \ return false;\n    if ($n % 227 == 0) return false;\n    if ($n % 229", "  \
    \  if ($n < 2) {\n        return false;\n    }\n\n    // Trial division avoids\
    \ problems with negative numbers.\n    if ($n < 7) {\n        return $n % 2 ===\
    \ 0;\n    }\n\n    // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n\
    \    // If any of these numbers is composite then return false.\n    for ($i =\
    \ 2; $i <= sqrt($n); $i++) {\n        if ($n % $i === 0) {\n            return\
    \ false;\n        }\n    }\n\n    return true;\n}\n", "    if ($n < 2) {\n   \
    \     return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n\
    \    if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <= $root; $i += 2) {\n\
    \        if ($n % $i == 0) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "    $n = abs($n);\n    if ($n < 2)\n        return false;\n\
    \    if ($n == 2)\n        return true;\n    if ($n % 2 == 0)\n        return\
    \ false;\n    $root = $this->sqrt($n);\n    for($i = 3; $i <= $root; $i += 2)\n\
    \        if ($n % $i == 0)\n            return false;\n    return true;\n}\n",
  "    if ($n < 2) {\n        return false;\n    }\n\n    // Test for primeness up\
    \ to sqrt(n)\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        if ($n % $i\
    \ == 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n",
  "    $n = abs($n);\n    if ($n < 2)\n        return false;\n    if ($n == 2)\n \
    \       return true;\n    if ($n % 2 == 0)\n        return false;\n    $root =\
    \ $this->sqrt($n);\n    for ($i = 3; $i <= $root; $i += 2) {\n        if ($n %\
    \ $i == 0)\n            return false;\n    }\n    return true;\n}\n", "    if\
    \ ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return\
    \ true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root\
    \ = $this->sqrt($n);\n    $f = 1;\n    for($i = 3; $i <= $root; $i += 2) {\n \
    \       if ($n % $i == 0) {\n            $f = false;\n            break;\n   \
    \     }\n    }\n    return $f;\n}\n", "    if ($n < 2) {\n        return false;\n\
    \    }\n    if ($n == 2) {\n        return true;\n    }\n    if ($n % 2 == 0)\
    \ {\n        return false;\n    }\n    $root = $this->sqrt($n);\n    for ($i =\
    \ 3; $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if ($n < 2) {\n     \
    \   return false;\n    }\n    if ($n == 2) {\n        return true;\n    }\n  \
    \  if ($n % 2 == 0) {\n        return false;\n    }\n    $root = $this->sqrt($n);\n\
    \    for ($i = 3; $i * $i <= $root; $i += 2) {\n        if ($n % $i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    if\
    \ ($n <= 1)\n        return false;\n    if ($n == 2)\n        return true;\n \
    \   if ($n % 2 == 0)\n        return false;\n    $root = $this->sqrt($n);\n  \
    \  for($i = 3; $i <= $root; $i += 2)\n        if ($n % $i == 0)\n            return\
    \ false;\n    return true;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis\
    \ doesn't work for me. `is_prime(6)` returns true, but `is_prime(7)` returns false.\
    \ `is_prime(8)` returns true, but `is_prime(9)` returns false. `is_prime(10)`\
    \ returns true, but `is_prime(11)` returns false. `is_prime(12)` returns true,\
    \ but `is_prime(13)` returns false. `is_prime(14)` returns true, but `is_prime(15)`\
    \ returns false. `is_prime(16)` returns true, but `is_prime(17)` returns false.\
    \ `is_prime(18)` returns true, but `is_prime(19)` returns false. `is_prime(20)`\
    \ returns true, but `is_prime(21)` returns false. `is_prime(22)` returns true,\
    \ but `is_prime(23)` returns false. `is_prime(24)` returns true, but `is_prime(25)`\
    \ returns false. `is_prime(26)` returns true, but `is_prime(27)` returns false.\
    \ `is_prime(28)` returns true, but `is_prime(29)` returns false. `is_prime(30)`\
    \ returns true, but `is_prime(31)` returns false. `is_prime(32)` returns true,\
    \ but `is_prime(33)` returns false. `is_prime(34)` returns true, but `is_prime(35)`\
    \ returns false. `is_prime(36)` returns true, but `is_prime(37)` returns false.\
    \ `is_prime(38)` returns true, but `is_prime(39)` returns false. `is_prime(40)`\
    \ returns true, but `is_prime(41)` returns false. `is_prime(42)` returns true,\
    \ but `is_prime(43)` returns false. `is_prime(44)` returns true, but `is_prime(45)`\
    \ returns false. `is_prime(46)` returns true, but `is_prime(47)` returns false.\
    \ `is_prime(48)` returns true, but `is_prime(49)` returns false. `is_prime(50)`\
    \ returns true, but `is_prime(51)", "  if ($n < 2) {\n    return false;\n  }\n\
    \n  // Trial division algorithm from http://primes.utm.edu/prove/prove2_3.html\n\
    \  $m = $n;\n  for ($i = 3; $i <= sqrt($n); $i += 2) {\n    if ($n % $i == 0)\
    \ {\n      $m = $i . ' ' . $m;\n    }\n  }\n\n  return $m == $n;\n}\n", "    if\
    \ ($n < 2) {\n        return false;\n    }\n    if ($n == 2) {\n        return\
    \ true;\n    }\n    if ($n % 2 == 0) {\n        return false;\n    }\n    $root\
    \ = $this->sqrt($n);\n    $root2 = $this->sqrt($root);\n    for ($i = 3; $i <=\
    \ $root; $i += 2) {\n        if ($n % $i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
