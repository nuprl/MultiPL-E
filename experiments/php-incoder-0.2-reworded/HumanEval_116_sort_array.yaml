name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sorted = array();\n    foreach ($arr as $key => $val) {\n    \
    \    $sorted[$key] = $val;\n    }\n    asort($sorted);\n    return $sorted;\n\
    }\n", "    foreach ($arr as $key => $val) {\n        if ($val < 0) {\n       \
    \     $arr[$key] = -$val;\n        }\n    }\n    array_multisort(array_count_values($arr),\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>", "    $result = array();\n    foreach ($arr as $key => $value) {\n\
    \        $result[$key] = $value;\n    }\n    asort($result);\n    return $result;\n\
    }\n", "    foreach ($arr as $key => $val) {\n        if ($val < 0) {\n       \
    \     $arr[$key] = -$val;\n        }\n    }\n    asort($arr);\n    return $arr;\n\
    }\n", "    $sorted = array();\n    foreach ($arr as $key => $value) {\n      \
    \  $binary = '';\n        while ($value > 0) {\n            $binary .= str_pad(decbin($value),\
    \ 8, '0', STR_PAD_LEFT);\n            $value -= 1;\n        }\n        $sorted[$key]\
    \ = strlen($binary);\n    }\n    asort($sorted);\n    return array_values($sorted);\n\
    }", "    sort($arr, function($a, $b) {\n        $ones = bindec($a . \"1\");\n\
    \        $ones = $ones < 0 ? -$ones : $ones;\n        $ones = $ones > 0 ? $ones\
    \ : 1;\n        $ones = $ones * -1;\n        $twos = bindec($b . \"1\");\n   \
    \     $twos = $twos < 0 ? -$twos : $twos;\n        $twos = $twos > 0 ? $twos :\
    \ 1;\n        $twos = $twos * -1;\n        return $ones - $twos;\n    });\n  \
    \  return $arr;\n}\n", "    $result = array();\n    foreach ($arr as $key => $val)\
    \ {\n        $result[$key] = $val;\n    }\n    array_multisort($result, SORT_DESC,\
    \ $arr);\n    return $arr;\n}", "    $sorted = array();\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $ones = array_count_values(str_split(decbin($arr[$i])));\n\
    \        $sorted[$i] = $ones['1'] > $ones['0'] ? $ones['1'] : $ones['0'];\n  \
    \  }\n    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr = array(1,5,2,3,4);\n$arr = array_count_values($arr);\n\
    arsort($arr);\nprint_r($arr);", "    $len = count($arr);\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $ones = $arr[$i];\n        $j = 0;\n        while ($j++\
    \ < $len) {\n            if ($ones & 1) {\n                $tmp = $arr[$j];\n\
    \                $arr[$j] = $arr[$i];\n                $arr[$i] = $tmp;\n    \
    \        }\n            $ones = $arr[$j];\n        }\n    }\n    return $arr;\n\
    }\n", "    $sorted = array();\n    foreach ($arr as $key => $val) {\n        $bin\
    \ = decbin($val);\n        $len = strlen($bin);\n        $count = 0;\n       \
    \ for ($i = 0; $i < $len; $i++) {\n            $count += $bin[$i] == '1';\n  \
    \      }\n        $sorted[$key] = $count ? $val : $key;\n    }\n    return $sorted;\n\
    }\n", "    $result = array();\n    foreach ($arr as $key => $val) {\n        $result[$key]\
    \ = $val;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}\n", "    sort($arr);\n    return $arr;\n}\n",
  "    $result = array();\n    $ones = array();\n    $zeros = array();\n    foreach\
    \ ($arr as $item) {\n        if ($item == 1) {\n            $ones[] = $item;\n\
    \        } else {\n            $zeros[] = $item;\n        }\n    }\n    if (count($ones)\
    \ > 0) {\n        $result = array_merge($ones, $zeros);\n    }\n    sort($result);\n\
    \    return $result;\n}", "    $result = array();\n    foreach ($arr as $key =>\
    \ $val) {\n        $result[$key] = $val;\n    }\n    array_multisort($result,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n", "    $sorted = array();\n    foreach\
    \ ($arr as $key => $value) {\n        $sorted[$key] = $value;\n    }\n    array_multisort(array_count_values($sorted),\
    \ SORT_DESC, $sorted);\n    return $sorted;\n}\n", "    $sorted = array();\n \
    \   foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n     \
    \   $len = strlen($bin);\n        $count = 0;\n        for ($i = 0; $i < $len;\
    \ $i++) {\n            $count += $bin[$i] === '1';\n        }\n        $sorted[$key]\
    \ = $count;\n    }\n    asort($sorted);\n    return array_values($sorted);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_array(array(1,5,2,3,4))`.\n\
    <|/ c |>\n<| c |>\nI fixed it\n<|/ c |>\n<| c |>\nThis still doesn't work. Try\
    \ it with `sort_array(array(1,5,2,3,4))`.\n<|/ c |>\n<| c |>\nI fixed it\n<|/\
    \ c |>\n<| c |>\nThis still doesn't work. Try it with `sort_array(array(1,5,2,3,4))`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php", "    $sorted = array();\n    $ones\
    \ = array();\n    $zeros = array();\n    foreach ($arr as $item) {\n        if\
    \ ($item == 1) {\n            $ones[] = $item;\n        } else {\n           \
    \ $zeros[] = $item;\n        }\n    }\n    foreach ($ones as $item) {\n      \
    \  $pos = array_search($item, $zeros);\n        $sorted[] = $zeros[$pos];\n  \
    \      unset($zeros[$pos]);\n    }\n    foreach ($zeros as $item) {\n        $pos\
    \ = array_search($item, $ones);\n        $sorted[] = $ones[$pos];\n        unset($ones[$pos]);\n\
    \    }\n    return $sorted;\n}\n", "    $sorted = array();\n    foreach ($arr\
    \ as $key => $value) {\n        $binary = '';\n        for ($i = 0; $i < strlen($value);\
    \ $i++) {\n            $binary .= str_pad(decbin($value[$i]), 8, '0', STR_PAD_LEFT);\n\
    \        }\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n      \
    \  $binary = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0',\
    \ STR_PAD_LEFT);\n        $binary = substr($binary, -8);\n        $binary = str_pad($binary,\
    \ 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, 0, 8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, 8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = ", "    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $result[$key] = $value;\n    }\n    array_multisort(array_count_values($result),\
    \ SORT_DESC, $result);\n    return $result;\n}\n", "    $ones = array_count_values($arr);\n\
    \    $sorted = array();\n    foreach ($ones as $key => $val) {\n        if ($val\
    \ == 1) {\n            $sorted[] = $key;\n        } else {\n            $sorted[]\
    \ = abs($key);\n        }\n    }\n    return $sorted;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
