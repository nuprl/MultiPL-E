language: php
name: HumanEval_87_get_row
results:
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_map(function($row)\
    \ {\n    return array_map(function($col) {\n      return $col;\n    }, $row);\n\
    \  }, $lst);\n  $rows = array_filter($rows, function($row) {\n    return !empty($row);\n\
    \  });\n  $rows = array_filter($rows, function($row) {\n    return !in_array($x,\
    \ $row);\n  });\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpomsbxrbd.php on line 89

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = $row[$x];\n\
    \        foreach ($row as $col) {\n            if ($col != $row_x) {\n       \
    \         $row_y = $col;\n            }\n        }\n        $rows[] = array($row_x,\
    \ $row_y);\n    }\n    sort($rows);\n    foreach ($rows as $row) {\n        sort($row);\n\
    \    }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft2t781d.php:41\n\
    Stack trace:\n#0 /tmp/tmpft2t781d.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpft2t781d.php\
    \ on line 41\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yapc_01.php:30\n\
    Stack trace:\n#0 /tmp/tmp7yapc_01.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7yapc_01.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_column($rows, '0'), SORT_DESC, $rows);\n    return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbr_935j.php:31\n\
    Stack trace:\n#0 /tmp/tmpjbr_935j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjbr_935j.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_map(function ($row) {\n            return array_reverse($row);\n\
    \        }, $rows), SORT_DESC, SORT_NUMERIC, $rows);\n    return $rows;\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfh7layl.php:33\n\
    Stack trace:\n#0 /tmp/tmpcfh7layl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcfh7layl.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($value) {\n        return $value > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function($row) {\n        return array_slice($row, 0, $x);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_slice($row,\
    \ $x, count($row));\n    }, $rows);\n    $rows = array_map(function($row) {\n\
    \        return array_slice($row, count($row));\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, count($row));\n    }, $rows);\n    return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmp543uo9ho.php on line 28\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmp543uo9ho.php on line 31\n\n\
    Warning: array_slice() expects parameter 1 to be array, null given in /tmp/tmp543uo9ho.php\
    \ on line 31\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp543uo9ho.php on line 34\n\nWarning: array_slice()\
    \ expects parameter 1 to be array, null given in /tmp/tmp543uo9ho.php on line\
    \ 34\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp543uo9ho.php on line 37\n\nWarning: array_slice() expects\
    \ parameter 1 to be array, null given in /tmp/tmp543uo9ho.php on line 37\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp543uo9ho.php:47\nStack trace:\n\
    #0 /tmp/tmp543uo9ho.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp543uo9ho.php\
    \ on line 47\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $cols = array_count_values($lst[1]);\n    $rows = array_keys($rows);\n  \
    \  $cols = array_keys($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwmfsdibz.php on line 76

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin3gfudj.php:30\n\
    Stack trace:\n#0 /tmp/tmpin3gfudj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpin3gfudj.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $rows = array_map(function($row) use ($lst) {\n        return array_slice($row,\
    \ 0, $x);\n    }, $lst);\n    sort($rows);\n    sort($rows, SORT_NUMERIC);\n \
    \   return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfr9m_qij.php:32\n\
    Stack trace:\n#0 /tmp/tmpfr9m_qij.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpfr9m_qij.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map('count',\
    \ $lst));\n  $rows = array_filter($rows, function($v) { return $v > 0; });\n \
    \ $rows = array_keys($rows);\n  $rows = array_reverse($rows);\n  $rows = array_slice($rows,\
    \ 0, $x);\n  $rows = array_map(function($v) { return array_slice($v, 0, $x); },\
    \ $lst);\n  $rows = array_map(function($v) { return array_slice($v, 0, $x); },\
    \ $rows);\n  return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7db5s033.php:33\n\
    Stack trace:\n#0 /tmp/tmp7db5s033.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7db5s033.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = array();\n    foreach ($lst as $row) {\n        $row_cols = array();\n\
    \        foreach ($row as $col) {\n            if ($col == $x) {\n           \
    \     $row_cols[] = array(0, $col);\n            }\n        }\n        $rows[]\
    \ = $row_cols;\n    }\n    foreach ($rows as $row) {\n        sort($row);\n  \
    \      sort($cols);\n        $rows[] = $row;\n        $cols[] = $cols;\n    }\n\
    \    return $rows;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr=array(\n    array(1,2,3,4,5,6),\n    array(1,2,3,4,1,6),\n    array(1,2,3,4,5,1)\n\
    );\n$x=1;\n$result=array();\nforeach($arr as $row){\n    foreach($row as $col){\n\
    \        if($col==$x){\n            $result[]=array($row,$col);\n        }\n \
    \   }\n}\nprint_r($result);\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n$arr=array(\n    array(1,2,3,4,5,6),\n    array(1,2,3,4,1,6),\n\
    \    array(1,2,3,4,5,1)\n);\n$x=1;\n$result=array();\nforeach($arr as $row){\n\
    \    foreach($row as $col){\n        if($col==$x){\n            $result[]=array($row,$col);\n\
    \        }\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr=array(\n    array(1,2,3,4,5,6),\n    array(1,2,3,4,1,6),\n\
    \    array(1,2,3,4,5,1)\n);\n$x=1;\n$result=array();\nforeach($arr as $row){\n\
    \    foreach($row as $col){\n        if($col==$x){\n            $result[]=array($row,$col);\n\
    \        }\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=arrays,php |>\n<|\
    \ c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$arr=array(\n   \
    \ array(1,2,3,4,5,6),\n    array(1,2,3,4,1,6),\n    array(1,2,3,4,5,\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpueojn7qs.php on line 37

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin3gfudj.php:30\n\
    Stack trace:\n#0 /tmp/tmpin3gfudj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpin3gfudj.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = array_search($x, $row);\n      \
    \  if ($row_x !== false) {\n            $rows[] = array($row_x, array_search($x,\
    \ array_reverse($row)));\n        }\n    }\n    sort($rows);\n    sort($rows[0],\
    \ SORT_NUMERIC);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_elel1o.php:35\n\
    Stack trace:\n#0 /tmp/tmp7_elel1o.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7_elel1o.php\
    \ on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip(\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqqv0gi6l.php on line 76

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lkf0s6p.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lkf0s6p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lkf0s6p.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($row)\
    \ {\n    return count($row);\n  }, $lst));\n  arsort($rows);\n  $rows = array_reverse($rows);\n\
    \  $cols = array_count_values(array_map(function($row) {\n    return count($row);\n\
    \  }, $lst));\n  arsort($cols);\n  $cols = array_reverse($cols);\n  $result =\
    \ array();\n  foreach ($rows as $row => $count) {\n    $result[] = array();\n\
    \    foreach ($cols as $col => $count) {\n      if ($row == $col) {\n        $result[]\
    \ = array($x, $row);\n      }\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpad7allcw.php:45\n\
    Stack trace:\n#0 /tmp/tmpad7allcw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpad7allcw.php\
    \ on line 45\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($v)\
    \ { return count($v); }, $lst));\n  $rows = array_filter($rows, function($v) {\
    \ return $v > 0; });\n  $rows = array_keys($rows);\n  $rows = array_reverse($rows);\n\
    \  $cols = array_count_values(array_map(function($v) { return count($v); }, $lst));\n\
    \  $cols = array_filter($cols, function($v) { return $v > 0; });\n  $cols = array_keys($cols);\n\
    \  $cols = array_reverse($cols);\n  $coords = array();\n  foreach ($rows as $row)\
    \ {\n    foreach ($cols as $col) {\n      if ($lst[$row][$col] == $x) {\n    \
    \    $coords[] = array($row, $col);\n      }\n    }\n  }\n  asort($coords);\n\
    \  rsort($coords);\n  return $coords;\n}\n\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnhshyrm.php:44\n\
    Stack trace:\n#0 /tmp/tmpcnhshyrm.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpcnhshyrm.php\
    \ on line 44\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $row = [];\n    $row_len\
    \ = 0;\n    foreach ($lst as $row) {\n        $row_len++;\n    }\n    $row_len\
    \ = max($row_len, 1);\n    foreach ($lst as $row) {\n        $row_len = max($row_len,\
    \ count($row));\n    }\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = max($row_len,\
    \ count($lst));\n    $row_len = max($row_len, 1);\n    $row_len = \nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsgpku479.php on line 71

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map('count',\
    \ $lst));\n    $rows = array_filter($rows, function($v) { return $v > 0; });\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpf1fg1cu3.php on line 23\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, null given in /tmp/tmpf1fg1cu3.php on line 24\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpf1fg1cu3.php:33\nStack trace:\n\
    #0 /tmp/tmpf1fg1cu3.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpf1fg1cu3.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($count) {\n        return $count > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_map(function($row) {\n \
    \       return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbrgf1jpq.php on line 88

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n   \
    \ sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9nndsd5b.php:32\n\
    Stack trace:\n#0 /tmp/tmp9nndsd5b.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9nndsd5b.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_map(function($row)\
    \ {\n    return array_slice($row, 0, $x);\n  }, $lst);\n  $rows = array_filter($rows);\n\
    \  $rows = array_map(function($row) {\n    return array_slice($row, $x, count($row));\n\
    \  }, $rows);\n  $rows = array_filter($rows);\n  return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzs3b8ec.php:34\n\
    Stack trace:\n#0 /tmp/tmpqzs3b8ec.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqzs3b8ec.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $cols = array_count_values($lst[1]);\n    $rows = array_keys($rows);\n  \
    \  $cols = array_keys($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $coords = array();\n    foreach ($rows as $row) {\n        $coords[$row]\
    \ = array();\n        foreach ($cols as $col) {\n            if ($lst[$row][$col]\
    \ == $x) {\n                $coords[$row][$col] = array($row, $col);\n       \
    \     }\n        }\n    }\n    asort($coords);\n    foreach ($coords as $row)\
    \ {\n        asort($row);\n    }\n    return $coords;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1qddvud.php:45\n\
    Stack trace:\n#0 /tmp/tmpw1qddvud.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpw1qddvud.php\
    \ on line 45\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst);\n\
    \    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows =\
    \ array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $x); }, $rows);\n    return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmpaxa3ri8h.php on line 18\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmpaxa3ri8h.php on line 18\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmpaxa3ri8h.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxa3ri8h.php:32\n\
    Stack trace:\n#0 /tmp/tmpaxa3ri8h.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpaxa3ri8h.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows =\
    \ array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, $x, count($row));\n    }, $rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_slice($row, 0, $x);\n   \
    \ }, $rows);\n    $rows = array_map(function($row) {\n        return array_slice($row,\
    \ $x, count($row));\n    }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmp_6l4jegt.php on line 24\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmp_6l4jegt.php on line 27\n\n\
    Warning: array_slice() expects parameter 1 to be array, null given in /tmp/tmp_6l4jegt.php\
    \ on line 27\n\nWarning: array_slice() expects parameter 1 to be array, null given\
    \ in /tmp/tmp_6l4jegt.php on line 30\n\nWarning: count(): Parameter must be an\
    \ array or an object that implements Countable in /tmp/tmp_6l4jegt.php on line\
    \ 33\n\nWarning: array_slice() expects parameter 1 to be array, null given in\
    \ /tmp/tmp_6l4jegt.php on line 33\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_6l4jegt.php:43\nStack trace:\n#0 /tmp/tmp_6l4jegt.php(51): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_6l4jegt.php on line 43\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($v)\
    \ { return count($v); }, $lst));\n    $rows = array_filter($rows, function($v)\
    \ { return $v > 0; });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) {\
    \ return array_slice($v, 0, $x); }, $lst);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnvv5f8w.php:32\n\
    Stack trace:\n#0 /tmp/tmptnvv5f8w.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptnvv5f8w.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_column($rows, '0'), SORT_DESC, SORT_NUMERIC, $rows);\n\
    \    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pfnrtgn.php:31\n\
    Stack trace:\n#0 /tmp/tmp2pfnrtgn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2pfnrtgn.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2amkyhoq.php:30\n\
    Stack trace:\n#0 /tmp/tmp2amkyhoq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2amkyhoq.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_column($result, '0'), SORT_DESC, array_column($result,\
    \ '1'), SORT_ASC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmp0il595ct.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0il595ct.php:31\n\
    Stack trace:\n#0 /tmp/tmp0il595ct.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0il595ct.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_coords = array();\n        foreach ($row\
    \ as $column) {\n            if ($column == $x) {\n                $row_coords[]\
    \ = $row;\n            }\n        }\n        $rows[] = $row_coords;\n    }\n \
    \   sort($rows);\n    sort($rows[0]);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ayksgbr.php:38\n\
    Stack trace:\n#0 /tmp/tmp3ayksgbr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp3ayksgbr.php\
    \ on line 38\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_column($result, 1), SORT_DESC, array_column($result,\
    \ 0), SORT_ASC, SORT_NUMERIC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpglscrbqk.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglscrbqk.php:31\n\
    Stack trace:\n#0 /tmp/tmpglscrbqk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpglscrbqk.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($v) {\n        return $v > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_map(function($row) {\n \
    \       return array_slice($row, 0, $x);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, $x, count($row));\n    }, $rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_map(function($col) {\n  \
    \          return $col;\n        }, $row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_map(function($col) {\n            return $col;\n   \
    \     }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n    \
    \    return array_map(function($col) {\n            return $col;\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col;\n        }, $row);\n    }, $rows);\n    $rows =\
    \ array_map(function($row) {\n        return array_map(function($col) {\n    \
    \        return $col;\n        }, $row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_map(function($col) {\n            return $col;\n   \
    \     }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n    \
    \    return array_map(function($col) {\n            return $col;\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col;\n        }, $row);\n    }, $rows);\n    $rows =\
    \ array_map(function($row) {\n        return array_map(function($col) {\n    \
    \        return $col;\n        }, $row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_map(function($col) {\n            return $col;\n   \
    \     }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n    \
    \    return array_map(function($col) {\n            return $col;\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col;\n        }, $row);\n    }, $rows);\n    $rows =\
    \ array_map(function($row) {\n        return array_map(function($col) {\n    \
    \        return $col;\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpt0qsu4pr.php on line 109

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip(\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqqv0gi6l.php on line 76

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = array();\n    foreach ($lst as $row) {\n        $rows[] = $row;\n \
    \       $cols[] = array_flip($row);\n    }\n    array_multisort($cols, $rows,\
    \ $lst);\n    $rows = array_reverse($rows);\n    $result = array();\n    foreach\
    \ ($rows as $row) {\n        if (in_array($x, $row)) {\n            $result[]\
    \ = array_flip($row);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxoc305lu.php:40\n\
    Stack trace:\n#0 /tmp/tmpxoc305lu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxoc305lu.php\
    \ on line 40\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $n = count($lst);\n  $m\
    \ = count($lst[0]);\n  $result = array();\n  for ($i = 0; $i < $n; ++$i) {\n \
    \   $result[] = array($i, $x);\n  }\n  usort($result, function($a, $b) {\n   \
    \ return $a[0] - $b[0];\n  });\n  usort($result, function($a, $b) {\n    return\
    \ $a[1] - $b[1];\n  });\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphbowvngq.php:38\n\
    Stack trace:\n#0 /tmp/tmphbowvngq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphbowvngq.php\
    \ on line 38\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = array();\n        foreach ($row\
    \ as $col) {\n            if ($col == $x) {\n                $row_x[] = array($row,\
    \ $col);\n            }\n        }\n        $rows[] = $row_x;\n    }\n    sort($rows);\n\
    \    foreach ($rows as $row) {\n        sort($row);\n    }\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z7icrhm.php:40\n\
    Stack trace:\n#0 /tmp/tmp7z7icrhm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7z7icrhm.php\
    \ on line 40\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = array_slice($row,\
    \ 0, $x);\n        $rows[] = array($row_x, $row_y);\n    }\n    sort($rows);\n\
    \    foreach ($rows as $row) {\n        sort($row);\n    }\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxirhuqho.php:36\n\
    Stack trace:\n#0 /tmp/tmpxirhuqho.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxirhuqho.php\
    \ on line 36\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map('count',\
    \ $lst));\n    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function($row) {\n        return array_slice($row, 0, $x);\n\
    \    }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpc4v5c_bf.php on line 24\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpc4v5c_bf.php:34\nStack trace:\n#0 /tmp/tmpc4v5c_bf.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpc4v5c_bf.php on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_map(function ($row) {\n            return array_reverse($row);\n\
    \        }, $rows), SORT_DESC, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqxubh2_o.php:33\n\
    Stack trace:\n#0 /tmp/tmpqxubh2_o.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqxubh2_o.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array();\n  $cols\
    \ = count($lst[0]);\n  for ($i = 0; $i < $cols; $i++) {\n    $rows[] = array($i,\
    \ 0);\n  }\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < $cols;\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $rows[$j][1] = $i;\n     \
    \   break;\n      }\n    }\n  }\n  ksort($rows);\n  ksort($rows[$rows[count($rows)\
    \ - 1]]);\n  return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Illegal offset type in /tmp/tmp4jfejily.php on line 32\n\nWarning:\
    \ ksort() expects parameter 1 to be array, null given in /tmp/tmp4jfejily.php\
    \ on line 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jfejily.php:41\n\
    Stack trace:\n#0 /tmp/tmp4jfejily.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4jfejily.php\
    \ on line 41\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($value) {\n        return $value > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function($row) {\n        return array_flip($row);\n   \
    \ }, $rows);\n    $rows = array_map(function($row) {\n        return array_slice($row,\
    \ 0, count($row));\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_slice($row, count($row));\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, count($row));\n    }, $rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_flip($row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_slice($row, count($row));\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_slice($row,\
    \ count($row));\n    }, $rows);\n    $rows = array_map(function($row) {\n    \
    \    return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, count($row));\n    }, $rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_flip($row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_slice($row, count($row));\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_slice($row,\
    \ count($row));\n    }, $rows);\n    $rows = array_map(function($row) {\n    \
    \    return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, count($row));\n    }, $rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_flip($row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_slice($row, count($row));\n\
    \    }, $rows);\n    $rows = array_map(function($row\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp3yjz37i.php on line 85

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($v)\
    \ { return count($v); }, $lst));\n    $rows = array_filter($rows, function($v)\
    \ { return $v > 0; });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $cols = array_count_values(array_map(function($v) { return count($v); },\
    \ $lst));\n    $cols = array_filter($cols, function($v) { return $v > 0; });\n\
    \    $cols = array_keys($cols);\n    $cols = array_reverse($cols);\n    $coords\
    \ = array();\n    foreach ($rows as $row) {\n        $coords[] = array();\n  \
    \      foreach ($cols as $col) {\n            $coords[count($coords) - 1][] =\
    \ $row * count($lst[0]) + $col;\n        }\n    }\n    usort($coords, function($a,\
    \ $b) { return $a[0] - $b[0]; });\n    usort($coords, function($a, $b) { return\
    \ $a[1] - $b[1]; });\n    return array_slice($coords, 0, $x);\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptfy9h03w.php:43\n\
    Stack trace:\n#0 /tmp/tmptfy9h03w.php(51): test()\n#1 {main}\n  thrown in /tmp/tmptfy9h03w.php\
    \ on line 43\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $row = $lst;\n    $row_len\
    \ = count($row);\n    $col_len = count($row[0]);\n    $result = [];\n    for ($i\
    \ = 0; $i < $row_len; $i++) {\n        $result[$i] = [];\n        for ($j = 0;\
    \ $j < $col_len; $j++) {\n            if ($row[$i][$j] == $x) {\n            \
    \    $result[$i][] = $j;\n            }\n        }\n    }\n    array_multisort($result,\
    \ SORT_DESC, SORT_NUMERIC, $row);\n    return $row;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq04elflb.php:39\n\
    Stack trace:\n#0 /tmp/tmpq04elflb.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpq04elflb.php\
    \ on line 39\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($count) {\n        return $count > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_map(function($row) {\n \
    \       return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbrgf1jpq.php on line 88

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = array_slice($row,\
    \ 0, $x);\n        $rows[] = array($row_x, $row_y);\n    }\n    array_multisort($rows,\
    \ SORT_DESC, SORT_NUMERIC, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6og566ny.php:33\n\
    Stack trace:\n#0 /tmp/tmp6og566ny.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6og566ny.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($row)\
    \ {\n    return count($row);\n  }, $lst));\n  $rows = array_filter($rows, function($v)\
    \ {\n    return $v > 0;\n  });\n  $rows = array_keys($rows);\n  $rows = array_reverse($rows);\n\
    \  $cols = array_count_values(array_map(function($row) {\n    return $row;\n \
    \ }, $lst));\n  $cols = array_filter($cols, function($v) {\n    return $v > 0;\n\
    \  });\n  $cols = array_keys($cols);\n  $cols = array_reverse($cols);\n  $coords\
    \ = array();\n  foreach ($rows as $row) {\n    foreach ($cols as $col) {\n   \
    \   if ($row == $col && $lst[$row][$col] == $x) {\n        $coords[] = array($row,\
    \ $col);\n      }\n    }\n  }\n  usort($coords, function($a, $b) {\n    return\
    \ $a[0] - $b[0];\n  });\n  usort($coords, function($a, $b) {\n    return $a[1]\
    \ - $b[1];\n  });\n  return $coords;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. Your solution works well for small arrays, but for large\
    \ arrays it takes too much time. My arrays are of size 5000 x 5000 and it takes\
    \ around 30 seconds to find a single integer in it. Do you know any faster solution?\n\
    <|/ c |>\n<| c |>\nI added a faster solution, please check it out.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your solution works well for small arrays, but\
    \ for large arrays it takes too much time. My arrays are of size 5000 x 5000 and\
    \ it takes around 30 seconds to find a single integer in it. Do you know any faster\
    \ solution?\n<|/ c |>\n<| c |>\nI added a faster solution, please check it out.\n\
    <|/ c |>\n<| a tags=arrays,php,multidimensional-array |>\n<code>\n$array = array(\n\
    \    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1, 6),\n    array(1, 2, 3,\
    \ 4, 5, 1)\n);\n\n$x = 1;\n$result = array();\nforeach ($array as $row) {\n  \
    \  foreach ($row as $col) {\n        if ($col == $x) {\n            $result[]\
    \ = array($row, $col);\n        }\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\n$array = array(\n    array(1, 2, 3, 4, 5, \nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5t6te4ph.php on line 50

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array();\n  $cols\
    \ = count($lst[0]);\n  for ($i = 0; $i < $cols; $i++) {\n    $rows[] = array();\n\
    \  }\n  for ($i = 0; $i < $cols; $i++) {\n    $rows[$i] = array();\n  }\n  for\
    \ ($i = 0; $i < $cols; $i++) {\n    for ($j = 0; $j < $rows; $j++) {\n      $rows[$j][]\
    \ = $lst[$i][$j];\n    }\n  }\n  krsort($rows);\n  krsort($rows);\n  for ($i =\
    \ 0; $i < $rows; $i++) {\n    for ($j = 0; $j < $cols; $j++) {\n      if ($rows[$i][$j]\
    \ == $x) {\n        $result[] = array($i, $j);\n      }\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    20480 bytes) in /tmp/tmpvol0dspn.php on line 28

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values($lst[0]);\n\
    \  $rows = array_filter($rows, function($v) { return $v > 0; });\n  $rows = array_keys($rows);\n\
    \  $rows = array_reverse($rows);\n  $rows = array_slice($rows, 0, $x);\n  $rows\
    \ = array_map(function($v) { return array_slice($v, 0, $x); }, $rows);\n  $rows\
    \ = array_map(function($v) { return array_slice($v, $x); }, $rows);\n  return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpp6n5sfa1.php on line 23\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, null given in /tmp/tmpp6n5sfa1.php on line 24\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpp6n5sfa1.php:33\nStack trace:\n\
    #0 /tmp/tmpp6n5sfa1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpp6n5sfa1.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    foreach ($rows as $row) {\n        sort($row);\n  \
    \  }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcoih1wiw.php:34\n\
    Stack trace:\n#0 /tmp/tmpcoih1wiw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcoih1wiw.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = array();\n    foreach ($lst as $row) {\n        $row_len = count($row);\n\
    \        $col_len = 0;\n        foreach ($row as $col) {\n            $col_len++;\n\
    \        }\n        $rows[] = array_fill(0, $row_len, $x);\n        $cols[] =\
    \ array_fill(0, $col_len, $x);\n    }\n    array_multisort($cols, SORT_DESC, SORT_NUMERIC,\
    \ $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoyogqlie.php:38\n\
    Stack trace:\n#0 /tmp/tmpoyogqlie.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpoyogqlie.php\
    \ on line 38\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($value) {\n        return $value > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_map(function($row) {\n \
    \       return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe83fkzf2.php on line 101

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $m = count($lst[0]);\n    $result = array();\n    for ($i = 0; $i < $n; ++$i)\
    \ {\n        $result[$i] = array();\n        for ($j = 0; $j < $m; ++$j) {\n \
    \           if ($j == $x) {\n                $result[$i][] = $i;\n           \
    \ }\n        }\n    }\n    asort($result);\n    arsort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3nq3ofk.php:39\n\
    Stack trace:\n#0 /tmp/tmpk3nq3ofk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpk3nq3ofk.php\
    \ on line 39\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_column($lst,\
    \ 'row'));\n  $rows = array_filter($rows);\n  $rows = array_keys($rows);\n  $rows\
    \ = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8onc110w.php on line 75

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = array_search($x, $row);\n      \
    \  if ($row_x !== false) {\n            $rows[] = array($row_x, array_search($x,\
    \ array_reverse($row)));\n        }\n    }\n    sort($rows);\n    sort($rows[0]);\n\
    \    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8cjqws_.php:35\n\
    Stack trace:\n#0 /tmp/tmpk8cjqws_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk8cjqws_.php\
    \ on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    sort($rows[0]);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydnp3vx7.php:32\n\
    Stack trace:\n#0 /tmp/tmpydnp3vx7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpydnp3vx7.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($count) {\n        return $count > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_map(function($row) {\n \
    \       return array_flip($row);\n    }, $rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpzoazk6ej.php on line 91

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function($row) {\n     \
    \   return array_slice($row, 0, count($row) - 1);\n    }, $rows);\n    $rows =\
    \ array_map(function($row) {\n        return array_reverse($row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_slice($row, 0, count($row)\
    \ - 1);\n    }, $rows);\n    $rows = array_map(function($row) {\n        return\
    \ array_reverse($row);\n    }, $rows);\n    $rows = array_map(function($row) {\n\
    \        return array_slice($row, 0, count($row) - 1);\n    }, $rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_slice($row, 0, count($row)\
    \ - 1);\n    }, $rows);\n    $rows = array_map(function($row) {\n        return\
    \ array_slice($row, 0, count($row) - 1);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, count($row) - 1);\n    }, $rows);\n \
    \   $rows = array_map(function($row) {\n        return array_slice($row, 0, count($row)\
    \ - 1);\n    }, $rows);\n    $rows = array_map(function($row) {\n        return\
    \ array_slice($row, 0, count($row) - 1);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, count($row) - 1);\n    }, $rows);\n \
    \   $rows = array_map(function($row) {\n        return array_slice($row, 0, count($row)\
    \ - 1);\n    }, $rows);\n    $rows = array_map(function($row) {\n        return\
    \ array_slice($row, 0, count($row) - 1);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, count($row) - 1);\n    }, $rows);\n \
    \   $rows = array_map(function($row) {\n        return array_slice($row, 0, count($row)\
    \ - 1);\n    }, $rows);\n    $rows = array_map(function($row) {\n        return\
    \ array_slice($row, 0, count($row) - 1);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, count($row) - 1);\n    }, $rows);\n \
    \   $rows = array_map(function($row) {\n        return array_slice($row, 0, count($row)\
    \ - 1);\n    }, $\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptnkunh0l.php on line 79

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($value) {\n        return $value > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function($row) {\n        return array_slice($row, 0, count($row));\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_reverse($row);\n\
    \    }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpjum_05tx.php on line 28\n\nWarning: array_slice() expects\
    \ parameter 1 to be array, int given in /tmp/tmpjum_05tx.php on line 28\n\nWarning:\
    \ array_reverse() expects parameter 1 to be array, null given in /tmp/tmpjum_05tx.php\
    \ on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjum_05tx.php:41\n\
    Stack trace:\n#0 /tmp/tmpjum_05tx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjum_05tx.php\
    \ on line 41\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($row)\
    \ {\n    return count($row);\n  }, $lst));\n  arsort($rows);\n  $rows = array_reverse($rows);\n\
    \  $cols = array_count_values(array_map(function($row) {\n    return count($row);\n\
    \  }, $lst));\n  krsort($cols);\n  $result = array();\n  foreach ($lst as $row)\
    \ {\n    $result[] = array();\n    foreach ($row as $col) {\n      if ($col ==\
    \ $x) {\n        $result[] = array($row, $col);\n      }\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmper7y3t_j.php:44\n\
    Stack trace:\n#0 /tmp/tmper7y3t_j.php(52): test()\n#1 {main}\n  thrown in /tmp/tmper7y3t_j.php\
    \ on line 44\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($v) {\n        return $v > 0;\n    });\n    arsort($rows);\n    $rows\
    \ = array_reverse($rows);\n    $cols = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $cols = array_filter($cols,\
    \ function($v) {\n        return $v > 0;\n    });\n    arsort($cols);\n    $cols\
    \ = array_reverse($cols);\n    $result = array();\n    foreach ($rows as $row)\
    \ {\n        $result[] = array();\n        foreach ($cols as $col) {\n       \
    \     if ($row[$col] == $x) {\n                $result[] = array($row, $col);\n\
    \            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93005t29.php:51\n\
    Stack trace:\n#0 /tmp/tmp93005t29.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp93005t29.php\
    \ on line 51\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    sort($rows[0]);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydnp3vx7.php:32\n\
    Stack trace:\n#0 /tmp/tmpydnp3vx7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpydnp3vx7.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $rows = array();\n    for ($i = 0; $i < $n; $i++) {\n        $rows[] = array($i,\
    \ 0);\n    }\n    for ($i = 0; $i < $n; $i++) {\n        $rows[$i][1] = 0;\n \
    \   }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($lst[$i][$j] == $x) {\n                $rows[$i][0] = $j;\n\
    \                $rows[$i][1] = $i;\n                break;\n            }\n \
    \       }\n    }\n    array_multisort($rows, SORT_DESC, SORT_NUMERIC, $rows);\n\
    \    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptx6wnfca.php:44\n\
    Stack trace:\n#0 /tmp/tmptx6wnfca.php(52): test()\n#1 {main}\n  thrown in /tmp/tmptx6wnfca.php\
    \ on line 44\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($v)\
    \ { return count($v); }, $lst));\n    $rows = array_filter($rows, function($v)\
    \ { return $v > 0; });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $cols = array_count_values(array_map(function($v) { return count($v); },\
    \ $lst));\n    $cols = array_filter($cols, function($v) { return $v > 0; });\n\
    \    $cols = array_keys($cols);\n    $cols = array_reverse($cols);\n    $coords\
    \ = array();\n    foreach ($rows as $row) {\n        $coords[] = array();\n  \
    \      foreach ($cols as $col) {\n            $coords[count($coords) - 1][] =\
    \ $row * count($lst[0]) + $col;\n        }\n    }\n    array_multisort($coords,\
    \ SORT_DESC, SORT_NUMERIC, $coords);\n    return array_map(function($v) { return\
    \ array_slice($lst, $v); }, $coords);\n}\n\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, null given in\
    \ /tmp/tmp_2c_5mdv.php on line 34\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_2c_5mdv.php:42\nStack trace:\n#0 /tmp/tmp_2c_5mdv.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_2c_5mdv.php on line 42\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($value) {\n        return $value > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_map(function($row) {\n \
    \       return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe83fkzf2.php on line 101

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst);\n\
    \    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows =\
    \ array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpurfntklj.php on line 76

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $row = $lst;\n    $row_len\
    \ = count($row);\n    $col_len = count($row[0]);\n    $result = array();\n   \
    \ for ($i = 0; $i < $col_len; $i++) {\n        $result[$i] = array();\n      \
    \  for ($j = 0; $j < $row_len; $j++) {\n            if ($row[$j][$i] == $x) {\n\
    \                $result[$i][] = $j;\n            }\n        }\n    }\n    sort($result);\n\
    \    sort($result, SORT_NUMERIC);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnexudbz.php:40\n\
    Stack trace:\n#0 /tmp/tmpfnexudbz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfnexudbz.php\
    \ on line 40\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map('count',\
    \ $lst));\n    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function($row) {\n        return array_slice($row, 0, $x);\n\
    \    }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpc4v5c_bf.php on line 24\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpc4v5c_bf.php:34\nStack trace:\n#0 /tmp/tmpc4v5c_bf.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpc4v5c_bf.php on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = count($lst[0]);\n    $row = 0;\n    foreach ($lst as $row) {\n    \
    \    $rows[$row] = array();\n        for ($c = 0; $c < $cols; $c++) {\n      \
    \      if ($row[$c] == $x) {\n                $rows[$row][] = array($c, $c);\n\
    \            }\n        }\n    }\n    array_multisort($rows, SORT_DESC, SORT_NUMERIC,\
    \ $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Illegal offset type in /tmp/tmpgfoj4ip_.php on line 22\n\nWarning:\
    \ Illegal offset type in /tmp/tmpgfoj4ip_.php on line 25\n\nWarning: Illegal offset\
    \ type in /tmp/tmpgfoj4ip_.php on line 22\n\nWarning: Illegal offset type in /tmp/tmpgfoj4ip_.php\
    \ on line 25\n\nWarning: Illegal offset type in /tmp/tmpgfoj4ip_.php on line 25\n\
    \nWarning: Illegal offset type in /tmp/tmpgfoj4ip_.php on line 22\n\nWarning:\
    \ Illegal offset type in /tmp/tmpgfoj4ip_.php on line 25\n\nWarning: Illegal offset\
    \ type in /tmp/tmpgfoj4ip_.php on line 25\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgfoj4ip_.php:38\nStack trace:\n#0 /tmp/tmpgfoj4ip_.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgfoj4ip_.php on line 38\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows =\
    \ array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $x); }, $rows);\n    return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpngpqhbxh.php on line 23\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpngpqhbxh.php:32\nStack trace:\n#0 /tmp/tmpngpqhbxh.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpngpqhbxh.php on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($v)\
    \ { return count($v); }, $lst));\n    $rows = array_filter($rows, function($v)\
    \ { return $v > 0; });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) {\
    \ return array_slice($v, 0, $x); }, $lst);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnvv5f8w.php:32\n\
    Stack trace:\n#0 /tmp/tmptnvv5f8w.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptnvv5f8w.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_map(function($row)\
    \ {\n    return array_map(function($column) {\n      return $column;\n    }, $row);\n\
    \  }, $lst);\n  $rows = array_filter($rows, function($row) {\n    return in_array($x,\
    \ $row);\n  });\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }, $rows);\n  $rows = array_map(function($row) {\n    return array_flip($row);\n\
    \  }\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp66ki_5qr.php on line 89

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_map('array_reverse', array_column($result, 0)),\
    \ SORT_DESC, SORT_NUMERIC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_reverse() expects parameter 1 to be array, int given in\
    \ /tmp/tmp6i0r5o6x.php on line 22\n\nWarning: array_reverse() expects parameter\
    \ 1 to be array, int given in /tmp/tmp6i0r5o6x.php on line 22\n\nWarning: array_reverse()\
    \ expects parameter 1 to be array, int given in /tmp/tmp6i0r5o6x.php on line 22\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6i0r5o6x.php:31\nStack\
    \ trace:\n#0 /tmp/tmp6i0r5o6x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6i0r5o6x.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_slice($row, 0, $x);\n   \
    \ }, $rows);\n    $rows = array_map(function($row) {\n        return array_slice($row,\
    \ $x, count($row));\n    }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpesnjygba.php on line 25\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpesnjygba.php on line 28\n\n\
    Warning: array_slice() expects parameter 1 to be array, null given in /tmp/tmpesnjygba.php\
    \ on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesnjygba.php:38\n\
    Stack trace:\n#0 /tmp/tmpesnjygba.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpesnjygba.php\
    \ on line 38\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $lst);\n    sort($rows);\n\
    \    sort($rows[0], SORT_NUMERIC);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5_jvg3l.php:31\n\
    Stack trace:\n#0 /tmp/tmpf5_jvg3l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpf5_jvg3l.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = array_slice($row,\
    \ 0, $x);\n        $rows[] = array($row_x, $row_y);\n    }\n    array_multisort($rows,\
    \ SORT_DESC, SORT_NUMERIC, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6og566ny.php:33\n\
    Stack trace:\n#0 /tmp/tmp6og566ny.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6og566ny.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $cols = array_count_values($lst[1]);\n    $result = array();\n    foreach\
    \ ($rows as $row => $count) {\n        if ($count == $x) {\n            $result[]\
    \ = array($row, $cols[$row]);\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnctmf08p.php:34\n\
    Stack trace:\n#0 /tmp/tmpnctmf08p.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpnctmf08p.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = $row[$x];\n\
    \        $row_x_keys = array_keys($row, $x);\n        $row_y_keys = array_keys($row,\
    \ $x);\n        sort($row_x_keys);\n        sort($row_y_keys);\n        $row_x\
    \ = array_flip($row_x_keys);\n        $row_y = array_flip($row_y_keys);\n    \
    \    $rows[] = array($row_x, $row_y);\n    }\n    return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpakvrhuj_.php:38\n\
    Stack trace:\n#0 /tmp/tmpakvrhuj_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpakvrhuj_.php\
    \ on line 38\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map('count',\
    \ $lst));\n    $rows = array_filter($rows, function ($v) { return $v > 0; });\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function ($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function ($v) { return array_slice($v,\
    \ $x); }, $lst);\n    $rows = array_map(function ($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5i2z1vlu.php:34\n\
    Stack trace:\n#0 /tmp/tmp5i2z1vlu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5i2z1vlu.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function ($row) {\n        return array_map(function ($column)\
    \ {\n            return array($column, $row);\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function ($row) {\n        return array_map(function ($column)\
    \ {\n            return $column[0];\n        }, $row);\n    }, $rows);\n    $rows\
    \ = array_map(function ($row) {\n        return array_map(function ($column) {\n\
    \            return $column[1];\n        }, $row);\n    }, $rows);\n    return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd99p9owr.php:46\n\
    Stack trace:\n#0 /tmp/tmpd99p9owr.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpd99p9owr.php\
    \ on line 46\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yapc_01.php:30\n\
    Stack trace:\n#0 /tmp/tmp7yapc_01.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7yapc_01.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = array_search($x, $row);\n      \
    \  if ($row_x !== false) {\n            $rows[] = array($row_x, array_search($x,\
    \ array_reverse($row)));\n        }\n    }\n    sort($rows);\n    sort($rows[0],\
    \ SORT_NUMERIC);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_elel1o.php:35\n\
    Stack trace:\n#0 /tmp/tmp7_elel1o.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7_elel1o.php\
    \ on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin3gfudj.php:30\n\
    Stack trace:\n#0 /tmp/tmpin3gfudj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpin3gfudj.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values($lst);\n\
    \  $rows = array_filter($rows);\n  $rows = array_keys($rows);\n  $rows = array_reverse($rows);\n\
    \  $rows = array_slice($rows, 0, $x);\n  $rows = array_slice($rows, 0, $x);\n\
    \  $rows = array_map(function($v) { return array_slice($v, 0, $x); }, $rows);\n\
    \  return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmpvpl7k83k.php on line 18\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmpvpl7k83k.php on line 18\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmpvpl7k83k.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpl7k83k.php:33\n\
    Stack trace:\n#0 /tmp/tmpvpl7k83k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvpl7k83k.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_map(function($row)\
    \ {\n    return array_map(function($column) {\n      return $column + $row;\n\
    \    }, $row);\n  }, $lst);\n  usort($rows, function($a, $b) {\n    return array_search($a,\
    \ $b, true);\n  });\n  $rows = array_map(function($row) {\n    return array_map(function($column)\
    \ {\n      return $column + $row;\n    }, $row);\n  }, $rows);\n  $rows = array_filter($rows);\n\
    \  $rows = array_filter($rows, function($row) {\n    return $row > $x;\n  });\n\
    \  return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbt5heqf.php:43\n\
    Stack trace:\n#0 /tmp/tmpbbt5heqf.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpbbt5heqf.php\
    \ on line 43\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_column($rows, '0'), SORT_DESC, SORT_NUMERIC, $rows);\n\
    \    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pfnrtgn.php:31\n\
    Stack trace:\n#0 /tmp/tmp2pfnrtgn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2pfnrtgn.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = array_search($x, $row);\n      \
    \  if ($row_x === false) {\n            continue;\n        }\n        $row_y =\
    \ array_search($x, array_reverse($row));\n        if ($row_y === false) {\n  \
    \          $row_y = count($row);\n        }\n        $rows[] = array($row_x, $row_y);\n\
    \    }\n    sort($rows);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbwowklcw.php:39\n\
    Stack trace:\n#0 /tmp/tmpbwowklcw.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpbwowklcw.php\
    \ on line 39\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_column($rows, 0), SORT_DESC, SORT_NUMERIC, $rows);\n\
    \    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvco0l3j.php:31\n\
    Stack trace:\n#0 /tmp/tmpgvco0l3j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgvco0l3j.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_column($result, '0'), SORT_DESC, array_column($result,\
    \ '1'), SORT_ASC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmp0il595ct.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0il595ct.php:31\n\
    Stack trace:\n#0 /tmp/tmp0il595ct.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0il595ct.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $row = [];\n    foreach\
    \ ($lst as $row) {\n        $row[] = array_slice($row, array_search($x, $row),\
    \ 1);\n    }\n    return $row;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57q9dn0e.php:30\n\
    Stack trace:\n#0 /tmp/tmp57q9dn0e.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp57q9dn0e.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($v)\
    \ { return $v[0]; }, $lst));\n    $rows = array_filter($rows, function($v) { return\
    \ $v > 0; });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) {\
    \ return array_slice($v, 0, 1); }, $lst);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $v[0]); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, \nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpx4iv0kpx.php on line 44

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $lst);\n    sort($rows);\n\
    \    sort($rows, SORT_NUMERIC);\n    $rows = array_map(function($row) {\n    \
    \    return array_slice($row, $x);\n    }, $rows);\n    return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo780m0y4.php:34\n\
    Stack trace:\n#0 /tmp/tmpo780m0y4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo780m0y4.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_reverse($rows), $rows);\n    return $rows;\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmf5r9zu.php:31\n\
    Stack trace:\n#0 /tmp/tmpbmf5r9zu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbmf5r9zu.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $m = count($lst[0]);\n    $result = array();\n    for ($i = 0; $i < $n; ++$i)\
    \ {\n        $result[$i] = array();\n        for ($j = 0; $j < $m; ++$j) {\n \
    \           if ($j == $x) {\n                $result[$i][] = $j;\n           \
    \ } else {\n                $result[$i][] = 0;\n            }\n        }\n   \
    \ }\n    asort($result, SORT_NUMERIC);\n    arsort($result, SORT_NUMERIC, SORT_DESC);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: arsort() expects at most 2 parameters, 3 given in /tmp/tmplmiz2mzx.php\
    \ on line 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplmiz2mzx.php:41\n\
    Stack trace:\n#0 /tmp/tmplmiz2mzx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmplmiz2mzx.php\
    \ on line 41\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = array_slice($row,\
    \ 0, $x);\n        $rows[] = array($row_x, $row_y);\n    }\n    sort($rows);\n\
    \    sort($rows[0]);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7jl1g9xa.php:34\n\
    Stack trace:\n#0 /tmp/tmp7jl1g9xa.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7jl1g9xa.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    foreach ($rows as $row) {\n        sort($row);\n  \
    \  }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcoih1wiw.php:34\n\
    Stack trace:\n#0 /tmp/tmpcoih1wiw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcoih1wiw.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort($rows, SORT_DESC, SORT_NUMERIC, $rows);\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyspm1ity.php:31\n\
    Stack trace:\n#0 /tmp/tmpyspm1ity.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyspm1ity.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    $rows = array_count_values($lst);\n    foreach ($rows as $key => $value)\
    \ {\n        if ($value == 1) {\n            $result[] = array($key, 0);\n   \
    \     }\n    }\n    foreach ($lst as $key => $value) {\n        if ($value ==\
    \ $x) {\n            $result[] = array($key, 0);\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        $result[$key][1] = array_search($x, $lst);\n\
    \    }\n    array_multisort($result, SORT_DESC, SORT_NUMERIC, $lst);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmpe08rjbp9.php on line 19\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmpe08rjbp9.php on line 19\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmpe08rjbp9.php\
    \ on line 19\n\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpe08rjbp9.php\
    \ on line 33\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe08rjbp9.php:42\n\
    Stack trace:\n#0 /tmp/tmpe08rjbp9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpe08rjbp9.php\
    \ on line 42\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_reverse($result), SORT_DESC, SORT_NUMERIC, $result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp_whufr.php:31\n\
    Stack trace:\n#0 /tmp/tmpyp_whufr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyp_whufr.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst);\n\
    \    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows =\
    \ array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, $x); }, $rows);\n\
    \    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmprmi1o4zr.php on line 18\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmprmi1o4zr.php on line 18\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmprmi1o4zr.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmi1o4zr.php:33\n\
    Stack trace:\n#0 /tmp/tmprmi1o4zr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprmi1o4zr.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_map(function ($row) {\n            return array_reverse(array_slice($row,\
    \ 0, $x));\n        }, $result), SORT_DESC, SORT_NUMERIC, $result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimmrk5vn.php:33\n\
    Stack trace:\n#0 /tmp/tmpimmrk5vn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpimmrk5vn.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $m = count($lst[0]);\n    $coords = array();\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $coords[] = array($i, 0);\n    }\n    for ($i = 0; $i < $m; $i++)\
    \ {\n        $coords[$i][1] = $i;\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $coords[$i][0] = $i;\n                $coords[$i][1] = $j;\n\
    \                break;\n            }\n        }\n    }\n    usort($coords, 'cmp');\n\
    \    return $coords;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmp4qgvghwi.php on line 36\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qgvghwi.php:45\nStack\
    \ trace:\n#0 /tmp/tmp4qgvghwi.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4qgvghwi.php\
    \ on line 45\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = count($lst[0]);\n    $rows = array_fill(0, $cols, array());\n    foreach\
    \ ($lst as $row) {\n        $rows[$row[0]][$row[1]] = $row;\n    }\n    array_multisort(array_column($rows,\
    \ '0'), SORT_DESC, array_column($rows, '1'), SORT_ASC, $rows);\n    return array_filter($rows,\
    \ function($row) use ($x) {\n        return $row[0] == $x;\n    });\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpk3f46wl8.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3f46wl8.php:35\n\
    Stack trace:\n#0 /tmp/tmpk3f46wl8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk3f46wl8.php\
    \ on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_flip($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfz19ohea.php on line 76

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = array_search($x, $row);\n      \
    \  if ($row_x !== false) {\n            $rows[] = array($row_x, array_search($x,\
    \ array_reverse($row)));\n        }\n    }\n    sort($rows);\n    sort($rows[0],\
    \ SORT_NUMERIC);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_elel1o.php:35\n\
    Stack trace:\n#0 /tmp/tmp7_elel1o.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7_elel1o.php\
    \ on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    arsort($rows);\n    $rows\
    \ = array_reverse($rows);\n    $rows = array_keys($rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $rows);\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmp4utj_kz0.php on line 25\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4utj_kz0.php:35\nStack trace:\n#0 /tmp/tmp4utj_kz0.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4utj_kz0.php on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $m = count($lst[0]);\n    $rows = array();\n    for ($i = 0; $i < $n; ++$i)\
    \ {\n        $rows[] = array($i, 0);\n    }\n    for ($i = 0; $i < $m; ++$i) {\n\
    \        $rows[$i][$i] = $i;\n    }\n    for ($i = 0; $i < $n; ++$i) {\n     \
    \   for ($j = 0; $j < $m; ++$j) {\n            if ($lst[$i][$j] == $x) {\n   \
    \             $rows[$i][$j] = $i;\n                $rows[$i][$j + 1] = $j;\n \
    \           }\n        }\n    }\n    sort($rows);\n    sort($rows[$i]);\n    return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6733o0l0.php:45\n\
    Stack trace:\n#0 /tmp/tmp6733o0l0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp6733o0l0.php\
    \ on line 45\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    sort($rows, SORT_NUMERIC);\n    return $rows;\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_fr9winl.php:32\n\
    Stack trace:\n#0 /tmp/tmp_fr9winl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_fr9winl.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map('count',\
    \ $lst));\n  $rows = array_filter($rows);\n  arsort($rows);\n  $rows = array_keys($rows);\n\
    \  $rows = array_reverse($rows);\n  $rows = array_slice($rows, 0, $x);\n  $rows\
    \ = array_map(function($row) {\n    return array_slice($row, 0, $x);\n  }, $rows);\n\
    \  return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmp9hwjqp_e.php on line 25\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9hwjqp_e.php:35\nStack trace:\n#0 /tmp/tmp9hwjqp_e.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9hwjqp_e.php on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_column($result, 0), SORT_DESC, array_column($result,\
    \ 1), SORT_ASC, SORT_NUMERIC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmp2d62iq6i.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2d62iq6i.php:31\n\
    Stack trace:\n#0 /tmp/tmp2d62iq6i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2d62iq6i.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $row = $lst;\n    $row_len\
    \ = count($row);\n    $col_len = count($row[0]);\n    $result = [];\n    for ($i\
    \ = 0; $i < $col_len; $i++) {\n        $result[$i] = [];\n    }\n    for ($i =\
    \ 0; $i < $row_len; $i++) {\n        for ($j = 0; $j < $col_len; $j++) {\n   \
    \         if ($row[$i][$j] == $x) {\n                $result[$i][$j] = $i;\n \
    \           }\n        }\n    }\n    array_multisort($result, SORT_DESC, $row);\n\
    \    return $row;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpg0h0reke.php\
    \ on line 32\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0h0reke.php:41\n\
    Stack trace:\n#0 /tmp/tmpg0h0reke.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg0h0reke.php\
    \ on line 41\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows, function($v) { return $v > 1; });\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    $rows = array_map(function($\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3sj3a1z7.php on line 45

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $lst);\n    sort($rows);\n\
    \    sort($rows, SORT_NUMERIC);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2m_qq52.php:31\n\
    Stack trace:\n#0 /tmp/tmpa2m_qq52.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa2m_qq52.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($v)\
    \ { return count($v); }, $lst));\n    $rows = array_filter($rows, function($v)\
    \ { return $v > 0; });\n    $rows = array_values($rows);\n    $rows = array_map(function($v)\
    \ { return array_keys($v); }, $rows);\n    $rows = array_map(function($v) { return\
    \ array_flip($v); }, $rows);\n    $rows = array_map(function($v) { return array_flip($v);\
    \ }, $rows);\n    $rows = array_map(function($v) { return array_flip($v); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_flip($v); }, $rows);\n    $rows\
    \ = array_map(function($v) { return array_flip($v); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_flip($v); }, $rows);\n    $rows = array_map(function($v) { return\
    \ array_flip($v); }, $rows);\n    $rows = array_map(function($v) { return array_flip($v);\
    \ }, $rows);\n    $rows = array_map(function($v) { return array_flip($v); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_flip($v); }, $rows);\n    $rows\
    \ = array_map(function($v) { return array_flip($v); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_flip($v); }, $rows);\n    $rows = array_map(function($v) { return\
    \ array_flip($v); }, $rows);\n    $rows = array_map(function($v) { return array_flip($v);\
    \ }, $rows);\n    $rows = array_map(function($v) { return array_flip($v); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_flip($v); }, $rows);\n    $rows\
    \ = array_map(function($v) { return array_flip($v); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_flip($v); }, $rows);\n    $rows = array_map(function($v) { return\
    \ array_flip($v); }, $rows);\n    $rows = array_map(function($v) { return array_flip($v);\
    \ }, $rows);\n    $rows = array_map(function($v) { return array_flip($v); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_flip($v); }, $rows);\n    $rows\
    \ = array_map(function($v) { return array_flip($v); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_flip($v\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpo0uxfqge.php on line 46

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $lst);\n    sort($rows);\n\
    \    sort($rows, SORT_NUMERIC);\n    $result = array();\n    foreach ($rows as\
    \ $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc5c_hi58.php:35\n\
    Stack trace:\n#0 /tmp/tmpc5c_hi58.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpc5c_hi58.php\
    \ on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    sort($rows[0]);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydnp3vx7.php:32\n\
    Stack trace:\n#0 /tmp/tmpydnp3vx7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpydnp3vx7.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = array_slice($row,\
    \ 0, $x);\n        $rows[] = array($row_x, $row_y);\n    }\n    sort($rows);\n\
    \    foreach ($rows as $row) {\n        sort($row);\n    }\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxirhuqho.php:36\n\
    Stack trace:\n#0 /tmp/tmpxirhuqho.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxirhuqho.php\
    \ on line 36\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array();\n  foreach\
    \ ($lst as $row) {\n    $row_x = array();\n    foreach ($row as $col) {\n    \
    \  if ($col == $x) {\n        $row_x[] = array(0, $col);\n      }\n    }\n   \
    \ $rows[] = $row_x;\n  }\n  usort($rows, function($a, $b) { return $b[0][1] -\
    \ $a[0][1]; });\n  usort($rows, function($a, $b) { return $b[1][1] - $a[1][1];\
    \ });\n  return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87wyq0qh.php:38\n\
    Stack trace:\n#0 /tmp/tmp87wyq0qh.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp87wyq0qh.php\
    \ on line 38\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yapc_01.php:30\n\
    Stack trace:\n#0 /tmp/tmp7yapc_01.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7yapc_01.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = [];\n    foreach\
    \ ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n   \
    \ sort($result, SORT_NUMERIC);\n    sort($result, SORT_NUMERIC, SORT_DESC);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: sort() expects at most 2 parameters, 3 given in /tmp/tmp2a6rbn4u.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a6rbn4u.php:32\n\
    Stack trace:\n#0 /tmp/tmp2a6rbn4u.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2a6rbn4u.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $lst);\n    sort($rows);\n\
    \    sort($rows, SORT_NUMERIC);\n    $rows = array_map(function($row) {\n    \
    \    return array_slice($row, 0, $x);\n    }, $rows);\n    return $rows;\n}\n\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2f0lh0z3.php:34\n\
    Stack trace:\n#0 /tmp/tmp2f0lh0z3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2f0lh0z3.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin3gfudj.php:30\n\
    Stack trace:\n#0 /tmp/tmpin3gfudj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpin3gfudj.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = $x;\n\
    \        foreach ($row as $col => $val) {\n            if ($col != $x) {\n   \
    \             $row_x += $val;\n            } else {\n                $row_y =\
    \ $col;\n            }\n        }\n        $rows[] = array($row_x, $row_y);\n\
    \    }\n    sort($rows);\n    sort($rows, SORT_NUMERIC);\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkdtp8db.php:41\n\
    Stack trace:\n#0 /tmp/tmpmkdtp8db.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpmkdtp8db.php\
    \ on line 41\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($count) {\n        return $count > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_map(function($row) {\n \
    \       return array_flip($row);\n    }, $rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_map(function($row) {\n        return array_flip($row);\n  \
    \  }, $rows);\n    $rows = array_flip($rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_map(function($row) {\n        return array_flip($row);\n  \
    \  }, $rows);\n    $rows = array_flip($rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_map(function($row) {\n        return array_flip($row);\n  \
    \  }, $rows);\n    $rows = array_flip($rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_map(function($row) {\n        return array_flip($row);\n  \
    \  }, $rows);\n    $rows = array_flip($rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_map(function($row) {\n        return array_flip($row);\n  \
    \  }, $rows);\n    $rows = array_flip($rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_map(function($row) {\n        return array_flip($row);\n  \
    \  }, $rows);\n    $rows = array_flip($rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_map(function($row) {\n        return array_flip($row);\n  \
    \  }, $rows);\n    $rows = array_flip($rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $row\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpro7368vj.php on line 85

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array();\n  foreach\
    \ ($lst as $row) {\n    $row_coords = array();\n    foreach ($row as $column)\
    \ {\n      if ($column == $x) {\n        $row_coords[] = array(0, $column);\n\
    \      }\n    }\n    $rows[] = $row_coords;\n  }\n  usort($rows, 'cmp');\n  return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmpnxb6alva.php on line 28\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxb6alva.php:37\nStack\
    \ trace:\n#0 /tmp/tmpnxb6alva.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnxb6alva.php\
    \ on line 37\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_reverse($rows), $rows);\n    return $rows;\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmf5r9zu.php:31\n\
    Stack trace:\n#0 /tmp/tmpbmf5r9zu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbmf5r9zu.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = count($lst[0]);\n    $rows = array_fill(0, $cols, array());\n    foreach\
    \ ($lst as $row) {\n        $rows[$row[0]][$row[1]] = $row;\n    }\n    foreach\
    \ ($rows as $row) {\n        asort($row);\n        arsort($row);\n    }\n    $result\
    \ = array();\n    foreach ($rows as $row) {\n        if ($row[0] == $x) {\n  \
    \          $result[] = $row;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_cxrn4b.php:42\n\
    Stack trace:\n#0 /tmp/tmpr_cxrn4b.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpr_cxrn4b.php\
    \ on line 42\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = array_slice($row,\
    \ 0, $x);\n        $rows[] = array($row_x, $row_y);\n    }\n    array_multisort($rows,\
    \ SORT_DESC, SORT_NUMERIC, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6og566ny.php:33\n\
    Stack trace:\n#0 /tmp/tmp6og566ny.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6og566ny.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows =\
    \ array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $rows);\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmp40f5pdsy.php on line 24\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp40f5pdsy.php:34\nStack trace:\n#0 /tmp/tmp40f5pdsy.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmp40f5pdsy.php on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($count) {\n        return $count > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_map(function($row) {\n \
    \       return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($row);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_flip($\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbrgf1jpq.php on line 88

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array();\n  $columns\
    \ = array();\n  foreach ($lst as $row) {\n    $rows[] = $row;\n    $columns[]\
    \ = array_flip($row);\n  }\n  array_multisort($columns, $rows, $x);\n  return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc6c6e29.php:33\n\
    Stack trace:\n#0 /tmp/tmpuc6c6e29.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpuc6c6e29.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $rows = array();\n    for ($i = 0; $i < $n; ++$i) {\n        $rows[] = array($i,\
    \ 0);\n    }\n    for ($i = 0; $i < $n; ++$i) {\n        $rows[$i][1] = 0;\n \
    \   }\n    for ($i = 0; $i < $n; ++$i) {\n        for ($j = 0; $j < $n; ++$j)\
    \ {\n            if ($j > 0) {\n                if ($lst[$i][$j] == $x) {\n  \
    \                  $rows[$i][$j] = $rows[$i][$j - 1];\n                    $rows[$i][$j\
    \ - 1] = $i;\n                }\n            }\n        }\n    }\n    asort($rows);\n\
    \    arsort($rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n\
    \    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgbqbytvu.php:46\n\
    Stack trace:\n#0 /tmp/tmpgbqbytvu.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpgbqbytvu.php\
    \ on line 46\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $m = count($lst[0]);\n    $ret = [];\n    for ($i = 0; $i < $n; ++$i) {\n\
    \        $ret[] = [$i, $x];\n    }\n    usort($ret, 'cmp');\n    for ($i = 0;\
    \ $i < $m; ++$i) {\n        $ret[] = [$i, $n];\n    }\n    usort($ret, 'cmp');\n\
    \    return $ret;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmp2ts3zc7g.php on line 24\n\
    \nWarning: usort() expects parameter 2 to be a valid callback, function 'cmp'\
    \ not found or invalid function name in /tmp/tmp2ts3zc7g.php on line 28\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp2ts3zc7g.php:37\nStack trace:\n\
    #0 /tmp/tmp2ts3zc7g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2ts3zc7g.php\
    \ on line 37\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst);\n\
    \    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows =\
    \ array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, 1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, -1); }, $rows);\n    $rows = array_map(function($v)\
    \ { return array_\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp174wpi28.php on line 47

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($row)\
    \ {\n    return count($row);\n  }, $lst));\n  $rows = array_filter($rows, function($value)\
    \ {\n    return $value > 0;\n  });\n  krsort($rows);\n  $rows = array_reverse($rows);\n\
    \  $rows = array_slice($rows, 0, $x);\n  $rows = array_map(function($row) {\n\
    \    return array_map(function($value) {\n      return $value;\n    }, $row);\n\
    \  }, $rows);\n  return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_map(): Expected parameter 2 to be an array, int given\
    \ in /tmp/tmp1kcnvftw.php on line 30\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1kcnvftw.php:40\nStack trace:\n#0 /tmp/tmp1kcnvftw.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1kcnvftw.php on line 40\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map('count',\
    \ $lst));\n    $rows = array_filter($rows, function($v) { return $v > 0; });\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $lst);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6kw8m26.php:35\n\
    Stack trace:\n#0 /tmp/tmpj6kw8m26.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpj6kw8m26.php\
    \ on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    sort($rows[0], SORT_NUMERIC);\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3ergz5y.php:32\n\
    Stack trace:\n#0 /tmp/tmpd3ergz5y.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpd3ergz5y.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $m = count($lst[0]);\n    $result = array();\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[$i] = array();\n        for ($j = 0; $j < $m; $j++) {\n \
    \           if ($j == $x) {\n                $result[$i][] = $i;\n           \
    \ } else {\n                $result[$i][] = $j;\n            }\n        }\n  \
    \  }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmphq5gey.php:41\n\
    Stack trace:\n#0 /tmp/tmpmphq5gey.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpmphq5gey.php\
    \ on line 41\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_flip($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfz19ohea.php on line 76

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = array();\n    foreach ($lst as $row) {\n        $row_cols = array();\n\
    \        foreach ($row as $col) {\n            if ($col == $x) {\n           \
    \     $row_cols[] = array(0, $col);\n            }\n        }\n        $rows[]\
    \ = $row_cols;\n    }\n    foreach ($rows as $row) {\n        sort($row);\n  \
    \      sort($cols);\n        $rows[] = $row;\n        $cols[] = $cols;\n    }\n\
    \    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2mc6nfjp.php:43\n\
    Stack trace:\n#0 /tmp/tmp2mc6nfjp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2mc6nfjp.php\
    \ on line 43\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $lst);\n    $rows = array_map(function($row)\
    \ {\n        return array_reverse($row);\n    }, $rows);\n    sort($rows);\n \
    \   sort($rows, SORT_NUMERIC);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7z9nvls.php:34\n\
    Stack trace:\n#0 /tmp/tmpe7z9nvls.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpe7z9nvls.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $rows = array_merge($rows, array_fill(0, count($lst), array()));\n    foreach\
    \ ($rows as $row) {\n        $row = array_merge($row, array_fill(0, count($row),\
    \ $x));\n    }\n    array_multisort($rows);\n    return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6wu7x7h.php:32\n\
    Stack trace:\n#0 /tmp/tmpk6wu7x7h.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk6wu7x7h.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $row = [];\n    foreach\
    \ ($lst as $row) {\n        $row[] = array_slice($row, array_search($x, $row),\
    \ 1);\n    }\n    return $row;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57q9dn0e.php:30\n\
    Stack trace:\n#0 /tmp/tmp57q9dn0e.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp57q9dn0e.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = count($lst[0]);\n    for ($i = 0; $i < $cols; $i++) {\n        $rows[]\
    \ = array();\n    }\n    for ($i = 0; $i < count($lst); $i++) {\n        $rows[$i][$i]\
    \ = $lst[$i][$i];\n    }\n    array_multisort($rows, SORT_DESC, SORT_NUMERIC,\
    \ $lst);\n    $result = array();\n    for ($i = 0; $i < $cols; $i++) {\n     \
    \   $result[] = array();\n    }\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        $result[$i][$i] = $lst[$i][$i];\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n<?php\n\
    $array1 = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1, 6),\n\
    \    array(1, 2, 3, 4, 5, 1)\n);\n\n$array2 = array(\n    array(1, 2, 3, 4, 5,\
    \ 6),\n    array(1, 2, 3, 4, 1, 6),\n    array(1, 2, 3, 4, 5, 1)\n);\n\n$array3\
    \ = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1, 6),\n    array(1,\
    \ 2, 3, 4, 5, 1)\n);\n\n$array4 = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1,\
    \ 2, 3, 4, 1, 6),\n    array(1, 2, 3, 4, 5, 1)\n);\n\n$array5 = array(\n    array(1,\
    \ 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1, 6),\n    array(1, 2, 3, 4, 5, 1)\n\
    );\n\n$array6 = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1,\
    \ 6),\n    array(1, 2, 3, 4, 5, 1)\n);\n\n$array7 = array(\n    array(1, 2, 3,\
    \ 4, 5, 6),\n    array(1, 2, 3, 4, 1, 6),\n    array(1, 2, 3, 4, 5, 1)\n);\n\n\
    $array8 = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1, 6),\n\
    \    array(1, 2, 3, 4, 5, 1)\n);\n\n$array9 = array(\n    array(1, 2, 3, 4, 5,\
    \ 6),\n    array(1, 2, 3, 4, 1, 6),\n    array(1, 2, 3, 4, 5, 1)\n);\n\n$array10\
    \ = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1, 6),\n    array(1,\
    \ 2, 3, 4, 5, 1)\n);\n\n$array11 = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1,\
    \ 2, 3, 4, 1, 6),\n    array(1, 2, 3, 4, 5, 1)\n);\n\n$array12 = array(\n    array(1,\
    \ 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1, 6),\n    array(1, 2, 3, 4, 5, 1)\n\
    );\n\n$array13 = array(\n    array(1, 2, 3, 4, 5, 6),\n    array(1, 2, 3, 4, 1,\
    \ 6),\n    array(1, 2, 3, 4, 5, 1)\n);\n\n\nfunction candidate(...$args) {\n \
    \   return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp87fgx2m1.php on line 36

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    sort($result);\n    foreach ($result as $row) {\n        sort($row);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjhw14vg.php:34\n\
    Stack trace:\n#0 /tmp/tmpgjhw14vg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgjhw14vg.php\
    \ on line 34\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_column($rows, 1), SORT_DESC, SORT_NUMERIC, $rows);\n\
    \    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpnebc9ndu.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnebc9ndu.php:31\n\
    Stack trace:\n#0 /tmp/tmpnebc9ndu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnebc9ndu.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array();\n  foreach\
    \ ($lst as $row) {\n    $row_x = $row[$x];\n    $row_y = array_slice($row, 0,\
    \ $x);\n    $rows[] = array($row_x, $row_y);\n  }\n  sort($rows);\n  rsort($rows);\n\
    \  return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwjhrgy8.php:34\n\
    Stack trace:\n#0 /tmp/tmpdwjhrgy8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdwjhrgy8.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = $x;\n\
    \        foreach ($row as $col) {\n            if ($col != $row_x) {\n       \
    \         $row_y = $col;\n            }\n        }\n        $rows[] = array($row_x,\
    \ $row_y);\n    }\n    sort($rows);\n    sort($rows, SORT_NUMERIC);\n    return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjph8c8pz.php:39\n\
    Stack trace:\n#0 /tmp/tmpjph8c8pz.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjph8c8pz.php\
    \ on line 39\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $m = count($lst[0]);\n    $ret = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $ret[] = array_slice($lst[$i], $i, 1);\n    }\n    usort($ret, 'cmp');\n\
    \    $ret[$i] = array_slice($ret[$i], 0, $m);\n    usort($ret[$i], 'cmp');\n \
    \   return $ret;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: usort() expects parameter 2 to be a valid callback, function\
    \ 'cmp' not found or invalid function name in /tmp/tmp3wwoa0ng.php on line 24\n\
    \nWarning: array_slice() expects parameter 1 to be array, null given in /tmp/tmp3wwoa0ng.php\
    \ on line 25\n\nWarning: usort() expects parameter 1 to be array, null given in\
    \ /tmp/tmp3wwoa0ng.php on line 26\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp3wwoa0ng.php:35\nStack trace:\n#0 /tmp/tmp3wwoa0ng.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3wwoa0ng.php on line 35\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values($lst[0]);\n\
    \  $cols = array_count_values($lst[1]);\n  $rows = array_keys($rows);\n  $cols\
    \ = array_keys($cols);\n  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n\
    \  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n\
    \  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n\
    \  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n\
    \  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n\
    \  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n\
    \  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n\
    \  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n\
    \  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n\
    \  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n\
    \  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n\
    \  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n\
    \  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n\
    \  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n\
    \  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n\
    \  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n\
    \  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n\
    \  $rows = array_flip($rows);\n  $cols = array_flip($cols);\n  $rows = array_flip($rows);\n\
    \  $\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplp74xbat.php on line 76

    '
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    foreach ($rows as $row) {\n        sort($row);\n  \
    \  }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcoih1wiw.php:34\n\
    Stack trace:\n#0 /tmp/tmpcoih1wiw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcoih1wiw.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    sort($rows[0]);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydnp3vx7.php:32\n\
    Stack trace:\n#0 /tmp/tmpydnp3vx7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpydnp3vx7.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map('count',\
    \ $lst));\n    $rows = array_filter($rows, function($v) { return $v > 0; });\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpferqdi1q.php on line 58

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array();\n  foreach\
    \ ($lst as $row) {\n    $rows[] = array_slice($row, 0, $x);\n  }\n  sort($rows);\n\
    \  foreach ($rows as $row) {\n    sort($row);\n  }\n  return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbltb6wgj.php:34\n\
    Stack trace:\n#0 /tmp/tmpbltb6wgj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbltb6wgj.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array();\n  foreach\
    \ ($lst as $row) {\n    $rows[] = array_slice($row, 0, $x);\n  }\n  sort($rows);\n\
    \  foreach ($rows as $row) {\n    sort($row);\n  }\n  return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbltb6wgj.php:34\n\
    Stack trace:\n#0 /tmp/tmpbltb6wgj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbltb6wgj.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($v)\
    \ { return $v[0]; }, $lst));\n    $rows = array_filter($rows, function($v) { return\
    \ $v > 0; });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $cols = array_count_values(array_map(function($v) { return $v[1]; }, $lst));\n\
    \    $cols = array_filter($cols, function($v) { return $v > 0; });\n    $cols\
    \ = array_keys($cols);\n    $cols = array_reverse($cols);\n    $coords = array();\n\
    \    foreach ($rows as $row) {\n        $coords[] = array();\n        foreach\
    \ ($cols as $col) {\n            $coords[count($coords) - 1][] = array($row, $col);\n\
    \        }\n    }\n    array_multisort($coords, SORT_DESC, SORT_NUMERIC, $coords);\n\
    \    $coords = array_map(function($v) { return array_shift($v); }, $coords);\n\
    \    $coords = array_filter($coords, function($v) { return !empty($v); });\n \
    \   return $coords;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1ekfyv2.php:44\n\
    Stack trace:\n#0 /tmp/tmpv1ekfyv2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpv1ekfyv2.php\
    \ on line 44\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yapc_01.php:30\n\
    Stack trace:\n#0 /tmp/tmp7yapc_01.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7yapc_01.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst);\n\
    \    $rows = array_filter($rows, function($v) { return $v > 1; });\n    $rows\
    \ = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_map(function($v) { return array_slice($v, 0, $x);\
    \ }, $rows);\n    $rows = array_map(function($v) { return array_slice($v, 0, $x);\
    \ }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmp43pggs75.php on line 18\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmp43pggs75.php on line 18\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmp43pggs75.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp43pggs75.php:33\n\
    Stack trace:\n#0 /tmp/tmp43pggs75.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp43pggs75.php\
    \ on line 33\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = array();\n        foreach ($row\
    \ as $col) {\n            if ($col == $x) {\n                $row_x[] = array($row,\
    \ $col);\n            }\n        }\n        $rows[] = $row_x;\n    }\n    sort($rows);\n\
    \    foreach ($rows as $row) {\n        sort($row);\n    }\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z7icrhm.php:40\n\
    Stack trace:\n#0 /tmp/tmp7z7icrhm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7z7icrhm.php\
    \ on line 40\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($row)\
    \ {\n    return count($row);\n  }, $lst));\n  $rows = array_filter($rows, function($value)\
    \ {\n    return $value > 0;\n  });\n  $rows = array_keys($rows);\n  $rows = array_reverse($rows);\n\
    \  $rows = array_slice($rows, 0, $x);\n  $rows = array_map(function($row) {\n\
    \    return array_slice($row, 0, $x);\n  }, $rows);\n  $rows = array_map(function($row)\
    \ {\n    return array_slice($row, $x);\n  }, $rows);\n  $rows = array_map(function($row)\
    \ {\n    return array_slice($row, count($row) - $x);\n  }, $rows);\n  return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpjkv55oms.php on line 28\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, null given in /tmp/tmpjkv55oms.php on line 31\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpjkv55oms.php\
    \ on line 34\n\nWarning: array_slice() expects parameter 1 to be array, null given\
    \ in /tmp/tmpjkv55oms.php on line 34\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpjkv55oms.php:44\nStack trace:\n#0 /tmp/tmpjkv55oms.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjkv55oms.php on line 44\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $cols = array_count_values($lst);\n    $rows = array_filter($rows);\n   \
    \ $cols = array_filter($cols);\n    $rows = array_keys($rows);\n    $cols = array_keys($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n\
    \    $rows = array_flip($rows);\n    $cols = array_flip($cols);\n    $rows = array_flip($rows);\n\
    \    $cols = array_\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp91qoeo1o.php on line 76

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows =\
    \ array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, 0, $x);\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, $x, count($row));\n    }, $rows);\n    return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmp_tapdibi.php on line 24\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmp_tapdibi.php on line 27\n\n\
    Warning: array_slice() expects parameter 1 to be array, null given in /tmp/tmp_tapdibi.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_tapdibi.php:37\n\
    Stack trace:\n#0 /tmp/tmp_tapdibi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_tapdibi.php\
    \ on line 37\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    foreach ($rows as $row) {\n        sort($row);\n  \
    \  }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcoih1wiw.php:34\n\
    Stack trace:\n#0 /tmp/tmpcoih1wiw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcoih1wiw.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $n = count($lst);\n \
    \   $rows = array();\n    for ($i = 0; $i < $n; $i++) {\n        $rows[$i] = array();\n\
    \        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($x == $lst[$i][$j])\
    \ {\n                $rows[$i][$j] = array($i, $j);\n            }\n        }\n\
    \    }\n    sort($rows);\n    sort($rows[0]);\n    return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsu7r7oyp.php:38\n\
    Stack trace:\n#0 /tmp/tmpsu7r7oyp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpsu7r7oyp.php\
    \ on line 38\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    foreach ($rows as $row) {\n        sort($row);\n  \
    \  }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcoih1wiw.php:34\n\
    Stack trace:\n#0 /tmp/tmpcoih1wiw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcoih1wiw.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = $x;\n\
    \        $rows[] = array($row_x, $row_y);\n    }\n    sort($rows);\n    sort($rows,\
    \ SORT_NUMERIC);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp1foqej.php:34\n\
    Stack trace:\n#0 /tmp/tmpqp1foqej.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqp1foqej.php\
    \ on line 34\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = array_slice($row,\
    \ 0, $x);\n        $row_y = array_reverse($row_y);\n        $rows[] = array_merge($row_y,\
    \ $row_x);\n    }\n    sort($rows);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_merge(): Expected parameter 2 to be an array, int given\
    \ in /tmp/tmpw2pkw91h.php on line 23\n\nWarning: array_merge(): Expected parameter\
    \ 2 to be an array, int given in /tmp/tmpw2pkw91h.php on line 23\n\nWarning: array_merge():\
    \ Expected parameter 2 to be an array, int given in /tmp/tmpw2pkw91h.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2pkw91h.php:34\n\
    Stack trace:\n#0 /tmp/tmpw2pkw91h.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpw2pkw91h.php\
    \ on line 34\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    sort($rows[0]);\n    return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydnp3vx7.php:32\n\
    Stack trace:\n#0 /tmp/tmpydnp3vx7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpydnp3vx7.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($row)\
    \ {\n    return count($row);\n  }, $lst));\n  $rows = array_filter($rows, function($count)\
    \ {\n    return $count > 0;\n  });\n  $rows = array_keys($rows);\n  $rows = array_reverse($rows);\n\
    \  $rows = array_slice($rows, 0, $x);\n  $rows = array_map(function($row) {\n\
    \    return array_slice($row, 0, count($row));\n  }, $rows);\n  $rows = array_map(function($row)\
    \ {\n    return array_reverse($row);\n  }, $rows);\n  return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp4ufpom2l.php on line 28\n\nWarning: array_slice() expects\
    \ parameter 1 to be array, int given in /tmp/tmp4ufpom2l.php on line 28\n\nWarning:\
    \ array_reverse() expects parameter 1 to be array, null given in /tmp/tmp4ufpom2l.php\
    \ on line 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ufpom2l.php:41\n\
    Stack trace:\n#0 /tmp/tmp4ufpom2l.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4ufpom2l.php\
    \ on line 41\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values($lst[0]);\n\
    \  $cols = array_count_values($lst[1]);\n  $result = array();\n  foreach ($rows\
    \ as $row => $count) {\n    if ($count == $x) {\n      $result[] = array($row,\
    \ $cols[$row]);\n    }\n  }\n  sort($result, SORT_NUMERIC);\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7jh13dm.php:35\n\
    Stack trace:\n#0 /tmp/tmpm7jh13dm.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpm7jh13dm.php\
    \ on line 35\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $rows = array_filter($rows, function($v) { return $v > 0; });\n    $rows\
    \ = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($v)\
    \ { return array_slice($v, 0, $x); }, $rows);\n    return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpkwf_vfdj.php on line 24\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkwf_vfdj.php:33\nStack trace:\n#0 /tmp/tmpkwf_vfdj.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkwf_vfdj.php on line 33\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_reverse($result), SORT_DESC, SORT_NUMERIC, $result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp_whufr.php:31\n\
    Stack trace:\n#0 /tmp/tmpyp_whufr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyp_whufr.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    array_multisort(array_column($rows, '0'), SORT_DESC, $rows);\n    return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbr_935j.php:31\n\
    Stack trace:\n#0 /tmp/tmpjbr_935j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjbr_935j.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst[0]);\n\
    \    $cols = array_count_values($lst);\n    $rows = array_filter($rows);\n   \
    \ $cols = array_filter($cols);\n    $rows = array_keys($rows);\n    $cols = array_keys($cols);\n\
    \    $rows = array_merge($rows, array_fill(0, count($rows), 0));\n    $cols =\
    \ array_merge($cols, array_fill(0, count($cols), 0));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), 1));\n    $cols = array_merge($cols, array_fill(0,\
    \ count($cols), 1));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ -1));\n    $cols = array_merge($cols, array_fill(0, count($cols), -1));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), 0));\n    $cols = array_merge($cols,\
    \ array_fill(0, count($cols), 0));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), 1));\n    $cols = array_merge($cols, array_fill(0, count($cols),\
    \ 1));\n    $rows = array_merge($rows, array_fill(0, count($rows), -1));\n   \
    \ $cols = array_merge($cols, array_fill(0, count($cols), -1));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), 0));\n    $cols = array_merge($cols, array_fill(0,\
    \ count($cols), 0));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ 1));\n    $cols = array_merge($cols, array_fill(0, count($cols), 1));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows), -1));\n    $cols = array_merge($cols,\
    \ array_fill(0, count($cols), -1));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), 0));\n    $cols = array_merge($cols, array_fill(0, count($cols),\
    \ 0));\n    $rows = array_merge($rows, array_fill(0, count($rows), 1));\n    $cols\
    \ = array_merge($cols, array_fill(0, count($cols), 1));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), -1));\n    $cols = array_merge($cols, array_fill(0,\
    \ count($cols), -1));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ 0));\n    $cols = array_merge($cols, array_fill(0, count($cols), 0));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows), 1));\n    $cols = array_merge($cols,\
    \ array_fill(0, count($cols), 1));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), -1));\n    $cols = array_merge($cols, array_fill(0, count($cols),\
    \ -1));\n    $rows = \nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpky018pds.php on line 55

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yapc_01.php:30\n\
    Stack trace:\n#0 /tmp/tmp7yapc_01.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7yapc_01.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function($row) {\n     \
    \   return array_slice($row, 0, count($row));\n    }, $rows);\n    $rows = array_map(function($row)\
    \ {\n        return array_slice($row, count($row));\n    }, $rows);\n    return\
    \ $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpoj6ojboi.php on line 26\n\nWarning: array_slice() expects\
    \ parameter 1 to be array, int given in /tmp/tmpoj6ojboi.php on line 26\n\nWarning:\
    \ count(): Parameter must be an array or an object that implements Countable in\
    \ /tmp/tmpoj6ojboi.php on line 29\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, null given in /tmp/tmpoj6ojboi.php on line 29\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpoj6ojboi.php:39\nStack trace:\n\
    #0 /tmp/tmpoj6ojboi.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpoj6ojboi.php\
    \ on line 39\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = count($lst[0]);\n    $rows = array_fill(0, $cols, array());\n    foreach\
    \ ($lst as $row) {\n        $rows[$row[0]][$row[1]] = $row;\n    }\n    array_multisort(array_column($rows,\
    \ '0'), SORT_DESC, $rows);\n    return array_search($x, array_column($rows, '0'),\
    \ true);\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmp_hucs0h6.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hucs0h6.php:33\n\
    Stack trace:\n#0 /tmp/tmp_hucs0h6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_hucs0h6.php\
    \ on line 33\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lkf0s6p.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lkf0s6p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lkf0s6p.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($row)\
    \ {\n    return count($row);\n  }, $lst));\n  arsort($rows);\n  $rows = array_keys($rows);\n\
    \  $rows = array_reverse($rows);\n  $rows = array_slice($rows, 0, $x);\n  $rows\
    \ = array_map(function($row) {\n    return array_slice($row, 0, count($row));\n\
    \  }, $rows);\n  return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpv71t3_wp.php on line 26\n\nWarning: array_slice() expects\
    \ parameter 1 to be array, int given in /tmp/tmpv71t3_wp.php on line 26\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpv71t3_wp.php:36\nStack trace:\n\
    #0 /tmp/tmpv71t3_wp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpv71t3_wp.php\
    \ on line 36\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_flip($row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_flip($row);\n  \
    \  }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpx2dvr2lh.php on line 88

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lkf0s6p.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lkf0s6p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lkf0s6p.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_flip($row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_flip($row);\n  \
    \  }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_flip($row);\n\
    \    }, $rows);\n    $rows = array_\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpx2dvr2lh.php on line 88

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_map(function($row)\
    \ {\n    return array_slice($row, 0, $x);\n  }, $lst);\n  usort($rows, function($a,\
    \ $b) {\n    return array_map(function($col) {\n      return array_slice($col,\
    \ 0, $x);\n    }, $b);\n  });\n  return $rows;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpxpvo9jbz.php on line 23\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmpxpvo9jbz.php on line 23\n\nWarning: array_slice()\
    \ expects parameter 1 to be array, int given in /tmp/tmpxpvo9jbz.php on line 23\n\
    \nWarning: array_slice() expects parameter 1 to be array, int given in /tmp/tmpxpvo9jbz.php\
    \ on line 23\n\nWarning: array_slice() expects parameter 1 to be array, int given\
    \ in /tmp/tmpxpvo9jbz.php on line 23\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmpxpvo9jbz.php on line 23\n\nWarning: array_slice()\
    \ expects parameter 1 to be array, int given in /tmp/tmpxpvo9jbz.php on line 23\n\
    \nWarning: array_slice() expects parameter 1 to be array, int given in /tmp/tmpxpvo9jbz.php\
    \ on line 23\n\nWarning: array_slice() expects parameter 1 to be array, int given\
    \ in /tmp/tmpxpvo9jbz.php on line 23\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmpxpvo9jbz.php on line 23\n\nWarning: array_slice()\
    \ expects parameter 1 to be array, int given in /tmp/tmpxpvo9jbz.php on line 23\n\
    \nWarning: array_slice() expects parameter 1 to be array, int given in /tmp/tmpxpvo9jbz.php\
    \ on line 23\n\nWarning: array_slice() expects parameter 1 to be array, int given\
    \ in /tmp/tmpxpvo9jbz.php on line 23\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmpxpvo9jbz.php on line 23\n\nWarning: array_slice()\
    \ expects parameter 1 to be array, int given in /tmp/tmpxpvo9jbz.php on line 23\n\
    \nWarning: array_slice() expects parameter 1 to be array, int given in /tmp/tmpxpvo9jbz.php\
    \ on line 23\n\nWarning: array_slice() expects parameter 1 to be array, int given\
    \ in /tmp/tmpxpvo9jbz.php on line 23\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, int given in /tmp/tmpxpvo9jbz.php on line 23\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxpvo9jbz.php:34\nStack trace:\n\
    #0 /tmp/tmpxpvo9jbz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxpvo9jbz.php\
    \ on line 34\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows, function ($v) { return $v > 0; });\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function ($v) { return array_slice($v,\
    \ 0, 1); }, $rows);\n    $rows = array_map(function ($v) { return array_slice($v,\
    \ 1); }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplp28fvnb.php:33\n\
    Stack trace:\n#0 /tmp/tmplp28fvnb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplp28fvnb.php\
    \ on line 33\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($value) {\n        return $value > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $columns = array_count_values(array_map(function($row)\
    \ {\n        return $row;\n    }, $lst));\n    $columns = array_filter($columns,\
    \ function($value) {\n        return $value > 0;\n    });\n    $columns = array_keys($columns);\n\
    \    $columns = array_reverse($columns);\n    $result = array();\n    foreach\
    \ ($rows as $row) {\n        $result[] = array_intersect_key($lst, array_flip($columns));\n\
    \    }\n    foreach ($result as $row) {\n        $row = array_flip($row);\n  \
    \      asort($row);\n        arsort($row);\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,multidimensional-array,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $arr = [\n    [\n        1,\n        2,\n        3,\n        4,\n        5,\n\
    \        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n  \
    \      12,\n        13,\n        14,\n        15,\n        16,\n        17,\n\
    \        18,\n        19,\n        20,\n        21,\n        22,\n        23,\n\
    \        24,\n        25,\n        26,\n        27,\n        28,\n        29,\n\
    \        30,\n        31,\n        32,\n        33,\n        34,\n        35,\n\
    \        36,\n        37,\n        38,\n        39,\n        40,\n        41,\n\
    \        42,\n        43,\n        44,\n        45,\n        46,\n        47,\n\
    \        48,\n        49,\n        50,\n        51,\n        52,\n        53,\n\
    \        54,\n        55,\n        56,\n        57,\n        58,\n        59,\n\
    \        60,\n        61,\n        62,\n        63,\n        64,\n        65,\n\
    \        66,\n        67,\n        68,\n        69,\n        70,\n        71,\n\
    \        72,\n        73,\n        74,\n        75,\n        76,\n        77,\n\
    \        78,\n        79,\n        80,\n        81,\n        82,\n        83,\n\
    \        84,\n        85,\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptkcq44lk.php on line 45

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_column($result, '0'), SORT_DESC, array_column($result,\
    \ '1'), SORT_DESC, $result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpy5952nlc.php\
    \ on line 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5952nlc.php:31\n\
    Stack trace:\n#0 /tmp/tmpy5952nlc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpy5952nlc.php\
    \ on line 31\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yapc_01.php:30\n\
    Stack trace:\n#0 /tmp/tmp7yapc_01.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7yapc_01.php\
    \ on line 30\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values($lst[0]);\n\
    \  arsort($rows);\n  $rows = array_reverse($rows);\n  $rows = array_keys($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n\
    \  $rows = array_flip($rows);\n  $rows = array_flip($rows);\n  $rows = array_\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsd0vjs2z.php on line 76

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map('count',\
    \ $lst));\n    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function($row) {\n        return array_slice($row, 0, $x);\n\
    \    }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpc4v5c_bf.php on line 24\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpc4v5c_bf.php:34\nStack trace:\n#0 /tmp/tmpc4v5c_bf.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpc4v5c_bf.php on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lkf0s6p.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lkf0s6p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lkf0s6p.php\
    \ on line 32\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map('count',\
    \ $lst));\n    $rows = array_filter($rows, function($v) { return $v > 0; });\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps97ng6sy.php on line 58

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  $cols = array();\n    foreach ($lst as $row) {\n        $row_len = count($row);\n\
    \        $col_len = count($cols);\n        for ($i = 0; $i < $row_len; $i++) {\n\
    \            if ($row[$i] == $x) {\n                $rows[] = $i;\n          \
    \      $cols[] = $col_len - $i;\n                break;\n            }\n     \
    \   }\n    }\n    sort($rows);\n    sort($cols);\n    return array_combine($rows,\
    \ $cols);\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxapi93w.php:41\n\
    Stack trace:\n#0 /tmp/tmptxapi93w.php(49): test()\n#1 {main}\n  thrown in /tmp/tmptxapi93w.php\
    \ on line 41\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map('count',\
    \ $lst));\n    $rows = array_filter($rows, function($v) { return $v > 0; });\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, $x); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ $x); }, $rows);\n    return $rows;\n}\n\nfunction candidate(...$args) {\n  \
    \  return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmprejd2ewo.php on line 23\n\nWarning: array_slice() expects parameter\
    \ 1 to be array, null given in /tmp/tmprejd2ewo.php on line 24\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmprejd2ewo.php:33\nStack trace:\n\
    #0 /tmp/tmprejd2ewo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprejd2ewo.php\
    \ on line 33\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_map(function ($row) {\n            return array_reverse($row);\n\
    \        }, $result), SORT_DESC, SORT_NUMERIC, $result);\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays,multidimensional-array |>\n<| c |>\nThis doesn't\
    \ seem to work when there are multiple rows with the same number of columns. For\
    \ example, `get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 3)` returns `array(array(2, 2), array(2, 2), array(2, 2))`\n\
    <|/ c |>\n<| c |>\nI updated my answer to handle this case. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n\
    function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdd9c5mv0.php on line 27

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values(array_map(function($row)\
    \ {\n        return count($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($value) {\n        return $value > 0;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $columns = array_count_values(array_map(function($row)\
    \ {\n        return $row;\n    }, $lst));\n    $columns = array_filter($columns,\
    \ function($value) {\n        return $value > 0;\n    });\n    $columns = array_keys($columns);\n\
    \    $columns = array_reverse($columns);\n    $coordinates = array();\n    foreach\
    \ ($rows as $row) {\n        $coordinates[] = array();\n        foreach ($columns\
    \ as $column) {\n            $coordinates[count($coordinates) - 1][] = $lst[$row][$column];\n\
    \        }\n    }\n    usort($coordinates, function($a, $b) {\n        $a = array_count_values($a);\n\
    \        $b = array_count_values($b);\n        $a = array_keys($a);\n        $b\
    \ = array_keys($b);\n        $a = array_reverse($a);\n        $b = array_reverse($b);\n\
    \        return $a[0] > $b[0] ? 1 : -1;\n    });\n    usort($coordinates, function($a,\
    \ $b) {\n        $a = array_count_values($a);\n        $b = array_count_values($b);\n\
    \        $a = array_keys($a);\n        $b = array_keys($b);\n        $a = array_reverse($a);\n\
    \        $b = array_reverse($b);\n        return $a[1] > $b[1] ? 1 : -1;\n   \
    \ });\n    return array_slice($coordinates, 0, $x);\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmpfzol9wi1.php on line 28\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmpfzol9wi1.php on line 28\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmpfzol9wi1.php\
    \ on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfzol9wi1.php:67\n\
    Stack trace:\n#0 /tmp/tmpfzol9wi1.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpfzol9wi1.php\
    \ on line 67\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($row)\
    \ {\n    return count($row);\n  }, $lst));\n  $rows = array_filter($rows, function($value)\
    \ {\n    return $value > 0;\n  });\n  $rows = array_keys($rows);\n  $rows = array_reverse($rows);\n\
    \  $columns = array_count_values(array_map(function($row) {\n    return $row;\n\
    \  }, $lst));\n  $columns = array_filter($columns, function($value) {\n    return\
    \ $value > 0;\n  });\n  $columns = array_keys($columns);\n  $columns = array_reverse($columns);\n\
    \  $rows = array_map(function($row) use ($x, $columns) {\n    return array_map(function($column)\
    \ use ($x, $rows) {\n      return $column >= $x ? $row + $column : null;\n   \
    \ }, $columns);\n  }, $rows);\n  return array_filter($rows, function($row) {\n\
    \    return !empty($row);\n  });\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_row(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_count_values(): Can only count STRING and INTEGER values!\
    \ in /tmp/tmpqzdyaey4.php on line 28\n\nWarning: array_count_values(): Can only\
    \ count STRING and INTEGER values! in /tmp/tmpqzdyaey4.php on line 28\n\nWarning:\
    \ array_count_values(): Can only count STRING and INTEGER values! in /tmp/tmpqzdyaey4.php\
    \ on line 28\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzdyaey4.php:49\n\
    Stack trace:\n#0 /tmp/tmpqzdyaey4.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpqzdyaey4.php\
    \ on line 49\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $n = count($lst);\n  $m\
    \ = count($lst[0]);\n  $res = array();\n  for ($i = 0; $i < $n; ++$i) {\n    $res[$i]\
    \ = array();\n    for ($j = 0; $j < $m; ++$j) {\n      if ($j == $x) {\n     \
    \   $res[$i][] = $i;\n      }\n    }\n  }\n  krsort($res);\n  return $res;\n}\n\
    \nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuu4rs3ab.php:38\n\
    Stack trace:\n#0 /tmp/tmpuu4rs3ab.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpuu4rs3ab.php\
    \ on line 38\n"
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $row_x = $row[$x];\n        $row_y = array_slice($row,\
    \ 0, $x);\n        $rows[] = array($row_x, $row_y);\n    }\n    sort($rows);\n\
    \    foreach ($rows as $row) {\n        sort($row);\n    }\n    return $rows;\n\
    }\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxirhuqho.php:36\n\
    Stack trace:\n#0 /tmp/tmpxirhuqho.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxirhuqho.php\
    \ on line 36\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array();\n  \
    \  foreach ($lst as $row) {\n        $rows[] = array_slice($row, 0, $x);\n   \
    \ }\n    sort($rows);\n    foreach ($rows as $row) {\n        sort($row);\n  \
    \  }\n    return $rows;\n}\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0),\
    \ array(1, 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1),\
    \ array(2, 1), array(3, 1), array(4, 1), array(5, 1))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2,\
    \ 3, 1, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0,\
    \ 0), array(1, 0), array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4,\
    \ 3), array(4, 0), array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(), 1) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1)),\
    \ 2) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(),\
    \ array(1), array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcoih1wiw.php:34\n\
    Stack trace:\n#0 /tmp/tmpcoih1wiw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcoih1wiw.php\
    \ on line 34\n"
  timestamp: 1659730950
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n    $rows = array_count_values($lst);\n\
    \    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows =\
    \ array_flip($rows);\n    $rows = array_reverse($rows);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows,\
    \ 0, $x);\n\nfunction candidate(...$args) {\n    return get_row(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3,\
    \ 1), array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpw9i1diad.php on line 84

    '
  timestamp: 1659730951
- exit_code: 255
  program: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n//\
    \ which is similar to matrix, however, unlike matrices,\n// each row may contain\
    \ a different number of columns.\n// Given lst, and integer x, find integers x\
    \ in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort\
    \ coordinates initially by rows in ascending order.\n// Also, sort coordinates\
    \ of the row by columns in descending order.\n// Examples:\n// >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(),\
    \ 1)\n// array()\n// >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    // array(array(2, 2))\nfunction get_row($lst, $x) {\n  $rows = array_count_values(array_map(function($row)\
    \ {\n    return count($row);\n  }, $lst));\n  $rows = array_filter($rows, function($value)\
    \ {\n    return $value > 0;\n  });\n  $rows = array_keys($rows);\n  $rows = array_reverse($rows);\n\
    \  $rows = array_slice($rows, 0, $x);\n  $rows = array_map(function($row) {\n\
    \    return array_slice($row, 0, $x);\n  }, $rows);\n  return $rows;\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1,\
    \ 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
    \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
    \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
    \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
    \ 1, 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2,\
    \ 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0),\
    \ array(2, 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0),\
    \ array(5, 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(array(1)), 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(), array(1),\
    \ array(1, 2, 3)), 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_slice() expects parameter 1 to be array, int given in\
    \ /tmp/tmpk7k40aks.php on line 28\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpk7k40aks.php:38\nStack trace:\n#0 /tmp/tmpk7k40aks.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpk7k40aks.php on line 38\n"
  timestamp: 1659730951
