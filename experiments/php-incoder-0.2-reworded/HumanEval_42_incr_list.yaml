name: HumanEval_42_incr_list
language: php
prompt: "<?php\n// Return array with elements incremented by 1.\n// >>> incr_list(array(1,\
  \ 2, 3))\n// array(2, 3, 4)\n// >>> incr_list(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
  // array(6, 4, 6, 3, 4, 4, 10, 1, 124)\nfunction incr_list($l) {\n"
tests: "function candidate(...$args) {\n    return incr_list(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== array(4, 3, 2)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 2, 5, 2, 3, 3,\
  \ 9, 0, 123)) !== array(6, 3, 6, 3, 4, 4, 10, 1, 124)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n\
    \  }\n  return $r;\n}\n", "  $r = array();\n  foreach ($l as $k => $v) {\n   \
    \ $r[$k + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n  foreach ($l as\
    \ $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n\
    \  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}", " \
    \ $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return\
    \ $r;\n}\n", "  $r = array();\n  foreach ($l as $e) {\n    $r[] = $e + 1;\n  }\n\
    \  return $r;\n}", "  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k +\
    \ 1] = $v;\n  }\n  return $r;\n}", "  $r = array();\n  foreach ($l as $k => $v)\
    \ {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n  foreach\
    \ ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n\
    \  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n",
  "  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k] = $v + 1;\n  }\n  return\
    \ $r;\n}", "  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n\
    \  }\n  return $r;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI like this\
    \ solution, very elegant. Thanks!\n<|/ c |>\n<| c |>\nI like it, but I wonder\
    \ if there is a way to do this without looping through the array twice?\n<|/ c\
    \ |>\n<| c |>\n: No, there isn't. You'd have to loop through the array once to\
    \ count the elements, and then loop through the array again to rebuild the array.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't loop through the array twice.\n\
    <|/ c |>\n<| c |>\n: I added a version that doesn't loop through the array twice.\n\
    <|/ c |>\n<| a |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$array = array_merge($array,array_slice($array,1,count($array)));\n\
    </code>\n<|/ a tags=php,arrays dscore=5 |>\n<| c |>\nThis doesn't work if you\
    \ have a key that has already been removed.\n<|/ c |>\n<| c |>\nThis also doesn't\
    \ work if you have a key that has already been removed.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a key that has already been removed.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if you have a key that has already been removed.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have a key that has already been removed.\n\
    <|/ c |>\n<| a tags=php,arrays dscore=5 |>\n<code>\n$array = array(1, 2, 3, 4,\
    \ 5);\n$array = array_merge($array, array_slice($array, 1, count($array)));\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have a key that has already\
    \ been removed.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a key that has\
    \ already been removed.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a key\
    \ that has already been removed.\n<|/ c |>\n<| c |>\nThis doesn't work if you\
    \ have a key that has already been removed.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = array(1, 2, 3, 4, 5);\n$array = array_merge($array, array_slice($array,\
    \ 1, count($array)));\n</code>\n<|/ a ", "  $r = array();\n  foreach ($l as $k\
    \ => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n\
    \  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n",
  "  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return\
    \ $r;\n}", "  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k] = $v + 1;\n\
    \  }\n  return $r;\n}", "  $r = array();\n  foreach ($l as $k => $v) {\n    $r[$k\
    \ + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n  foreach ($l as $k =>\
    \ $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n", "  $r = array();\n  foreach\
    \ ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}", "  $r = array();\n\
    \  foreach ($l as $k => $v) {\n    $r[$k + 1] = $v;\n  }\n  return $r;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
